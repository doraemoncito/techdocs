;1985.02.13
;1985.6.19
;****************************************
;*					*
;*	BIOS FOR FP-1100 + KANJI ROM	*
;*					*
;*	1KB Access KANJI BIOS		*
;*					*
;*	   programmed by Akio Haguino	*
;*	   		 Shoji Fujimoto	*
;*					*
;****************************************

IF1
.PRINTX		/PASS 1/
ENDIF
IF2
.PRINTX		/PASS 2/
ENDIF
		ENTRY	EOBIOS
		.Z80
;****************************************
INCLUDE		DEVICE.MAC

MSIZE		EQU	56		;CP/M MEMORY SIZE
BIOS		EQU	MSIZE*1024-1536

CBASE		EQU	(MSIZE-20)*1024
CPMB		EQU	CBASE+03400H
DOSB		EQU	CBASE+03C06H

;******** DISK CONSTANTS ****************
BLKSIZ		EQU	2048		;CP/M ALLOCATION SIZE
HSTSIZ		EQU	1024		;HOST DISK SECTOR SIZE
HSTSPT		EQU	8		;HOST DISK SECTORS/TRK
HSTBLK		EQU	HSTSIZ/128	;CP/M SECTS/HOST BUFF
CPMSPT		EQU	HSTBLK*HSTSPT	;CP/M SECTORS/TRACK
SECMSK		EQU	HSTBLK-1	;SECTOR MASK
SECSHF		EQU	3		;LOG2(HSTBLK)

MULTRWC		EQU	HSTSIZ/256	;MULTI SEC R/W No.

;  RWOPER É Å¶ É OR A,RRA É ¶²½³ ¦ ÍÝº³
;  RWHST  É Å¶ É ADD  A,A É ¶²½³ ¦ ÍÝº³

;******* BDOS CONSTANTS **************

WRALL		EQU	0		;WRITE TO ALLOCATED
WRDIR		EQU	1		;WRITE TO DIRECTORY
WRUAL		EQU	2		;WRITE TO UNLOCATED

;****** SYSTEM DEPENDS ON MEM ********

BIAS		EQU	0

WBOOTV		EQU	BIAS+0		;WARM BOOT ENTRY
IOBYT		EQU	BIAS+3		;INTEL IO BYTE
LOGDISK		EQU	BIAS+4		;WHERE CCP PUTS LOGDISK
DOSV		EQU	BIAS+5
INITSP		EQU	BIAS+80H	;INITIAL SP LOCATION
INTDMA		EQU	BIAS+80H	;INITIAL DMA ADDRESS

;********* BIOS START HERE **********

;	ORG	BIOS
		
CBOOT:		JP	BOOT		;COLD START
WBOOTE:		JP	WBOOT		;WARM START
		JP	CONSTAT		;CONSOLE STATUS
		JP	CONIN		;CONSOLE INPUT
		JP	CONOUT		;CONSOLE OUTPUT
		JP	LIST		;LIST OUTPUT
		JP	PUNCH		;PUNCHER OUTPUT
		JP	READER		;READER INPUT
		JP	HOME		;MOVE HEAD TO HOME
		JP	SELDISK		;SELECT DRIVE
		JP	SETTRK		;SET TRACK
		JP	SETSEC		;SET SECTOR
		JP	SETDMA		;SET DMA ADDRESS
		JP	READ		;READ SECTOR
		JP	WRITE		;WRITE SECTOR
		JP	LISTST		;LIST STATUS
		JP	SECTRN		;SECTOR TRANSLATE

		JP	CMD		;SEND COMMAND to SUB_CPU
		JP	PUTDATA		;PUT DATA to SUB_CPU
		JP	GETDATA		;GET DATA from SUB_CPU
		JP	SUBEND		;END OF COMMUNICATE
		JP	TRNC01		;MACRO COMMAND TYPE 1
		JP	TRNC02		;MACRO COMMAND TYPE 2
		JP	TRNC03		;MACRO COMMAND TYPE 3
		JP	TRNC04		;MACRO COMMAND TYPE 4
		JP	TRNCGET		;MACRO CAMMAND GETDATA

		JP	MCONV		;SHIFT-JIS TO JIS  BCreg
		JP	PCONV		;JIS TO SHIFT-JIS  BCreg
		JP	DECORD		;JIS TO INCODE  IN: DE
					;      OUT: HL CODEadr
		JP	PATIN		;KANJI ROM READ	IN: BC
					;	OUT:HL BPATadr
		JP	PATCHGB		;KANJIPAT CHG   IN: NO
					;	OUT:HL PATadr
		JP	FDDREADB
		JP	FDDWRITEB


;***** DISK DEFIN *****************	

;	DISK parameter header
DPBASE		EQU	$
DPH0:		DW	0,0
		DW	0,0
		DW	DIRBUF,DPB0
		DW	CSV0,ALV0
		
DPH1:		DW	0,0
		DW	0,0
		DW	DIRBUF,DPB1
		DW	CSV1,ALV1
		
DPH2:		DW	0,0
		DW	0,0
		DW	DIRBUF,RPB
		DW	0,ALV2

;**** DISK PARAMETER BLOCK

DPB0		EQU	$
		DW	64
		DB	4
		DB	15
		DB	1
		DW	97H
		DW	7FH
		DB	0C0H
		DB	00
		DW	32
		DW	02

DPB1		EQU	$
		DW	64
		DB	4
		DB	15
		DB	1
		DW	97H
		DW	7FH
		DB	0C0H
		DB	00
		DW	32
		DW	02

;***** RAM PARAMETER BLOCK ********
IF RAM32
.PRINTX	/32KB RAM PACK/
RAMSPT		EQU	256
REPEATCNT	EQU	5
ELSE
RAMSPT		EQU	128
REPEATCNT	EQU	4
ENDIF

RPB		EQU	$	;BOOT INITIALIZE
SPT:		DW	RAMSPT
BSH:		DB	3
BLM:		DB	7
EXM:		DB	0
DSM:		DW	15
DRM:		DW	31
AL0:		DB	010000000B
AL1:		DB	00
CKS:		DW	0
OFF:		DW	0

;	LIST DEVICE OUTPUT ROUTINE
LIST:		LD	A,(IOBYT)
		RLCA
		RLCA
		LD	HL,LISTTB
		JR	IOJP

LISTTB:		DW	TTYOUT
		DW	TTYOUT
		DW	LPT0
		DW	LPT0

;	LIST STATUS ROUTINE
LISTST:		LD	A,(IOBYT)
		RLCA
		RLCA
		LD	HL,LISTSTTB
		JR	IOJP
	
LISTSTTB: 	DW	TTYOUTST
		DW	TTYOUTST
		DW	LPT0ST
		DW	LPT0ST

IOJP:		AND	03
		ADD	A,A
		LD	E,A
		LD	D,0
		ADD	HL,DE
		LD	A,(HL)
		INC	HL
		LD	H,(HL)
		LD	L,A
		JP	(HL)
	
;***** TTY IO ROTINE *************


CONIN:
READER:
TTYIN:		LD	(BDOSSP),SP
		LD	SP,BIOSSP
TTYIN1B:	CALL	BLNKON
TTYIN1:		LD	A,(KANJIMODE)
		OR	A
		JR	Z,TTYIN15
		LD	A,(KINPMOD)
		OR	A
        	JR	NZ,KTTYIN
TTYIN15:	DI
        	CALL	GETRNG
		EI
		JR	Z,TTYIN1 
TTYIN1A:	PUSH	AF
		LD	A,(BLNKFLG)
		OR	A
		CALL	Z,BLNKOFF
TTYIN2:		POP	AF
		JR	BIOSRET

KTTYIN:
		CALL	KGETRNG
		JR	NZ,TTYIN1A
KTTYINB:	JP	KNJINP0

CONOUT:
TTYOUT:		LD	(BDOSSP),SP
		LD	SP,BIOSSP
		LD	A,C
		CALL	PRINT
		JR	BIOSRET

TTYOUTST:
LPT0ST: 	LD	A,0FFH
		RET

;*******LIST I/O ROUTINE ******

LPT0:		LD	A,C
		LD	(BDOSSP),SP
		LD	SP,BIOSSP
		CALL	LPT
BIOSRET:	LD	SP,(BDOSSP)
		RET


;*********  PUNCHER is always PRINTER out ************


PUNCH:
PUNCHOUT:	LD	A,C
		LD	(BDOSSP),SP
		LD	SP,BIOSSP
		CALL	LPTPUNCH
		JR	BIOSRET

;****** DISK IO ROUTIN *********

HOME:		LD	C,0

SETTRK:		LD	A,C
		LD	(SEKTRK),A
		RET

SECTRN:		LD	H,B			
		LD	L,C
		INC	HL		;NO SKEW
		RET
SELDISK:	LD	HL,0		;ERROR FLAG FOR DOS
		LD	A,(MAXDRV)
		DEC	A
		CP	C
		RET	C		;SELECT ERROR
		LD	A,C
		LD	(SEKDSK),A
		LD	L,A
		LD	H,0
		ADD	HL,HL
		ADD	HL,HL
		ADD	HL,HL
		ADD	HL,HL
		LD	DE,DPBASE
		ADD	HL,DE
		RET
	
SETSEC:		DEC	BC
		LD	A,C		;MAKE ZERO ORIGIN No
		LD	(SEKSEC),A
		RET

SETDMA:		LD	(DMAADR),BC
		RET

READ:		LD	A,(SEKDSK)
		CP	2		;IF RAM DISK
		JP	Z,RAMREAD
		XOR	A
		LD	(UNACNT),A
		INC	A		;ORG LD	A,2
		LD	(READOP),A	;READ OPERATION
		LD	(RSFLAG),A	;MUST READ DATA
		LD	A,WRUAL
		LD	(WRTYPE),A	;TREAT AS UNALLOC
		JP	RWOPER		;TO PERFORM THE READ
	
WRITE:		LD	A,(SEKDSK)	;IF RAM DISK
		CP	2
		JP	Z,RAMWRT		
		XOR	A		;0 TO ACCUMULATOR
		LD	(READOP),A	;NOT A READ OPERATION
		LD	A,C		;WRITE TYPE IN C
		LD	(WRTYPE),A
		CP	WRUAL		;WRITE UNALLOCATED ?
		JR	NZ,CHKUNA	;CHECK FOR UNALLOC
	
		LD	A,BLKSIZ/128
		LD	(UNACNT),A		
		LD	A,(SEKDSK)	;DISK TO SEEK
		LD	(UNADSK),A	;UNADSK = SEKDSK
		LD	A,(SEKTRK)
		LD	(UNATRK),A	;UNATRK = SECTRK
		LD	A,(SEKSEC)
		LD	(UNASEC),A	;UNASEC = SEKSEC

;	CHECK FOR WRITE TO UNALLOCATED SECTOR

CHKUNA:		LD	A,(UNACNT)	;ANY UNALLOC REMAIN?
		OR	A
		JR	Z,ALLOC		;SKIP IF NOT

;	MORE UNALLOCATED RECORDS REMAIN
		DEC	A		;UNACNT = UNACNT - 1
		LD	(UNACNT),A
		LD	A,(SEKDSK)	;SAME DISK
		LD	HL,UNADSK
		CP	(HL)		;SEKDSK = UNADSK ?
		JR	NZ,ALLOC	;SKIP IF NOT
;	
;	DISK ARE THE SAME
		LD	A,(SEKTRK)
		LD	HL,UNATRK
		CP	(HL)		;SEKTRK = UNATRK ?
		JR	NZ,ALLOC	;SKIP IF NOT

;	TRACK ARE THE SAME
		LD	A,(SEKSEC)	;SAME SECTOR
		LD	HL,UNASEC
		CP	(HL)		;SEKSEC = UNASEC?
		JR	NZ,ALLOC	;SKIP IF NOT

;	MATCH, MOVE TO NEXT SECTOR FOR FUTURE REF
		INC	(HL)		;UNASEC ++
		LD	A,(HL)
		CP	CPMSPT		;CHECK DRIVE TYPE
		JR	C,NOOVF		;IF SINGLE SIDE

;	OVERFLOW TO NEXT TRACK
		LD	(HL),0		;UNASEC = 0
		LD	A,(UNATRK)
		INC	A		;UNATRK ++
		LD	(UNATRK),A

;	MATCH FOUND, MASK AS UNNECESSARY READ
NOOVF:		XOR	A		;0 TO Areg
		LD	(RSFLAG),A	;RSFLAG =0
		JR	RWOPER		;TO REFORM THE WRITE

;	NOT AN ALLOCATED RECORD, REQUIRES PRE_READ
ALLOC:		XOR	A		;0 TO Areg
		LD	(UNACNT),A	;UNACNT = 0
		INC	A		;A TO Areg
		LD	(RSFLAG),A	;RSFLAG = 1

;***** COMMON READ WRITE LOGICAL ********

RWOPER:		;ENTER HERE TO PERFORM THE READ/WRITE
		XOR	A		;0 TO Areg
		LD	(ERFLAG),A	;NO ERRORS (YET)
		LD	A,(SEKSEC)	;COMPUTE HOST SECTOR
		OR	A		;RESET CARRY
		RRA			;SHIFT RIGHT * SECSHF
		OR	A
		RRA
		OR	A
		RRA
		LD	(SEKHST),A	;HOST SECTOR TO SEEK

;	ACTIVE HOST SECTOR?
		LD	HL,HSTACT	;HOST ACTIVE FLAG
		LD	A,(HL)
		LD	(HL),1		;ALWAYS BECOMES 1
		OR	A		;WAS IT ALREADY
		JR	Z,FILHST	;FILL HOST IF NOT

;	HOST BUFFER ACTIVE, SAME AS SEEK BUFFER
		LD	A,(SEKDSK)
		LD	HL,HSTDSK	;SAME DISK
		CP	(HL)		;SEKDSK = HSTDSK? 
		JR	NZ,NOMATCH	;FIIL HOST IF NOT

;	SAME DISK, SAME TRACK?
		LD	A,(SEKTRK)
		LD	HL,HSTTRK
		CP	(HL)		;SEKTRK = HSTTRK?
		JR	NZ,NOMATCH

;	SAME DISK SAME TRACK, SAME BUFFER?
		LD	A,(SEKHST)
		LD	HL,HSTSEC	;SEKTRK = HSTSEC?
		CP	(HL)
		JR	Z,MATCH		;SKIP IF MATCH

;	PROFER DISK, BUT NOT CORRECT SECTOR
NOMATCH:	LD	A,(HSTWRT)	;HOST WRITTEN?
		OR	A
		CALL	NZ,WRITEHST	;CLEAR HOST BUFFER

FILHST:
	;PROPER DISK, BUT NOT CORRECT SECTOR
		LD	A,(SEKDSK)
		LD	(HSTDSK),A
		LD	HL,(SEKTRK)
		LD	(HSTTRK),HL
		LD	A,(SEKHST)
		LD	(HSTSEC),A
		LD	A,(RSFLAG)
		OR	A		;NEED TO READ?
		CALL	NZ,READHST	;YES, IF 1
		XOR	A		;0 TO Areg
		LD	(HSTWRT),A	;NO PENDING WRITE

MATCH:
	;COPY DATA TO OR FROM BUFFER
		LD	A,(SEKSEC)	;MASK BUFFER NUMBER
		AND	SECMSK		;LEAST SIGNIF BITS
		LD	L,A		;READY TO SHIFT
		LD	H,0		;DOUBLE COUNT
		ADD	HL,HL		;SHIFT LEFT 7
		ADD	HL,HL
		ADD	HL,HL
		ADD	HL,HL
		ADD	HL,HL
		ADD	HL,HL
		ADD	HL,HL
;	HL HAS RELATIVE HOST BUFFER ADDRESS
		LD	DE,HSTBUF	
		ADD	HL,DE		;HL=HOST ADDRESS
		EX	DE,HL		;WHICH WAY?
		LD	HL,(DMAADR)
		LD	BC,128
		LD	A,(READOP)
		OR	A
		JR	NZ,RWMOVE	;SKIP IF READ

;	WRITE OPERATION, MARK & SWITCH DIRECTION
		LD	A,1
		LD	(HSTWRT),A
		EX	DE,HL

RWMOVE:		EX	DE,HL
		LDIR
		LD	A,(WRTYPE)
		CP	WRDIR
		LD	A,(ERFLAG)
		RET	NZ

		OR	A
		RET	NZ
		XOR	A
		LD	(HSTWRT),A
		CALL	WRITEHST
		LD	A,(ERFLAG)
		RET

;******** WARM BOOT *****************

WBOOT:		LD	SP,INITSP	;RESET STACK
		LD	A,(HSTWRT)	;IF HSTWRT ACTIVE
		OR	A		;    CALL WRITEHST
		CALL	NZ,WRITEHST
		LD	HL,CPMB		;SET CCP TOP ADDRESS
		LD	BC,0200H	;SET TRACK 0 : SECTOR 2
		LD	A,1		;NOT MULTI SECTOR READ
		LD	(MULTFDRWN),A
WBOOTLOP: 	XOR	A		;SET DRIVE A
		CALL	FDDREAD		;1 SECTOR(256B) READ
		INC	H		;ADDR = ADDR + 256
		INC	B		;SECTOR = SECTOR + 1
		LD	A,B
		CP	17H		;CHECK LAST SECTOR
		JR	NZ,WBOOTLOP
		XOR	A
		LD	(CPMB+7),A

GOCPM:;		LD	A,1		;READ PF KEY TABLE
;		LD	(MULTFDRWN),A	;READ ONLY 1 SECTOR
;		XOR	A		;SET DRIVE A:
;		LD	BC,2001H	;SET TRACK 2 SECTOR 32
;		LD	HL,PFKEYTB	;DMA = PFKEYTBL
;		CALL	FDDREAD

		LD	A,0C3H		;SET JP INSTRUCTION
		LD	(0),A
		LD	(5),A
		LD	HL,WBOOTE
		LD	(1),HL		;SET REBOOT ADDRESS
		LD	HL,DOSB
		LD	(6),HL		;SET BDOS ADDRESS
		XOR	A
		LD	(HSTACT),A	;INITIALIZE
		LD	(UNACNT),A
		LD	BC,INTDMA
		CALL	SETDMA		;SETDMA 80H
		LD	A,(LOGDISK)	;SET LOG IN DISK
		LD	C,A
		CALL	SELDISK
		JP	CPMB		;JUMP CCP TOP

;***************************

SEKDSK:		DS	1
SEKTRK:		DS	1
SEKSEC:		DS	1

HSTDSK:		DS	1
HSTTRK:		DS	1
HSTSEC:		DS	1

SEKHST:		DS	1
HSTACT:		DS	1
HSTWRT:		DS	1

UNACNT:		DS	1
UNADSK:		DS	1
UNATRK:		DS	1
UNASEC:		DS	1

ERFLAG:		DS	1
RSFLAG:		DS	1
READOP:		DS	1
WRTYPE:		DS	1
DMAADR:		DS	2
HSTBUF:		DS	HSTSIZ

CSV0:		DS	32
ALV0:		DS	97H/8+1
CSV1:		DS	32
ALV1:		DS	97H/8+1

ALV2:		DS	97H/8+1
MAXDRV:		DB	3
DIRBUF:		DS	128

.PRINTX		/FDD		assemble/

INCLUDE		FDD.LIB

.PRINTX		/SUB CPU	assemble/
;********** SUB CPU **********
	
;********************
;* IOCS FOR SUB CPU *
;********************

INT87		EQU	0FFF0H
INTA		EQU	0FFF2H
INTB		EQU	0FFF4H
INTC		EQU	0FFF6H
PORT		EQU	0FFC0H
INTPORT		EQU	0FF80H
BIOSSP		EQU	0FFE0H
PFKEYTB		EQU	0FE00H

INTBACK:	DS	1
KEYFLG:		DS	1
KEYDATA:	DS	1
BKFLG:		DS	1
ERRFLG:		DS	1
BDOSSP:		DS	2
KSLOT:		DS	1
KINPMOD		EQU	0FFE8H

;***** TRANSCMD *****

;	IN: A:COMAND CODE

CMD:		PUSH	BC
		LD	(CMDDT),A
CMDLOP:		DI
		LD	BC,CMDINT
		LD	(INT87),BC
		LD	BC,PORT
		OUT	(C),A
		CALL	INTON
		EI
		HALT
		POP	BC
		OR	A
		RET	Z
		SCF
		CALL	KEYANAL
		LD	A,(CMDDT)
		JR	CMD

CMDINT:		LD	BC,PORT
		IN	A,(C)
		RET


;***** PUTDATA *****

;	IN: A:DATA

PUTDATA:	PUSH	BC
		LD	BC,PUTINT
		LD	(INT87),BC
		LD	BC,PORT
		CALL	INTON
		OUT	(C),A
PUTDATA1: 	EI
		HALT
		POP	BC
		RET
	
PUTINT:		IN	A,(C)
		RET
	
;***** GETDATA *****

;	OUT:A:DATA

GETDATA:	PUSH	BC
		LD	BC,GETINT
		LD	(INT87),BC
		EI
		HALT
		POP	BC
		RET
	
GETINT:		LD	BC,PORT
		IN	A,(C)
		PUSH	AF
		XOR	A
		OUT	(C),A
		POP	AF
		JP	INTON

	
;***** KEYINT *****

KEYSP		EQU	0FE00H

KEYINT:		LD	(KEYSPBK),SP
		LD	SP,KEYSP
		PUSH	AF
		PUSH	BC
		PUSH	DE
		PUSH	HL
		LD	BC,PORT
		IN	A,(C)
		OR	A
		CALL	KEYANAL
		LD	BC,KEYINT
		LD	(INT87),BC
		LD	A,(INTBACK)
		OR	10H
		LD	(INTBACK),A
		LD	BC,INTPORT
		OUT	(C),A
		POP	HL
		POP	DE
		POP	BC
		POP	AF
		LD	SP,(KEYSPBK)
		EI
		RET
	
;***** KEYANAL *****

;	IN: A:ACKCODE

KEYANAL:	PUSH	BC
		PUSH	DE
		PUSH	HL
		PUSH	AF
		LD	D,0
		CP	1
		JR	NZ,KEYANAL1
		LD	D,2
KEYANAL1: 	LD	BC,PORT
		OUT	(C),D
		POP	AF
		PUSH	AF
		LD	BC,INTPORT
		JR	C,KEYANAL2
		LD	A,90H
		OUT	(C),A
KEYANAL2: 	LD	A,10H
		OUT	(C),A
		POP	AF
		CP	2
		JR	Z,KEYANAL9
		CP	3
		JR	NC,KEYANAL3
		LD	(KEYFLG),A
		JR	KEYANAL9
	
KEYANAL3: 	LD	(KEYFLG),A
		LD	A,10
KEYANAL4: 	DEC	A
		JR	NZ,KEYANAL4
	
		LD	BC,KANALINT
		LD	(INT87),BC
		EI
		HALT
		LD	(KEYDATA),A
		CALL	KEYIN
KEYANAL9:	POP	HL
	 	POP	DE
		POP	BC
		RET

KANALINT: 	LD	BC,PORT
		IN	A,(C)
		LD	E,A
		XOR	A
		OUT	(C),A
		CALL	INTON
		LD	A,E
		RET

INTON:		PUSH	AF
		PUSH	BC
		LD	BC,INTPORT
		LD	A,90H
		OUT	(C),A
		LD	A,10H
		OUT	(C),A
		POP	BC
		POP	AF
		RET


;----- TRNC01 -----
;	IN: A:COMMAND

TRNC01:		CALL	CMD

;***** SUBEND *****

SUBEND:		PUSH	AF
		PUSH	BC
		LD	BC,KEYINT
		LD	(INT87),BC
		LD	BC,INTPORT
		LD	A,(INTBACK)
		OUT	(C),A
		POP	BC
		POP	AF
		EI
		RET
	
;----- TRNC02 -----
;	IN: A:COMMAND
;	    B:DATA

TRNC02:		CALL	CMD
		LD	A,B
		CALL	PUTDATA
		JR	SUBEND

;----- TRNC03 -----
;	IN: A:COMMAND
;	    BC:DATA

TRNC03:		CALL	CMD
		LD	A,B
		CALL	PUTDATA
		LD	A,C
		CALL	PUTDATA
		JR	SUBEND

;---- TRNC04 ----
;	IN: A:COMMAND
;	    B:PARAMETER COONT
;	    HL:PARAMETER POINTER

TRNC04:		CALL	CMD
TRNC04L:	LD	A,(HL)
		CALL	PUTDATA
		INC	HL
		DJNZ	TRNC04L
		
		JR	SUBEND
	
;----- TRNCGET -----
;	IN: A:COMMAND
;	OUT:A:DATA

TRNCGET:	CALL	CMD
		CALL	GETDATA
		JR	SUBEND

;***** LOGICAL PRINT ROUTINE *****

;	IN: A:CODE

PRINT:		LD	B,A
		LD	HL,PRMODE
		LD	A,(HL)
		CP	-1
		JP	Z,ESCCMD
		OR	A
		JP	NZ,ESCPRM
		LD	A,B
		CP	' '		;IF CONTROL CODE
		JP	C,PRCNTCD
		LD	A,(K1STAT)
		OR	A
		JP	NZ,KNJPR

PRND0:		LD	A,(KANJIMODE)
		AND	A
		JR	Z,PRND1B
		LD	A,B
		CP	80H
		JR	C,PRND1
		CP	0E0H
		JR	NC,KNJPRINT
		CP	0A0H
		JR	NC,PRND1

KNJPRINT:	LD	(KCODEH),A
		LD	A,-1
		LD	(K1STAT),A
		LD	B,1CH
		JP	RIGHT

PRND1B:		LD	A,B
PRND1:		CP	7FH
		RET	Z
		CP	0FFH
		RET	Z
PRND1C:		CALL	PRNT
PRND1S:		LD	HL,CX
		INC	(HL)
		LD	A,(WIDTH)
		CP	(HL)
		RET	NZ
PRND1K:		XOR	A
		LD	(HL),A
		LD	HL,CY
		INC	(HL)
		LD	A,(CONSOLE)
		CP	(HL)
		RET	NZ
		DEC	(HL)
		RET
	
PRCNTCD:	LD	A,B
		CP	07
		JR	Z,BELL		;BEEP
		CP	08
		JR	Z,BS		;BACK SPACE
		CP	09
		JR	Z,TAB		;TAB
		CP	0AH
		JR	Z,LF		;LINE FEED
		CP	0BH
		JP	Z,HM		;HOME POSITION
		CP	0CH
		JP	Z,CLS		;CLEAR	CSREEN
		CP	13
		JP	Z,CR		;CARRIAGE RETURN
		CP	1CH
		JP	Z,RIGHT		;CURSOR RIGHT
		CP	1DH
		JP	Z,LEFT		;CURSOL LEFT
		CP	1EH
		JP	Z,UP		;CURSOL UP
		CP	1FH
		JP	Z,DOWN		;CURSOL DOWN
		CP	1
		JP	Z,ROLUP		;ROLL UP
		CP	10H
		JP	Z,ROLDWN	;ROLL DOWN
		CP	27
		JP	Z,ESCAPE	;ESCAPE SEQ
		RET

;	BEEP OUT
BELL:		LD	A,28		;MACRO COMMAND 28
		JP	TRNC01

;	BACK SPACE
BS:		LD	A,(CX)
		OR	A
		JR	NZ,BS1
		LD	A,(CY)
		OR	A
		RET	Z
BS1:		LD	HL,CX
		DEC	(HL)
		LD	A,0FFH
		CP	(HL)
		JR	NZ,BS2
		LD	A,(WIDTH)
		DEC	A
		LD	(HL),A
		LD	HL,CY
		DEC	(HL)
BS2:		LD	A,15		;MACRO COMMAND 15
		JP	TRNC01

;	TAB
TAB:		LD	HL,CX
		LD	A,8
		ADD	A,(HL)
		AND	0F8H
		LD	(HL),A
		LD	A,(WIDTH)
		CP	(HL)
		JR	NZ,TAB1
		LD	(HL),0
		LD	HL,CY
		INC	(HL)
		LD	A,(CONSOLE)
		CP	(HL)
		JR	NZ,TAB1
		DEC	(HL)
		CALL	CRLF
TAB1:		JP	CSR

;	LINE FEED
LF:		LD	HL,CY
		INC	(HL)
		LD	A,(CONSOLE)
		CP	(HL)
		JR	NZ,LF1
		DEC	(HL)
		CALL	CRLF
LF1:		JP	CSR

;	HOME POSITION
HM:		XOR	A
		LD	(CX),A
		LD	(CY),A
		LD	(K1STAT),A
		JP	CSR

;	CLEAR SCREEN
CLS:		LD	A,13		;MACRO COMMAND 13
		CALL	TRNC01
		JR	HM

;	CARRIAGE RETURN
CR:		LD	HL,CX
		LD	(HL),0
		JP	CSR

;	CURSOR RIGHT
RIGHT:		LD	HL,CX
		INC	(HL)
		LD	A,(WIDTH)
		CP	(HL)
		JR	NZ,XCSR
		LD	(HL),0
		LD	A,(CONSOLE)
		DEC	A
		INC	HL
		CP	(HL)
		JR	NZ,DOWN
		LD	A,' '
		JP	PRNT

;	CURSOR LEFT
LEFT:		LD	HL,CX
		DEC	(HL)
		LD	A,-1
		CP	(HL)
		JR	NZ,XCSR
		LD	A,(WIDTH)
		DEC	A
		LD	(HL),A

;	CURSOR UP
UP:		LD	HL,CY
		DEC	(HL)
		LD	A,0FFH
		CP	(HL)
		JR	NZ,XCSR
		LD	A,(CONSOLE)
		DEC	A
		LD	(HL),A
		JR	XCSR

;	CURSOR DOWN
DOWN:		LD	HL,CY
		INC	(HL)
		LD	A,(CONSOLE)
		CP	(HL)
		JR	NZ,XCSR
		LD	(HL),0

XCSR:		LD	A,B
		SUB	01CH-09
		JP	TRNC01

;	ROLL UP
ROLUP:		LD	A,6
		JP	TRNC01

;	ROLL DOWN
ROLDWN:		LD	A,7
		JP	TRNC01

;	ESCAPE SEQ

ESCAPE:		LD	A,-1
		LD	(PRMODE),A	;SET ESC MODE
		RET

;	ESCAPE COMMAND ENTRY
ESCCMD:		LD	HL,ESCCMDTBL
ESCCMDL:	LD	A,(HL)
		OR	A
		JP	Z,ESCCMD2	;IF UNDEFINE SEQ
		CP	B
		JP	Z,ESCCMD3	;IF DEFINE SEQ
		LD	DE,4
		ADD	HL,DE
		JR	ESCCMDL		;JP NEXT SEQ

;	UNDEFINE SEQ
ESCCMD2:	LD	(PRMODE),A
		LD	A,B
		JP	PRINT

;	DEFINE SEQ ENTRY
ESCCMD3:	INC	HL
		LD	A,(HL)
		OR	A
		JR	Z,ESCCMD4	;IF NON PARARMETER SEQ
		LD	(PRMODE),A
		INC	HL
		LD	E,(HL)
		INC	HL
		LD	D,(HL)
		LD	(CMDJP+1),DE	;SET ENTRY POINT
		RET

;	NON PARAMETER SEQ
ESCCMD4:	XOR	A
		LD	(PRMODE),A
		INC	HL
		LD	E,(HL)
		INC	HL
		LD	D,(HL)
		EX	DE,HL
		JP	(HL)

;	ESCAPE PARAMETER SET ENTRY
ESCPRM:		LD	HL,ESCPRMTOP
		LD	C,A
		LD	A,(PRMCOUNT)
		LD	E,A
		LD	D,0
		LD	A,C
		ADD	HL,DE
		LD	(HL),B
		LD	HL,PRMODE
		DEC	(HL)
		JR	NZ,ESCPRM2
		XOR	A		;IF LAST PARAMETER
		LD	(PRMCOUNT),A
		LD	DE,ESCPRMTOP
CMDJP:		JP	00000

ESCPRM2:	LD	HL,PRMCOUNT
		INC	(HL)
		RET

;	ESCAPE COMMAND TABLE
ESCCMDTBL:	DB	'T',0		;ERASE END OF LINE
		DW	ESCT
		
		DB	'Y',0		;ERASE END OF SCREEN
		DW	ESCY
		
		DB	'*',0		;CLS
		DW	ESCSTAR
		
		DB	'(',0		;REVERSE
		DW	REVERSE

		DB	')',0		;NORMAL
		DW	NORMAL
		
		DB	'C',0		;CURSOR ON/OFF
		DW	ESCC
		
		DB	'_',1		;CURSOR ON/OFF
		DW	CURSOR

		DB	'<',0		;WIDTH 40
		DW	WID40
		
		DB	'>',0		;WIDTH 80
		DW	WID80
		
		DB	'S',1		;SCREEN
		DW	SCREEN

		DB	'{',0		;BEEPON
		DW	BEEPON
		
		DB	'}',0		;BEEP OFF
		DW	BEEPOFF
		
		DB	'=',2		;LOCATE
		DW	LOCATE
		
		DB	'M',1		;CHARACTER COLOR
		DW	ESCM
		
		DB	'B',1		;BACK GROUND COLOR
		DW	ESCB
		
		DB	'F',1		;FRAME COLOR
		DW	ESCF

		DB	'c',3		;CHAR,BACK,FRAME COLOR
		DW	CHRCOL
		
		DB	'D',1		;DISPLAY PLANE
		DW	DSPSCRN

		DB	'W',1		;WRITE PLANE
		DW	WRTSCRN

		DB	'K',2		;KANJI PRINT
		DW	KANJI

		DB	'N',1
		DW	NIPMODE

		DB	'L',1
		DW	KNJLINE

		DB	'^',0
		DW	STATMODE

	IF	JISHO
		DB	'J',1
		DW	STUDYMODE
	ENDIF

		DB	'\',0		;BACK SLASH SW.
		DW	BKSLASH
		
		DB	0		;END MARK

PRMCOUNT:	DB	0



;	BEEP ON
BEEPON:		LD	A,1DH
		JP	TRNC01

;	BEEP OFF
BEEPOFF:	LD	A,1EH
		JP	TRNC01

;	ERASE END OF LINE
ESCT:		CALL	ESCTL
		JP	CSR
;
ESCTL:		LD	A,(WIDTH)
		LD	B,A
		LD	A,(CONSOLE)
		DEC	A
		LD	C,A
		LD	A,(CY)
		CP	C
		JR	NZ,ESCTL1
		DEC	B
ESCTL1:		LD	HL,CX
		LD	A,B
		SUB	(HL)
		RET	Z
		RET	M
		LD	B,A
ESCTL2:		LD	A,' '
		CALL	PRNT
		DJNZ	ESCTL2
		RET

;	ERASE END OF SCREEN
ESCY:		CALL	ESCTL
		LD	HL,CY
		LD	A,(CONSOLE)
		DEC	A
		SUB	(HL)
		JR	Z,ESCY3
		LD	C,A
ESCY1:		LD	A,(WIDTH)
		LD	B,A
		LD	A,1
		CP	C
		JR	NZ,ESCY2
		DEC	B
ESCY2:		LD	A,' '
		CALL	PRNT
		DJNZ	ESCY2
		DEC	C
		JR	NZ,ESCY1
ESCY3:		JP	CSR

ESCSTAR:	JP	CLS

REVERSE: 	LD	A,-1
		LD	(REVNORM),A
		LD	BC,(XCOL1)
		LD	A,13H
		JP	TRNC03

NORMAL: 	XOR	A
		LD	(REVNORM),A
		LD	BC,(XCOL)
		LD	A,13H
		JP	TRNC03


;	CURSOR BLINK ON/OFF BINARY SWITCH
ESCC:		LD	HL,BLNKFLG
		LD	A,(HL)
		OR	A
		JR	Z,ESCC2
ESCC1:		LD	(HL),0
BLNKOFF:	LD	A,27
		JP	TRNC01

ESCC2:		LD	(HL),0FFH
BLNKON:		LD	A,26
		JP	TRNC01

CURSOR:		LD	HL,BLNKFLG
		LD	A,(DE)
		CP	'>'
		JR	Z,ESCC1
		CP	'<'
		JR	Z,ESCC2
		JP	PRINT

;	LOCATE    1st=Y+32   2nd=X+32
LOCATE:		LD	A,(CONSOLE)
		ADD	A,' '
		LD	C,A
		LD	A,(DE) 		;GET Y
		CP	' '
		JR	NC,LOCATE2
		LD	A,' '
LOCATE2:	CP	C
		JR	C,LOCATE3
		LD	A,' '
LOCATE3:	SUB	' '
		LD	(CY),A

		LD	A,(WIDTH)
		ADD	A,' '
		LD	C,A
		INC	DE
		LD	A,(DE)		;GET X
		CP	' '
		JR	NC,LOCATE4
		LD	A,' '
LOCATE4:	CP	C
		JR	C,LOCATE5
		DEC	C
		LD	A,C
LOCATE5:	SUB	' '
		LD	(CX),A
		JP	CSR

PRNT:		PUSH	BC
		LD	B,A
PRNT1:		CP	'\'
		JR	NZ,PRNT2
		LD	A,(BKSSW)
		AND	A
		JR	Z,PRNT2
		LD	B,A
PRNT2:		LD	A,4
		CALL	TRNC02
		POP	BC
		RET

LPT:		PUSH	BC
		LD	B,A
		LD	A,(KANJIMODE)
		AND	A
		JR	Z,LPT11
		CALL	KLPT
		JR	LPTRET
LPT11:		LD	A,31
		CALL	TRNC02
LPTRET:		POP	BC
		RET

LPTPUNCH:	PUSH	BC
		LD	B,A
		JR	LPT11


;	CURSOR SET
CSR:		PUSH	BC
		LD	A,(CX)
		LD	B,A
		LD	A,(CY)
		LD	C,A
CSR0A:	   	LD	A,18
		CALL	TRNC03
		POP	BC
		RET

CSR0:		PUSH	BC
		JR	CSR0A


;	CARRAGE RETURN
CRLF:		LD	A,14
		JP	TRNC01

;	CHARACTER COLOR
ESCM:		LD	HL,XCOL+1
		LD	A,(DE)
		AND	07H
		LD	B,A
;		LD	A,(SCREENM)
;		AND	A
;		JR	Z,CHGCCOL
;		XOR	A
;		CP	B
;		JR	Z,CZERO
;		LD	B,07H
;		JR	CHGCCOL
;CZERO:		LD	B,70H
CHGCCOL:	LD	A,(HL)
		AND	70H
		JR	CHGCOL

;	BACK GROUND COLOR

ESCB:		LD	HL,XCOL+1
		LD	A,(DE)
		RLCA
		RLCA
		RLCA
		RLCA
		AND	70H
		LD	B,A
;		LD	A,(SCREENM)
;		AND	A
;		JR	Z,CHGBCOL
;		XOR	A
;		JR	Z,BZERO
;		LD	B,70H
;		JR	CHGBCOL
;BZERO:		LD	B,07H
CHGBCOL:	LD	A,(HL)
		AND	07H
CHGCOL:		OR	B
		LD	(HL),A
		PUSH	AF
		AND	70H
		PUSH	AF
		LD	A,(XCOL1)
		AND	07H
		LD	B,A
		POP	AF
		OR	B
		LD	(XCOL1),A
		POP	AF
		RLCA
		RLCA
		RLCA
		RLCA
		LD	(XCOL1+1),A
		AND	70H
		LD	B,A
		DEC	HL
		LD	A,(HL)
		AND	07H
		OR	B
		LD	(HL),A
		JP	NORMAL
		
;	FRAME COLOR
ESCF:		LD	A,(DE)
		AND	07H
		LD	B,A
		LD	HL,XCOL
		LD	A,(HL)
		AND	70H
		OR	B
		LD	(HL),A
		INC	HL
		INC	HL
		LD	A,M
		AND	70H
		OR	B
		LD	(HL),A
		JP	NORMAL

CHRCOL:		INC	DE
		CALL	ESCB
		DEC	DE
		CALL	ESCM
		INC	DE
		INC	DE
		JR	ESCF

XCOL:		DB	70H
		DB	07H

XCOL1:		DB	00H
		DB	70H

;	WIDTH40
WID40:		LD	A,(WIDTH)
		CP	40
		RET	Z
		LD	A,40
		JR	WIDCHG

;	WIDTH80
WID80:		LD	A,(WIDTH)
		CP	80
		RET	Z
		LD	A,80
WIDCHG:		LD	(WIDTH),A
		LD	B,A
		LD	HL,SCRNMODE
		LD	A,(HL)
		AND	0FEH
		BIT	3,B
		JR	NZ,SCRNSET
		INC	A
SCRNSET:	LD	(HL),A
		LD	B,A
		CALL	C7070
		LD	A,33
		CALL	TRNC02
		JP	HM

SCREEN:		LD	A,(DE)
		AND	03H
		CP	1		;IF A=1 THEN 
		JR	Z,SCREEN1	;       SCREEN 1
		CP	3		;ELSE IF A=3 THEN
		JR	Z,SCREEN3	;       SCREEN 3
					;ELSE   SCREEN 0
SCREEN0:	LD	A,(SCREENM)
		AND	A
		RET	Z
		XOR	A
		LD	(KANJIMODE),A
		JR	SCREENC

SCREEN1:	LD	A,(SCREENM)
		CP	02H
		RET	Z
		XOR	A
		LD	(KANJIMODE),A
		LD	A,02H
		JR	SCREENC

SCREEN3:	LD	A,0FFH		;SHIFT JIS-CODE  PRINT OUT
		LD	(KANJIMODE),A
		LD	A,(SCREENM)
		BIT	6,A
		RET	NZ
		LD	A,42H

SCREENC:	LD	(SCREENM),A
		LD	B,A
		BIT	6,A
		JR	Z,CONS25
		LD	A,20
		JR	CONSC
CONS25:		LD	A,25
CONSC:		LD	(CONSOLE),A
		LD	HL,SCRNMODE
		LD	A,(HL)
		AND	01H
		OR	B
		JR	SCRNSET

C7070:		PUSH	BC
		LD	HL,0770H
		LD	(XCOL),HL
		LD	HL,7000H
		LD	(XCOL1),HL
		CALL	NORMAL
		LD	A,16H
		LD	B,0F7H
		CALL	TRNC02
		LD	A,7
		LD	(DPLANE),A
		LD	A,70H
		LD	(WPLANE),A
		POP	BC
		RET


DSPSCRN:	LD	A,(DE)
		AND	0FH
		LD	(DPLANE),A
		LD	B,A
		LD	A,(WPLANE)
		OR	B
		AND	77H
		BIT	3,B
		JR	NZ,WOP
		SET	7,A
WOP:		LD	B,A
		LD	A,16H
		JP	TRNC02

WRTSCRN:	LD	A,(DE)
		RLCA
		RLCA
		RLCA
		RLCA
		AND	70H
		LD	(WPLANE),A
		LD	B,A
		LD	A,(DPLANE)
		BIT	3,A
		JR	NZ,WOP1
		SET	7,B
WOP1:		AND	07H
		OR	B
		JR	WOP

CMPHLDE:	LD	A,H
		CP	D
		RET	NZ
		LD	A,L
		CP	E
		RET

;************* KANJI PRINT OUT ******************

KNJPR:		LD	HL,(CX)
		LD	A,L
		OR	H
		JR	Z,KNJPR1
		PUSH	BC
		LD	B,1DH
		CALL	LEFT
		POP	BC
KNJPR1:		LD	C,B
		LD	A,(KCODEH)
		LD	B,A
		CALL	MCONV
		LD	HL,ESCPRMTOP
		LD	(HL),B
		INC	HL
		LD	(HL),C
		DEC	HL
		XOR	A
		LD	(K1STAT),A
		JR	KANJI1

KANJI:		EX	DE,HL
KANJI1:		LD	D,(HL)
		INC	HL
		LD	E,(HL)
		CALL	DECORD		;JIS => INTERNAL CODE
		LD	BC,0961H	; Space internal code
		LD	A,L
		OR	H
		JR	Z,KOUT
		LD	B,(HL)
		INC	HL
		LD	C,(HL)
KOUT:		CALL	PATIN
		CALL	PATCHG
		LD	HL,PAT
		CALL	KPRINT
		RET
	IF	KANROM
KSLOTSEL:	LD	A,(KSLOT)
		LD	D,A
		LD	A,8
		JP	SLOTSEL
	ENDIF
; ************ DECORDING SUB *****************
;	JIScode TO Å²ÌÞcode
;	 IN: DE = JIScode
;	OUT: HL = Å²ÌÞcode Adr
;	     HL = 0	JIScode is INVALID

DECORD:		LD	HL,0
		LD	A,E
		CP	20H
		RET	C
		CP	80H
		RET	NC
		LD	A,D
		CP	21H
		RET	C
		CP	50H
		RET	NC
		CP	22H
		JR	Z,KDC1
		CP	23H
		JR	Z,KDC2
		CP	27H
		JR	Z,KDC3
		JR	C,KDC4
		CP	30H
		JR	NC,KDC4
		RET
KDC1:		LD	A,E
		CP	36H
		RET	NC
		JR	KDC4
KDC2:		LD	A,E
		CP	30H
		RET	C
		JR	KDC4
KDC3:		LD	A,E
		CP	40H
		RET	NC
KDC4:		PUSH	DE
		LD	HL,2120H
		XOR	A
		EX	DE,HL
		SBC	HL,DE
		EX	DE,HL
		LD	HL,KCODEL
		LD	A,D
		CP	0FH
		JR	C,KDC5
		SUB	8
KDC5:		SLA	A
		LD	D,A
		SLA	A
		ADD	A,D
		LD	(HL),A
		XOR	A
		RLD
		LD	D,A
		LD	A,E
		ADD	A,(HL)
		JR	NC,KDC6
		INC	D
KDC6:		ADD	A,60H
		LD	(HL),A
		DEC	HL
		LD	A,09H
		ADC	A,D
		LD	(HL),A
		POP	DE
		RET

PATIN0:		LD	BC,(ROMADDR)
PATIN:
IF 	KANDSK
	.PRINTX	/KANJI DISK VER./
        	LD	H,B
		LD	L,C

		DEC	H		;HL=HL-100H
		LD	A,111B
		AND	L
		LD	(MREC),A

		REPT	3		;HL=HL/8
		SRL	H
		RR	L
		ENDM			;HL=RECNUM

		LD	DE,(RECNUM)
		CALL	CMPHLDE
		JR	Z,PATIN2
		LD	(RECNUM),HL

		LD	A,11111B
		AND	L
		LD	B,A
		INC	B		;SET SECTOR NUM

		REPT	5
		SRL	H
		RR	L
		ENDM

		LD	C,L
		INC	C
		INC	C
		LD	HL,DSKBUF
		LD	A,1
		LD	(MULTFDRWN),A
		CALL	FDDREAD

PATIN2:		LD	A,(MREC)

		REPT	5		;A=32*A
		ADD	A,A
		ENDM

		LD	L,A
		LD	H,0
		LD	DE,DSKBUF
		ADD	HL,DE
		LD	DE,BPAT
		LD	BC,32
		LDIR

		LD	HL,(ROMADDR)
		INC	HL
		LD	(ROMADDR),HL
		LD	HL,BPAT
		RET

MREC:		DS	1
RECNUM:		DW	0FFFFH
DSKBUF:		DS	256

	ELSE				;KANJI ROM
	.PRINTX	/KANJI ROM VER/

		EXX
		CALL	KSLOTSEL
		EXX
		LD	HL,BPAT
PATINT:		LD	A,B
		AND	03H
		LD	D,A
		LD	A,B
		SRL	A
		SRL	A
		LD	B,D
		OUT	(C),A
		LD	D,32
PATINL:		LD	BC,0400H
		OUT	(C),A
		LD	B,08H		; BC = 0800H
;		NOP
;		NOP
		IN	A,(C)
		LD	(HL),A
		INC	HL
		DEC	D
		JR	NZ,PATINL
		LD	HL,(ROMADDR)
		INC	HL
		LD	(ROMADDR),HL
		LD	HL,BPAT
		RET
	ENDIF

PATCHG:		CALL	PATCHGR
		LD	A,(REVNORM)
		AND	A
		JR	Z,LNORM
		LD	A,(XCOL1)
		JR	COCHECK
LNORM:		LD	A,(XCOL)
COCHECK:	AND	70H
		RET	NZ
		LD	HL,PAT
		LD	B,40
PATCLOP:	LD	A,(HL)
		CPL
		LD	(HL),A
		INC	HL
		DJNZ	PATCLOP
		RET

PATCHGR:	LD	HL,PAT
		LD	DE,BPAT
		LD	A,(DE)
		LD	(HL),A
		INC	DE
		INC	HL
		CALL	PATCHG1
		LD	(HL),0FFH
		INC	HL
		LD	(HL),C
		INC	HL
		LD	A,(DE)
		LD	(HL),A
		INC	DE
		INC	HL
		LD	(HL),0FFH
		INC	HL
		CALL	PATCHG1
		LD	(HL),C
		INC	HL
		LD	A,(DE)
		LD	(HL),A
		INC	DE
		INC	HL
		CALL	PATCHG2
		LD	(HL),0FFH
		INC	HL
		LD	(HL),C
		INC	HL
		LD	A,(DE)
		LD	(HL),A
		INC	HL
		INC	DE
		LD	(HL),0FFH
		INC	HL
		CALL	PATCHG2
		LD	(HL),C
		RET

PATCHG1:	LD	B,7
		LD	C,0FFH
		SCF
PATC1L:		LD	A,(DE)
		RLA
		RR	C
		LD	(HL),A
		INC	DE
		INC	HL
		DJNZ	PATC1L
		RET
PATCHG2:	LD	B,7
		LD	C,0FFH
		SCF
PATC2L:		LD	A,(DE)
		RRA
		RL	C
		LD	(HL),A
		INC	DE
		INC	HL
		DJNZ	PATC2L
		RET

KPRINT:		PUSH	HL
		LD	HL,CX
		LD	A,(WIDTH)
		DEC	A
		CP	(HL)
		JR	NZ,KPUT
		CALL	PRND1K
KPUT:		POP	HL
		CALL	KKPRINT
		CALL	PRND1S
		JP	PRND1S
				
KKPRINT:	LD	A,5
		LD	B,40
		JP	TRNC04

NIPMODE:	LD	A,(SCREENM)
		CP	42H
		RET	NZ
		LD	A,(KNJONOFF)
		LD	HL,KINPMOD
		OR	(HL)
		RET	NZ
		LD	A,(DE)
		CP	'>'
		JR	Z,NIPOFF
		CP	'<'
		RET	NZ
		LD	A,0FFH
		JR	NIPCHG
NIPOFF:		XOR	A
		LD	(KINPMOD),A
		LD	(KNJONOFF),A
NIPCHG:		LD	(KANJIMODE),A
		RET

KNJLINE:	LD	A,(DE)
      		CP	'A'
		JR	NC,LINESET
		LD	A,'A'
LINESET:	SUB	'A'
		CP	20
		JR	C,KNJLSET
		LD	A,19
KNJLSET:	LD	(CHGINLN),A
		RET

	IF	JISHO
STUDYMODE:	LD	A,(DE)
		CP	'<'
		JR	Z,STUDYON
		CP	'>'
		RET	NZ
		XOR	A
		JR	STUDYCHG
STUDYON:	LD	A,0FFH
STUDYCHG:	LD	(LEARNMODE),A
		RET
	ENDIF

BKSLASH:	LD	HL,BKSSW
		LD	A,(HL)
		CPL
		LD	(HL),A
		RET

; *********** PAT CHANGE ***************
;	 IN: Å¼
;	OUT: DE CRT Ö³ pattern Adr

PATCHGB:	CALL	PATCHGR
		LD	HL,PAT
		RET


;******* MCONVERT ***************
;	IN	BC:SHIFT JIS
;	OUT 	BC:JIS

MCONV:		LD	A,B
		CP	0EAH
		JR	Z,MCONV4
		CP	0EBH
		JR	Z,MCONV5
		CP	80H
		JR	Z,MCONV6
		CP	0A0H
		JR	NC,MCONV0
		SUB	70H
		JR	MCONV1
MCONV0:		CP	0F0H
		JR	NC,MCONV6
		SUB	0B0H
MCONV1:		LD	B,A
		BIT	7,C
		JR	Z,MCONV2
		DEC	C
MCONV2:		SLA	B
		LD	A,C
		CP	9EH
		JR	C,MCONV25
		SUB	5EH
		JR	MCONV3
MCONV25:	DEC	B
MCONV3:		SUB	1FH
		LD	C,A
		RET
MCONV4:		LD	A,C
		SUB	7EH
		LD	B,A
		LD	C,20H
		RET
MCONV5:		LD	A,C
		SUB	1FH
		LD	B,A
		LD	C,7FH
		RET
MCONV6:		LD	BC,2121H
		RET


;********** PCONVERT ************
;	IN	BC:JIS
;	OUT	BC:SHIFT JIS

PCONV:		LD	A,C
		CP	20H
		JR	Z,PCONV3
		CP	7FH
		JR	Z,PCONV4
		CP	21H
		JR	NZ,PCONV05
		LD	A,B
		CP	21H
		JR	NZ,PCONV05
		LD	BC,2020H
		RET
PCONV05:	LD	A,C
		ADD	A,1FH
		LD	C,A
		SRL	B
		JR	C,PCONV0
		DEC	B
		ADD	A,5EH
		LD	C,A
PCONV0:		LD	A,C
		CP	7FH
		JR	C,PCONV1
		INC	C
PCONV1:		LD	A,B
		CP	2FH
		JR	NC,PCONV2
		ADD	A,71H
		LD	B,A
		RET
PCONV2:		ADD	A,0B1H
		LD	B,A
		RET
PCONV3:		LD	A,B
		ADD	A,7EH
		LD	C,A
		LD	B,0EAH
		RET
PCONV4:		LD	A,B
		ADD	A,1FH
		LD	C,A
		LD	B,0EBH
		RET


SCRNMODE:	DB	01H	;WIDTH 80 : SCREEN 0
K1STAT:		DB	0
PRMODE:		DB	0
BKSSW:		DB	0
BLNKFLG:	DB	0
REVNORM:	DB	0
CX		EQU	0FFFAH
CY		EQU	0FFFBH
WIDTH:		DB	80	;WIDTH 80 MODE START
CONSOLE:	DB	25	;SCREEN 0 MODE START
SCREENM:	DB	0	;SCREEN 0 MODE START
DPLANE:		DB	07H
WPLANE:		DB	70H

CHGINLN		EQU	0FFEBH

KATAHIRA	EQU	0FFEAH
KNJONOFF	EQU	0FFE9H
JISFLAG:	DB	0
DHFLAG:		DB	0

KANJIMODE	EQU	0FFFDH
LEARNMODE	EQU	0FFFCH

;**** KEYIN **********
;	OUT: A: DATA
;	     Z: NO DATA
;	     NZ: DATA

KEYIN: 		LD	A,(KEYFLG)
		OR	A
		RET	Z
		LD	B,A
		XOR	A
		LD	(KEYFLG),A
		LD	A,B
		CP	1
		JR	Z,KEYM01
		CP	4
		JR	Z,KEYM04
		CP	6
		JR	Z,KEYM06
		XOR	A
		RET

KEYM01:		
		CALL	CLRBUF
		LD	A,3
		JP	PUTRNG

KEYM04:		LD	A,(KINPMOD)	;PFKEY
		AND	A
		JR	NZ,KEYM04B
		LD	A,(KNJONOFF)
		AND	A
		JP	NZ,KNJCODE
		LD	A,(KANJIMODE)
		AND	A
		JR	Z,KEYM04B
		LD	A,(KEYDATA)
		CP	80H
		JR	C,KEYM04B1
		CP	0E0H
		JR	NC,BBB
		CP	0A0H
		JR	NC,KEYM04B1
BBB:		JP	BELL

KEYM04B:	LD	A,(KEYDATA)
KEYM04B1:	CP	7FH
		JP	NZ,PUTRNG

KEYZERO3: 	LD	HL,KEYZERO	;"000" KEY
RPUTRNG:	LD	A,(HL)
		OR	A
		RET	Z
		PUSH	HL
		CALL	PUTRNG
		POP	HL
		INC	HL
		JR	RPUTRNG

KEYZERO:	DB	'000',0

KEYM06:		LD	A,(KEYDATA)
		CP	003
		JR	Z,KEYBRK
		CP	004
		JR	Z,KEYCS
		JR	KEYPF

KEYBRK:		LD	A,'S'-'@'	; CTRL S
		JP	PUTRNG

KEYCS:
IF BREAK
	.PRINTX	/BREAK REBOOT/
		JP	WBOOT
ELSE
		CALL	CLRBUF
		LD	A,3
		JP	PUTRNG
ENDIF

KEYPF:		EX	AF,AF'
		LD	A,(SCREENM)
		CP	42H
		JR	NZ,KEYPFOFF
		LD	A,(KINPMOD)
		AND	A
		JR	NZ,KEYPFOFF
		EX	AF,AF'
		CP	0B0H
		JR	NZ,KEYPFON
		LD	A,(KANJIMODE)
		CPL
		LD	(KANJIMODE),A
		AND	A
		RET	NZ
		LD	(KNJONOFF),A
		JP	CLRBUF

KEYPFON:	EX	AF,AF'
		LD	A,(KANJIMODE)
		AND	A
		JR	Z,KEYPFOFF
		EX	AF,AF'
		CP	30H
		JR	Z,KKHENK
		CP	31H
		JR	Z,DKHENK
		CP	32H
		JR	Z,KTHENKSW
		JR	KEYPFOFF1
KKHENK:;	LD	A,(KNJONOFF)
;		AND	A
;		RET	NZ
		LD	A,0FFH
		LD	(KINPMOD),A
		JR	PFRET
DKHENK:		LD	A,(KINPMOD)
		AND	A
		RET	NZ
		LD	A,(KNJONOFF)
		CPL
		LD	(KNJONOFF),A
		JR	PFRET
KTHENKSW:	LD	A,(KNJONOFF)
		AND	A
		RET	Z
		LD	A,(KATAHIRA)
		CPL
		LD	(KATAHIRA),A
PFRET:		JP	CLRBUF

KEYPFOFF:	EX	AF,AF'
KEYPFOFF1:	OR	A
		JP	P,KEYPF1
		AND	0FH
		ADD	A,10
		JR	KEYPF2
KEYPF1:		AND	0FH
KEYPF2:		LD	L,A
		LD	H,0
		ADD	HL,HL
		ADD	HL,HL
		ADD	HL,HL
		LD	BC,PFKEYTB
		ADD	HL,BC
		JP	RPUTRNG


CLRBUF:		LD	HL,RNGBUF-1
		LD	(RHEAD),HL
		LD	(RTAIL),HL
		RET

PUTRNG:		LD	HL,(RHEAD)
		LD	DE,(RTAIL)
		DEC	DE
		EX	AF,AF'
		CALL	CMPHLDE
		RET	Z		;BUFFER FULL
		EX	AF,AF'
		INC	HL
		LD	(HL),A
		LD	DE,RNGBUF+39
		CALL	CMPHLDE
		JR	NZ,PUTRNG2
		LD	HL,RNGBUF-1
PUTRNG2:	LD	(RHEAD),HL
		RET


GETRNG:		LD	HL,(RHEAD)
		LD	DE,(RTAIL)
		CALL	CMPHLDE
		RET	Z
		INC	DE
		EX	DE,HL
		LD	A,(HL)
		PUSH	AF
		LD	DE,RNGBUF+39
		CALL	CMPHLDE
		JR	NZ,GETRNG2
		LD	HL,RNGBUF-1
GETRNG2:	LD	(RTAIL),HL
		POP	AF
		RET

CONSTAT:
TTYST:		LD	A,(KINPMOD)	;IF (KANJI INPUT MODE) KTTYST
		OR	A
		JP	NZ,KTTYST

		LD	HL,(RHEAD)
		LD	DE,(RTAIL)
		CALL	CMPHLDE
		LD	A,-1		;OK
		RET	NZ
		XOR	A		;NG
		RET

KNJCODE:	LD	A,(KEYDATA)
		CP	' '
		JR	C,PUTRNG
		CP	7FH
		JR	C,KNJHENK
		CP	0E0H
		JR	NC,KNJCBEEP
		CP	0A1H
		JR	NC,KNJHENK
KNJCBEEP:	JP	BELL

KNJHENK:	CALL	HENKANN
		LD	A,B
		CP	25H
		JR	NZ,PUTKRNG
		LD	A,C
		CP	74H
		JR	NC,PUTKRNG
		LD	A,(KATAHIRA)
		AND	A
		JR	Z,PUTKRNG
		DEC	B
PUTKRNG:	CALL	PCONV
		LD	A,B
		CALL	PUTRNG
		LD	A,C
		JP	PUTRNG

HENKANN:
		LD	(CHNGBUFF),A
		XOR	A
		LD	(CHNGBUFF+1),A
		CALL	DRTCONV
		LD	B,(HL)
		INC	HL
		LD	C,(HL)
		RET


;	KANJI RING BUFFER

KCLRBUF:	LD	HL,KRNGBU-1
		LD	(KHEAD),HL
		LD	(KTAIL),HL
		RET

KPUTRNG:	LD	HL,(KHEAD)
		LD	DE,(KTAIL)
		DEC	DE
		EX	AF,AF'
		CALL	CMPHLDE
		RET	Z		;BUFFER FULL
		EX	AF,AF'
		INC	HL
		LD	(HL),A
		LD	DE,KRNGBU+40
		CALL	CMPHLDE
		JR	NZ,KPUTRNG2
		LD	HL,KRNGBU-1
KPUTRNG2:	LD	(KHEAD),HL
		RET

KGETRNG:	LD	HL,(KHEAD)
		LD	DE,(KTAIL)
		CALL	CMPHLDE
		RET	Z
		INC	DE
		EX	DE,HL
		LD	A,(HL)
		PUSH	AF
		LD	DE,KRNGBU+40
		CALL	CMPHLDE
		JR	NZ,KGETRNG2
		LD	HL,KRNGBU-1
KGETRNG2:	LD	(KTAIL),HL
		POP	AF
		RET

KTTYST:		LD	A,(0FFFFH)
		OR	A
		RET	NZ		;ALWAYS OK MODE

KTTYSTR:	LD	HL,(KHEAD)
		LD	DE,(KTAIL)
		CALL	CMPHLDE
		LD	A,-1		;OK
		RET	NZ
		XOR	A
		RET			;NG

STATMODE:	LD	HL,0FFFFH
		LD	A,(HL)
		CPL
		LD	(HL),A
		RET

.PRINTX		/KANJI		assemble/
;KANJI INPUT COMMAND ENTRY


KNJINP0:	LD	DE,KNJCSRPTR
		LD	B,2+20+1
		CALL	CLRZERO		;CLEAR INPUT BUFFER
		CALL	CLRLINE

KNJINP1:	LD	HL,KNJINP0
		LD	(KTTYINB+1),HL
		LD	A,(REVNORM)
		CPL
		AND	7
		LD	B,A
		LD	A,17H
		CALL	TRNC02
		CALL	CSRON

KNJINPLOP:	CALL	KTTYSTR
		AND	A
		JP	NZ,MODRI3

		LD	A,(KNJCSRPTR)
		LD	B,A
		LD	A,(CHGINLN)
		LD	C,A
		CALL	CSR0
		CALL	BLNKON

AEE17:		DI
		CALL	GETRNG
		EI
		JR	Z,AEE17

		PUSH	AF
		CALL	BLNKOFF
		POP	AF
		CP	' '
		JP	C,AEE54		;IF CNTROLL CODE
		CP	07FH
		JP	C,AEE39		;ALFA
		CP	0A1H		;'¡'
		JP	C,AEE54
		CP	0E0H		;'à'
		JP	NC,AEE54
AEE39:		LD	HL,KNJINPBUF
		LD	DE,(KNJCSRPTR)
		ADD	HL,DE
		LD	(HL),A
		CALL	PRNT
		LD	HL,19
		INC	DE
		CALL	CMPHLDE
		JR	C,KNJINPLOP
		LD	(KNJCSRPTR),DE
		JR	KNJINPLOP

AEE54:		CP	'A'-'@'
		JP	Z,FUKKI

		CP	1BH		;^[
		JP	Z,ESUKEIP

		CP	1CH		;[RIGHT] ^\
		JR	Z,CSRRHT	;CSR RIGHT

		CP	1DH		;[LEFT] ^]
		JR	Z,CSRLFT	;CSR LEFT

		CP	11H		;^Q
		JP	Z,DELETE	;DELETE
		CP	12H		;^R
		JP	Z,INSERT	;INSERT
		CP	08H		;^H
		JP	Z,BAKSPC	;BACK SPACE

		CP	02H		;[SHIFT]+[LEFT] ^B
		JP	Z,MODRI
	
		CP	06H		;[SHIFT]+[RIGHT] ^F
		JP	Z,SUSUMI

		CP	0F9H
		JP	Z,CHOKUSETSU	;DIRECT CHANGE

		CP	0FAH		;Ë×¶ÞÅ
		JP	Z,HIRAGANA

		CP	0FBH
		JP	Z,JISHENKAN	;JIS CODE

		CP	0FCH		;KANJI 
		JP	Z,KNJHENKAN
	IF 	JISHO
		CP	0F2H
		JP	Z,DICTIONARY
	ENDIF

		CP	0DH		;CR
		JP	NZ,CODEHENKAN
		LD	A,(KNJCSRPTR)
		AND	A
		JP	NZ,KNJINPLOP

		LD	(KINPMOD),A
		CALL	CLRLINE
		CALL	CSR
		CALL	CSROFF
		JP	TTYIN1B
		
CLRLINE:	XOR	A
		LD	B,A
		LD	A,(CHGINLN)
		LD	C,A
		CALL	CSR0

		CALL	BLNKOFF
		LD	B,79
AEDF9:		PUSH	BC
		LD	A,' '
		CALL	PRNT
		POP	BC
		DJNZ	AEDF9
		RET

CSRLFT:		LD	A,(KNJCSRPTR)
		DEC	A
		JP	M,KNJINPLOP
		LD	(KNJCSRPTR),A
		JP	KNJINPLOP

CSRRHT:		LD	A,(KNJCSRPTR)
		INC	A
		CP	20
		JP	NC,KNJINPLOP
		LD	(KNJCSRPTR),A
		JP	KNJINPLOP
;	ESCAPE
ESUKEIP:	LD	HL,KNJINPBUF
		LD	DE,(KNJCSRPTR)
		ADD	HL,DE
		LD	A,(HL)
		OR	A
		JR	Z,CSRRHT

INSERT:		LD	BC,(KNJCSRPTR)
		LD	HL,20
		AND	A
		SBC	HL,BC
		LD	B,H
		LD	C,L
		LD	DE,CHNGBUFF-1
		LD	HL,CHNGBUFF-2
		LDDR
		XOR	A		;LD	A,' '
		LD	(DE),A
		LD	(CHNGBUFF-1),A
		CALL	AEF31
		JP	KNJINPLOP

DELETE:		LD	BC,(KNJCSRPTR)
		LD	HL,20
		AND	A
		SBC	HL,BC
		LD	B,H
		LD	C,L
		LD	HL,(KNJCSRPTR)
		LD	DE,KNJINPBUF
		ADD	HL,DE
		LD	D,H
		LD	E,L
		INC	HL
		LDIR
		CALL	AEF31
		JP	KNJINPLOP

BAKSPC:		LD	A,(KNJCSRPTR)
		DEC	A
		JP	M,DELETE
		LD	(KNJCSRPTR),A
		JR	DELETE
PR1LINE:
AEF31:		LD	B,0
		LD	A,(CHGINLN)
		LD	C,A
		CALL	CSR0
		LD	B,20
		LD	HL,KNJINPBUF

AEF43:		LD	A,(HL)
		OR	A
		JR	NZ,AEF49
		LD	A,' '
AEF49:		CALL	PRNT
		INC	HL
		DJNZ	AEF43
		RET

CODEHENKAN:	LD	B,A
		LD	HL,CODETBL
CODEHENKL:	LD	A,(HL)
		INC	HL
		AND	A
		JP	Z,CODECHGE
		CP	B
		JR	Z,CODECHG
		INC	HL
		JR	CODEHENKL

CODECHG:	LD	A,(HL)
		JR	MODRI2

CODECHGE:	LD	A,B
		CP	' '
		JR	C,MODRI2
		JP	KNJINPLOP

SUSUMI:		LD	A,'D'-'@'
		JR	MODRI1

MODRI:		LD	A,8
MODRI1:		PUSH	AF
		CALL	KPUTRNG
		POP	AF
MODRI2:		CALL	KPUTRNG
MODRI3:		LD	HL,KNJINP1
		LD	(KTTYINB+1),HL
		JP	WERT

CODETBL:	DB	'W'-'@'		;[ENTER] ^W
		DB	0DH		;[RETURN] ^M
		DB	84H		;[GRP]+[B]
		DB	'B'-'@'		;^B
		DB	9CH		;[GRP]+[Q]
		DB	'Q'-'@'		;^Q
		DB	0E5H		;[GRP]+[R]
		DB	'R'-'@'		;^R
		DB	9DH		;[GRP]+[W]
		DB	'W'-'@'		;^W
		DB	0E7H		;[GRP]+[F]
		DB	'F'-'@'		;^F
		DB	0EDH		;[GRP]+[H]
		DB	'H'-'@'		;[BS] ^H
		DB	0F1H		;[GRP]+[\]
		DB	1CH		;^\
		DB	0F8H		;[GRP]+[]]
		DB	1DH		;^]
		DB	0FDH		;[GRP]+[[]
		DB	1BH		;[ESC] ^[
		DB	086H		;[GR]+'M'
		DB	0DH		;CARRIAGE RETURN
		DB	''+80H
		DB	'A'-'@'
		DB	0

FUKKI:		LD	HL,0FE00H+160
		LD	DE,KNJCSRPTR
		LD	BC,23
		LDIR
		;
		CALL	PR1LINE
		JP	KNJINPLOP

TAIHI:		LD	HL,KNJCSRPTR
		LD	DE,0FE00H+160
		LD	BC,23
		LDIR
		RET

DRTJIS:
		CALL	DRTCONV
		RET	NC
		LD	A,(DHFLAG)
		AND	A
		JR	Z,DRTKANA
		LD	A,(HL)
		CP	25H
		JR	NZ,DRTKANA
		INC	HL
		LD	A,(HL)
		DEC	HL
		CP	74H
		JR	NC,DRTKANA
		DEC	(HL)
DRTKANA:	JP	JISTOSFT

DRTCONV:
	IF	KANDSK
		LD	HL,0107H
		LD	(ROMADDR),HL
	ELSE

		LD	BC,0100H
		CALL	PATIN
		LD	B,(HL)		;HL=PAT
		INC	HL
		LD	C,(HL)
		LD	(ROMADDR),BC
	ENDIF

AF164:		CALL	PATIN0
		LD	B,4
AF169:		LD	A,(HL)
		CP	0FFH
		JR	Z,AF19A
		CP	0FEH
		RET	Z
		LD	C,A
		LD	A,(CHNGBUFF)
		OR	A
		RET	Z
		CP	C
		JR	NZ,AF18F
		LD	A,(CHNGBUFF+1)
		INC	HL
		LD	C,(HL)
		DEC	HL
		CP	C
		JR	NZ,AF18F
		LD	DE,4
		ADD	HL,DE
		SCF
		RET

AF18F:		LD	DE,8
		ADD	HL,DE
		DJNZ	AF169
		JR	AF164

AF19A:		LD	DE,0900H
		LD	(ROMADDR),DE
		JR	AF164

AF1E5:		LD	HL,CHNGBUFF
		CALL	AF207
		LD	D,A
		LD	(CHNGBUFF),A
		CALL	AF207
		LD	E,A
		LD	(CHNGBUFF+1),A
		CALL	DECORD
		LD	A,L
		OR	H
		RET	Z
		LD	HL,CHNGBUFF
		CALL	JISTOSFT
		RET

AF207:		LD	A,(HL)
		SUB	'0'
		REPT	4
		ADD	A,A	;2*
		ENDM
		LD	B,A
		INC	HL
		LD	A,(HL)
		SUB	'0'
		ADD	A,B
		INC	HL
		RET

;		DIRECT CHANGE

CHOKUSETSU:	CALL	TAIHI
		LD	DE,HENTBL
		PUSH	DE
		LD	B,50
		CALL	CLRZERO		;RET Areg=0
		LD	(KNJCSRPTR),A
		POP	DE
		LD	HL,KNJINPBUF
		LD	B,0
		CALL	BLLOOP
		OR	B
		JP	Z,KNJINPLOP
		PUSH	BC
		;
		LD	A,21
		SUB	B
CHOKU3:		LD	C,A
		LD	B,0
		XOR	A
		LD	(CHNGBUFF),A
		LD	DE,KNJINPBUF
		INC	HL
		LDIR
		;
		POP	BC
		PUSH	BC
		CALL	CLRZERO
		;
		LD	HL,HENTBL
		POP	BC
CHOKU1:		CALL	CHOKU0
		PUSH	HL
		PUSH	BC
		CALL	DRTJIS
		POP	BC
		POP	HL
		DJNZ	CHOKU1
		;
		XOR	A
		LD	(DHFLAG),A
		CALL	PR1LINE
		JP	MODRI3

CHOKU0:		LD	A,(HL)
		LD	(CHNGBUFF),A
		XOR	A
		LD	(CHNGBUFF+1),A
		LD	A,(HL)
		INC	HL
		CP	0B6H		; CP	'¶'
		JR	C,BAF256

		CP	0CFH		; CP	'Î'+1 = 'Ï'
		RET	NC		;ÀÞ¸µÝ Å¼

		LD	A,(HL)
		CP	0DEH		; CP	'Þ'
		JR	Z,AF251
		CP	0DFH		; CP	'ß'
		RET	NZ

AF24A:		LD	A,(CHNGBUFF)
		CP	0CAH		; CP	'Ê'
		RET	C
		LD	A,(HL)
AF251:		LD	(CHNGBUFF+1),A
		INC	HL
		RET

BAF256:		CP	0B3H		; CP	'³'
		JR	NZ,AF256
		LD	A,(DHFLAG)
		AND	A
		RET	NZ

AF256:		LD	A,(HL)
		CP	0DEH
		RET	NZ
		JR	AF251


;		Ë×¶ÞÅ CHANGE


HIRAGANA:	LD	A,0FFH
		LD	(DHFLAG),A
		JP	CHOKUSETSU

CLRZERO:	XOR	A
CLRZR0:		LD	(DE),A
		INC	DE
		DJNZ	CLRZR0
		RET

KNJHENKAN::	CALL	TAIHI
		LD	HL,KNJINPBUF
KNJHNKN0:
		LD	DE,CHNGBUFF
		LD	B,20
		CALL	CLRZERO
		LD	DE,CHNGBUFF
AF2D3:		LD	A,(HL)
		CP	0A6H		; CP	'¦'
		JR	C,AF2E4
		CP	0E0H
		JR	NC,AF2E4
		LD	(DE),A
		INC	HL
		INC	DE
		JR	AF2D3

AF2E4::		LD	A,(CHNGBUFF)
		OR	A
		JR	Z,AF2F4
		PUSH	HL
		CALL	AF306
		CALL	AF394
		POP	HL
AF2F4:		LD	DE,CHNGBUFF-1
		CALL	CMPHLDE
		JP	Z,WERT
		CALL	CHOKU0
		PUSH	HL
		CALL	DRTJIS
		POP	HL
		JP	KNJHNKN0

AF306:		EX	DE,HL
AF307:		DEC	DE
		LD	A,(DE)
		CP	0A6H
		JR	C,AF316
		CP	0E0H
		JR	NC,AF316
		JR	AF307

AF316:		LD	HL,CHNGBUFF-1
		INC	DE
		AND	A
		SBC	HL,DE
		PUSH	HL
		POP	BC
		EX	DE,HL
		LD	DE,KNJINPBUF
		LDIR
		PUSH	DE
AF326:		XOR	A
		LD	(DE),A
		LD	HL,CHNGBUFF-1
		INC	DE
		CALL	CMPHLDE
		JP	P,AF326
		POP	DE
		AND	A
		SBC	HL,DE
		POP	BC
		POP	DE
		EX	DE,HL
		AND	A
		SBC	HL,DE
		PUSH	HL
		PUSH	BC
		CALL	AEF31
		RET


JISHENKAN:	CALL	TAIHI
		XOR	A
		LD	(KNJCSRPTR),A
		LD	HL,KNJINPBUF
		LD	B,20
JISCHKL:	LD	A,(HL)
		CALL	CHKHEX
		JP	C,KNJINPLOP
		INC	HL
		DJNZ	JISCHKL

		LD	HL,KNJINPBUF
		LD	B,20
AF345:		LD	C,4
		LD	DE,CHNGBUFF
AF34A:		LD	A,(HL)
		AND	A
		JR	Z,KIGOHCHK
AF34A1:		CALL	HTOUPPER
		AND	A
		JR	Z,AF36A
		CP	'9'+1
		JR	C,AF355
		SUB	007H

AF355:		LD	(DE),A
		INC	DE
		INC	HL
		DEC	B
		JR	Z,AF37B
		DEC	C
		JR	NZ,AF34A
		PUSH	HL
		PUSH	BC
		CALL	AF1E5
		POP	BC
		POP	HL
		JR	AF345

AF36A:		INC	HL
		DJNZ	AF345
		JP	WERT

AF37B:		DEC	C
		JP	NZ,KIGOH
		CALL	AF1E5
		JP	WERT

CHKHEX::	AND	A
		RET	Z
		CALL	HTOUPPER
		CP	'0'
		RET	C
		CP	'F'+1
		CCF
		RET	C
		CP	'9'+1
		CCF
		RET	NC
		CP	'A'
		RET


HTOUPPER:	CP	'f'+1
		RET	NC
;TOUPPER:	CP	'z'+1
;		RET	NC
		CP	'a'
		RET	C
		AND	0DFH
		RET

KIGOHCHK:	EX	AF,AF'
		LD	A,2
		CP	C
		CALL	Z,KIGOH0
KCHKRET:	EX	AF,AF'
		JR	AF34A1

KIGOH:		LD	A,1
		CP	C
		JP	NZ,WERT

KIGOH0:		LD	HL,CHNGBUFF
		CALL	AF207
		LD	(CHNGBUFF),A
		CP	28H
		JP	NC,WERT
		CP	21H
		JP	C,WERT
		CALL	FILL0

	IF 	KANDSK
		LD	HL,0144H
		LD	(ROMADDR),HL
	
	ELSE

		LD	BC,0100H
		CALL	PATIN
		LD	BC,4
		ADD	HL,BC
		LD	B,(HL)
		INC	HL
		LD	C,(HL)
		LD	(ROMADDR),BC
	ENDIF

		LD	DE,HENTBL
		PUSH	DE
KIGOHLO:	CALL	PATIN0
		LD	BC,4
		ADD	HL,BC
		LD	A,(CHNGBUFF)
		LD	C,A
		LD	B,4
KIGOHLI:	LD	A,(HL)
		CP	0FEH
		JR	Z,KIGOHE
		CP	C
		JR	NZ,NEXTCODE
		LD	D,A
		INC	HL
		LD	E,(HL)
		DEC	HL
		PUSH	HL
		CALL	DECORD
		LD	A,H
		OR	L
		POP	HL
		JR	Z,NEXTCODE
		POP	DE
		PUSH	HL
		PUSH	DE
		PUSH	BC
		LD	BC,4
		LDIR
		POP	BC
		POP	DE
		LD	HL,DSPMAX
		INC	(HL)
		LD	HL,4
		ADD	HL,DE
		EX	DE,HL
		POP	HL
		PUSH	DE
NEXTCODE:	LD	DE,8
		ADD	HL,DE
		DJNZ	KIGOHLI

		JR	KIGOHLO

KIGOHE:		POP	DE
		CALL	SENTAKU		; TABLE SENTAKU
		JP	WERT

SENTAKU:	LD	A,0FFH
		LD	(JISFLAG),A
		CALL	AF46D
		XOR	A
		LD	(JISFLAG),A
		RET

AF394:
		LD	BC,0100H
		CALL	PATIN
		LD	DE,00006H
		ADD	HL,DE
		LD	B,(HL)
		INC	HL
		LD	C,(HL)
		LD	(ROMADDR),BC
AF3A5:		CALL	PATIN0
		LD	A,(CHNGBUFF)
		LD	C,A
		LD	B,8
AF3AE:		LD	A,(HL)
		CP	0FFH
		RET	Z
		CP	C
		JR	Z,AF3C1
		DEC	B
		JR	Z,AF3A5
		INC	HL
		INC	HL
		INC	HL
		INC	HL
		JR	AF3AE

AF3C1:		INC	HL
		INC	HL
		LD	B,(HL)
		INC	HL
		LD	C,(HL)
		LD	(ROMADDR),BC
AF3CA:		CALL	PATIN0
		LD	B,4
AF3CF:		PUSH	HL
		LD	DE,CHNGBUFF
AF3D3:		INC	DE
		LD	A,(HL)
		CP	' '+1
		JR	C,AF3E9
		CP	50H
		JR	C,AF403
		CP	0FFH
		JP	Z,AF53D
		CP	0FEH
		JP	Z,AF53D
AF3E9:		LD	A,(DE)
		LD	C,(HL)
		CP	C
		JR	NZ,AF3F3
		INC	HL
		JR	AF3D3

AF3F3:		CP	C
		JP	C,AF53D
		POP	HL
		LD	DE,8
		ADD	HL,DE
		DJNZ	AF3CF
		JR	AF3CA

AF403:		POP	DE
		PUSH	HL
		EXX
		CALL	FILL0
		LD	DE,HENTBL
		LD	BC,4
		POP	HL
		LDIR
		EXX
		LD	A,(DSPMAX)
		INC	A
		LD	(DSPMAX),A
		JR	AF457


FILL0:		LD	DE,DSPMAX
		LD	B,4
		JP	CLRZERO


AF42A:		CALL	PATIN0
		LD	B,4
AF42F:		LD	DE,CHNGBUFF+1
AF432:		LD	A,(HL)
		CP	' '+1
		JR	C,AF462
		CP	80
		JR	NC,AF462
		PUSH	HL
		EXX
		LD	HL,(DSPMAX)
		ADD	HL,HL
		ADD	HL,HL
		LD	DE,HENTBL
		ADD	HL,DE
		POP	DE
		EX	DE,HL
		LD	BC,00004H
		LDIR
		LD	HL,DSPMAX
		INC	(HL)
		EXX
AF457:		LD	DE,00004H
		ADD	HL,DE
		DJNZ	AF42F
		JR	AF42A

AF462:		LD	A,(DE)
		LD	C,(HL)
		CP	C
		JR	NZ,AF46D
		INC	DE
		INC	HL
		JR	AF432


AF46D:		LD	A,(DSPMAX)
		LD	(DSPPTR),A
		LD	HL,HENTBL
		LD	(HENKPTR),HL
AF46DB:		LD	HL,0
		LD	(DSPLYNUM),HL
AF46DA:		CALL	AF54C
		LD	B,29
		LD	A,(CHGINLN)
		LD	C,A
		CALL	CSR0
AF47D:		LD	A,(DSPLYNUM)
		ADD	A,'0'
		CALL	PRNT
		LD	A,'.'
		CALL	PRNT
		LD	HL,(DSPLYNUM)
		ADD	HL,HL
		ADD	HL,HL
		LD	DE,(HENKPTR)
		ADD	HL,DE
		INC	HL
		INC	HL
		LD	B,(HL)
		INC	HL
		LD	C,(HL)
		CALL	PATIN
		CALL	PATCHG
		LD	HL,PAT
		CALL	KKPRINT
		LD	A,' '
		CALL	PRNT
		LD	HL,DSPPTR
		DEC	(HL)
		JR	Z,AF4E5
		LD	A,(DSPLYNUM)
		INC	A
		CP	10
		JR	Z,AF4E5
		LD	(DSPLYNUM),A
		JR	AF47D

AF4E5:		CALL	GETRNG
		JR	Z,AF4E5
		CP	'0'
		JR	C,AF512
		CP	'9'+1
		JR	NC,AF4E5
		SUB	'0'
		LD	C,A
		LD	A,(DSPLYNUM)
		CP	C
		JR	C,AF4E5
		LD	L,C
		LD	H,0
		ADD	HL,HL
		ADD	HL,HL
		LD	DE,(HENKPTR)
		ADD	HL,DE
		CALL	JISTOSFT
		JP	AF54C


AF512:		CP	1EH
		JR	Z,CODEBFR
		CP	1BH
		JR	Z,AF53E
		CP	' '
		JR	Z,CODEAFT
		CP	1FH
		JR	NZ,AF4E5
CODEAFT:	LD	A,(DSPPTR)
		AND	A
		JP	Z,AF46D
		LD	HL,(HENKPTR)
		LD	DE,40
		ADD	HL,DE
ABDSP:		LD	(HENKPTR),HL
		CALL	AF54C
		JP	AF46DB

CODEBFR:	LD	A,(DSPPTR)
		AND	A
		JR	Z,DSPSELE
		ADD	A,10
		LD	HL,DSPMAX
		CP	(HL)
		JR	Z,SELLOOP
		ADD	A,10
		LD	(DSPPTR),A
		LD	HL,(HENKPTR)
		LD	DE,40
		XOR	A
		SBC	HL,DE
		JR	ABDSP

SELLOOP:	LD	C,10
		LD	B,0FFH
		JR	SUB10B

DSPSELE:	LD	C,20
		LD	B,0FEH
SUB10B:		LD	A,(DSPMAX)
SUB10L:		INC	B
		SUB	10
		JR	Z,SUB10E
		JR	NC,SUB10L
SUB10E:		ADD	A,C
		LD	(DSPPTR),A
		LD	HL,DSPMAX
		CP	(HL)
		JP	NC,AF46D
		LD	HL,HENTBL
DSPSELEL:	LD	DE,40
		ADD	HL,DE
		DJNZ	DSPSELEL
		LD	(HENKPTR),HL
		JP	AF46DB


AF53D:		POP	BC
AF53E:		LD	HL,00000H
		LD	(KNJCSRPTR),HL
		CALL	AF54C

		LD	A,(JISFLAG)
		AND	A
		RET	NZ

		POP	BC
		POP	BC
		JP	KNJINPLOP


AF54C:		LD	B,29
		LD	A,(CHGINLN)
		LD	C,A
		CALL	CSR0
		LD	B,50
AF55B:		LD	A,' '
		CALL	PRNT
		DJNZ	AF55B
		RET


JISTOSFT:
		LD	B,(HL)
		INC	HL
		LD	C,(HL)
		CALL	PCONV
		LD	A,B
		CALL	KPUTRNG
		LD	A,C
		JP	KPUTRNG

WERT:		CALL	CSR
		CALL	CSROFF
		JP	KTTYIN

	IF 	JISHO
		.LIST
;Nippon-go CP/M DICTIONARY ROUTINE
;
;

DICTIONARY:	CALL	TAIHI
DICTIONARY2:	LD	HL,0
		LD	(KNJCSRPTR),HL
		LD	HL,KNJINPBUF
		LD	A,(HL)
		AND	A
		JP	Z,WERT

		LD	B,20
SEARCHL1:	LD	A,(HL)
		AND	A
		JR	Z,SEARCHL15
		INC	HL
		DJNZ	SEARCHL1
SEARCHL15:	LD	(ZEROPTR),HL
		LD	A,20
		SUB	B
		LD	(STRINGLEN),A

		LD	B,4
		CP	3		;A = STRINGLEN
		JR	NC,SUMLB
		LD	B,A
SUMLB:		XOR	A
		LD	(DSPCNT),A	;ATTENTION
		LD	D,A
		LD	HL,KNJINPBUF
SUML:		LD	E,(HL)
		ADD	A,E
		JR	NC,SUML2
		INC	D
SUML2:		INC	HL
		DJNZ	SUML
		LD	E,A
		;
DIV:		LD	HL,40
		EX	DE,HL
DIVL:		XOR	A
		SBC	HL,DE
		JR	NC,DIVL
		ADD	HL,DE
		;
DIV2::		LD	A,L
		LD	H,1
		LD	(DICTRK),HL
		;
		LD	A,(HSTWRT)
		OR	A
		CALL	NZ,PREDIC
		XOR	A
		LD	(HSTACT),A
		LD	(UNACNT),A
		LD	(HSTWRT),A
		;
		;Dictionay read routine
NEXTREAD::	LD	BC,(DICTRK)
		LD	A,4		;MULTI SEC COUNT SET
		LD	(0FFFEH),A
		LD	A,DIC
		LD	HL,HSTBUF
		CALL	FDDREAD
;
		;
		LD	HL,HSTBUF	;HL=HSTBUF DE=KNJINPBUF
SEARCHL2B:	LD	DE,KNJINPBUF
		LD	A,(STRINGLEN)
		LD	B,A
SEARCHL2:	LD	A,(DE)
		CP	(HL)
		JR	NZ,SEAR_CR
		INC	HL
		INC	DE
		DJNZ	SEARCHL2
		LD	A,(HL)
		INC	HL
		CP	0AH
		JR	Z,SARCHOK
;
SEAR_CR:	LD	A,0DH
SEAR_CR2:	INC	HL
		CP	(HL)
		JR	NZ,SEAR_CR2
		;
		INC	HL
		LD	A,(HL)
		OR	A
		JR	Z,NXTBLOCK
		CP	01AH
		JP	Z,KNJINPLOP
		JR	SEARCHL2B
;
NXTBLOCK::	LD	A,(DICSEC)
		ADD	A,4
		LD	(DICSEC),A
		CP	32
		JP	NC,KNJINPLOP
		JR	NEXTREAD
		;
SARCHOK::	PUSH	HL
		CALL	AF54C
		LD	B,29
		LD	A,(CHGINLN)
		LD	C,A
		CALL	CSR0
		LD	HL,(BEGINPTR)
		LD	(BGNPTRBK),HL
		POP	HL
	  	LD	(BEGINPTR),HL
DSPLOOP::	LD	A,(HL)
		CP	'I'-'@'
		JR	Z,NXTON
		CP	'M'-'@'
		JR	Z,NXTOFF
		LD	B,A
		INC	HL
		LD	C,(HL)
		PUSH	HL
		CALL	MCONV
		LD	D,B
		LD	E,C
		CALL	DECORD
		LD	B,(HL)
		INC	HL
		LD	C,(HL)
		CALL	PATIN
		CALL	PATCHG
		LD	HL,PAT
		CALL	KKPRINT
		POP	HL
		INC	HL
		JR	DSPLOOP
;
NXTON:		LD	A,-1
		JR	WAITKEY
NXTOFF:		XOR	A
WAITKEY:	LD	(NXTFLG),A
		LD	(NXTPTR),HL
WAITKEYL:	CALL	GETRNG
		JR	Z,WAITKEYL

		CP	1BH
		JR	Z,NXTDSPEND
		CP	' '
		JR	Z,NXTDSP
		CP	'W'-'@'
		JR	Z,KIMARU
		CP	'0'
		JR	Z,KIMARU
		CP	'M'-'@'
		JR	NZ,WAITKEYL

KIMARU:		LD	HL,(BEGINPTR)
PICHI:		LD	A,(HL)
		CP	'I'-'@'
		JR	Z,WERT2
		CP	0DH
		JR	Z,WERT2
		PUSH	HL
		CALL	KPUTRNG
		POP	HL
		INC	HL
		JR	PICHI

NXTDSP:		LD	HL,DSPCNT
		INC	(HL)
		LD	HL,(NXTPTR)
		INC	HL
		LD	A,(NXTFLG)
		OR	A
		JP	NZ,SARCHOK
NXTDSPEND:	CALL	AF54C
		JP      KNJINPLOP

WERT2:		LD	A,(DSPCNT)	;if (DSPCNT==0) need not learning.
		OR	A
		JR	Z,WERT3
		LD	A,(0FFFCH)	;0FFFCH = LEARNING FLAG
		OR	A
		JR	Z,WERT3
;
;	LEARNING	ROUTINE
;
;PART I
		LD	HL,(BGNPTRBK)
		LD	DE,HENTBL
		CALL	BLLOOP
		LD	(KUGIRI),A
;
;PART II
		LD	HL,(BEGINPTR)
		LD	DE,(BGNPTRBK)
		CALL	BLLOOP
		EX	AF,AF'
		LD	A,(KUGIRI)
		LD	(DE),A
		EX	AF,AF'
		LD	(KUGIRI),A
;
;PART III
		LD	HL,HENTBL
		INC	DE
		CALL	BLLOOP
		LD	A,(KUGIRI)
		LD	(DE),A
;
;DICTIONARY WRITE
		LD	BC,(DICTRK)
		LD	A,DIC		;DIC=CDRIVE
		LD	HL,HSTBUF
		CALL	FDDWRITE
;
WERT3:		CALL	AF54C
		LD	A,(STRINGLEN)
		CP	19
		JP	NC,WERT
		SUB	19
		NEG
		LD	C,A
		LD	B,0
		LD	HL,(ZEROPTR)
		INC	HL
		LD	DE,KNJINPBUF
		LDIR
		LD	A,(STRINGLEN)
		INC	A
		INC	A
		CALL	CLRZERO
		CALL	AEF31
		JP	DICTIONARY2

BGNPTRBK:	DS	2
BEGINPTR:	DS	2
NXTPTR::	DS	2
NXTFLG::	DS	1
DICTRK:		DS	1
DICSEC:		DS	1
STRINGLEN:	DS	1
ZEROPTR:	DS	2
DSPCNT:		DS	1
KUGIRI:		DS	1

	ENDIF
;
;BLOCK CONVERT on CONDITION
BLLOOP:		LD	A,(HL)
		LD	(DE),A
		CP	32
		RET	C
		INC	B
		INC	HL
		INC	DE
		JR	BLLOOP

CSROFF:		LD	A,(REVNORM)
		AND	7
		LD	B,A
		LD	A,17H
		CALL	TRNC02
CSRON::		LD	A,(CY)
		LD	B,A
		LD	A,(CX)
		CP	79
		JR	NZ,CSRON1
		EX	AF,AF'
		LD	A,19
		CP	B		;CX==79 && CY==19
		RET	Z
		EX	AF,AF'
		INC	B
		XOR	A
CSRON1:		LD	L,0
		LD	H,B
		LD	DE,80
		CALL	MULHLDE		;HL=csr Y*80
		;
		LD	D,0
		LD	E,A
		ADD	HL,DE
		LD	(CSRPRM),HL
		LD	HL,CSRPRM
		LD	A,2BH
		LD	B,6
		JP	TRNC04

MULHLDE:	LD	B,8
MULLOP:		ADD	HL,HL
		JR	NC,COUNT
		ADD	HL,DE
COUNT:		DJNZ	MULLOP
		RET	


CSRPRM:		DS	2	;X+Y*80
		DB	0	;COLUM	X
		DB	19	;COLUM	Y
		DB	0	;LENGTH	COLUM
		DB	7	;LENGTH	DOT


;*********** KANJI LPRINT ********************

;	IN	Breg :CHRACTOR CODE

.PRINTX		/PRINTER	assemble/

KLPT:
	IF KANPTR			;KANJI PRINTER
		INCLUDE		FP80K.MAC
	ENDIF

	IF FP80				;EPSON FP-80
		INCLUDE		FP80.MAC
	ENDIF

	IF  RP80  			;GRAPHIC PRINTER
		INCLUDE		RP80.MAC
	ENDIF

	IF  DPX510
		INCLUDE		DPX510.MAC
	ENDIF

	IF GP550E			;SEIKOSHA GP550E
		INCLUDE		GP550E.MAC
	ENDIF

	IF  UP130K
		INCLUDE		UP130K.MAC
	ENDIF

	IF   MP130K
		INCLUDE		MP130K.MAC
	ENDIF

	IF   RITEMAN
		INCLUDE		RITEMAN.MAC
	ENDIF
	
.PRINTX		/INITIAL	assemble/

RHEAD		EQU	$
RTAIL		EQU	RHEAD+2

KHEAD		EQU	RTAIL+2
KTAIL		EQU	KHEAD+2

RNGBUF		EQU	KTAIL+2
KRNGBU		EQU	RNGBUF+40

CMDDT		EQU	KRNGBU+41

KEYSPBK		EQU	CMDDT+1

ESCPRMTOP	EQU	KEYSPBK+2

KCODEH		EQU	ESCPRMTOP+3
KCODEL		EQU	KCODEH+1

KNJCSRPTR	EQU	KCODEL+1
KNJINPBUF	EQU	KNJCSRPTR+2

CHNGBUFF	EQU	KNJINPBUF+21

BPAT		EQU	CHNGBUFF+21
PAT		EQU	BPAT+32

ROMADDR		EQU	PAT+40

HENKPTR		EQU	ROMADDR+2
DSPPTR		EQU	HENKPTR+2
DSPMAX		EQU	DSPPTR+1
DSPLYNUM	EQU	DSPMAX+2
HENTBL	 	EQU	DSPLYNUM+2
EOBIOS		EQU	HENTBL+492
;****	BOOT etc. *********

BOOT:		LD	A,10010100B	;SET I/O BYTE
		LD	(IOBYT),A
		XOR	A		;SET LOG IN DISK A:
		LD	(LOGDISK),A
		LD	SP,INITSP	;SET STACK
	
;******** INTIALIZE ROUTINE *********

INITIAL:	DI
		LD	HL,KEYINT	;SET INTRRUPT VECTOR
		LD	(INT87),HL
		LD	HL,FDINT
		LD	(INTB),HL
		LD	BC,INTPORT
		LD	A,17H
		OUT	(C),A
		LD	(INTBACK),A
KEYINIT:	XOR	A		;KEY INPUT INITALIZE
		LD	(KEYFLG),A
		LD	(PRMODE),A
		LD	(BLNKFLG),A
		LD	(0FFFFH),A
		LD	(KANJIMODE),A
		LD	(KINPMOD),A
		LD	(KNJONOFF),A
		LD	(KATAHIRA),A
		LD	(CHGINLN),A

	IF	KANPTR
		LD	HL,0FFE0H	;KANJI PRINTER INIT
		LD	(HL),4
		INC	HL
		LD	(HL),6
		INC	HL
		LD	(HL),12
		INC	HL
		LD	(HL),80
	ENDIF
	IF	RP80 OR FP80 OR DPX510 OR RITEMAN
		LD	HL,0FFE0H
		LD	(HL),8
		INC	HL
		LD	(HL),80
	ENDIF
	IF	GP550PC OR GP550FM
		LD	HL,0FFE0H
		LD	(HL),3
		INC	HL
		LD	(HL),3
	ENDIF
	IF	PCPR
		LD	HL,0FFE0H
		LD	(HL),4
		INC	HL
		LD	(HL),4
	ENDIF
	
DVRD:		LD	A,0FFH		;  SET DRIVE CODE
		LD	(LEARNMODE),A
		LD	HL,DVTBL
		LD	B,8
DVRD1:		LD	(HL),A
		INC	HL
		DJNZ	DVRD1
		LD	HL,DVTBL
		LD	E,2
DVRDLOP:	LD	BC,CPUSEL
		OUT	(C),E
		LD	A,4
		LD	BC,IOSEL
		OUT	(C),A
		IN	A,(C)
		CP	0FFH
		JR	Z,DVRD2
		LD	(HL),A
		LD	BC,4
		ADD	HL,BC
		JR	DVRD3
DVRD2:		LD	D,0
DVRD2L:		OUT	(C),D
		IN	A,(C)
		LD	(HL),A
		INC	HL
		INC	D
		LD	A,D
		CP	4
		JR	C,DVRD2L
DVRD3:		INC	E
		LD	A,E
		CP	4
		JR	C,DVRDLOP
FDTBLGEN: 	LD	HL,FDTBL	;FDD TABLE GENERATE
		LD	A,0FFH
		LD	B,32
FDTBLG1:	LD	(HL),A
		INC	HL
		DJNZ	FDTBLG1
		LD	HL,FDTBL
		LD	DE,DVTBL
		LD	B,8
FDTBLG2:	LD	A,(DE)
		CP	04
		JR	NZ,FDTBLG3
		LD	A,8
		SUB	B
		LD	C,A
		LD	(HL),A
		INC	HL
		XOR	A
		LD	(HL),A
		INC	HL
		LD	(HL),C	;FP-1022FD1*2 É Ä·Ê¤ NOP Æ ½Ù ºÄ
		INC	HL	;		|
		INC	A	;		|
		LD	(HL),A	;		|
		INC	HL	;ººÏÃÞ  	|
FDTBLG3:	INC	DE
		DJNZ	FDTBLG2
		;
		LD	HL,DVTBL
		LD	B,8
		LD	D,0
KSLTL:		LD	A,(HL)
		CP	8
		JR	Z,KSLTSEL
		INC	HL
		INC	D
		DJNZ	KSLTL
		LD	D,0FFH
KSLTSEL:	LD	A,D
		LD	(KSLOT),A

RAMINIT:	LD	DE,RAMTBL	;RAM PACK INITIALIZE
		LD	HL,DVTBL
		LD	B,8
		LD	C,0
		LD	A,1
		
RRLOP:		CP	(HL)
		CALL	Z,TBLSET
		INC	HL
		DJNZ	RRLOP
		
		LD	A,C
		LD	(RAMSUM),A
		OR	A
		JR	NZ,RRLOP2 
		LD	A,2		;IF NOT RAM CONNECTED
		LD	(MAXDRV),A
		JR	SETINTR
		
RRLOP2:		LD	L,A
		LD	H,0
		REPT	REPEATCNT
		ADD	HL,HL		;RAM * 16
		ENDM
		DEC	HL
		LD	(DSM),HL	;SET BLOCK SUM - 1
		;
SETINTR:	LD	A,0FFH		;SET INTERRUPT REG
		LD	I,A
		EI
		LD	HL,0300H	;SET OPENING CUSOR POINT
		LD	(CX),HL		;X=0,Y=3
;	LD	A,22		;WHITE OPTION START
;	LD	B,11H
;	CALL	TRNC02
		CALL	CSR		;SET OPNING CUSOR LOCATE
		CALL	ESCC
		CALL	CLRBUF		;KEY BUFFER CLEAR
		CALL	KCLRBUF		;KANJI KEY BUFFER CLEAR
		CALL	BEEPOFF
		JP	GOCPM

;	RAM TABLE SET ROUTINE
TBLSET:		PUSH	AF
		LD	A,8
		SUB	B
		LD	(DE),A
		LD	(RAMSUM),A
		INC	DE
		INC	C
		POP	AF
		RET

EOCODE::
		END
