00000000:	JP 00FAh

00000003:	JP 017Ch	; LINE INPUT,  DE=addr,  CY if SHIFT-BREAK,  A=3:SHIFT-BREAK, A=4:CTRL-D

00000006:	RST 38h		; LINLIM
00000007:	defb 28h	; WIDTH0
00000008:	JP 03D3h	; EI / RETI
0000000B:	JP 0483h	; MSX (aka DEPRT), print message in DE

0000000E:	NOP			; CSRXY
0000000F:	NOP
00000010:	JP 03D3h	; EI / RETI
00000013:	JP 04BCh	; OUTCH (PRINT char in A)
00000016:	NOP			; CURYST
00000017:	defb 18h	; CURYED
00000018:	JP 03D3h	; EI / RETI
0000001B:	JP 029Dh	; INKEY$(0),  A = FFh: INKEY$, 00h: INKEY$(0), 02h: INKEY$(2)

0000001E:	NOP			; CURXST
0000001F:	defb 27h	; CURXED
00000020:	JP 03D3h	; EI / RETI
00000023:	JP 0E07h	; subcpu

00000026:	RLCA		; COLORF	(default attribute value, followed by default char for 'blank')
00000027:	defb 20h 	; CLSCHR
00000028:	JP 03D3h	; EI / RETI

0000002B:	JP 0AAAh	; CGRAM (PCG).   D=?   E= I/O page, (15h..17h=CGRAM: BLUE, RED, GREEN)

0000002E:	NOP			; KEYDAT
0000002F:	RST 38h
00000030:	JP 03D3h	; EI / RETI

00000033:	JP 0ACAh	; CGRAM (?).   D=?   E= I/O page, (14h=CGROM, 15h..17h=CGRAM: BLUE, RED, GREEN)

00000036:	NOP			; BRKBUF
00000037:	NOP			; KEYFLG

00000038:	JP 03D3h	; EI / RETI
0000003B:	JP 0B75h	; save data block:  HL=FCB (header) or data position, BC=SIZE
0000003E:	JP 0B79h	; file ???  HL=FCB
00000041:	JP 0B9Ah	; load data block:  HL=FCB (header) or data position, BC=SIZE
00000044:	JP 0B9Eh	; file data block, HL=ADDR, BC=SIZE
00000047:	JP 0BAEh	; file data block ??, HL=ADDR, BC=SIZE
0000004A:	JP 0330h	; Z=1 -> SHIFT+BREAK, CTRL/C
0000004D:	JP 0988h	; Width,  A <=40 for 40 columns, otherwise 80

00000050:	NOP
00000051:	NOP			; ONKYBUF

		; INTTAB, interrupt table
00000052:	defw 0346h
00000054:	defw 03D3h	; EI / RETI
00000056:	defw 03D3h	; EI / RETI
00000058:	defw 03D3h	; EI / RETI
0000005A:	defw 03D3h	; EI / RETI
0000005C:	defw 03D3h	; EI / RETI
0000005E:	defw 03D3h	; EI / RETI
00000060:	defw 03D3h	; EI / RETI
00000062:	defw 03D3h	; EI / RETI
00000064:	defw 03D3h	; EI / RETI

00000066:	JP 00FAh

00000069:	LD H,E		; CONTTB (64 bytes)

0060                             00 00 00 00 20 20 20
0070  20 20 20 20 20 20 20 20-00 00 00 00 08 1B 07 BF
0080  00 0D 06 1E 07 DE 05 10-06 63 0E 63 0E E4 08 63
0090  0E 34 09 63 0E 63 0E 81-07 63 0E 3D 09 4A 09 63
00A0  0E 40 07 64 07 5F 07 3A-07


000000A9:	NOP		; SCRNT0 (26 bytes)
000000AA:	NOP
000000AB:	NOP
000000AC:	NOP
000000AD:	NOP
000000AE:	NOP
000000AF:	NOP
000000B0:	NOP
000000B1:	NOP
000000B2:	NOP
000000B3:	NOP
000000B4:	NOP
000000B5:	NOP
000000B6:	NOP
000000B7:	NOP
000000B8:	NOP
000000B9:	NOP
000000BA:	NOP
000000BB:	NOP
000000BC:	NOP
000000BD:	NOP
000000BE:	NOP
000000BF:	NOP
000000C0:	NOP
000000C1:	NOP
000000C2:	NOP
000000C3:	NOP
000000C4:	NOP
000000C5:	NOP
000000C6:	NOP
000000C7:	NOP
000000C8:	NOP
000000C9:	NOP
000000CA:	NOP
000000CB:	NOP
000000CC:	NOP
000000CD:	NOP
000000CE:	NOP
000000CF:	NOP
000000D0:	NOP
000000D1:	NOP
000000D2:	NOP
000000D3:	NOP
000000D4:	NOP
000000D5:	NOP
000000D6:	NOP
000000D7:	NOP
000000D8:	NOP
000000D9:	NOP
000000DA:	NOP
000000DB:	NOP
000000DC:	NOP

; INICRT   (CRTC table)
000000DD:	defb 37h, 28h, 2Dh, 34h, 1Fh, 02h, 19h, 1Ch, 00h, 07h, 60h, 07h

000000E9:	NOP			; INIADR
000000EA:	NOP

000000EB:	NOP			; INIADW
000000EC:	NOP

000000ED:	LD L,A
000000EE:	LD D,B
000000EF:	LD E,C

; $00f1 = current video port ?
000000F0:	JR C,-18h
000000F2:	INC HL
000000F3:	JR -18h
000000F5:	INC SP
000000F6:	defb AAh		; BPRIOF (I/O: 1000h)
000000F7:	defb CCh		; RPRIOF (I/O: 1100h)
000000F8:	defb F0h		; GPRIOF (I/O: 1200h)
000000F9:	defb 0		; TPRIOF (I/O: 1300h)

; START
000000FA:	DI
000000FB:	LD SP,0000h
000000FE:	LD BC,1A03h		; 8255 CRTC write, set mode
00000101:	LD A,82h		;
00000103:	OUT (C),A
00000105:	DEC BC			; 1A02h
00000106:	IN A,(C)		; input from port C
00000108:	LD A,70h
0000010A:	OUT (C),A		; 8255 CRTC write, port C
0000010C:	DEC BC			; 1A01h
0000010D:	IN A,(C)		; 8255 CRTC read, port B
0000010F:	CALL 09A1h
00000112:	CALL 0998h
00000115:	CALL 0A5Ah
00000118:	CALL 0B26h
0000011B:	IM 2
0000011D:	LD HL,0346h		; default interrupt entry (also in INTTAB)
00000120:	LD (0052h),HL
00000123:	CALL 012Dh		; set up interrupt vector, (0052h) = table ptr
00000126:	CALL 013Ch
00000129:	EI
0000012A:	JP 14A0h

; set up interrupt vector, (0052h) = table ptr
0000012D:	LD HL,0052h
00000130:	LD A,H
00000131:	LD I,A
; change interrupt vector, L = table address
00000133:	LD A,E4h	; interrupt vector set
00000135:	CALL 0DFEh	; send command to sub-cpu
00000138:	LD A,L		; 0x52 ?
00000139:	JP 0B54h	; Send command in A to subcpu (= 52E in IPL)

0000013C:	LD BC,1C00h ; PSG
0000013F:	LD A,07h
00000141:	OUT (C),A
00000143:	DEC B
00000144:	LD A,3Fh
00000146:	OUT (C),A
00000148:	INC B
00000149:	LD D,08h
0000014B:	LD E,00h
0000014D:	LD A,0Bh
0000014F:	OUT (C),D
00000151:	DEC B
00000152:	OUT (C),E
00000154:	INC D
00000155:	INC B
00000156:	CP D
00000157:	JR NZ,-0Ah
00000159:	RET

; INPUT, DE=ADDR
0000015A:	PUSH HL
0000015B:	LD HL,(000Eh)	; CSRXY: X,Y text coordinates
0000015E:	PUSH HL
0000015F:	PUSH DE
00000160:	CALL 0521h
00000163:	POP DE
00000164:	LD (HL),00h
00000166:	POP HL
00000167:	CALL 017Ch	; LINE INPUT,  DE=addr,  CY if SHIFT-BREAK,  A=3:SHIFT-BREAK, A=4:CTRL-D
0000016A:	JR C,+0Eh
0000016C:	LD A,(001Eh)		; CURXST
0000016F:	SUB L
00000170:	JR NC,+08h
00000172:	NEG
00000174:	LD L,A
00000175:	LD H,00h
00000177:	ADD HL,DE
00000178:	EX DE,HL
00000179:	OR A
0000017A:	POP HL
0000017B:	RET

	; LINE INPUT,  DE=addr,  CY if SHIFT-BREAK,  A=3:SHIFT-BREAK, A=4:CTRL-D
0000017C:	PUSH BC
0000017D:	PUSH HL
0000017E:	PUSH DE
0000017F:	LD A,(0EA5h)
00000182:	OR A
00000183:	JR Z,+07h
00000185:	XOR A
00000186:	LD (0EA6h),A	; POINT1
00000189:	LD (0EA7h),A	; POINT2
0000018C:	LD A,C3h
0000018E:	LD (0507h),A
00000191:	XOR A
00000192:	LD (0EA4h),A
00000195:	LD (0036h),A	; BRKBUF
00000198:	LD (0EA3h),A
0000019B:	CALL 02AAh		; FLGET ..INKEY$(1)
0000019E:	PUSH AF
0000019F:	LD A,(0EA3h)
000001A2:	XOR A
000001A3:	LD A,(0EA4h)
000001A6:	JR NZ,+2Ch
000001A8:	OR A
000001A9:	JR Z,+09h
000001AB:	POP AF
000001AC:	PUSH AF
000001AD:	CP 20h	; ' '
000001AF:	JR C,+2Eh
000001B1:	CALL 08E4h
000001B4:	POP AF
000001B5:	CP 1Bh
000001B7:	JR Z,-21h
000001B9:	CP 0Dh
000001BB:	JP Z,0220h
000001BE:	CP 0Ah
000001C0:	JP Z,021Dh
000001C3:	CP 03h
000001C5:	JR Z,+29h
000001C7:	CP 04h
000001C9:	JR Z,+25h
000001CB:	CP 01h
000001CD:	JR Z,+1Ah
000001CF:	CALL 04BCh		; OUTCH (PRINT char in A)
000001D2:	JR -39h

000001D4:	OR A
000001D5:	CALL NZ,08E4h
000001D8:	POP AF
000001D9:	CALL 04DBh
000001DC:	XOR A
000001DD:	JR -4Ah
000001DF:	CP 01h
000001E1:	JR Z,-2Fh
000001E3:	XOR A
000001E4:	LD (0EA4h),A
000001E7:	JR -35h
000001E9:	LD HL,0EA4h
000001EC:	XOR (HL)
000001ED:	LD (HL),A
000001EE:	JR -55h
000001F0:	SCF
000001F1:	PUSH AF
000001F2:	LD A,11h
000001F4:	LD (0507h),A
000001F7:	CALL 04A7h		; LETNL (PRINT CR)
000001FA:	POP AF
;
000001FB:	POP DE
000001FC:	POP HL
000001FD:	POP BC
000001FE:	RET

000001FF:	CALL 0521h
00000202:	LD A,(HL)
00000203:	OR A
00000204:	RET Z
00000205:	DEC HL
00000206:	DEC E
00000207:	LD A,(0016h)		; CURYST
0000020A:	CP E
0000020B:	JR C,-0Bh
0000020D:	RET

0000020E:	CALL 0521h

00000211:	INC E
00000212:	INC HL
00000213:	LD A,(HL)
00000214:	OR A
00000215:	RET Z
00000216:	LD A,(0017h)		; CURYED
00000219:	CP E
0000021A:	JR NC,-0Bh
0000021C:	RET

0000021D:	CALL 08C8h
00000220:	LD HL,(000Eh)	; CSRXY: X,Y text coordinates
00000223:	CALL 01FFh
00000226:	LD D,E
00000227:	CALL 0211h
0000022A:	LD A,(001Eh)		; CURXST
0000022D:	LD L,A
0000022E:	LD A,E
0000022F:	SUB D
00000230:	LD E,A
00000231:	LD H,D
00000232:	LD D,L
00000233:	PUSH DE
00000234:	CALL 0559h
00000237:	LD D,30h
00000239:	ADD HL,DE
0000023A:	LD B,H
0000023B:	LD C,L
0000023C:	POP DE
0000023D:	LD A,(001Fh)		; CURXED
00000240:	SUB D
00000241:	INC A
00000242:	LD D,A
00000243:	POP HL
00000244:	PUSH HL
00000245:	EX AF,AF'
00000246:	PUSH AF
00000247:	LD A,(0006h)		; LINLIM
0000024A:	EX AF,AF'
0000024B:	PUSH DE
0000024C:	PUSH BC
0000024D:	IN A,(C)
0000024F:	INC BC
00000250:	LD (HL),A
00000251:	INC HL
00000252:	EX AF,AF'
00000253:	DEC A
00000254:	JR Z,+15h
00000256:	EX AF,AF'
00000257:	DEC D
00000258:	JR NZ,-0Dh
0000025A:	POP BC
0000025B:	PUSH HL
0000025C:	LD HL,(0007h)	; WIDTH0
0000025F:	LD H,00h
00000261:	ADD HL,BC
00000262:	LD C,L
00000263:	LD B,H
00000264:	POP HL
00000265:	POP DE
00000266:	DEC E
00000267:	JR NZ,-1Eh
00000269:	PUSH DE
0000026A:	PUSH BC
0000026B:	POP BC
0000026C:	POP DE
0000026D:	POP AF
0000026E:	EX AF,AF'
0000026F:	LD (HL),00h
00000271:	POP DE
00000272:	PUSH DE
00000273:	PUSH HL
00000274:	OR A
00000275:	SBC HL,DE
00000277:	LD B,L
00000278:	POP HL
00000279:	LD A,(0027h)	; CLSCHR
0000027C:	LD D,A
0000027D:	JP Z,01F1h
00000280:	DEC HL
00000281:	LD A,(HL)
00000282:	OR A
00000283:	JR Z,+05h
00000285:	CP D
00000286:	JR NZ,+09h
00000288:	LD (HL),00h
0000028A:	DEC HL
0000028B:	DJNZ -0Ch
0000028D:	OR A
0000028E:	JP 01F1h

00000291:	LD A,(HL)
00000292:	OR A
00000293:	JR NZ,+01h
00000295:	LD (HL),D
00000296:	DEC HL
00000297:	DJNZ -08h
00000299:	OR A
0000029A:	JP 01F1h

; INKEY$(0),  A = FFh: INKEY$, 00h: INKEY$(0), 02h: INKEY$(2)
0000029D:	INC A
0000029E:	JR Z,+6Ch
000002A0:	DEC A
000002A1:	JR Z,+7Ah
000002A3:	DEC A
000002A4:	JR Z,+04h

; INKEY$(2)
000002A6:	LD A,(002Fh)
000002A9:	RET

; FLGET, INKEY$(1)
000002AA:	PUSH BC
000002AB:	PUSH HL
000002AC:	PUSH DE
000002AD:	CALL 0556h		; Compute text address basing on CSRXY
000002B0:	LD D,20h
000002B2:	ADD HL,DE
000002B3:	LD B,H
000002B4:	LD C,L
000002B5:	IN A,(C)
000002B7:	LD D,A
000002B8:	AND EFh
000002BA:	BIT 7,A
000002BC:	JR NZ,+02h
000002BE:	AND CFh
000002C0:	XOR 08h
000002C2:	OUT (C),A
000002C4:	SET 4,B
000002C6:	IN E,(C)
000002C8:	PUSH DE
000002C9:	LD HL,0500h		; 1280
000002CC:	JR +0Ah
000002CE:	RES 4,B
000002D0:	IN A,(C)
000002D2:	OR 10h
000002D4:	OUT (C),A
000002D6:	SET 4,B
000002D8:	EI
000002D9:	LD A,00h
000002DB:	OR A
000002DC:	JR Z,+10h
000002DE:	OUT (C),A
000002E0:	RES 4,B
000002E2:	IN A,(C)
000002E4:	AND 07h
000002E6:	OUT (C),A
000002E8:	SET 4,B
000002EA:	XOR A
000002EB:	LD (02DAh),A
000002EE:	LD A,(0EA6h)	; POINT1
000002F1:	LD E,A
000002F2:	LD A,(0EA7h)	; POINT2
000002F5:	CP E
000002F6:	JR NZ,+07h
000002F8:	DEC HL
000002F9:	LD A,H
000002FA:	OR L
000002FB:	JR NZ,-25h
000002FD:	JR -31h

000002FF:	CALL 0321h		; read fn key text map
00000302:	POP DE
00000303:	OUT (C),E
00000305:	RES 4,B
00000307:	OUT (C),D
00000309:	JP 01FBh		; POP DE, HL, BC and RET

; INKEY$
0000030C:	PUSH HL
0000030D:	PUSH DE
0000030E:	EI
0000030F:	LD HL,(0EA6h)	; POINT1
00000312:	LD A,H
00000313:	SUB L
00000314:	JR Z,+04h
00000316:	LD A,H
00000317:	CALL 0321h		; read fn key text map
0000031A:	POP DE
0000031B:	POP HL
0000031C:	RET

0000031D:	LD A,(002Eh)	;	KEYDAT
00000320:	RET

; read fn key text map
00000321:	INC A
00000322:	AND 3Fh
00000324:	LD (0EA7h),A	; POINT2
00000327:	LD E,A
00000328:	LD D,00h
0000032A:	LD HL,0EA8h		; fn key text map
0000032D:	ADD HL,DE
0000032E:	LD A,(HL)
0000032F:	RET

; Z=1 -> SHIFT+BREAK, CTRL/C
00000330:	LD A,1Ah
00000332:	INA (01h)
00000334:	AND 01h
00000336:	RET NZ
00000337:	LD A,E6h		; read keyboard
00000339:	CALL 0DFEh		; send command to sub-cpu
0000033C:	CALL 0B49h		; (get from subcpu)-> get ctrl keys
0000033F:	CALL 0B49h		; (get from subcpu)-> get ASCII code
00000342:	EI
00000343:	CP 03h	; CTRL/C ?
00000345:	RET

; default interrupt entry (also in INTTAB)
00000346:	PUSH AF
00000347:	PUSH BC
00000348:	PUSH DE
00000349:	PUSH HL
0000034A:	XOR A
0000034B:	LD (02DAh),A
0000034E:	CALL 0B49h		; (get from subcpu)-> 
00000351:	LD D,A
00000352:	CALL 0B49h		; (get from subcpu)-> 
00000355:	LD E,A
00000356:	CP 7Fh
00000358:	JR NZ,+07h
0000035A:	LD A,D
0000035B:	AND 10h
0000035D:	JR Z,+02h
0000035F:	LD E,5Fh
00000361:	LD (002Eh),DE	;	KEYDAT
00000365:	LD A,01h		; 0366h= REPTF1 (0=repeat off)
00000367:	OR A
00000368:	JR NZ,+05h
0000036A:	LD A,D
0000036B:	AND 20h	; ' '
0000036D:	JR Z,+05h
0000036F:	LD A,E
00000370:	BIT 6,D
00000372:	JR Z,+03h
00000374:	OR A
00000375:	JR Z,+55h
00000377:	LD BC,0EA8h
0000037A:	CP 1Ch
0000037C:	JR C,+58h
0000037E:	LD A,D
0000037F:	AND 80h
00000381:	JR NZ,+06h
00000383:	LD A,E
00000384:	CP C0h
00000386:	JP NC,03F7h
00000389:	LD A,D
0000038A:	CPL
0000038B:	AND 91h
0000038D:	JR Z,+2Ah
0000038F:	CP 01h
00000391:	JR Z,+67h
00000393:	CP 81h
00000395:	JP Z,0415h
00000398:	AND 11h
0000039A:	JR Z,+0Ah
0000039C:	CP 10h
0000039E:	JR Z,+19h
000003A0:	LD A,E
000003A1:	LD (02DAh),A
000003A4:	JR +51h
000003A6:	LD A,E
000003A7:	CP 7Bh
000003A9:	JR NC,+4Ch
000003AB:	CP 71h
000003AD:	JP NC,0449h
000003B0:	CP 10h
000003B2:	JR C,+05h
000003B4:	LD A,D
000003B5:	AND 02h
000003B7:	JR Z,+3Eh
000003B9:	CALL 03E3h
000003BC:	JR C,+39h
000003BE:	LD A,(0E90h)		; CLICKF
000003C1:	OR A
000003C2:	JR NZ,+08h
000003C4:	LD BC,0100h		; short beep
000003C7:	CALL 07FAh
000003CA:	LD A,FFh
000003CC:	LD (0037h),A	; KEYFLG
000003CF:	POP HL
000003D0:	POP DE
000003D1:	POP BC
000003D2:	POP AF

000003D3:	EI
000003D4:	RETI

000003D6:	CP 03h
000003D8:	JR Z,+04h
000003DA:	CP 13h
000003DC:	JR NZ,-25h
000003DE:	LD (0036h),A	; BRKBUF
000003E1:	JR -2Ah
000003E3:	LD HL,(0EA6h)	; POINT1
000003E6:	INC L
000003E7:	LD A,L
000003E8:	AND 3Fh
000003EA:	CP H
000003EB:	SCF
000003EC:	RET Z
000003ED:	LD (0EA6h),A	; POINT1
000003F0:	LD L,A
000003F1:	LD H,00h
000003F3:	ADD HL,BC
000003F4:	LD (HL),E
000003F5:	OR A
000003F6:	RET

000003F7:	XOR A
000003F8:	JR -2Eh
000003FA:	LD A,E
000003FB:	SUB 30h
000003FD:	JR C,-29h
000003FF:	CP 08h
00000401:	JR NC,-0Ch
00000403:	LD HL,00F6h		; BPRIOF (I/O: 1000h)
00000406:	LD B,03h
00000408:	RR (HL)
0000040A:	RRCA
0000040B:	RL (HL)
0000040D:	INC HL
0000040E:	DJNZ -08h
00000410:	CALL 0A5Ah
00000413:	JR -1Eh
00000415:	LD A,D
00000416:	LD BC,0026h
00000419:	AND 20h
0000041B:	LD A,E
0000041C:	JR Z,+0Ch

0000041E:	CP 2Dh	; '-'
00000420:	JR Z,+18h
00000422:	CP 2Ah	; '*'
00000424:	JR Z,+19h
00000426:	CP 2Fh	; '/'
00000428:	JR Z,+1Ah
0000042A:	SUB 30h	; -'0'
0000042C:	JR C,-37h
0000042E:	CP 08h
00000430:	JR NC,-3Bh
00000432:	LD E,A
00000433:	LD A,(BC)
00000434:	AND F8h			; Token for '-'
00000436:	OR E
00000437:	LD (BC),A
00000438:	JR -43h
0000043A:	LD A,(BC)
0000043B:	XOR 08h
0000043D:	JR -08h
0000043F:	LD A,(BC)
00000440:	XOR 10h
00000442:	JR -0Dh
00000444:	LD A,(BC)
00000445:	XOR 20h
00000447:	JR -12h
00000449:	SUB 71h
0000044B:	LD L,A
0000044C:	LD A,D
0000044D:	AND 20h
0000044F:	JR Z,-5Ah
00000451:	LD H,00h
00000453:	LD DE,0EE8h		; INTFLG table
00000456:	EX DE,HL
00000457:	ADD HL,DE
00000458:	EX DE,HL
00000459:	LD A,(DE)
0000045A:	BIT 7,A
0000045C:	JR Z,+08h
0000045E:	OR 10h
00000460:	LD (DE),A
00000461:	LD (0051h),A	; ONKYBUF
00000464:	JR -6Fh
00000466:	ADD HL,HL
00000467:	ADD HL,HL
00000468:	ADD HL,HL
00000469:	ADD HL,HL
0000046A:	LD DE,0F42h		; FUNBUF, function key definitions
0000046D:	ADD HL,DE
0000046E:	LD D,(HL)
0000046F:	LD A,D
00000470:	OR A
00000471:	JR Z,-7Ch
00000473:	INC HL
00000474:	LD E,(HL)
00000475:	PUSH HL
00000476:	CALL 03E3h
00000479:	POP HL
0000047A:	JP C,03F7h
0000047D:	DEC D
0000047E:	JR NZ,-0Dh
00000480:	JP 03BEh

00000483:	PUSH DE
00000484:	LD A,(DE)
00000485:	OR A
00000486:	JR Z,+06h
00000488:	CALL 04BCh		; OUTCH (PRINT char in A)
0000048B:	INC DE
0000048C:	JR -0Ah
0000048E:	POP DE
0000048F:	RET

00000490:	PUSH HL
00000491:	LD HL,(000Eh)	; CSRXY: X,Y text coordinates
00000494:	LD A,(001Eh)		; CURXST
00000497:	CP L
00000498:	JR C,+07h
0000049A:	PUSH DE
0000049B:	CALL 0521h
0000049E:	LD A,(HL)
0000049F:	OR A
000004A0:	POP DE
000004A1:	POP HL
000004A2:	RET

;
000004A3:	CALL 0490h
000004A6:	RET Z

; LETNL (PRINT CR)
000004A7:	LD A,0Dh
000004A9:	JR +11h

;
000004AB:	CALL 04BAh		; OUTSP: print ' '
000004AE:	LD A,(000Eh)	; CSRXY: X,Y text coordinates
000004B1:	SUB 0Ah
000004B3:	JR NC,-04h
000004B5:	ADD 0Ah
000004B7:	RET Z
000004B8:	JR -0Fh

; OUTSP: print ' '   (aka SPPRT)
000004BA:	LD A,20h
; OUTCH (PRINT char in A)
000004BC:	PUSH AF
000004BD:	PUSH BC
000004BE:	PUSH DE
000004BF:	PUSH HL
000004C0:	CALL 04D6h
000004C3:	POP HL
000004C4:	POP DE
000004C5:	POP BC
000004C6:	POP AF
000004C7:	RET

;
000004C8:	PUSH AF
000004C9:	PUSH BC
000004CA:	PUSH DE
000004CB:	PUSH HL
000004CC:	LD D,A
000004CD:	LD A,(0026h)	; COLORF
000004D0:	LD E,A
000004D1:	CALL 04E2h
000004D4:	JR -13h

000004D6:	CP 20h	; ' '
000004D8:	JP C,0577h
000004DB:	LD D,A
000004DC:	LD A,(0026h)	; COLORF
000004DF:	AND 3Fh
000004E1:	LD E,A

000004E2:	LD HL,(000Eh)	; CSRXY: X,Y text coordinates
000004E5:	PUSH HL
000004E6:	PUSH DE
000004E7:	CALL 0559h
000004EA:	LD D,20h
000004EC:	ADD HL,DE
000004ED:	POP DE
000004EE:	LD C,L
000004EF:	LD B,H
000004F0:	LD A,(0026h)	; COLORF
000004F3:	OUT (C),E
000004F5:	SET 4,B
000004F7:	OUT (C),D
000004F9:	POP HL
000004FA:	INC L
000004FB:	LD A,(001Fh)		; CURXED
000004FE:	CP L
000004FF:	JP NC,075Bh
00000502:	LD A,(001Eh)		; CURXST
00000505:	LD L,A
00000506:	INC H
00000507:	LD DE,0529h
0000050A:	PUSH HL
0000050B:	CALL 0521h
0000050E:	LD (HL),01h
00000510:	POP HL
00000511:	LD A,(0017h)		; CURYED
00000514:	CP H
00000515:	JP NC,075Bh
00000518:	LD H,A
00000519:	PUSH HL
0000051A:	CALL 069Bh
0000051D:	POP HL
0000051E:	JP 075Bh

00000521:	LD E,H
00000522:	LD D,00h
00000524:	LD HL,00A9h			; SCRNT0
00000527:	ADD HL,DE
00000528:	RET

00000529:	PUSH HL
0000052A:	CALL 0521h
0000052D:	LD A,(HL)
0000052E:	POP HL
0000052F:	OR A
00000530:	JP NZ,075Bh
00000533:	DEC H
00000534:	CALL 0584h
00000537:	JR C,+06h
00000539:	INC H
0000053A:	PUSH HL
0000053B:	POP HL
0000053C:	JP 075Bh

0000053F:	LD A,(0017h)		; CURYED
00000542:	LD H,A
00000543:	LD A,(001Fh)		; CURXED
00000546:	LD L,A
00000547:	JP 075Bh

; HL=VRAM address for current text position
0000054A:	LD HL,(000Eh)	; CSRXY: X,Y text coordinates

; Entry: H,L = current X,Y position.  Exit: HL=VRAM
0000054D:	PUSH DE
0000054E:	CALL 0559h
00000551:	LD D,30h
00000553:	ADD HL,DE
00000554:	POP DE
00000555:	RET

; Compute text address basing on CSRXY
00000556:	LD HL,(000Eh)	; CSRXY: X,Y text coordinates
00000559:	LD E,L
0000055A:	LD L,H
0000055B:	LD H,00h
0000055D:	LD C,L
0000055E:	LD B,H
0000055F:	ADD HL,HL
00000560:	ADD HL,HL
00000561:	ADD HL,BC
00000562:	ADD HL,HL
00000563:	ADD HL,HL
00000564:	ADD HL,HL
00000565:	LD A,(0007h)	; WIDTH0
00000568:	CP 28h			; 40?
0000056A:	JR Z,+01h
0000056C:	ADD HL,HL
0000056D:	LD BC,(00EBh)		; INIADW
00000571:	ADD HL,BC
00000572:	LD A,0Fh
00000574:	AND H
00000575:	LD H,A
00000576:	RET

00000577:	LD L,A
00000578:	LD H,00h
0000057A:	ADD HL,HL
0000057B:	LD BC,0069h		; CONTTB
0000057E:	ADD HL,BC
0000057F:	LD C,(HL)
00000580:	INC HL
00000581:	LD H,(HL)
00000582:	LD L,C
00000583:	JP (HL)

00000584:	PUSH DE
00000585:	PUSH HL
00000586:	CALL 01FFh
00000589:	LD A,(0016h)		; CURYST
0000058C:	CP E
0000058D:	JR C,+0Ch
0000058F:	CALL 0211h
00000592:	LD A,(0017h)		; CURYED
00000595:	CP E
00000596:	JR NC,+1Fh
00000598:	POP HL
00000599:	POP DE
0000059A:	RET

0000059B:	CALL 0211h
0000059E:	LD A,E
0000059F:	DEC A
000005A0:	LD HL,(000Eh)	; CSRXY: X,Y text coordinates
000005A3:	PUSH HL
000005A4:	LD (000Fh),A	; Y text coordinate
000005A7:	CALL 05DEh
000005AA:	DEC HL
000005AB:	LD (HL),01h
000005AD:	POP HL
000005AE:	DEC H
000005AF:	LD (000Eh),HL	; CSRXY: X,Y text coordinates
000005B2:	POP HL
000005B3:	DEC H
000005B4:	POP DE
000005B5:	OR A
000005B6:	RET

000005B7:	LD A,E
000005B8:	LD HL,(000Eh)	; CSRXY: X,Y text coordinates
000005BB:	PUSH HL
000005BC:	LD (000Fh),A	; Y text coordinate
000005BF:	CALL 0610h
000005C2:	LD (HL),01h
000005C4:	POP HL
000005C5:	LD (000Eh),HL	; CSRXY: X,Y text coordinates
000005C8:	POP HL
000005C9:	POP DE
000005CA:	OR A
000005CB:	RET

000005CC:	LD H,A
000005CD:	LD A,(001Eh)		; CURXST
000005D0:	LD L,A
000005D1:	PUSH HL
000005D2:	CALL 0559h
000005D5:	LD D,20h
000005D7:	ADD HL,DE
000005D8:	POP DE
000005D9:	LD A,(001Fh)		; CURXED
000005DC:	SUB E
000005DD:	RET

000005DE:	LD A,(0016h)		; CURYST
000005E1:	CALL 05CCh
000005E4:	RET M
000005E5:	INC A
000005E6:	LD E,A
000005E7:	LD A,(000Fh)		; Y text coordinate
000005EA:	SUB D
000005EB:	RET M
000005EC:	INC A
000005ED:	LD D,A
000005EE:	PUSH DE
000005EF:	CALL 064Dh
000005F2:	LD A,(0016h)		; CURYST
000005F5:	LD H,A
000005F6:	CALL 0521h
000005F9:	POP BC
000005FA:	LD (HL),00h
000005FC:	INC HL
000005FD:	DEC B
000005FE:	JR Z,+0Dh
00000600:	LD D,H
00000601:	LD E,L
00000602:	JR +04h
00000604:	INC DE
00000605:	LD A,(DE)
00000606:	LD (HL),A
00000607:	INC HL
00000608:	DJNZ -06h
0000060A:	LD (HL),00h
0000060C:	INC HL
0000060D:	LD (HL),00h
0000060F:	RET

00000610:	LD A,(0017h)		; CURYED
00000613:	CALL 05CCh
00000616:	RET M
00000617:	INC A
00000618:	LD E,A
00000619:	LD A,(000Fh)	; Y text coordinate
0000061C:	CPL
0000061D:	INC A
0000061E:	ADD D
0000061F:	RET M
00000620:	INC A
00000621:	LD D,A
00000622:	PUSH DE
00000623:	LD A,(0007h)	; WIDTH0
00000626:	CPL
00000627:	INC A
00000628:	LD C,A
00000629:	LD B,FFh
0000062B:	CALL 0653h
0000062E:	POP BC
0000062F:	LD A,(0017h)		; CURYED
00000632:	LD H,A
00000633:	INC H
00000634:	CALL 0521h
00000637:	LD (HL),00h
00000639:	DEC HL
0000063A:	LD D,H
0000063B:	LD E,L
0000063C:	DEC B
0000063D:	JR Z,+0Bh
0000063F:	JR +04h
00000641:	DEC DE
00000642:	LD A,(DE)
00000643:	LD (HL),A
00000644:	DEC HL
00000645:	DJNZ -06h
00000647:	LD (HL),00h
00000649:	DEC HL
0000064A:	LD (HL),00h
0000064C:	RET

0000064D:	LD A,(0007h)	; WIDTH0
00000650:	LD C,A
00000651:	LD B,00h
00000653:	LD (0661h),BC
00000657:	EXX
00000658:	PUSH BC
00000659:	EXX
0000065A:	LD B,H
0000065B:	LD C,L
0000065C:	DEC D
0000065D:	JR Z,+27h
0000065F:	PUSH DE
00000660:	LD HL,0028h
00000663:	ADD HL,BC
00000664:	PUSH HL
00000665:	PUSH HL
00000666:	EXX
00000667:	POP BC
00000668:	EXX
00000669:	EXX
0000066A:	IN A,(C)
0000066C:	EXX
0000066D:	OUT (C),A
0000066F:	EXX
00000670:	SET 4,B
00000672:	IN A,(C)
00000674:	RES 4,B
00000676:	INC BC
00000677:	EXX
00000678:	SET 4,B
0000067A:	OUT (C),A
0000067C:	RES 4,B
0000067E:	INC BC
0000067F:	DEC E
00000680:	JR NZ,-19h
00000682:	POP HL
00000683:	POP DE
00000684:	JR -2Ch
00000686:	LD HL,(0026h)	; COLORF
00000689:	SET 6,L
0000068B:	OUT (C),L
0000068D:	SET 4,B
0000068F:	OUT (C),H
00000691:	RES 4,B
00000693:	INC BC
00000694:	DEC E
00000695:	JR NZ,-0Ch
00000697:	EXX
00000698:	POP BC
00000699:	EXX
0000069A:	RET

0000069B:	CALL 06CAh
0000069E:	CALL 064Dh
000006A1:	LD A,(0016h)		; CURYST
000006A4:	LD H,A
000006A5:	CALL 0521h
000006A8:	LD A,(0017h)		; CURYED
000006AB:	SUB E
000006AC:	LD B,A
000006AD:	LD (HL),00h
000006AF:	INC HL
000006B0:	OR A
000006B1:	JR Z,+09h
000006B3:	LD D,H
000006B4:	LD E,L
000006B5:	INC DE
000006B6:	LD A,(DE)
000006B7:	INC DE
000006B8:	LD (HL),A
000006B9:	INC HL
000006BA:	DJNZ -06h
000006BC:	LD (HL),00h
000006BE:	RET

000006BF:	LD A,(001Eh)		; CURXST
000006C2:	LD L,A
000006C3:	LD A,(0016h)		; CURYST
000006C6:	LD H,A
000006C7:	JP 075Bh

000006CA:	CALL 06BFh
000006CD:	CALL 0559h
000006D0:	LD D,20h
000006D2:	ADD HL,DE
000006D3:	LD A,(001Fh)		; CURXED
000006D6:	SUB E
000006D7:	INC A
000006D8:	LD E,A
000006D9:	LD A,(0016h)		; CURYST
000006DC:	LD D,A
000006DD:	LD A,(0017h)		; CURYED
000006E0:	SUB D
000006E1:	INC A
000006E2:	LD D,A
000006E3:	RET

000006E4:	CALL 06CAh
000006E7:	LD B,H
000006E8:	LD C,L
000006E9:	PUSH DE
000006EA:	PUSH BC
000006EB:	LD HL,(0026h)	; COLORF
000006EE:	SET 6,L
000006F0:	OUT (C),L
000006F2:	SET 4,B
000006F4:	OUT (C),H
000006F6:	RES 4,B
000006F8:	INC BC
000006F9:	DEC E
000006FA:	JR NZ,-0Ch
000006FC:	POP BC
000006FD:	LD HL,(0007h)	; WIDTH0
00000700:	LD H,00h
00000702:	ADD HL,BC
00000703:	POP DE
00000704:	DEC D
00000705:	JR NZ,-20h
00000707:	LD A,(0016h)		; CURYST
0000070A:	LD H,A
0000070B:	CALL 0521h
0000070E:	LD A,(0017h)		; CURYED
00000711:	SUB E
00000712:	ADD 02h
00000714:	LD B,A
00000715:	XOR A
00000716:	LD (HL),A
00000717:	INC HL
00000718:	DJNZ -04h
0000071A:	RET

0000071B:	CALL 08C8h
0000071E:	LD HL,(000Eh)	; CSRXY: X,Y text coordinates
00000721:	PUSH HL
00000722:	INC H
00000723:	CALL 0521h
00000726:	LD A,(0017h)		; CURYED
00000729:	LD D,A
0000072A:	LD A,(HL)
0000072B:	OR A
0000072C:	JR Z,+06h
0000072E:	INC HL
0000072F:	INC E
00000730:	LD A,D
00000731:	CP E
00000732:	JR NC,-0Ah
00000734:	DEC E
00000735:	POP HL
00000736:	LD H,E
00000737:	JP 074Ah

0000073A:	LD HL,(000Eh)	; CSRXY: X,Y text coordinates
0000073D:	JP 074Eh

00000740:	LD HL,(000Eh)	; CSRXY: X,Y text coordinates
00000743:	INC L
00000744:	LD A,(001Fh)		; CURXED
00000747:	CP L
00000748:	JR NC,+11h
0000074A:	LD A,(001Eh)		; CURXST
0000074D:	LD L,A
0000074E:	INC H
0000074F:	LD A,(0017h)		; CURYED
00000752:	CP H
00000753:	JR NC,+06h
00000755:	LD H,A
00000756:	PUSH HL
00000757:	CALL 069Bh
0000075A:	POP HL
0000075B:	LD (000Eh),HL	; CSRXY: X,Y text coordinates
0000075E:	RET

0000075F:	LD HL,(000Eh)	; CSRXY: X,Y text coordinates
00000762:	JR +0Dh
00000764:	LD HL,(000Eh)	; CSRXY: X,Y text coordinates
00000767:	LD A,(001Eh)		; CURXST
0000076A:	CP L
0000076B:	JR C,+0Fh
0000076D:	LD A,(001Fh)		; CURXED
00000770:	LD L,A
00000771:	LD A,(0016h)		; CURYST
00000774:	CP H
00000775:	JR C,+07h
00000777:	LD A,(0016h)		; CURYST
0000077A:	LD H,A
0000077B:	LD A,2Dh		; (+1) DEC L
0000077D:	LD A,25h		; (+1) DEC H
0000077F:	JR -26h
00000781:	LD HL,(000Eh)	; CSRXY: X,Y text coordinates
00000784:	CALL 0521h
00000787:	INC HL
00000788:	LD (HL),01h
0000078A:	RET

0000078B:	LD HL,0764h
0000078E:	LD (07CCh),HL
00000791:	LD A,(0016h)		; CURYST
00000794:	LD B,A
00000795:	LD A,(001Eh)		; CURXST
00000798:	LD C,A
00000799:	CALL 07C3h
0000079C:	RET Z
0000079D:	JR C,-06h
0000079F:	CALL 07C3h
000007A2:	RET Z
000007A3:	JR NC,-06h
000007A5:	JP 0740h
000007A8:	LD HL,0740h
000007AB:	LD (07CCh),HL
000007AE:	LD A,(0017h)		; CURYED
000007B1:	LD B,A
000007B2:	LD A,(001Fh)		; CURXED
000007B5:	LD C,A
000007B6:	CALL 07C3h
000007B9:	RET Z
000007BA:	JR NC,-06h
000007BC:	CALL 07C3h
000007BF:	RET Z
000007C0:	JR C,-06h
000007C2:	RET

000007C3:	LD HL,(000Eh)	; CSRXY: X,Y text coordinates
000007C6:	OR A
000007C7:	SBC HL,BC
000007C9:	RET Z
000007CA:	PUSH BC
000007CB:	CALL 0764h
000007CE:	CALL 054Ah		; HL=VRAM address for current text position
000007D1:	LD B,H
000007D2:	LD C,L
000007D3:	IN A,(C)
000007D5:	POP BC
000007D6:	CP 30h
000007D8:	JR C,+13h
000007DA:	CP 3Ah	; ':'
000007DC:	JR C,+0Ch
000007DE:	CP 80h
000007E0:	JR NC,+08h
000007E2:	AND 1Fh
000007E4:	JR Z,+07h
000007E6:	CP 1Bh
000007E8:	JR NC,+03h
000007EA:	OR FFh
000007EC:	RET

000007ED:	OR FFh
000007EF:	SCF
000007F0:	RET

000007F1:	CALL 08BBh
000007F4:	JP 0965h

; BEEP
000007F7:	LD BC,3000h

000007FA:	PUSH BC
000007FB:	DI
000007FC:	LD HL,0E99h
000007FF:	CALL 0E64h
00000802:	LD HL,0E91h
00000805:	CALL 0E77h
00000808:	POP BC
00000809:	CALL 0E8Ah
0000080C:	LD HL,0E99h
0000080F:	CALL 0E77h
00000812:	EI
00000813:	RET

00000814:	LD HL,(000Eh)	; CSRXY: X,Y text coordinates
00000817:	LD BC,(001Eh)		; CURXST
0000081B:	LD A,L
0000081C:	DEC L
0000081D:	INC C
0000081E:	CP C
0000081F:	JR NC,+0Ch
00000821:	PUSH HL
00000822:	CALL 0521h
00000825:	LD A,(HL)
00000826:	POP HL
00000827:	INC L
00000828:	OR A
00000829:	JR Z,+3Dh
0000082B:	LD L,B
0000082C:	DEC H
0000082D:	LD DE,(000Eh)	; CSRXY: X,Y text coordinates
00000831:	LD (000Eh),HL	; CSRXY: X,Y text coordinates
00000834:	EX DE,HL
00000835:	LD A,(001Eh)		; CURXST
00000838:	CP L
00000839:	JR C,+26h
0000083B:	PUSH HL
0000083C:	CALL 0521h
0000083F:	LD A,(HL)
00000840:	POP HL
00000841:	OR A
00000842:	JR Z,+0Fh
00000844:	CALL 0876h
00000847:	PUSH HL
00000848:	LD A,(001Fh)		; CURXED
0000084B:	LD L,A
0000084C:	DEC H
0000084D:	CALL 088Ch
00000850:	POP HL
00000851:	JR +15h
00000853:	LD A,(001Fh)		; CURXED
00000856:	LD L,A
00000857:	DEC H
00000858:	LD DE,(0026h)	; COLORF
0000085C:	SET 6,E
0000085E:	JP 088Ch

00000861:	CALL 0876h
00000864:	DEC BC
00000865:	CALL 0889h
00000868:	INC L
00000869:	LD A,(001Fh)		; CURXED
0000086C:	CP L
0000086D:	JR NC,-0Eh
0000086F:	LD A,(001Eh)		; CURXST
00000872:	LD L,A
00000873:	INC H
00000874:	JR -3Bh
00000876:	PUSH HL
00000877:	CALL 0559h
0000087A:	LD D,20h
0000087C:	ADD HL,DE
0000087D:	LD B,H
0000087E:	LD C,L
0000087F:	IN E,(C)
00000881:	SET 4,B
00000883:	IN D,(C)
00000885:	RES 4,B
00000887:	POP HL
00000888:	RET

00000889:	PUSH HL
0000088A:	JR +0Bh
0000088C:	PUSH HL
0000088D:	PUSH DE
0000088E:	CALL 0559h
00000891:	LD D,20h
00000893:	ADD HL,DE
00000894:	POP DE
00000895:	LD B,H
00000896:	LD C,L
00000897:	OUT (C),E
00000899:	SET 4,B
0000089B:	OUT (C),D
0000089D:	RES 4,B
0000089F:	POP HL
000008A0:	RET

000008A1:	LD HL,(000Eh)	; CSRXY: X,Y text coordinates
000008A4:	LD A,(001Fh)		; CURXED
000008A7:	SUB L
000008A8:	INC A
000008A9:	LD B,A
000008AA:	PUSH BC
000008AB:	CALL 0740h
000008AE:	LD H,00h
000008B0:	LD BC,0EF2h		; TABBUF
000008B3:	ADD HL,BC
000008B4:	LD A,(HL)
000008B5:	OR A
000008B6:	POP BC
000008B7:	RET NZ
000008B8:	DJNZ -10h
000008BA:	RET

000008BB:	LD HL,(000Eh)	; CSRXY: X,Y text coordinates
000008BE:	CALL 020Eh
000008C1:	DEC E
000008C2:	LD H,E
000008C3:	LD A,(001Fh)		; CURXED
000008C6:	LD L,A
000008C7:	RET

000008C8:	LD HL,(000Eh)	; CSRXY: X,Y text coordinates
000008CB:	LD A,(001Fh)		; CURXED
000008CE:	SUB L
000008CF:	LD L,A
000008D0:	RET C
000008D1:	INC L
000008D2:	PUSH HL
000008D3:	CALL 08E4h
000008D6:	POP HL
000008D7:	DEC L
000008D8:	JR NZ,-08h
000008DA:	LD HL,(000Eh)	; CSRXY: X,Y text coordinates
000008DD:	CALL 0521h
000008E0:	INC HL
000008E1:	LD (HL),00h
000008E3:	RET

000008E4:	CALL 08BBh
000008E7:	CALL 0876h
000008EA:	LD A,(0027h)	; CLSCHR
000008ED:	CP D
000008EE:	JR Z,+12h
000008F0:	XOR A
000008F1:	CP D
000008F2:	JR Z,+0Eh
000008F4:	CALL 0584h
000008F7:	RET C
000008F8:	PUSH HL
000008F9:	LD A,(001Eh)		; CURXST
000008FC:	LD L,A
000008FD:	INC H
000008FE:	CALL 088Ch
00000901:	POP HL
00000902:	LD BC,(001Eh)		; CURXST
00000906:	EX DE,HL
00000907:	LD HL,(000Eh)	; CSRXY: X,Y text coordinates
0000090A:	OR A
0000090B:	SBC HL,DE
0000090D:	EX DE,HL
0000090E:	JR Z,+1Bh
00000910:	LD A,C
00000911:	CP L
00000912:	JR NC,+0Ah
00000914:	DEC L
00000915:	CALL 0876h
00000918:	INC BC
00000919:	CALL 0889h
0000091C:	JR -1Ch
0000091E:	PUSH HL
0000091F:	LD L,B
00000920:	DEC H
00000921:	CALL 0876h
00000924:	EX HL,(SP)
00000925:	CALL 088Ch
00000928:	POP HL
00000929:	JR -29h
0000092B:	LD DE,(0026h)	; COLORF
0000092F:	SET 6,E
00000931:	JP 088Ch

00000934:	LD HL,(000Eh)	; CSRXY: X,Y text coordinates
00000937:	LD H,00h
00000939:	LD D,01h
0000093B:	JR +07h

0000093D:	LD HL,(000Eh)	; CSRXY: X,Y text coordinates
00000940:	LD H,00h
00000942:	LD D,00h
00000944:	LD BC,0EF2h		; TABBUF
00000947:	ADD HL,BC
00000948:	LD (HL),D
00000949:	RET

0000094A:	LD HL,(000Eh)	; CSRXY: X,Y text coordinates
0000094D:	CALL 0521h
00000950:	INC HL
00000951:	LD A,(0017h)		; CURYED
00000954:	SUB E
00000955:	RET M
00000956:	INC A
00000957:	LD B,A
00000958:	LD (HL),00h
0000095A:	INC HL
0000095B:	DJNZ -05h
0000095D:	LD A,(0017h)		; CURYED
00000960:	LD H,A
00000961:	LD A,(001Fh)		; CURXED
00000964:	LD L,A
00000965:	PUSH HL
00000966:	LD HL,(000Eh)	; CSRXY: X,Y text coordinates
00000969:	LD DE,(0026h)	; COLORF
0000096D:	SET 6,E
0000096F:	CALL 088Ch
00000972:	POP BC
00000973:	PUSH HL
00000974:	OR A
00000975:	SBC HL,BC
00000977:	POP HL
00000978:	RET Z
00000979:	PUSH BC
0000097A:	INC L
0000097B:	LD A,(001Fh)		; CURXED
0000097E:	CP L
0000097F:	JR NC,-12h
00000981:	LD A,(001Eh)		; CURXST
00000984:	LD L,A
00000985:	INC H
00000986:	JR -19h

; Width,  A <=40 for 40 columns, otherwise 80
00000988:	CP 29h			; 41
0000098A:	JR C,+0Ch		; Jump if <=40
; Width 80
0000098C:	LD H,0Ch
0000098E:	LD A,50h		; 80
00000990:	CALL 0A0Bh		; init display
00000993:	LD HL,00EDh
00000996:	JR +0Fh
; Width 40
00000998:	LD H,0Dh
0000099A:	LD A,28h		; 40
0000099C:	CALL 0A0Bh		; init display
0000099F:	JR +03h

000009A1:	LD DE,000Ch		; Set first 12 registers
000009A4:	LD HL,00DDh		; INICRT  (CRTC table, initially in 40 columns mode)
000009A7:	LD BC,1800h		; CRTC I/O address
000009AA:	CALL 09B3h

; Set display start address
000009AD:	LD HL,00E9h		; INIADR (CRTC regs 12 and 13, for display start address)
000009B0:	LD DE,0C02h
; CRTC register set loop, D=start reg, E=reg count
000009B3:	OUT (C),D
000009B5:	INC BC
000009B6:	LD A,(HL)
000009B7:	OUT (C),A
000009B9:	DEC BC
000009BA:	INC HL
000009BB:	INC D
000009BC:	DEC E
000009BD:	JR NZ,-0Ch
000009BF:	RET

; entry : A = 0/1
000009C0:	PUSH BC
000009C1:	PUSH HL
000009C2:	PUSH DE
000009C3:	CALL 09E8h
000009C6:	PUSH HL
000009C7:	LD A,H
000009C8:	LD H,L
000009C9:	LD L,A
000009CA:	LD (00E9h),HL		; ALTER INIADR (CRTC regs for display start address)
000009CD:	POP HL
000009CE:	JR Z,+03h
000009D0:	LD HL,03E8h
000009D3:	LD DE,23E8h
000009D6:	ADD HL,DE
000009D7:	LD (00F1h),HL
000009DA:	SET 4,H
000009DC:	LD (00F4h),HL
000009DF:	LD BC,1800h		; CRTC I/O address
000009E2:	CALL 09ADh		; Set display start address
000009E5:	JP 01FBh		; POP DE, HL, BC and RET

000009E8:	RLCA
000009E9:	RLCA
000009EA:	LD H,A
000009EB:	LD L,00h
000009ED:	LD A,(0007h)	; WIDTH0
000009F0:	CP 28h			; 40?
000009F2:	RET Z
000009F3:	LD H,L
000009F4:	RET

; entry : A = 0/1
000009F5:	PUSH HL
000009F6:	CALL 09E8h
000009F9:	LD (00EBh),HL		; INIADW
000009FC:	LD A,H
000009FD:	OR A
000009FE:	LD HL,00A9h			; SCRNT0
00000A01:	JR Z,+03h
00000A03:	LD HL,00C3h
00000A06:	LD (0525h),HL
00000A09:	POP HL
00000A0A:	RET

; init display
00000A0B:	PUSH HL
00000A0C:	LD (0007h),A	; WIDTH0
00000A0F:	LD HL,00A9h			; SCRNT0
00000A12:	LD B,34h
00000A14:	XOR A
00000A15:	LD (HL),A
00000A16:	INC HL
00000A17:	DJNZ -04h
00000A19:	CALL 0A6Bh		; cls and set color
00000A1C:	CALL 0A8Ah
00000A1F:	POP HL
00000A20:	LD A,H
00000A21:	LD BC,1A03h		; 8255 CRTC write, set mode
00000A24:	OUT (C),A
00000A26:	CP 0Dh
00000A28:	LD A,18h
00000A2A:	JR Z,+02h
00000A2C:	LD A,30h		; 48
00000A2E:	LD (00F3h),A
00000A31:	XOR A
00000A32:	LD (000Eh),A	; CSRXY: X,Y text coordinates
00000A35:	LD (000Fh),A	; Y text coordinate
00000A38:	CALL 0A3Fh		; init display
00000A3B:	LD DE,0004h
00000A3E:	RET

; init display
00000A3F:	LD A,(0007h)	; WIDTH0
00000A42:	DEC A
00000A43:	LD (001Fh),A		; CURXED
00000A46:	LD A,18h
00000A48:	LD (0017h),A		; CURYED
00000A4B:	XOR A
00000A4C:	LD (0016h),A		; CURYST
00000A4F:	LD (001Eh),A		; CURXST
00000A52:	XOR A
00000A53:	CALL 09F5h
00000A56:	XOR A
00000A57:	JP 09C0h

00000A5A:	LD BC,1000h
00000A5D:	LD D,04h
00000A5F:	LD HL,00F6h		; BPRIOF (I/O: 1000h)
00000A62:	LD A,(HL)
00000A63:	OUT (C),A
00000A65:	INC B
00000A66:	INC HL
00000A67:	DEC D
00000A68:	JR NZ,-08h
00000A6A:	RET

; Clear screen (basing on CLSCHR and COLORF)
00000A6B:	LD BC,2000h		; VIDEO MEMORY - ATTRIBUTES
00000A6E:	LD HL,0800h
00000A71:	LD A,(0026h)	; COLORF
00000A74:	CALL 0A80h
00000A77:	LD BC,3000h		; VIDEO MEMORY - TEXT
00000A7A:	LD HL,0800h
00000A7D:	LD A,(0027h)	; CLSCHR

; fill text/attributes memory region
00000A80:	LD D,A
00000A81:	OUT (C),D
00000A83:	INC BC
00000A84:	DEC HL
00000A85:	LD A,H
00000A86:	OR L
00000A87:	JR NZ,-08h
00000A89:	RET

00000A8A:	LD A,01h		; SCRMOD
00000A8C:	CP 02h
00000A8E:	RET Z
00000A8F:	DI
00000A90:	LD BC,1A03h		; 8255 CRTC write, set mode
00000A93:	LD A,0Bh
00000A95:	OUT (C),A
00000A97:	DEC A
00000A98:	OUT (C),A
00000A9A:	LD BC,4000h
00000A9D:	XOR A
00000A9E:	DEC BC
00000A9F:	OUT (C),A
00000AA1:	LD A,B
00000AA2:	OR C
00000AA3:	JR NZ,-08h
00000AA5:	DEC BC
00000AA6:	IN A,(C)
00000AA8:	EI
00000AA9:	RET

; CGRAM (PCG).   D=?   E= I/O page, (15h..17h=CGRAM: BLUE, RED, GREEN)
00000AAA:	PUSH BC
00000AAB:	EXX
00000AAC:	PUSH BC
00000AAD:	PUSH DE
00000AAE:	PUSH HL
00000AAF:	CALL 0AF0h
00000AB2:	IN A,(C)
00000AB4:	JP M,0AB2h
00000AB7:	EXX
00000AB8:	LD A,(HL)
00000AB9:	OUT (C),A
00000ABB:	INC HL
00000ABC:	INC BC
00000ABD:	NOP
00000ABE:	LD A,0Eh		; alter to 13h for non std X1 text mode ?
00000AC0:	DEC A
00000AC1:	JP NZ,0AC0h
00000AC4:	DEC E
00000AC5:	JP NZ,0AB8h
00000AC8:	JR +1Eh

; CGRAM (?).   D=?   E= I/O page, (14h=CGROM, 15h..17h=CGRAM: BLUE, RED, GREEN)
00000ACA:	PUSH BC
00000ACB:	EXX
00000ACC:	PUSH BC
00000ACD:	PUSH DE
00000ACE:	PUSH HL
00000ACF:	CALL 0AF0h
00000AD2:	IN A,(C)
00000AD4:	JP M,0AD2h
00000AD7:	EXX
00000AD8:	IN A,(C)
00000ADA:	LD (HL),A
00000ADB:	INC HL
00000ADC:	INC BC
00000ADD:	NOP
00000ADE:	LD A,0Eh
00000AE0:	DEC A
00000AE1:	JP NZ,0AE0h
00000AE4:	DEC E
00000AE5:	JP NZ,0AD8h
00000AE8:	EI
00000AE9:	EXX
00000AEA:	POP HL
00000AEB:	POP DE
00000AEC:	POP BC
00000AED:	EXX
00000AEE:	POP BC
00000AEF:	RET


00000AF0:	EXX
00000AF1:	LD BC,(00F1h)
00000AF5:	PUSH HL
00000AF6:	LD A,E
00000AF7:	CP 14h
00000AF9:	LD H,00h
00000AFB:	JR Z,+02h
00000AFD:	LD H,20h
00000AFF:	LD A,(00F3h)
00000B02:	OUT (C),H
00000B04:	INC BC
00000B05:	DEC A
00000B06:	JR NZ,-06h
00000B08:	LD A,(00F3h)
00000B0B:	LD BC,(00F4h)
00000B0F:	OUT (C),D
00000B11:	INC BC
00000B12:	DEC A
00000B13:	JR NZ,-06h
00000B15:	POP HL
00000B16:	LD B,E
00000B17:	LD C,00h
00000B19:	LD E,08h
00000B1B:	EXX
00000B1C:	LD BC,1A01h		; 8255 CRTC read, port B
00000B1F:	IN A,(C)
00000B21:	JP P,0B1Fh
00000B24:	DI
00000B25:	RET

00000B26:	LD DE,FF00h		; -256
00000B29:	LD BC,1A01h		; 8255 CRTC read, port B
00000B2C:	IN A,(C)
00000B2E:	AND 20h			; OBF ?   (received from SUBCPU?)
00000B30:	JR Z,+07h
00000B32:	DEC DE
00000B33:	LD A,D
00000B34:	OR E
00000B35:	JR NZ,-0Eh
00000B37:	JR +07h
00000B39:	LD BC,1900h
00000B3C:	IN A,(C)
00000B3E:	JR -1Ah
00000B40:	LD B,08h
00000B42:	XOR A			; 00
00000B43:	CALL 0B54h		; Send command in A to subcpu (= 52E in IPL)
00000B46:	DJNZ -06h
00000B48:	RET

; get data from subcpu
00000B49:	PUSH BC
00000B4A:	CALL 0B61h		; wait for "subcpu get"
00000B4D:	LD BC,1900h
00000B50:	IN A,(C)
00000B52:	POP BC
00000B53:	RET

; Send command in A to subcpu (= 52E in IPL)
00000B54:	PUSH BC
00000B55:	PUSH AF
00000B56:	CALL 0B6Bh		; wait for "subcpu set"
00000B59:	POP AF
00000B5A:	LD BC,1900h
00000B5D:	OUT (C),A
00000B5F:	POP BC
00000B60:	RET

; wait for "subcpu get"
00000B61:	LD BC,1A01h		; 8255 CRTC read, port B
00000B64:	IN A,(C)
00000B66:	AND 20h			; OBF ?   (received from SUBCPU?)
00000B68:	JR NZ,-06h
00000B6A:	RET

; wait for "subcpu set"
00000B6B:	LD BC,1A01h		; 8255 CRTC read, port B
00000B6E:	IN A,(C)
00000B70:	AND 40h			; IBF ?  (SUBCPU ready to receive?)
00000B72:	JR NZ,-06h
00000B74:	RET

	; file ?  HL=FCB
00000B75:	LD A,01h
00000B77:	JR +02h

	; file ???  HL=FCB
00000B79:	LD A,02h
00000B7B:	PUSH DE
00000B7C:	LD D,A
00000B7D:	DI
00000B7E:	CALL 0DC7h
00000B81:	JR C,+14h
00000B83:	BIT 0,D
00000B85:	CALL NZ,0D6Dh
00000B88:	CALL NC,0CDFh
00000B8B:	CALL NC,0BBDh
00000B8E:	JR C,+07h
00000B90:	LD A,D
00000B91:	CP 01h
00000B93:	CALL Z,0C7Ch
00000B96:	XOR A
00000B97:	EI
00000B98:	POP DE
00000B99:	RET

; load data block:  HL=FCB (header) or data position, BC=SIZE
00000B9A:	LD A,04h
00000B9C:	JR +02h
00000B9E:	LD A,08h
00000BA0:	PUSH DE
00000BA1:	LD D,A
00000BA2:	DI
00000BA3:	CALL 0DC7h
00000BA6:	CALL NC,0D20h
00000BA9:	CALL NC,0BF6h
00000BAC:	JR -20h

	; file data block ??, HL=ADDR, BC=SIZE
00000BAE:	PUSH DE
00000BAF:	LD D,08h
00000BB1:	DI
00000BB2:	CALL 0DC7h
00000BB5:	CALL NC,0D20h
00000BB8:	CALL NC,0C3Ah
00000BBB:	JR -2Fh

00000BBD:	PUSH BC
00000BBE:	PUSH HL
00000BBF:	CALL 0CD6h
00000BC2:	LD A,(HL)
00000BC3:	CALL 0C8Ah
00000BC6:	JR C,+17h
00000BC8:	INC HL
00000BC9:	DEC BC
00000BCA:	LD A,B
00000BCB:	OR C
00000BCC:	JR NZ,-0Ch
00000BCE:	LD HL,(0EA1h)
00000BD1:	LD A,H
00000BD2:	CALL 0C8Ah
00000BD5:	LD A,L
00000BD6:	CALL 0C8Ah
00000BD9:	CALL 0DA5h
00000BDC:	XOR A
00000BDD:	JR +14h
00000BDF:	LD A,E6h		; read keyboard
00000BE1:	CALL 0DFEh		; send command to sub-cpu
00000BE4:	CALL 0B49h		; get ctrl keys
00000BE7:	CALL 0B49h		; get ASCII code
00000BEA:	CP 03h
00000BEC:	LD A,01h
00000BEE:	JR Z,+02h
00000BF0:	LD A,05h
00000BF2:	SCF
00000BF3:	POP HL
00000BF4:	POP BC
00000BF5:	RET

00000BF6:	PUSH BC
00000BF7:	PUSH HL
00000BF8:	LD BC,1A01h		; 8255 CRTC read, port B
00000BFB:	CALL 0D5Ch
00000BFE:	JR C,-21h
00000C00:	CALL 0DBFh
00000C03:	IN A,(C)
00000C05:	AND 02h
00000C07:	JR Z,-11h
00000C09:	CALL 0CD6h
00000C0C:	POP HL
00000C0D:	POP BC
00000C0E:	PUSH BC
00000C0F:	PUSH HL
00000C10:	CALL 0CAAh
00000C13:	JR C,-36h
00000C15:	LD (HL),A
00000C16:	INC HL
00000C17:	DEC BC
00000C18:	LD A,B
00000C19:	OR C
00000C1A:	JR NZ,-0Ch
00000C1C:	LD HL,(0EA1h)
00000C1F:	CALL 0CAAh
00000C22:	JR C,-45h
00000C24:	LD C,A
00000C25:	CALL 0CAAh
00000C28:	JR C,-4Bh
00000C2A:	CP L
00000C2B:	JR NZ,+04h
00000C2D:	LD A,C
00000C2E:	CP H
00000C2F:	JR Z,-55h
00000C31:	LD A,01h		; STOP..
00000C33:	CALL 0DECh		; .. tape recorder
00000C36:	LD A,02h
00000C38:	JR -48h
00000C3A:	PUSH BC
00000C3B:	PUSH HL
00000C3C:	CALL 0CD6h
00000C3F:	LD BC,1A01h		; 8255 CRTC read, port B
00000C42:	CALL 0D5Ch
00000C45:	JP C,0BDFh
00000C48:	CALL 0DBFh
00000C4B:	IN A,(C)
00000C4D:	AND 02h			; Cassette data read
00000C4F:	JR Z,-0Fh
00000C51:	POP HL
00000C52:	POP BC
00000C53:	PUSH BC
00000C54:	PUSH HL
00000C55:	CALL 0CAAh
00000C58:	JP C,0BDFh
00000C5B:	CP (HL)
00000C5C:	JR NZ,-2Dh
00000C5E:	INC HL
00000C5F:	DEC BC
00000C60:	LD A,B
00000C61:	OR C
00000C62:	JR NZ,-0Fh
00000C64:	LD HL,(0EA1h)
00000C67:	CALL 0CAAh
00000C6A:	JP C,0BDFh
00000C6D:	CP H
00000C6E:	JR NZ,-3Fh
00000C70:	CALL 0CAAh
00000C73:	JP C,0BDFh
00000C76:	CP L
00000C77:	JR NZ,-48h
00000C79:	JP 0BDCh
00000C7C:	LD DE,0320h
00000C7F:	LD A,E6h
00000C81:	CALL 0C8Ah
00000C84:	DEC DE
00000C85:	LD A,D
00000C86:	OR E
00000C87:	JR NZ,-0Ah
00000C89:	RET

00000C8A:	PUSH BC
00000C8B:	PUSH HL
00000C8C:	LD HL,(0EA1h)
00000C8F:	LD B,08h
00000C91:	CALL 0DA5h
00000C94:	RLCA
00000C95:	CALL C,0DA4h
00000C98:	CALL NC,0D8Ah
00000C9B:	DJNZ -09h
00000C9D:	LD BC,1A01h		; 8255 CRTC read, port B
00000CA0:	IN A,(C)
00000CA2:	CPL
00000CA3:	RRCA			; BREAK bit
00000CA4:	LD (0EA1h),HL
00000CA7:	POP HL
00000CA8:	POP BC
00000CA9:	RET

00000CAA:	PUSH HL
00000CAB:	PUSH BC
00000CAC:	PUSH DE
00000CAD:	LD HL,(0EA1h)
00000CB0:	LD BC,1A01h		; 8255 CRTC read, port B
00000CB3:	LD DE,0800h
00000CB6:	CALL 0D5Ch
00000CB9:	JR C,+14h
00000CBB:	CALL 0DBFh
00000CBE:	IN A,(C)
00000CC0:	AND 02h			; Cassette data read
00000CC2:	JR Z,+02h
00000CC4:	INC HL
00000CC5:	SCF
00000CC6:	RL E
00000CC8:	DEC D
00000CC9:	JR NZ,-15h
00000CCB:	CALL 0D5Ch
00000CCE:	LD A,E
00000CCF:	LD (0EA1h),HL
00000CD2:	POP DE
00000CD3:	POP BC
00000CD4:	POP HL
00000CD5:	RET

00000CD6:	PUSH HL
00000CD7:	LD HL,0000h
00000CDA:	LD (0EA1h),HL
00000CDD:	POP HL
00000CDE:	RET

00000CDF:	PUSH BC
00000CE0:	PUSH HL
00000CE1:	LD BC,0BB8h
00000CE4:	LD HL,1414h
00000CE7:	BIT 1,D
00000CE9:	JR NZ,+04h
00000CEB:	LD BC,03E8h
00000CEE:	ADD HL,HL
00000CEF:	CALL 0DA5h
00000CF2:	CALL 0D15h
00000CF5:	DEC BC
00000CF6:	LD A,B
00000CF7:	OR C
00000CF8:	JR NZ,-0Bh
00000CFA:	CALL 0D8Ah
00000CFD:	CALL 0D15h
00000D00:	DEC H
00000D01:	JR NZ,-09h
00000D03:	CALL 0DA5h
00000D06:	CALL 0D15h
00000D09:	DEC L
00000D0A:	JR NZ,-09h
00000D0C:	CALL 0DA5h
00000D0F:	CALL 0D15h
00000D12:	POP HL
00000D13:	POP BC
00000D14:	RET

00000D15:	LD A,1Ah
00000D17:	INA (01h)
00000D19:	RRCA
00000D1A:	CCF
00000D1B:	RET NC
00000D1C:	POP HL
00000D1D:	JP 0BDFh

00000D20:	PUSH BC
00000D21:	PUSH HL
00000D22:	LD BC,1A01h		; 8255 CRTC read, port B
00000D25:	LD L,14h
00000D27:	BIT 3,D
00000D29:	JR NZ,+02h
00000D2B:	RLC L
00000D2D:	LD H,L
00000D2E:	CALL 0D5Ch
00000D31:	JP C,0BDFh
00000D34:	CALL 0DBFh
00000D37:	IN A,(C)
00000D39:	AND 02h			; Cassette data read
00000D3B:	JR NZ,-10h
00000D3D:	DEC H
00000D3E:	JR NZ,-12h
00000D40:	LD H,L
00000D41:	CALL 0D5Ch
00000D44:	JP C,0BDFh
00000D47:	CALL 0DBFh
00000D4A:	IN A,(C)
00000D4C:	AND 02h
00000D4E:	JR Z,-23h
00000D50:	DEC H
00000D51:	JR NZ,-12h
00000D53:	CALL 0D5Ch
00000D56:	JP C,0BDFh
00000D59:	POP HL
00000D5A:	POP BC
00000D5B:	RET

00000D5C:	IN A,(C)
00000D5E:	CPL
00000D5F:	RRCA	; Check BREAK
00000D60:	RET C
00000D61:	RRCA
00000D62:	JR NC,-08h	;
00000D64:	IN A,(C)
00000D66:	CPL
00000D67:	RRCA
00000D68:	RET C
00000D69:	RRCA
00000D6A:	JR C,-08h
00000D6C:	RET

00000D6D:	PUSH BC
00000D6E:	LD BC,1F40h
00000D71:	LD A,1Ah
00000D73:	INA (01h)
00000D75:	RRCA
00000D76:	JR NC,+0Eh
00000D78:	LD A,00h
00000D7A:	LD A,F6h
00000D7C:	DEC A
00000D7D:	JR NZ,-03h
00000D7F:	DEC BC
00000D80:	LD A,B
00000D81:	OR C
00000D82:	JR NZ,-13h
00000D84:	POP BC
00000D85:	RET
00000D86:	PUSH HL
00000D87:	JP 0BDFh

00000D8A:	PUSH AF
00000D8B:	PUSH BC
00000D8C:	LD BC,1A03h		; 8255 CRTC write, set mode
00000D8F:	LD A,00h
00000D91:	OUT (C),A
00000D93:	LD A,20h
00000D95:	CALL 0DC2h
00000D98:	LD A,01h
00000D9A:	OUT (C),A
00000D9C:	LD A,18h
00000D9E:	CALL 0DC2h
00000DA1:	POP BC
00000DA2:	POP AF
00000DA3:	RET

00000DA4:	INC HL
00000DA5:	PUSH AF
00000DA6:	PUSH BC
00000DA7:	LD BC,1A03h		; 8255 CRTC write, set mode
00000DAA:	LD A,00h
00000DAC:	OUT (C),A
00000DAE:	LD A,44h
00000DB0:	CALL 0DC2h
00000DB3:	LD A,01h
00000DB5:	OUT (C),A
00000DB7:	LD A,3Ch
00000DB9:	CALL 0DC2h
00000DBC:	POP BC
00000DBD:	POP AF
00000DBE:	RET

00000DBF:	LD A,2Eh
00000DC1:	NOP
00000DC2:	DEC A
00000DC3:	JP NZ,0DC2h
00000DC6:	RET

00000DC7:	PUSH BC
00000DC8:	CALL 0DF6h
00000DCB:	AND 02h
00000DCD:	LD A,03h
00000DCF:	JR Z,+10h
00000DD1:	AND D
00000DD2:	LD A,02h
00000DD4:	JR Z,+0Eh
00000DD6:	CALL 0DF6h
00000DD9:	AND 04h
00000DDB:	LD A,0Ah
00000DDD:	JR NZ,+05h
00000DDF:	LD A,04h
00000DE1:	SCF
00000DE2:	POP BC
00000DE3:	RET

00000DE4:	CALL 0DECh		; .. tape recorder
00000DE7:	POP BC
00000DE8:	OR A
00000DE9:	RET

; Cassette STOP
00000DEA:	LD A,01h
; CMT (cassette motor)
; A=0	EJECT
; A=1	STOP
; A=2	PLAY
; A=3	FF
; A=4	REW
; A=5	APSS+1
; A=6	APSS-1
; A=10	REC
00000DEC:	PUSH AF
00000DED:	LD A,E9h		; Control tape recorder
00000DEF:	CALL 0DFEh		; send command to sub-cpu
00000DF2:	POP AF
00000DF3:	JP 0B54h		; Send command in A to subcpu (= 52E in IPL)

; A reg, bit 0..2
00000DF6:	LD A,EBh		; Sense tape recorder
00000DF8:	CALL 0DFEh		; send command to sub-cpu
00000DFB:	JP 0B49h		; (get from subcpu)-> 

; send command to sub-cpu
00000DFE:	EI
00000DFF:	CALL 0B54h		; Send command in A to subcpu (= 52E in IPL)
00000E02:	CALL 0B6Bh		; wait for "subcpu set"
00000E05:	DI
00000E06:	RET

; subcpu (A=command, DE=result ptr?)
00000E07:	PUSH AF
00000E08:	CALL 0DFEh		; send command to sub-cpu
00000E0B:	POP AF
00000E0C:	ADD 11h
00000E0E:	LD BC,0403h
00000E11:	JR Z,+41h
00000E13:	INC A
00000E14:	JR Z,+49h
00000E16:	INC A
00000E17:	JR Z,+3Bh
00000E19:	INC A
00000E1A:	JR Z,+43h
00000E1C:	LD BC,0201h
00000E1F:	INC A
00000E20:	JR Z,+32h
00000E22:	INC A
00000E23:	JR Z,+2Fh
00000E25:	INC A
00000E26:	JR Z,+37h
00000E28:	INC A
00000E29:	JR Z,+29h
00000E2B:	INC A
00000E2C:	JR Z,+31h
00000E2E:	LD BC,0302h
00000E31:	INC A
00000E32:	JR Z,+20h
00000E34:	LD BC,0000h
00000E37:	INC A
00000E38:	RET Z
00000E39:	LD BC,0201h
00000E3C:	INC A
00000E3D:	JR Z,+20h
00000E3F:	ADD 04h
00000E41:	ADD 08h
00000E43:	LD BC,0706h
00000E46:	JP C,0E54h
00000E49:	ADD 08h
00000E4B:	JP C,0E5Fh
00000E4E:	RET

00000E4F:	CALL 0B49h			; (get from subcpu)-> 
00000E52:	LD (DE),A
00000E53:	INC DE
00000E54:	DJNZ -07h
00000E56:	EI
00000E57:	LD A,01h
00000E59:	RET

; Send B commands in (DE) to SUBCPU
00000E5A:	LD A,(DE)
00000E5B:	CALL 0B54h		; Send command in A to subcpu (= 52E in IPL)
00000E5E:	INC DE
00000E5F:	DJNZ -07h
00000E61:	EI
00000E62:	XOR A
00000E63:	RET

00000E64:	LD D,04h
00000E66:	LD BC,1C00h   ; PSG
00000E69:	LD A,(HL)
00000E6A:	INC HL
00000E6B:	OUT (C),A
00000E6D:	DEC B
00000E6E:	IN A,(C)
00000E70:	LD (HL),A
00000E71:	INC HL
00000E72:	INC B
00000E73:	DEC D
00000E74:	JR NZ,-0Dh
00000E76:	RET

00000E77:	LD D,04h
00000E79:	LD BC,1C00h   ; PSG
00000E7C:	LD A,(HL)
00000E7D:	INC HL
00000E7E:	OUT (C),A
00000E80:	DEC B
00000E81:	LD A,(HL)
00000E82:	OUT (C),A
00000E84:	INC HL
00000E85:	INC B
00000E86:	DEC D
00000E87:	JR NZ,-0Dh
00000E89:	RET

00000E8A:	DEC BC
00000E8B:	LD A,B
00000E8C:	OR C
00000E8D:	JR NZ,-05h
00000E8F:	RET



; DATA region
0E90  A1 04 BE 05 00 07 3B 0A-0F 04 00 05 00 07 3F 0A   ......;.......?.
0EA0  00 00 00 00 00 00 12 00

00000EA6:	defb 12h	; POINT1
00000EA7:	defb 0	; POINT2

0EA8                          0D 52 55 4E 22 53 74 61           .RUN"Sta
0EB0  72 74 20 75 70 2E 42 61-73 22 0D 55 54 4F 0D 03   rt up.Bas".UTO..
0EC0  0C 0D 0D 4C 2E 0D 52 55-4E 20 20 0D 44 0D 52 0D   ...L..RUN  .D.R.
0ED0  4C 2E 0D 1E 1E 1E 1E 1E-1E 1E 1E 1C 1C 1C 1C 1C   L...............
0EE0  1C 1C 1C 1C 1C 1C 1C 33


; INTFLG (10 bytes)
00000EE8:	defs 10		; INTFLG

0EE8                          00 00 00 00 00 00 00 00           ........
0EF0  00 00 

; TABBUF (80 bytes)
00000EF2:	defs 80		; TABBUF

0EF2        01 00 00 00 00 00-00 00 01 00 00 00 00 00     ..............
0F00  00 00 01 00 00 00 00 00-00 00 01 00 00 00 00 00   ................
0F10  00 00 01 00 00 00 00 00-00 00 01 00 00 00 00 00   ................
0F20  00 00 01 00 00 00 00 00-00 00 01 00 00 00 00 00   ................
0F30  00 00 01 00 00 00 00 00-00 00 01 00 00 00 00 00   ................
0F40  00 00 



; FUNBUF, function key definitions
00000F42: 

0F42        05 41 55 54 4F 0D-00 00 00 00 00 00 00 00     .AUTO.........
0F50  00 00 07 3F 54 49 4D 45-24 0D 00 00 00 00 00 00   ...?TIME$.......
0F60  00 00 03 4B 45 59 00 00-00 00 00 00 00 00 00 00   ...KEY..........
0F70  00 00 06 4C 49 53 54 1A-0D 00 00 00 00 00 00 00   ...LIST.........
0F80  00 00 06 52 55 4E 20 20-0D 00 00 00 00 00 00 00   ...RUN  ........
0F90  00 00 06 4C 4F 41 44 20-0D 00 00 00 00 00 00 00   ...LOAD ........
0FA0  00 00 06 57 49 44 54 48-20 00 00 00 00 00 00 00   ...WIDTH .......
0FB0  00 00 05 43 48 52 24 28-00 00 00 00 00 00 00 00   ...CHR$(........
0FC0  00 00 06 50 41 4C 45 54-20 00 00 00 00 00 00 00   ...PALET .......
0FD0  00 00 05 43 4F 4E 54 0D-00 00 00 00 00 00 00 00   ...CONT.........
0FE0  E2 0F 


; BASIC 'MON' command
00000FE2:	PUSH HL
00000FE3:	LD DE,(147Eh)
00000FE7:	PUSH DE
00000FE8:	LD DE,102Dh
00000FEB:	LD (147Eh),DE
00000FEF:	LD A,(0006h)	; LINLIM
00000FF2:	PUSH AF
00000FF3:	LD A,50h		; 80
00000FF5:	LD (0006h),A	; LINLIM
00000FF8:	LD (10F1h),SP	; SMC: save SP to restore it on exit
00000FFC:	XOR A			; enable screen output
00000FFD:	LD (1472h),A	; 'FILOUT' flag


; MONITOR
00001000:	LD SP,0000h
00001003:	LD BC,1003h
00001006:	PUSH BC
00001007:	CALL 04A3h
0000100A:	LD A,2Ah ;'*'
0000100C:	CALL 0013h		; OUTCH (PRINT char in A)
0000100F:	CALL 10FDh
00001012:	JR NC,-05h
00001014:	LD A,(DE)
00001015:	CP 2Ah	; '*'
00001017:	RET NZ
00001018:	INC DE
00001019:	CALL 1450h		; TOUPPER (monitor command line)
0000101C:	INC DE
0000101D:	EXX
0000101E:	LD HL,1043h		; monitor command table
00001021:	LD B,0Ah
00001023:	CP (HL)
00001024:	INC HL
00001025:	JR Z,+16h
00001027:	INC HL
00001028:	INC HL
00001029:	DJNZ -08h
0000102B:	EXX
0000102C:	RET

0000102D:	LD DE,1473h
00001030:	CALL 04A3h
00001033:	CALL 000Bh		; MSX (aka DEPRT), print message in DE
00001036:	LD A,01h		; STOP..
00001038:	CALL 0DECh		; .. tape recorder
0000103B:	JR -3Dh
0000103D:	LD E,(HL)
0000103E:	INC HL
0000103F:	LD D,(HL)
00001040:	PUSH DE
00001041:	EXX
00001042:	RET
              
00001043:	defb  44h	; 'D'
			defw  118bh
			defb  4Dh	; 'M'
			defw  121dh
			defb  50h	; 'P'
			defw  1061h
			defb  47h	; 'G'
			defw  1186h
			defb  46h	; 'F'
			defw  1253h
			defb  52h	; 'R'
			defw  10F0h
			defb  53h	; 'S'
			defw  106Ah
			defb  4Ch	; 'L'
			defw  109Ah
			defb  56h	; 'V'
			defw  10E1h
			defb  54h	; 'T'
			defw  12BEh

; 'P' monitor command entry
00001061:	LD A,(1472h)		; FILOUT flag
00001064:	XOR 01h				; swap output flag
00001066:	LD (1472h),A		; FILOUT flag
00001069:	RET

; 'S' monitor command entry
0000106A:	CALL 12A6h
0000106D:	RET C
0000106E:	LD (1492h),BC
00001072:	LD (1494h),DE
00001076:	LD (1496h),HL
00001079:	PUSH DE
0000107A:	PUSH BC
0000107B:	EXX
0000107C:	CALL 138Bh	; adjust name ptr to next ':' character and do file stuff
0000107F:	LD HL,1480h	; FCB (DIRIMG)
00001082:	LD (HL),01h
00001084:	LD DE,145Ah
00001087:	CALL 1321h
0000108A:	LD BC,0020h	; FCB size ?
0000108D:	CALL 003Bh	; save data block:  HL=FCB (header) or data position, BC=SIZE
00001090:	POP BC
00001091:	POP HL
00001092:	CALL NC,003Eh
00001095:	LD A,01h		; STOP..
00001097:	JP 0DECh		; .. tape recorder

; 'L' monitor command entry
0000109A:	CALL 111Fh		; Get parameter for MONITOR (value in HL)
0000109D:	PUSH HL
0000109E:	PUSH AF
0000109F:	CALL 10B5h		; load file header
000010A2:	POP AF
000010A3:	POP HL
000010A4:	JR NC,+03h
000010A6:	LD HL,(FF14h)		; FILE data address
000010A9:	LD BC,(FF12h)		; FILE data size
000010AD:	CALL 0044h			; file data block, HL=ADDR, BC=SIZE
000010B0:	JP C,1478h			; STOP tape recorder and generate error message, error code in 'A'
000010B3:	JR -20h


000010B5:	CALL 138Bh			; adjust name ptr to next ':' character and do file stuff
000010B8:	LD A,01h
000010BA:	LD (1480h),A		; FCB (DIRIMG)
000010BD:	LD HL,FF00h			; header (FCB) position
000010C0:	LD BC,0020h			; header (FCB) size
000010C3:	CALL 0041h			; file open?  HL=FCB
000010C6:	JP C,1478h			; STOP tape recorder and generate error message, error code in 'A'
000010C9:	CALL 134Eh
000010CC:	JR Z,+0Dh
000010CE:	LD A,05h		;
000010D0:	CALL 0DECh		; .. tape recorder
000010D3:	LD DE,146Ah
000010D6:	CALL 1321h
000010D9:	JR -1Eh
000010DB:	LD DE,1462h
000010DE:	JP 1321h

; 'V' monitor command entry
000010E1:	CALL 10B5h
000010E4:	LD HL,(FF14h)	; FILE data address
000010E7:	LD BC,(FF12h)	; FILE data size
000010EB:	CALL 0047h		; file data block ??, HL=ADDR, BC=SIZE
000010EE:	JR -40h

; 'R' monitor command entry
000010F0:	LD SP,FDF6h			; SMC code on 10f1h to restore stack on exit
000010F3:	POP AF
000010F4:	LD (0006h),A		; LINLIM
000010F7:	POP HL
000010F8:	LD (147Eh),HL
000010FB:	POP HL
000010FC:	RET

; Line input for MONITOR
000010FD:	LD DE,FF00h		; -256
00001100:	CALL 0003h	; LINE INPUT,  DE=addr,  CY if SHIFT-BREAK,  A=3:SHIFT-BREAK, A=4:CTRL-D
00001103:	JR C,+18h
00001105:	LD A,(DE)
00001106:	CP 3Ah	; ':'
00001108:	SCF
00001109:	RET NZ
0000110A:	INC DE
0000110B:	CALL 111Fh		; Get parameter for MONITOR (value in HL)
0000110E:	RET C
0000110F:	LD A,(DE)
00001110:	INC DE
00001111:	XOR 3Dh
00001113:	RET NZ
00001114:	CALL 115Eh
00001117:	CCF
00001118:	RET NC
00001119:	LD (HL),A
0000111A:	INC HL
0000111B:	JR -09h
0000111D:	LD (DE),A
0000111E:	RET

; Get parameter for MONITOR (value in HL)
0000111F:	PUSH HL
00001120:	PUSH DE
00001121:	CALL 1143h
00001124:	JR C,+18h
00001126:	LD L,A
00001127:	LD H,00h
00001129:	CALL 1148h
0000112C:	JR C,+0Ch
0000112E:	ADD HL,HL
0000112F:	ADD HL,HL
00001130:	ADD HL,HL
00001131:	ADD HL,HL
00001132:	ADD L
00001133:	LD L,A
00001134:	LD A,00h
00001136:	ADC H
00001137:	LD H,A
00001138:	JR -11h
0000113A:	POP AF
0000113B:	POP AF
0000113C:	XOR A
0000113D:	RET

0000113E:	POP DE
0000113F:	POP HL
00001140:	SCF
00001141:	RET

00001142:	INC DE
00001143:	LD A,(DE)
00001144:	CP 20h	; ' '
00001146:	JR Z,-06h
00001148:	CALL 1450h		; TOUPPER (monitor command line)
0000114B:	SUB 30h
0000114D:	RET C
0000114E:	CP 0Ah
00001150:	JR C,+09h
00001152:	CP 11h
00001154:	RET C
00001155:	SUB 07h
00001157:	CP 10h
00001159:	CCF
0000115A:	RET C
0000115B:	OR A
0000115C:	INC DE
0000115D:	RET

0000115E:	PUSH BC
0000115F:	PUSH DE
00001160:	CALL 1143h
00001163:	JR C,+13h
00001165:	LD C,A
00001166:	CALL 1148h
00001169:	JR C,+08h
0000116B:	LD B,A
0000116C:	LD A,C
0000116D:	RLCA
0000116E:	RLCA
0000116F:	RLCA
00001170:	RLCA
00001171:	ADD B
00001172:	LD C,A
00001173:	LD A,C
00001174:	POP BC
00001175:	POP BC
00001176:	OR A
00001177:	RET

00001178:	LD A,(DE)
00001179:	CP 3Bh	; ';'
0000117B:	JR Z,+04h
0000117D:	POP DE
0000117E:	POP BC
0000117F:	SCF
00001180:	RET

00001181:	INC DE
00001182:	LD A,(DE)
00001183:	INC DE
00001184:	JR -12h

; 'G' monitor command entry
00001186:	CALL 111Fh		; Get parameter for MONITOR (value in HL)
00001189:	RET C
0000118A:	JP (HL)

; 'D' monitor command entry
0000118B:	CALL 111Fh		; Get parameter for MONITOR (value in HL)
0000118E:	JR C,+0Bh
00001190:	PUSH HL
00001191:	CALL 111Fh		; Get parameter for MONITOR (value in HL)
00001194:	JR C,+04h
00001196:	POP DE
00001197:	EX DE,HL
00001198:	JR +07h
0000119A:	POP HL
0000119B:	EX DE,HL
0000119C:	LD HL,007Fh
0000119F:	ADD HL,DE
000011A0:	EX DE,HL
000011A1:	LD C,08h
000011A3:	CALL 11AFh
000011A6:	RET C
000011A7:	PUSH HL
000011A8:	SCF
000011A9:	SBC HL,DE
000011AB:	POP HL
000011AC:	RET NC
000011AD:	JR -0Eh
000011AF:	CALL 124Eh
000011B2:	CALL 1202h
000011B5:	CALL 124Ah
000011B8:	LD B,C
000011B9:	PUSH HL
000011BA:	LD A,(HL)
000011BB:	CALL 1207h		; HEXACC:
000011BE:	INC HL
000011BF:	LD A,20h
000011C1:	CALL 1420h		; file stuff, depends on value set in FILOUT
000011C4:	DJNZ -0Ch
000011C6:	POP HL
000011C7:	LD A,2Fh
000011C9:	CALL 1420h		; file stuff, depends on value set in FILOUT
000011CC:	LD B,C
000011CD:	LD A,(HL)
000011CE:	CP 20h			; ' '
000011D0:	JR NC,+02h
000011D2:	LD A,2Eh		; '.'
000011D4:	CALL 1420h		; file stuff, depends on value set in FILOUT
000011D7:	CALL 11EEh
000011DA:	JR Z,+0Ah
000011DC:	DJNZ -11h
000011DE:	CALL 1446h
000011E1:	LD A,(0036h)	; BRKBUF
000011E4:	CP 03h
000011E6:	SCF
000011E7:	RET Z
000011E8:	CP 13h
000011EA:	JR Z,+06h
000011EC:	OR A
000011ED:	RET

000011EE:	INC HL
000011EF:	LD A,H
000011F0:	OR L
000011F1:	RET

000011F2:	XOR A
000011F3:	LD (0036h),A	; BRKBUF
000011F6:	LD (0EA6h),A	; POINT1
000011F9:	LD (0EA7h),A	; POINT2
000011FC:	INC A
000011FD:	CALL 001Bh
00001200:	JR -21h
00001202:	LD A,H
00001203:	CALL 1207h		; HEXACC:
00001206:	LD A,L

; HEXACC:
00001207:	PUSH AF
00001208:	RLCA
00001209:	RLCA
0000120A:	RLCA
0000120B:	RLCA
0000120C:	CALL 1210h
0000120F:	POP AF
00001210:	AND 0Fh
00001212:	ADD 30h
00001214:	CP 3Ah	; ':'
00001216:	JR C,+02h
00001218:	ADD 07h
0000121A:	JP 1420h		; file stuff, depends on value set in FILOUT

; 'M' monitor command entry
0000121D:	CALL 111Fh		; Get parameter for MONITOR (value in HL)
00001220:	LD A,(1472h)	; FILOUT flag
00001223:	PUSH AF
00001224:	XOR A			; enable output to screen
00001225:	LD (1472h),A	; FILOUT flag
00001228:	CALL 04A3h
0000122B:	CALL 124Eh
0000122E:	CALL 1202h
00001231:	CALL 124Ah
00001234:	LD A,(HL)
00001235:	CALL 1207h		; HEXACC:
00001238:	LD A,1Dh
0000123A:	CALL 0013h		; OUTCH (PRINT char in A)
0000123D:	CALL 0013h		; OUTCH (PRINT char in A)
00001240:	CALL 10FDh
00001243:	JR NC,-1Dh
00001245:	POP AF
00001246:	LD (1472h),A		; FILOUT flag
00001249:	RET

0000124A:	LD A,3Dh
0000124C:	JR +02h
0000124E:	LD A,3Ah
00001250:	JP 1420h		; file stuff, depends on value set in FILOUT

; 'F' monitor command entry
00001253:	CALL 111Fh		; Get parameter for MONITOR (value in HL)
00001256:	RET C
00001257:	PUSH HL
00001258:	CALL 111Fh		; Get parameter for MONITOR (value in HL)
0000125B:	POP BC
0000125C:	RET C
0000125D:	PUSH HL
0000125E:	PUSH BC
0000125F:	LD HL,FF00h		; -256
00001262:	CALL 1114h
00001265:	LD DE,FF00h		; -256
00001268:	OR A
00001269:	SBC HL,DE
0000126B:	LD C,L
0000126C:	POP HL
0000126D:	PUSH HL
0000126E:	EXX
0000126F:	POP HL
00001270:	POP DE
00001271:	EXX
00001272:	RET Z
00001273:	CALL 1292h
00001276:	JR NZ,+04h
00001278:	CALL 11AFh
0000127B:	RET C
0000127C:	LD A,(0036h)	; BRKBUF
0000127F:	CP 03h
00001281:	RET Z
00001282:	EXX
00001283:	CALL 11EEh
00001286:	RET Z
00001287:	PUSH HL
00001288:	SCF
00001289:	SBC HL,DE
0000128B:	POP HL
0000128C:	RET NC
0000128D:	PUSH HL
0000128E:	EXX
0000128F:	POP HL
00001290:	JR -1Fh
00001292:	LD A,(DE)
00001293:	CP (HL)
00001294:	RET NZ
00001295:	PUSH BC
00001296:	PUSH DE
00001297:	PUSH HL
00001298:	LD B,C
00001299:	LD A,(DE)
0000129A:	CP (HL)
0000129B:	JR NZ,+05h
0000129D:	INC DE
0000129E:	INC HL
0000129F:	DJNZ -08h
000012A1:	XOR A
000012A2:	POP HL
000012A3:	POP DE
000012A4:	POP BC
000012A5:	RET

000012A6:	CALL 111Fh		; Get parameter for MONITOR (value in HL)
000012A9:	RET C
000012AA:	PUSH HL
000012AB:	CALL 111Fh		; Get parameter for MONITOR (value in HL)
000012AE:	POP BC
000012AF:	RET C
000012B0:	SBC HL,BC
000012B2:	INC HL
000012B3:	PUSH HL
000012B4:	PUSH BC
000012B5:	CALL 111Fh		; Get parameter for MONITOR (value in HL)
000012B8:	PUSH HL
000012B9:	EXX
000012BA:	POP HL
000012BB:	POP DE
000012BC:	POP BC
000012BD:	RET

; 'T' monitor command entry
000012BE:	CALL 12A6h
000012C1:	RET C
000012C2:	EX DE,HL
000012C3:	PUSH HL
000012C4:	SBC HL,DE
000012C6:	POP HL
000012C7:	JR C,+03h
000012C9:	LDIR
000012CB:	RET

000012CC:	ADD HL,BC
000012CD:	DEC HL
000012CE:	EX DE,HL
000012CF:	ADD HL,BC
000012D0:	DEC HL
000012D1:	EX DE,HL
000012D2:	LDDR
000012D4:	RET

000012D5:	LD A,FFh
000012D7:	LD (131Bh),A		; LPOS - line counter for Printer
000012DA:	LD A,0Ah

; Output char in A to printer
000012DC:	PUSH HL
000012DD:	LD HL,131Bh		; LPOS - line counter for Printer
000012E0:	INC (HL)
000012E1:	POP HL
000012E2:	PUSH BC
000012E3:	PUSH DE
000012E4:	PUSH HL
000012E5:	PUSH AF
000012E6:	LD D,10h
000012E8:	LD HL,0000h
000012EB:	LD BC,1A01h		; 8255 CRTC read, port B
000012EE:	IN A,(C)
000012F0:	AND 08h			; Printer BUSY ?
000012F2:	JR Z,+0Dh
000012F4:	DEC HL
000012F5:	LD A,L
000012F6:	OR H
000012F7:	JR NZ,-0Bh
000012F9:	DEC D
000012FA:	JR NZ,-0Eh
000012FC:	LD A,49h		; error code for 'Device offline'
000012FE:	JP 1478h		; STOP tape recorder and generate error message, error code in 'A'

00001301:	POP AF
00001302:	DEC C
00001303:	OUT (C),A
00001305:	INC C
00001306:	INC C
00001307:	INC C
00001308:	LD D,0Eh
0000130A:	OUT (C),D
0000130C:	POP HL
0000130D:	LD D,0Fh
0000130F:	OUT (C),D
00001311:	POP DE
00001312:	POP BC
00001313:	OR A
00001314:	RET

00001315:	LD A,20h
00001317:	CALL 12DCh		; Output char in A to printer
0000131A:	LD A,00h
0000131C:	AND 07h
0000131E:	RET Z
0000131F:	JR -0Ch

; file stuff, DE=?, HL=FCB
00001321:	CALL 04A3h
00001324:	CALL 000Bh		; MSX (aka DEPRT), print message in DE
00001327:	PUSH HL
00001328:	INC HL
00001329:	CALL 1349h
0000132C:	LD D,0Dh
0000132E:	CALL 1340h
00001331:	LD A,2Eh		; '.'
00001333:	CALL 0013h		; OUTCH (PRINT char in A)
00001336:	LD D,03h
00001338:	CALL 1340h
0000133B:	CALL 1349h
0000133E:	POP HL
0000133F:	RET

00001340:	LD A,(HL)
00001341:	INC HL
00001342:	CALL 0013h		; OUTCH (PRINT char in A)
00001345:	DEC D
00001346:	JR NZ,-08h
00001348:	RET

00001349:	LD A,22h	; '"'
0000134B:	JP 0013h	; OUTCH (PRINT char in A)


; file stuff, HL=FCB (1480)=?
0000134E:	PUSH DE
0000134F:	PUSH HL
00001350:	LD DE,1480h	; FCB (DIRIMG)
00001353:	INC DE
00001354:	LD A,(DE)
00001355:	CP 20h	; ' '
00001357:	JR Z,+29h

00001359:	INC HL
0000135A:	LD B,10h
0000135C:	LD A,(DE)
0000135D:	CP (HL)
0000135E:	JR NZ,+1Fh
00001360:	INC HL
00001361:	INC DE
00001362:	DJNZ -08h
00001364:	LD A,(DE)
00001365:	CP (HL)
00001366:	JR Z,+06h
00001368:	LD A,43h			; error code for 'No password'
0000136A:	JP 1478h			; STOP tape recorder and generate error message, error code in 'A'

0000136D:	EX DE,HL
0000136E:	POP HL
0000136F:	PUSH HL
00001370:	LD A,(1480h)	; FCB (DIRIMG)
00001373:	OR A
00001374:	JR Z,+08h
00001376:	XOR (HL)
00001377:	AND 0Fh
00001379:	LD A,1Eh			; error code for 'Bad file mode'
0000137B:	JP NZ,1478h			; STOP tape recorder and generate error message, error code in 'A'
0000137E:	XOR A
0000137F:	POP HL
00001380:	POP DE
00001381:	RET

00001382:	LD DE,0011h
00001385:	ADD HL,DE
00001386:	LD A,(HL)
00001387:	CP 20h	; ' '
00001389:	JR -25h

0000138B:	LD A,(DE)			; adjust name ptr to next ':' character and do file stuff
0000138C:	OR A
0000138D:	JR Z,+05h
0000138F:	INC DE
00001390:	CP 3Ah	; ':'
00001392:	JR NZ,-09h

; file stuff, DE= (1480)=?
00001394:	LD C,E
00001395:	LD B,D
00001396:	LD L,C
00001397:	LD H,B
00001398:	LD DE,1480h	; FCB (DIRIMG)
0000139B:	INC DE
0000139C:	PUSH DE
0000139D:	LD B,11h
0000139F:	LD A,20h
000013A1:	LD (DE),A
000013A2:	INC DE
000013A3:	DJNZ -04h
000013A5:	POP DE
000013A6:	LD B,0Dh
000013A8:	LD A,(HL)
000013A9:	CP 20h	; ' '
000013AB:	JR NZ,+03h
000013AD:	INC HL
000013AE:	JR -08h
000013B0:	LD A,(HL)
000013B1:	OR A
000013B2:	JP Z,1405h
000013B5:	CP 3Bh	; ';'
000013B7:	JR Z,+30h
000013B9:	CP 2Eh	; '.'
000013BB:	JR Z,+11h
000013BD:	LD (DE),A
000013BE:	INC HL
000013BF:	INC DE
000013C0:	DJNZ -12h
000013C2:	LD A,(HL)
000013C3:	OR A
000013C4:	JR Z,+3Fh
000013C6:	CP 3Bh	; ';'
000013C8:	JR Z,+1Fh
000013CA:	CP 2Eh	; '.'
000013CC:	JR NZ,+4Dh
000013CE:	INC HL
000013CF:	LD B,03h
000013D1:	LD DE,148Eh
000013D4:	LD A,(HL)
000013D5:	OR A
000013D6:	JR Z,+2Dh
000013D8:	CP 3Bh	; ';'
000013DA:	JR Z,+0Dh
000013DC:	LD (DE),A
000013DD:	INC HL
000013DE:	INC DE
000013DF:	DJNZ -0Dh
000013E1:	LD A,(HL)
000013E2:	OR A
000013E3:	JR Z,+20h
000013E5:	CP 3Bh	; ';'
000013E7:	JR NZ,+32h
000013E9:	INC HL
000013EA:	LD B,20h
000013EC:	LD A,(HL)
000013ED:	OR A
000013EE:	JR Z,+11h
000013F0:	RLCA
000013F1:	RLCA
000013F2:	XOR 93h
000013F4:	NEG
000013F6:	ADD B
000013F7:	RLCA
000013F8:	RLCA
000013F9:	NEG
000013FB:	XOR 41h
000013FD:	LD B,A
000013FE:	INC HL
000013FF:	JR -15h

00001401:	LD A,B
00001402:	LD (1491h),A
00001405:	LD A,EDh		; SUBCPU_GET_CALENDAR
00001407:	LD DE,1498h
0000140A:	CALL 0023h		; subcpu (A=command, DE=result ptr?)
0000140D:	LD A,EFh		; SUBCPU_GET_CLOCK
0000140F:	CALL 0023h		; subcpu (A=command, DE=result ptr?)
00001412:	DEC DE
00001413:	LD B,03h
00001415:	XOR A
00001416:	LD (DE),A
00001417:	INC DE
00001418:	DJNZ -04h
0000141A:	RET

0000141B:	LD A,41h		; error code for 'Bad file descripter'
0000141D:	JP 1478h		; STOP tape recorder and generate error message, error code in 'A'

00001420:	EX AF,AF'		; file stuff, depends on value set in FILOUT
00001421:	LD A,(1472h)		; FILOUT flag
00001424:	OR A
00001425:	JR Z,+04h			; JR if output to screen
00001427:	EX AF,AF'
00001428:	JP 12DCh		; Output char in A to printer

0000142B:	EX AF,AF'
0000142C:	JP 0013h	; OUTCH (PRINT char in A)

0000142F:	PUSH DE
00001430:	LD A,(DE)
00001431:	OR A
00001432:	JR Z,+06h
00001434:	CALL 1420h		; file stuff, depends on value set in FILOUT
00001437:	INC DE
00001438:	JR -0Ah
0000143A:	POP DE
0000143B:	RET

0000143C:	LD A,(1472h)		; FILOUT flag
0000143F:	OR A
00001440:	JP Z,04ABh			; JP if output to screen
00001443:	JP 1315h

00001446:	LD A,(1472h)		; FILOUT flag
00001449:	OR A
0000144A:	JP Z,04A7h			; LETNL (PRINT CR) if output to screen
0000144D:	JP 12D5h

; TOUPPER (monitor command line)
00001450:	LD A,(DE)
00001451:	CP 61h
00001453:	RET C
00001454:	CP 7Bh
00001456:	RET NC
00001457:	SUB 20h	; ' '
00001459:	RET

0000145A:	LD D,A
0000145B:	LD (HL),D
0000145C:	LD L,C
0000145D:	LD (HL),H
0000145E:	LD L,C
0000145F:	LD L,(HL)
00001460:	LD H,A
00001461:	NOP
00001462:	LD B,(HL)
00001463:	LD L,A
00001464:	LD (HL),L
00001465:	LD L,(HL)
00001466:	LD H,H
00001467:	JR NZ,+20h
00001469:	NOP
0000146A:	LD D,E
0000146B:	LD L,E
0000146C:	LD L,C
0000146D:	LD (HL),B
0000146E:	JR NZ,+20h
00001470:	JR NZ,+00h

; FILOUT flag
00001472:	NOP

00001473:	defm "ERR?"
00001477:	NOP

; STOP tape recorder and generate error message, error code in 'A'
00001478:	PUSH AF
00001479:	CALL 1095h		; STOP tape recorder
0000147C:	POP AF
0000147D:	JP 2076h		; Generate error message, error code in 'A'

; FCB (DIRIMG)
;1480  01 42 41 53 49 43 20 43-5A 38 46 42 30 31 53 79   .BASIC CZ8FB01Sy
;1490  73 20 00 A8 00 00 00 00-82 C1 27 17 58 00 02 00   s ........'.X...
00001480:	LD BC,4142h
00001483:	LD D,E
00001484:	LD C,C
00001485:	LD B,E
00001486:	JR NZ,+43h
00001488:	LD E,D
00001489:	JR C,+46h
0000148B:	LD B,D
0000148C:	JR NC,+31h
0000148E:	LD D,E
0000148F:	LD A,C

00001490:	LD (HL),E
00001491:	JR NZ,+00h
00001493:	XOR B
00001494:	NOP
00001495:	NOP
00001496:	NOP
00001497:	NOP
00001498:	ADD D
00001499:	POP BC
0000149A:	DAA
0000149B:	RLA
0000149C:	LD E,B
0000149D:	NOP
0000149E:	LD (BC),A
0000149F:	NOP


000014A0:	LD DE,A637h		; IMDBUF - Immediate command buffer
000014A3:	CALL 000Bh		; MSX (aka DEPRT), print message in DE
000014A6:	LD A,(FF87h)
000014A9:	AND 0Fh
000014AB:	OR 30h
000014AD:	LD (7496h),A
000014B0:	XOR A
000014B1:	LD (DE),A
000014B2:	INC DE
000014B3:	LD A,D
000014B4:	CP FFh
000014B6:	JR NZ,-08h
000014B8:	LD HL,14CCh
000014BB:	LD (012Bh),HL
000014BE:	LD HL,FF00h		; -256
000014C1:	LD (A633h),HL	; MEMMAX
000014C4:	CALL 21A7h
000014C7:	CALL 21AFh		; CLPTR:
000014CA:	JR +0Bh
000014CC:	CALL 36D8h
000014CF:	CALL 764Ch		; Stop floppy disk drive
000014D2:	LD A,01h		; STOP..
000014D4:	CALL 0DECh		; .. tape recorder

000014D7:	CALL 1556h
; 
000014DA:	LD SP,(A62Fh)
000014DE:	LD HL,FFFFh
000014E1:	PUSH HL
000014E2:	LD (3623h),SP	; STACK
000014E6:	CALL 17C4h
000014E9:	CALL 2279h

; PROMPT:
000014EC:	XOR A
000014ED:	LD (362Ah),A
000014F0:	LD HL,0003h
000014F3:	LD (1526h),HL
000014F6:	LD HL,0000h
000014F9:	LD (91CEh),HL		; FNVRBF
000014FC:	CALL 04A3h
000014FF:	LD DE,212Fh
00001502:	CALL 000Bh		; MSX (aka DEPRT), print message in DE
00001505:	LD A,(3627h)	; CONTFG
00001508:	OR A
00001509:	LD A,2Eh		; '.'
0000150B:	JR NZ,+02h
0000150D:	LD A,20h
0000150F:	CALL 0013h		; OUTCH (PRINT char in A)
00001512:	CALL 04A3h
00001515:	XOR A
00001516:	LD (362Ah),A

; INPAGN:
00001519:	LD HL,FFFFh
0000151C:	LD (3634h),HL	; current program line
0000151F:	CALL 219Fh
00001522:	LD DE,A73Fh		; KEYBM1 (aka KEYBUF)
00001525:	CALL 0003h	; LINE INPUT,  DE=addr,  CY if SHIFT-BREAK,  A=3:SHIFT-BREAK, A=4:CTRL-D
00001528:	JR NC,+54h
0000152A:	CP 04h
0000152C:	JR NZ,+06h
0000152E:	CALL 1551h
00001531:	CALL 013Ch
00001534:	CALL 4C5Bh

00001537:	LD A,(362Dh)
0000153A:	OR A
0000153B:	LD A,00h
0000153D:	LD (362Dh),A
00001540:	JR NZ,-56h
00001542:	LD A,(362Ch)
00001545:	OR A
00001546:	JP NZ,17B0h		; 'RUN'
00001549:	LD A,(362Ah)
0000154C:	OR A
0000154D:	JR Z,-3Ah
0000154F:	JR -65h
00001551:	LD A,07h
00001553:	LD (0026h),A	; COLORF
00001556:	CALL 17F1h		; init flags
00001559:	CALL 3AF8h		; init GPRIOF, RPRIOF and BPRIOF
0000155C:	XOR A
0000155D:	LD (53AAh),A	; CSIZE
00001560:	CALL 3938h		; reset cursor position
00001563:	CALL 36ECh
00001566:	XOR A
00001567:	LD (53A1h),A
0000156A:	LD (53A2h),A
0000156D:	CALL 3C5Fh
00001570:	XOR A
00001571:	CALL 09F5h
00001574:	XOR A
00001575:	CALL 09C0h
00001578:	LD E,00h
0000157A:	JP 3B5Dh

0000157D:	INC DE
0000157E:	LD A,(DE)
0000157F:	CP 20h	; ' '
00001581:	JR Z,-06h
00001583:	OR A
00001584:	JR Z,-6Dh
00001586:	CALL 53F0h			; TSTNUM
00001589:	JP NC,A40Bh			; EDITOR:
0000158C:	LD A,(362Ah)
0000158F:	OR A
00001590:	JP NZ,204Bh

00001593:	LD HL,A637h		; IMDBUF - Direct command
00001596:	PUSH HL
00001597:	CALL 7733h		; CVIMTX: convert immediate buffer for direct execution
0000159A:	INC HL
0000159B:	LD (362Eh),HL		; NXTLPT: ptr for BASIC interpreter
0000159E:	LD (HL),00h
000015A0:	INC HL
000015A1:	LD (HL),00h
000015A3:	POP HL
000015A4:	JR +3Fh
000015A6:	POP HL
000015A7:	LD HL,(3634h)		; current program line
000015AA:	INC HL
000015AB:	LD A,L
000015AC:	OR H
000015AD:	JP Z,14ECh			; PROMPT:
000015B0:	XOR A
000015B1:	LD (3627h),A		; CONTFG
000015B4:	LD A,(3626h)		; ERRORF  ..current error condition
000015B7:	CP 02h
000015B9:	JP NZ,14ECh			; PROMPT:
000015BC:	JP 2051h			; ERROR: No RESUME


000015BF:	CALL 17C4h

; Begin the BASIC program execution
000015C2:	LD HL,(A635h)		; TEXTST,  address of BASIC  program
000015C5:	LD (362Eh),HL		; NXTLPT: ptr for BASIC interpreter
000015C8:	PUSH HL

; 'REM', 'ELSE'
; ('IF' will forcefully execute the 'ELSE' condition when necessary)
000015C9:	LD HL,(362Eh)		; NXTLPT: ptr for BASIC interpreter
000015CC:	CALL 1773h			; LDDEMI:
000015CF:	JR Z,-2Bh
000015D1:	LD (362Eh),DE		; NXTLPT: ptr for BASIC interpreter
000015D5:	LD E,(HL)
000015D6:	INC HL
000015D7:	LD D,(HL)
000015D8:	INC HL
000015D9:	LD (3634h),DE	; current program line
000015DD:	LD A,(362Bh)	; TRON/TROFF flag (zero = OFF)
000015E0:	OR A
000015E1:	CALL NZ,227Eh	; Subroutine for 'TRACE'
000015E4:	POP DE
000015E5:	LD (3623h),SP	; STACK
000015E9:	LD DE,15E5h
000015EC:	PUSH DE
000015ED:	LD (363Eh),HL
000015F0:	LD A,(0036h)	; BRKBUF
000015F3:	OR A
000015F4:	JR Z,+1Bh
000015F6:	CP 03h
000015F8:	JP Z,1FCAh
000015FB:	CP 13h
000015FD:	EI
000015FE:	JR NZ,+11h
00001600:	CALL 1FFAh
00001603:	XOR A
00001604:	CALL 001Bh
00001607:	JR -0Eh
00001609:	CALL 004Ah	; Z=1 -> SHIFT+BREAK, CTRL/C
0000160C:	JR NZ,+0Ah

0000160E:	JP 1FCAh
00001611:	LD A,1Ah
00001613:	INA (01h)
00001615:	RRCA
00001616:	JR NC,-0Fh
00001618:	LD A,(0051h)	; ONKYBUF
0000161B:	OR A
0000161C:	JR Z,+21h
0000161E:	LD DE,(3634h)	; current program line
00001622:	INC DE
00001623:	LD A,D
00001624:	OR E
00001625:	JR Z,+18h
00001627:	LD DE,0EE8h		; INTFLG table
0000162A:	LD B,0Ah		; 10 bytes
0000162C:	LD A,(DE)
0000162D:	OR A
0000162E:	JR Z,+08h
00001630:	XOR 99h
00001632:	LD C,A
00001633:	AND F0h
00001635:	JP Z,32A0h
00001638:	INC DE
00001639:	DJNZ -0Fh
0000163B:	XOR A
0000163C:	LD (0051h),A	; ONKYBUF
0000163F:	LD A,(HL)
00001640:	CP 80h
00001642:	JP NC,1781h
00001645:	CP 20h	; ' '
00001647:	JR NZ,+02h
00001649:	INC HL
0000164A:	RET

0000164B:	CP 3Ah		; ':'
0000164D:	JR Z,-06h
0000164F:	OR A
00001650:	JP Z,15C9h	; 'REM' (skip the next part of the program line)
00001653:	CP 22h		; '"'
00001655:	JP Z,327Fh	; 'GOSUB'
00001658:	CP 27h
0000165A:	JP Z,15C9h	; 'REM'
0000165D:	CALL 53F8h
00001660:	CP 41h
00001662:	JP C,2066h		; ERROR: Syntax error
00001665:	CP 5Bh			; '['  (some BASIC subtracts "A" and checks for 26)
00001667:	JP NC,2066h		; ERROR: Syntax error

; 'LET'
0000166A:	CALL 8C2Eh		; INTGTV:  get variable
0000166D:	PUSH BC
0000166E:	PUSH BC
0000166F:	PUSH AF
00001670:	CALL 8262h		; skip SPACEs in (HL), A=next char
00001673:	CP F4h			; Token for '='
00001675:	JP NZ,2066h		; ERROR: Syntax error
00001678:	INC HL
00001679:	CALL 7FD1h		; EXPR:
0000167C:	POP AF
0000167D:	EX HL,(SP)
0000167E:	EX DE,HL
0000167F:	CP 02h			; Integer type ?
00001681:	JR Z,+1Eh
00001683:	CP 05h			; Single precision type ?
00001685:	JR Z,+15h
00001687:	JR NC,+08h
00001689:	PUSH AF
0000168A:	CALL 16ABh		; STRDI2:
0000168D:	POP AF
0000168E:	POP HL
0000168F:	POP BC
00001690:	RET

00001691:	CALL 5419h		; 'CDBL'
00001694:	LD C,A
00001695:	LD B,00h
00001697:	LDIR
00001699:	POP HL
0000169A:	POP BC
0000169B:	RET

0000169C:	CALL 5436h		; 'CSNG'
0000169F:	JR -0Dh
000016A1:	CALL 5A90h		; 'CINT'
000016A4:	JR -12h

000016A6:	LD A,03h			; string type
000016A8:	LD (A5DBh),A		; data type, aka PRCSON

; STRDI2:
000016AB:	PUSH DE
000016AC:	CALL 7FC3h		; Load a string parameter
000016AF:	LD HL,A73Fh		; KEYBM1 (aka KEYBUF)
000016B2:	LD (HL),A
000016B3:	LD B,A
000016B4:	LD C,A
000016B5:	OR A
000016B6:	JR Z,+06h
000016B8:	INC HL
000016B9:	LD A,(DE)
000016BA:	LD (HL),A
000016BB:	INC DE
000016BC:	DJNZ -06h
000016BE:	POP HL
000016BF:	LD A,(HL)
000016C0:	CP C
000016C1:	JR Z,+40h
000016C3:	PUSH HL
000016C4:	CALL 1713h
000016C7:	POP HL
000016C8:	LD A,(A73Fh)		; KEYBM1 (aka KEYBUF)
000016CB:	OR A
000016CC:	RET Z
000016CD:	PUSH HL
000016CE:	LD BC,(A629h)		; VARST
000016D2:	SBC HL,BC
000016D4:	EX DE,HL
000016D5:	LD HL,(A62Dh)		; VARED
000016D8:	DEC HL
000016D9:	DEC HL
000016DA:	LD (HL),E
000016DB:	INC HL
000016DC:	LD (HL),D
000016DD:	INC HL
000016DE:	LD BC,(A62Bh)		; STRST
000016E2:	OR A
000016E3:	POP DE
000016E4:	PUSH HL
000016E5:	SBC HL,BC
000016E7:	EX DE,HL
000016E8:	LD (HL),A
000016E9:	LD B,A
000016EA:	INC HL
000016EB:	LD (HL),E
000016EC:	INC HL
000016ED:	LD (HL),D
000016EE:	POP HL
000016EF:	LD DE,A73Fh			; KEYBM1 (aka KEYBUF)
000016F2:	INC DE
000016F3:	CALL 8D2Dh			; STRENT:
000016F6:	LD (HL),00h
000016F8:	INC HL
000016F9:	LD (HL),00h
000016FB:	INC HL
000016FC:	LD (3621h),HL		; TMPEND
000016FF:	LD (A62Dh),HL		; VARED
00001702:	RET

00001703:	INC HL
00001704:	LD E,(HL)
00001705:	INC HL
00001706:	LD D,(HL)
00001707:	LD HL,(A62Bh)		; STRST
0000170A:	ADD HL,DE
0000170B:	LD DE,A73Fh			; KEYBM1 (aka KEYBUF)
0000170E:	LD B,C
0000170F:	INC DE
00001710:	JP 8D2Dh			; STRENT:

00001713:	LD A,(HL)
00001714:	OR A
00001715:	RET Z
00001716:	LD C,A
00001717:	LD (HL),00h
00001719:	LD B,00h
0000171B:	INC BC
0000171C:	INC BC
0000171D:	INC HL
0000171E:	LD E,(HL)
0000171F:	INC HL
00001720:	LD D,(HL)
00001721:	LD HL,(A62Bh)		; STRST
00001724:	ADD HL,DE
00001725:	EX DE,HL
00001726:	LD HL,(3628h)
00001729:	SCF
0000172A:	SBC HL,DE
0000172C:	RET NC
0000172D:	DEC DE
0000172E:	DEC DE
0000172F:	LD L,E
00001730:	LD H,D
00001731:	ADD HL,BC
00001732:	PUSH BC
00001733:	PUSH DE
00001734:	EX DE,HL
00001735:	LD HL,(A62Dh)		; VARED
00001738:	OR A
00001739:	SBC HL,DE
0000173B:	LD C,L
0000173C:	LD B,H
0000173D:	EX DE,HL
0000173E:	POP DE
0000173F:	PUSH DE
00001740:	JR Z,+02h
00001742:	LDIR
00001744:	POP DE
00001745:	POP BC
00001746:	LD HL,(A62Dh)		; VARED
00001749:	OR A
0000174A:	SBC HL,BC
0000174C:	LD (A62Dh),HL		; VARED
0000174F:	LD (3621h),HL		; TMPEND
00001752:	EX DE,HL
00001753:	LD E,(HL)
00001754:	INC HL
00001755:	LD D,(HL)
00001756:	INC HL
00001757:	LD A,D
00001758:	OR E
00001759:	RET Z
0000175A:	PUSH HL
0000175B:	LD HL,(A629h)		; VARST
0000175E:	ADD HL,DE
0000175F:	LD A,(HL)
00001760:	INC HL
00001761:	LD E,(HL)
00001762:	INC HL
00001763:	LD D,(HL)
00001764:	OR A
00001765:	EX DE,HL
00001766:	SBC HL,BC
00001768:	EX DE,HL
00001769:	LD (HL),D
0000176A:	DEC HL
0000176B:	LD (HL),E
0000176C:	LD E,A
0000176D:	LD D,00h
0000176F:	POP HL
00001770:	ADD HL,DE
00001771:	JR -20h

; LDDEMI:
00001773:	LD E,(HL)
00001774:	INC HL
00001775:	LD D,(HL)
00001776:	INC HL
00001777:	LD A,D
00001778:	OR E
00001779:	RET Z
0000177A:	EX DE,HL
0000177B:	ADD HL,DE
0000177C:	DEC HL
0000177D:	DEC HL
0000177E:	EX DE,HL
0000177F:	OR A
00001780:	RET

00001781:	INC HL
00001782:	CP FFh
00001784:	JP Z,24C9h
00001787:	LD DE,2DCDh		; Jump table 3
0000178A:	CP FEh
0000178C:	JR NZ,+04h
0000178E:	LD A,(HL)
0000178F:	INC HL
00001790:	JR +08h
00001792:	CP E0h			; Token for 'TO'
00001794:	JP NC,2066h		; ERROR: Syntax error
00001797:	LD DE,2D0Dh		; Jump table
0000179A:	SUB 80h
0000179C:	PUSH HL
0000179D:	EX DE,HL
0000179E:	LD E,A
0000179F:	LD D,00h
000017A1:	ADD HL,DE
000017A2:	ADD HL,DE
000017A3:	LD A,(HL)
000017A4:	INC HL
000017A5:	LD H,(HL)
000017A6:	LD L,A
000017A7:	EX HL,(SP)

; END2C: look for next parameter, Z if none
000017A8:	CALL 8262h		; skip SPACEs in (HL), A=next char
000017AB:	OR A
000017AC:	RET Z
000017AD:	CP 3Ah	; ':'
000017AF:	RET

; 'RUN'
000017B0:	CALL 6566h
000017B3:	CALL 17C4h
000017B6:	CALL 17A8h		; END2C: look for next parameter, Z if none
000017B9:	JP Z,15C2h		; Begin the BASIC program execution
000017BC:	CP 22h	; '"'
000017BE:	JP Z,636Fh		; load program from disk and run it
000017C1:	CALL 3488h		; 'GOTO'

000017C4:	PUSH HL
000017C5:	LD HL,0000h
000017C8:	LD (3638h),HL	; ERRLNO  ..program line where the last error happened
000017CB:	LD (291Ch),HL
000017CE:	XOR A
000017CF:	LD (362Ch),A
000017D2:	LD (3627h),A	; CONTFG
000017D5:	LD (3626h),A	; ERRORF  ..current error condition
000017D8:	LD (362Dh),A
000017DB:	LD (3640h),A	; error code
000017DE:	LD (364Eh),A
000017E1:	LD HL,000Ah		; 10
000017E4:	LD (3630h),HL	; EDLINE
000017E7:	LD (3632h),HL
000017EA:	CALL 17F1h		; init flags
000017ED:	POP HL
000017EE:	JP 2212h		; 'CLR' (aka CLS)

; init flags
000017F1:	PUSH HL
000017F2:	XOR A
000017F3:	LD (0051h),A	; ONKYBUF
000017F6:	LD HL,0EE8h		; INTFLG table
000017F9:	LD B,0Ah		; 10 bytes
000017FB:	LD (HL),A
000017FC:	INC HL
000017FD:	DJNZ -04h
000017FF:	POP HL
00001800:	RET

; HL=(HL)+HL+2
00001801:	INC HL
00001802:	LD C,(HL)
00001803:	INC HL
00001804:	LD B,00h
00001806:	ADD HL,BC
00001807:	RET

; 'FOR'
00001808:	POP BC
00001809:	EX DE,HL
0000180A:	LD HL,(3634h)	; current program line
0000180D:	LD (1904h),HL
00001810:	LD HL,(362Eh)		; NXTLPT: ptr for BASIC interpreter
00001813:	LD (190Ah),HL
00001816:	EX DE,HL
00001817:	LD (18FDh),BC
0000181B:	CALL 8262h		; skip SPACEs in (HL), A=next char
0000181E:	LD (364Dh),A
00001821:	CALL 166Ah		; 'LET'
00001824:	LD (3649h),BC
00001828:	LD (3648h),A
0000182B:	EX AF,AF'
0000182C:	PUSH HL
0000182D:	LD HL,0002h
00001830:	ADD HL,SP
00001831:	LD A,(HL)
00001832:	INC A
00001833:	JR Z,+3Eh
00001835:	CP FCh			; Token for '*'
00001837:	JR Z,+3Ah
00001839:	INC A
0000183A:	JR Z,+05h
0000183C:	CALL 1801h		; HL=(HL)+HL+2
0000183F:	JR -10h
00001841:	PUSH HL
00001842:	LD DE,0004h
00001845:	ADD HL,DE
00001846:	LD E,(HL)
00001847:	INC HL
00001848:	LD D,(HL)
00001849:	LD HL,(3649h)
0000184C:	OR A
0000184D:	SBC HL,DE
0000184F:	POP HL
00001850:	JR NZ,-16h
00001852:	PUSH HL
00001853:	CALL 1801h		; HL=(HL)+HL+2
00001856:	POP DE
00001857:	PUSH DE
00001858:	EXX
00001859:	POP HL
0000185A:	POP DE
0000185B:	OR A
0000185C:	SBC HL,SP
0000185E:	PUSH HL
0000185F:	EXX
00001860:	POP BC
00001861:	DEC HL
00001862:	DEC DE
00001863:	EX DE,HL
00001864:	DI
00001865:	JR Z,+02h
00001867:	LDDR
00001869:	EX DE,HL
0000186A:	INC HL
0000186B:	LD SP,HL
0000186C:	LD (3623h),HL	; STACK
0000186F:	EI
00001870:	EXX
00001871:	PUSH DE
00001872:	EXX
00001873:	POP HL
00001874:	EX AF,AF'
00001875:	CP 02h			; Integer type ?
00001877:	JP NZ,1929h
0000187A:	CALL 199Ah
0000187D:	CALL 7FAAh		; IDEEXP: DE= (HL), A=next character to be parsed
00001880:	CP E1h			; Token for 'STEP'
00001882:	LD BC,0001h
00001885:	JR NZ,+08h		; INT_SSTEP1:
00001887:	INC HL
00001888:	PUSH DE
00001889:	CALL 7FAAh		; IDEEXP: DE= (HL), A=next character to be parsed
0000188C:	LD C,E
0000188D:	LD B,D
0000188E:	POP DE
; INT_SSTEP1:
000188F:	PUSH HL
00001890:	EXX
00001891:	LD HL,(3634h)	; current program line
00001894:	PUSH HL
00001895:	LD HL,(362Eh)		; NXTLPT: ptr for BASIC interpreter
00001898:	PUSH HL
00001899:	EXX
0000189A:	PUSH DE
0000189B:	PUSH BC
0000189C:	EXX
0000189D:	LD HL,(3649h)
000018A0:	PUSH HL
000018A1:	EXX
000018A2:	LD DE,(A62Dh)		; VARED
000018A6:	CALL 8D3Ch			; MEMECK: (SBC SP,DE)
000018A9:	POP DE
000018AA:	PUSH DE
000018AB:	LD C,00h
000018AD:	DEC HL
000018AE:	INC C
000018AF:	CALL 197Dh
000018B2:	JP C,2063h		; ERROR: FOR without NEXT
000018B5:	CP 8Dh			; Token for 'FOR'
000018B7:	JR Z,-0Bh
000018B9:	CP 8Eh			; Token for 'NEXT'
000018BB:	JR NZ,-0Eh
000018BD:	CALL 3D57h
000018C0:	JR NZ,+06h
000018C2:	DEC HL
000018C3:	DEC C
000018C4:	JR NZ,-17h
000018C6:	JR +21h
000018C8:	DEC C
000018C9:	JR Z,+0Ch
000018CB:	CALL 19A4h
000018CE:	CP 2Ch	; ','
000018D0:	DEC HL
000018D1:	JR NZ,-24h
000018D3:	INC HL
000018D4:	INC HL
000018D5:	JR -0Fh
000018D7:	PUSH BC
000018D8:	PUSH DE
000018D9:	CALL 8C2Eh		; INTGTV:  get variable
000018DC:	POP DE
000018DD:	EX DE,HL
000018DE:	OR A
000018DF:	SBC HL,BC
000018E1:	JP NZ,2063h		; ERROR: FOR without NEXT
000018E4:	EX DE,HL
000018E5:	POP AF
000018E6:	LD E,C
000018E7:	LD D,B
000018E8:	DEC HL
000018E9:	INC HL
000018EA:	PUSH HL
000018EB:	LD A,(3648h)
000018EE:	LD (A5DBh),A		; data type, aka PRCSON
000018F1:	LD B,0Eh
000018F3:	CP 02h			; integer type ?
000018F5:	JR Z,+02h
000018F7:	LD B,16h
000018F9:	LD C,FEh
000018FB:	PUSH BC
000018FC:	LD BC,15E5h
000018FF:	PUSH BC
00001900:	PUSH DE
00001901:	EXX
00001902:	POP DE
00001903:	LD HL,0258h		; 600
00001906:	LD (3634h),HL	; current program line
00001909:	LD HL,B56Bh
0000190C:	LD (362Eh),HL		; NXTLPT: ptr for BASIC interpreter
0000190F:	CP 02h
00001911:	JR NZ,+0Ch
00001913:	LD HL,0009h
00001916:	ADD HL,SP
00001917:	EX DE,HL
00001918:	LD C,(HL)
00001919:	INC HL
0000191A:	LD B,(HL)
0000191B:	EX DE,HL
0000191C:	JP 1A17h

0000191F:	EXX
00001920:	PUSH HL
00001921:	EXX
00001922:	LD HL,000Ah
00001925:	ADD HL,SP
00001926:	JP 1A68h

; eval value for 'STEP' in float mode
00001929:	CP 05h			; Single precision type ?
0000192B:	JP NZ,206Fh		; ERROR: Illegal function call
0000192E:	CALL 199Ah
00001931:	CALL 7FD1h		; EXPR:
00001934:	PUSH AF
00001935:	PUSH HL
00001936:	EX DE,HL
00001937:	CALL 5436h		; 'CSNG'
0000193A:	LD C,A
0000193B:	LD B,00h
0000193D:	LD DE,2912h
00001940:	LDIR
00001942:	POP HL
00001943:	POP AF
00001944:	CP E1h			; Token for 'STEP'
00001946:	LD DE,5C5Dh		; FLONE
00001949:	JR NZ,+09h		; SSTEP1:
0000194B:	INC HL
0000194C:	CALL 7FD1h		; EXPR:
0000194F:	EX DE,HL
00001950:	CALL 5436h		; 'CSNG'
00001953:	EX DE,HL
00001954:	LD A,03h
00001956:	PUSH HL
00001957:	EXX
00001958:	LD HL,(3634h)	; current program line
0000195B:	PUSH HL
0000195C:	LD HL,(362Eh)		; NXTLPT: ptr for BASIC interpreter
0000195F:	PUSH HL
00001960:	LD HL,2917h
00001963:	LD B,A
00001964:	LD D,(HL)
00001965:	DEC HL
00001966:	LD E,(HL)
00001967:	DEC HL
00001968:	PUSH DE
00001969:	DJNZ -07h
0000196B:	EXX
0000196C:	EX DE,HL
0000196D:	LD BC,0005h
00001970:	ADD HL,BC
00001971:	LD B,(HL)
00001972:	DEC HL
00001973:	LD C,(HL)
00001974:	DEC HL
00001975:	PUSH BC
00001976:	DEC A
00001977:	JR NZ,-08h
00001979:	EX DE,HL
0000197A:	JP 189Ch

0000197D:	CALL 3552h			; Parse the content of a 'DATA' line
00001980:	OR A
00001981:	RET NZ
00001982:	INC HL
00001983:	PUSH DE
00001984:	CALL 1773h			; LDDEMI:
00001987:	JR Z,+0Eh
00001989:	LD (190Ah),DE
0000198D:	LD E,(HL)
0000198E:	INC HL
0000198F:	LD D,(HL)
00001990:	LD (1904h),DE
00001994:	POP DE
00001995:	JR -1Ah
00001997:	POP DE
00001998:	SCF
00001999:	RET

0000199A:	CALL 8262h		; skip SPACEs in (HL), A=next char
0000199D:	CP E0h			; Token for 'TO'
0000199F:	INC HL
000019A0:	RET Z
000019A1:	JP 2066h		; ERROR: Syntax error

000019A4:	LD A,(HL)
000019A5:	INC HL
000019A6:	CALL 5401h		; TSTVAR:
000019A9:	JR NC,-07h
000019AB:	CP 28h	; '('
000019AD:	JR Z,+0Ah
000019AF:	CP 21h	; '!'
000019B1:	JR Z,-0Fh
000019B3:	CP 25h
000019B5:	JR Z,-13h
000019B7:	DEC HL
000019B8:	RET

000019B9:	LD A,(HL)
000019BA:	INC HL
000019BB:	CP 28h	; '('
000019BD:	CALL Z,19B9h
000019C0:	OR A
000019C1:	RET Z
000019C2:	CP 29h	; ')'
000019C4:	JR NZ,-0Dh
000019C6:	LD A,(HL)
000019C7:	RET

;'NEXT'
000019C8:	JR Z,+03h
000019CA:	CALL 19A4h
000019CD:	EXX
000019CE:	LD HL,0002h
000019D1:	ADD HL,SP
000019D2:	LD A,(HL)
000019D3:	INC A
000019D4:	JP Z,202Ah		; ERROR: NEXT without FOR
000019D7:	INC A
000019D8:	JR Z,+0Ch
000019DA:	CP FDh			; Token for '^'
000019DC:	JR Z,-0Ah
000019DE:	CALL 1801h		; HL=(HL)+HL+2
000019E1:	POP DE
000019E2:	LD SP,HL
000019E3:	PUSH DE
000019E4:	JR -14h
000019E6:	INC HL
000019E7:	LD A,(HL)
000019E8:	INC HL
000019E9:	LD C,(HL)
000019EA:	INC HL
000019EB:	LD B,(HL)
000019EC:	INC HL
000019ED:	LD E,(HL)
000019EE:	INC HL
000019EF:	LD D,(HL)
000019F0:	INC HL
000019F1:	PUSH BC
000019F2:	EXX
000019F3:	POP DE
000019F4:	EX DE,HL
000019F5:	OR A
000019F6:	SBC HL,DE
000019F8:	JR Z,+0Ah
000019FA:	EX DE,HL
000019FB:	EXX
000019FC:	SUB 04h
000019FE:	LD C,A
000019FF:	LD B,00h
00001A01:	ADD HL,BC
00001A02:	JR -23h
00001A04:	EX DE,HL
00001A05:	EXX
00001A06:	CP 0Eh
00001A08:	JR NZ,+51h
00001A0A:	LD A,(DE)
00001A0B:	ADD (HL)
00001A0C:	LD (DE),A
00001A0D:	LD C,A
00001A0E:	INC DE
00001A0F:	INC HL
00001A10:	LD A,(DE)
00001A11:	ADC (HL)
00001A12:	LD (DE),A
00001A13:	JP PE,205Ah		; ERROR: Overflow
00001A16:	LD B,A
00001A17:	LD A,(HL)
00001A18:	INC HL
00001A19:	LD E,(HL)
00001A1A:	INC HL
00001A1B:	LD D,(HL)
00001A1C:	INC HL
00001A1D:	EX DE,HL
00001A1E:	PUSH DE
00001A1F:	LD D,A
00001A20:	LD A,80h
00001A22:	XOR H
00001A23:	LD H,A
00001A24:	LD A,80h
00001A26:	XOR B
00001A27:	LD B,A
00001A28:	SBC HL,BC
00001A2A:	POP HL
00001A2B:	JR Z,+07h
00001A2D:	BIT 7,D
00001A2F:	JR Z,+01h
00001A31:	CCF
00001A32:	JR C,+15h
00001A34:	LD E,(HL)
00001A35:	INC HL
00001A36:	LD D,(HL)
00001A37:	INC HL
00001A38:	LD (362Eh),DE		; NXTLPT: ptr for BASIC interpreter
00001A3C:	LD E,(HL)
00001A3D:	INC HL
00001A3E:	LD D,(HL)
00001A3F:	INC HL
00001A40:	LD (3634h),DE	; current program line
00001A44:	LD E,(HL)
00001A45:	INC HL
00001A46:	LD D,(HL)
00001A47:	EX DE,HL
00001A48:	RET

00001A49:	LD DE,0006h
00001A4C:	ADD HL,DE
00001A4D:	POP BC
00001A4E:	LD SP,HL
00001A4F:	PUSH BC
00001A50:	EXX
00001A51:	CALL 8262h		; skip SPACEs in (HL), A=next char
00001A54:	CP 2Ch	; ','
00001A56:	RET NZ
00001A57:	INC HL
00001A58:	JP 19CAh

00001A5B:	LD A,05h
00001A5D:	LD (A5DBh),A		; data type, aka PRCSON
00001A60:	EXX
00001A61:	PUSH HL
00001A62:	EXX
00001A63:	EX DE,HL
00001A64:	CALL 9A44h		; ADD:
00001A67:	EX DE,HL
00001A68:	INC HL
00001A69:	LD A,(HL)
00001A6A:	LD BC,0005h
00001A6D:	ADD HL,BC
00001A6E:	PUSH AF
00001A6F:	CALL 9C39h		; CMP:
00001A72:	POP BC
00001A73:	LD A,B
00001A74:	EX AF,AF'
00001A75:	LD BC,0006h
00001A78:	ADD HL,BC
00001A79:	EX AF,AF'
00001A7A:	EXX
00001A7B:	POP HL
00001A7C:	EXX
00001A7D:	LD D,A
00001A7E:	JP 1A2Bh

	; check for output stream (#2, #3..)
00001A81:	CP 23h	; '#'
00001A83:	JR Z,+19h
00001A85:	LD DE,68BDh	; no stream specified, defaults to #2

	; set output stream to DE
00001A88:	LD IY,(A62Bh)		; STRST
00001A8C:	LD (IY+00h),01h
00001A90:	LD (IY+01h),4Fh	; 'O'
00001A94:	LD (IY+02h),E
00001A97:	LD (IY+03h),D
00001A9A:	LD BC,0000h
00001A9D:	RET

00001A9E:	INC HL
00001A9F:	CALL 7F95h		; IBYTE: load BASIC argument in A
00001AA2:	OR A
00001AA3:	JR NZ,+0Dh
00001AA5:	LD DE,693Ah
00001AA8:	CALL 8262h		; skip SPACEs in (HL), A=next char
00001AAB:	CP 2Ch	; ','
00001AAD:	JR NZ,-27h
00001AAF:	INC HL
00001AB0:	JR -2Ah
00001AB2:	CALL 6627h		; get file defined by stream number in A, out: IY=ptr
00001AB5:	LD C,E
00001AB6:	LD B,D
00001AB7:	CALL 17A8h		; END2C: look for next parameter, Z if none
00001ABA:	CP 2Ch	; ','
00001ABC:	JR NZ,+6Ch
00001ABE:	INC HL
00001ABF:	RET

; 'WRITE'
00001AC0:	CALL 1A81h	; check for output stream (#2, #3..)
00001AC3:	CALL 17A8h		; END2C: look for next parameter, Z if none
00001AC6:	JP Z,1BAFh
00001AC9:	CP 2Ch	; ','
00001ACB:	JR Z,+2Bh
00001ACD:	CP 3Bh	; ';'
00001ACF:	JR Z,+27h
00001AD1:	PUSH BC
00001AD2:	CALL 7FD1h		; EXPR:
00001AD5:	POP BC
00001AD6:	LD A,(A5DBh)		; data type, aka PRCSON
00001AD9:	CP 03h			; string type?
00001ADB:	JR Z,+23h
00001ADD:	CP 02h			; integer type ?
00001ADF:	PUSH HL
00001AE0:	PUSH BC
00001AE1:	EX DE,HL
00001AE2:	CALL Z,5436h		; 'CSNG'
00001AE5:	CALL 5693h
00001AE8:	POP BC
00001AE9:	POP HL
00001AEA:	LD A,(DE)
00001AEB:	INC DE
00001AEC:	CP 20h	; ' '
00001AEE:	JR Z,-06h
00001AF0:	OR A
00001AF1:	JR Z,-30h
00001AF3:	CALL 1BF0h
00001AF6:	JR -0Eh
00001AF8:	LD A,2Ch	; ','
00001AFA:	CALL 1BF0h
00001AFD:	INC HL
00001AFE:	JR -3Dh
00001B00:	CALL 1B1Ah
00001B03:	PUSH HL
00001B04:	EX DE,HL
00001B05:	CALL 7FC3h		; Load a string parameter
00001B08:	LD H,A
00001B09:	OR A
00001B0A:	JR Z,+08h
00001B0C:	LD A,(DE)
00001B0D:	INC DE
00001B0E:	CALL 1BF0h
00001B11:	DEC H
00001B12:	JR NZ,-08h
00001B14:	CALL 1B1Ah
00001B17:	POP HL
00001B18:	JR -57h
00001B1A:	LD A,22h	; '"'
00001B1C:	JP 1BF0h

; 'LPRINT'
00001B1F:	LD DE,69E6h	; stream data for printer (#3)
00001B22:	CALL 1A88h	; set output stream to DE
00001B25:	JR +03h

; 'PRINT'
00001B27:	CALL 1A81h	; check for output stream (#2, #3..)
00001B2A:	CALL 17A8h		; END2C: look for next parameter, Z if none
00001B2D:	JP Z,1BAFh
00001B30:	LD A,(HL)
00001B31:	CP 3Bh	; ';'
00001B33:	JR Z,+65h
00001B35:	CP 2Ch	; ','
00001B37:	JR Z,+61h
00001B39:	CP E6h	; Token for 'TAB'
00001B3B:	JR Z,+32h
00001B3D:	CP E7h	; Token for 'SPC'
00001B3F:	JR Z,+29h
00001B41:	CP E3h	; Token for 'USING'
00001B43:	JP Z,1C0Ah
00001B46:	PUSH BC
00001B47:	CALL 7FD1h		; EXPR:
00001B4A:	POP BC
00001B4B:	LD A,(A5DBh)		; data type, aka PRCSON
00001B4E:	CP 03h			; string type?
00001B50:	JP Z,1BD4h
00001B53:	CP 02h			; integer type ?
00001B55:	PUSH HL
00001B56:	PUSH BC
00001B57:	EX DE,HL
00001B58:	CALL Z,5436h		; 'CSNG'
00001B5B:	CALL 5693h
00001B5E:	POP BC
00001B5F:	POP HL
00001B60:	LD A,(DE)
00001B61:	OR A
00001B62:	JR Z,+2Eh
00001B64:	CALL 1BF0h
00001B67:	INC DE
00001B68:	JR -0Ah
00001B6A:	CALL 1BFCh
00001B6D:	JR +17h
00001B6F:	LD IY,(A62Bh)		; STRST
00001B73:	ADD IY,BC
00001B75:	LD A,0Bh
00001B77:	PUSH BC
00001B78:	PUSH HL
00001B79:	CALL 6822h
00001B7C:	POP HL
00001B7D:	POP BC
00001B7E:	PUSH AF
00001B7F:	CALL 1BFCh
00001B82:	POP DE
00001B83:	SUB D
00001B84:	JR C,-5Ch
00001B86:	OR A
00001B87:	JR Z,-5Fh
00001B89:	LD D,A
00001B8A:	CALL 1BEEh
00001B8D:	DEC D
00001B8E:	JR NZ,-06h
00001B90:	JR -68h
00001B92:	CALL 1BEEh
00001B95:	CALL 17A8h		; END2C: look for next parameter, Z if none
00001B98:	JR Z,+15h
00001B9A:	CP 2Ch	; ','
00001B9C:	JR Z,+2Fh
00001B9E:	CP 3Bh	; ';'
00001BA0:	JR NZ,-72h
00001BA2:	INC HL
00001BA3:	CALL 17A8h		; END2C: look for next parameter, Z if none
00001BA6:	JR NZ,-78h
00001BA8:	JR +0Ah

; 'PAUSE'
00001BAA:	CALL 7F95h		; IBYTE: load BASIC argument in A
00001BAD:	JR +08h
00001BAF:	LD A,09h
00001BB1:	CALL 1BF3h
00001BB4:	LD A,(364Eh)

00001BB7:	OR A
00001BB8:	RET Z
00001BB9:	LD B,A
00001BBA:	LD DE,3A00h
00001BBD:	DEC DE
00001BBE:	LD A,D
00001BBF:	OR E
00001BC0:	JR NZ,-05h
00001BC2:	LD A,(0036h)	; BRKBUF
00001BC5:	CP 03h
00001BC7:	JP Z,1FCAh
00001BCA:	DJNZ -12h
00001BCC:	RET
00001BCD:	LD A,08h
00001BCF:	CALL 1BF3h
00001BD2:	JR -32h

00001BD4:	PUSH HL
00001BD5:	EX DE,HL
00001BD6:	LD A,(HL)
00001BD7:	INC HL
00001BD8:	LD E,(HL)
00001BD9:	INC HL
00001BDA:	LD D,(HL)
00001BDB:	LD HL,(A62Bh)		; STRST
00001BDE:	ADD HL,DE
00001BDF:	EX DE,HL
00001BE0:	POP HL
00001BE1:	OR A
00001BE2:	JR Z,-4Fh
00001BE4:	PUSH AF
00001BE5:	LD A,(DE)
00001BE6:	CALL 1BF0h
00001BE9:	INC DE
00001BEA:	POP AF
00001BEB:	DEC A
00001BEC:	JR -0Ch

00001BEE:	LD A,20h
00001BF0:	EX AF,AF'
00001BF1:	LD A,07h
00001BF3:	LD IY,(A62Bh)		; STRST
00001BF7:	ADD IY,BC
00001BF9:	JP 6822h

00001BFC:	CALL 8BFDh		; INC HL and check for '('
00001BFF:	PUSH BC
00001C00:	CALL 7F95h		; IBYTE: load BASIC argument in A
00001C03:	POP BC
00001C04:	PUSH AF
00001C05:	CALL 28FCh
00001C08:	POP AF
00001C09:	RET

; entry for PRINT USING
00001C0A:	INC HL
00001C0B:	PUSH BC
00001C0C:	CALL 7FB9h		; STREXP:
00001C0F:	PUSH HL
00001C10:	LD HL,(A62Bh)		; STRST
00001C13:	LD BC,0010h
00001C16:	LD (1C4Dh),BC
00001C1A:	ADD HL,BC
00001C1B:	LD B,A
00001C1C:	OR A
00001C1D:	JP Z,206Fh		; ERROR: Illegal function call
00001C20:	LD A,(DE)
00001C21:	LD (HL),A
00001C22:	INC DE
00001C23:	INC HL
00001C24:	DJNZ -06h
00001C26:	LD (HL),00h
00001C28:	POP HL
00001C29:	POP BC
00001C2A:	CALL 1FA0h
00001C2D:	JP NC,1BAFh
00001C30:	CALL 17A8h		; END2C: look for next parameter, Z if none
00001C33:	RET Z
00001C34:	PUSH BC
00001C35:	CALL 7FD1h		; EXPR:
00001C38:	POP BC
00001C39:	LD A,(A5DBh)		; data type, aka PRCSON
00001C3C:	PUSH HL
00001C3D:	CALL 1C43h
00001C40:	POP HL
00001C41:	JR -19h

00001C43:	CP 03h			; string type?
00001C45:	JP NZ,1D7Fh		; FLTUSG:
00001C48:	PUSH DE
00001C49:	LD HL,(A62Bh)		; STRST
00001C4C:	LD DE,0010h
00001C4F:	ADD HL,DE
00001C50:	LD A,(HL)
00001C51:	OR A
00001C52:	JR Z,+42h
00001C54:	CP 21h	; '!'
00001C56:	JP Z,1CB4h
00001C59:	CP 26h	; '&'
00001C5B:	JP Z,1D2Bh
00001C5E:	CP 23h	; '#'
00001C60:	JP Z,206Fh		; ERROR: Illegal function call
00001C63:	CP 2Ah	; '*'
00001C65:	JP Z,1C9Eh
00001C68:	CP 5Ch	; '\'
00001C6A:	JP Z,1CA9h
00001C6D:	CP 2Eh	; '.'
00001C6F:	JP Z,1C92h
00001C72:	CP 2Bh	; '+'
00001C74:	JR Z,+20h
00001C76:	CP 5Fh	; '_'
00001C78:	JP NZ,1C80h

;'_'
00001C7B:	INC HL
00001C7C:	LD A,(HL)
00001C7D:	OR A
00001C7E:	JR Z,+16h

00001C80:	CALL 1BF0h
00001C83:	INC HL
00001C84:	LD DE,(A62Bh)		; STRST
00001C88:	OR A
00001C89:	PUSH HL
00001C8A:	SBC HL,DE
00001C8C:	LD (1C4Dh),HL
00001C8F:	POP HL
00001C90:	JR -42h
00001C92:	INC HL
00001C93:	LD A,(HL)
00001C94:	CP 23h	; '#'
00001C96:	JP Z,206Fh		; ERROR: Illegal function call
00001C99:	DEC HL
00001C9A:	LD A,2Eh		; '.'
00001C9C:	JR -1Eh

00001C9E:	INC HL
00001C9F:	LD A,(HL)
00001CA0:	CP 2Ah	; '*'
00001CA2:	JR Z,-0Eh
00001CA4:	DEC HL
00001CA5:	LD A,2Ah
00001CA7:	JR -29h

00001CA9:	INC HL
00001CAA:	LD A,(HL)
00001CAB:	CP 2Ah	; '*'
00001CAD:	JR Z,-19h
00001CAF:	DEC HL
00001CB0:	LD A,5Ch
00001CB2:	JR -34h
00001CB4:	EX HL,(SP)
00001CB5:	LD A,(HL)
00001CB6:	OR A
00001CB7:	LD A,20h
00001CB9:	JR Z,+0Bh
00001CBB:	INC HL
00001CBC:	LD A,(HL)
00001CBD:	INC HL
00001CBE:	LD H,(HL)
00001CBF:	LD L,A
00001CC0:	LD DE,(A62Bh)		; STRST
00001CC4:	ADD HL,DE
00001CC5:	LD A,(HL)
00001CC6:	CALL 1BF0h
00001CC9:	POP HL
00001CCA:	INC HL
00001CCB:	LD A,(HL)
00001CCC:	OR A
00001CCD:	JR Z,+4Ch
00001CCF:	CP 21h	; '!'
00001CD1:	JR Z,+4Dh
00001CD3:	CP 23h	; '#'
00001CD5:	JR Z,+49h
00001CD7:	CP 26h	; '&'
00001CD9:	JR Z,+45h
00001CDB:	CP 2Bh	; '+'
00001CDD:	JR Z,+41h
00001CDF:	CP 2Ah	; '*'
00001CE1:	JR Z,+2Ah
00001CE3:	CP 2Eh	; '.'
00001CE5:	JR Z,+14h
00001CE7:	CP 5Ch	; '\'
00001CE9:	JR Z,+19h
00001CEB:	CP 5Fh
00001CED:	JR NZ,+06h
00001CEF:	INC HL
00001CF0:	LD A,(HL)
00001CF1:	OR A
00001CF2:	JP Z,206Fh		; ERROR: Illegal function call
00001CF5:	CALL 1BF0h
00001CF8:	INC HL
00001CF9:	JR -30h

00001CFB:	INC HL
00001CFC:	LD A,(HL)
00001CFD:	LD D,A
00001CFE:	CP 23h	; '#'
00001D00:	LD A,5Ch
00001D02:	JR +10h

00001D04:	INC HL
00001D05:	LD A,(HL)
00001D06:	LD D,A
00001D07:	CP 5Ch	; '\'
00001D09:	LD A,5Ch
00001D0B:	JR +07h

00001D0D:	INC HL
00001D0E:	LD A,(HL)
00001D0F:	LD D,A
00001D10:	CP 2Ah	; '*'
00001D12:	LD A,2Ah
00001D14:	DEC HL
00001D15:	JR NZ,-22h
00001D17:	LD A,D
00001D18:	OR A
00001D19:	JR NZ,+05h
00001D1B:	LD HL,0010h
00001D1E:	JR +07h
00001D20:	LD DE,(A62Bh)		; STRST
00001D24:	OR A
00001D25:	SBC HL,DE
00001D27:	LD (1C4Dh),HL
00001D2A:	RET

; '&'
00001D2B:	LD D,02h
00001D2D:	INC HL
00001D2E:	LD A,(HL)
00001D2F:	CP 26h	; '&'
00001D31:	JR Z,+08h
00001D33:	INC D
00001D34:	CP 20h	; ' '
00001D36:	JR Z,-0Bh
00001D38:	JP 206Fh		; ERROR: Illegal function call

; '&'....
00001D3B:	EX HL,(SP)
00001D3C:	LD A,(HL)
00001D3D:	CP D
00001D3E:	JR C,+17h
00001D40:	INC HL
00001D41:	LD A,(HL)
00001D42:	INC HL
00001D43:	LD H,(HL)
00001D44:	LD L,A
00001D45:	PUSH BC
00001D46:	LD BC,(A62Bh)		; STRST
00001D4A:	ADD HL,BC
00001D4B:	POP BC
00001D4C:	LD A,(HL)
00001D4D:	CALL 1BF0h
00001D50:	INC HL
00001D51:	DEC D
00001D52:	JR NZ,-08h
00001D54:	JP 1CC9h
00001D57:	LD E,(HL)
00001D58:	INC HL
00001D59:	LD A,(HL)
00001D5A:	INC HL
00001D5B:	LD H,(HL)
00001D5C:	LD L,A
00001D5D:	LD A,E
00001D5E:	OR A
00001D5F:	JR Z,+15h
00001D61:	PUSH BC
00001D62:	LD BC,(A62Bh)		; STRST
00001D66:	ADD HL,BC
00001D67:	POP BC
00001D68:	LD A,(HL)
00001D69:	CALL 1BF0h
00001D6C:	INC HL
00001D6D:	DEC E
00001D6E:	JR Z,+09h
00001D70:	DEC D
00001D71:	JR NZ,-0Bh
00001D73:	JP 1CC9h

00001D76:	CALL 1BEEh
00001D79:	DEC D
00001D7A:	JR NZ,-06h
00001D7C:	JP 1CC9h

00001D7F:	PUSH DE
00001D80:	CP 02h
00001D82:	EX DE,HL
00001D83:	CALL Z,5436h		; 'CSNG'
00001D86:	XOR A
00001D87:	LD (1F0Ah),A		; FPLUSF
00001D8A:	LD (1F59h),A		; PUASTF  ..PUT * FLG
00001D8D:	LD (1F42h),A		; PUYENF ..]
00001D90:	LD (1F00h),A		; AFTER-FLG
00001D93:	LD (1EBAh),A		; PUCOMF  ..PUT, FLG
00001D96:	LD (1EE7h),A		; INTLEN  ..INT length
00001D99:	LD (1F05h),A		; RPLUSF  ...###+
00001D9C:	LD (1EB3h),A		; 1EB3h = PUEXPF:  ...^^^^ (self modifying code)
00001D9F:	DEC A
00001DA0:	LD (1EB0h),A
00001DA3:	LD HL,(A62Bh)		; STRST
00001DA6:	LD DE,(1C4Dh)
00001DAA:	ADD HL,DE
00001DAB:	LD A,(HL)
00001DAC:	OR A
00001DAD:	JR Z,+28h
00001DAF:	CP 21h	; '!'
00001DB1:	JR Z,+24h
00001DB3:	CP 26h	; '&'
00001DB5:	JR Z,+20h
00001DB7:	CP 23h	; '#'
00001DB9:	JP Z,1E1Eh
00001DBC:	CP 2Ah	; '*'
00001DBE:	JP Z,1DE0h
00001DC1:	CP 5Ch	; '\'
00001DC3:	JP Z,1DFCh
00001DC6:	CP 2Eh	; '.'
00001DC8:	JP Z,1E11h
00001DCB:	CP 2Bh	; '+'
00001DCD:	JP Z,1E07h
00001DD0:	CP 5Fh
00001DD2:	JR NZ,+06h
00001DD4:	INC HL
00001DD5:	LD A,(HL)
00001DD6:	OR A
00001DD7:	JP Z,206Fh		; ERROR: Illegal function call
00001DDA:	CALL 1BF0h
00001DDD:	INC HL
00001DDE:	JR -35h
00001DE0:	INC HL
00001DE1:	CP (HL)
00001DE2:	DEC HL
00001DE3:	JR NZ,-0Bh
00001DE5:	LD A,01h
00001DE7:	LD (1F59h),A		; PUASTF  ..PUT * FLG
00001DEA:	INC HL
00001DEB:	INC HL
00001DEC:	LD A,(HL)
00001DED:	LD D,02h
00001DEF:	CP 5Ch	; '\'
00001DF1:	JR NZ,+2Eh
00001DF3:	INC HL
00001DF4:	INC D
00001DF5:	LD A,01h
00001DF7:	LD (1F42h),A		; PUYENF ..]
00001DFA:	JR +25h
00001DFC:	INC HL
00001DFD:	CP (HL)
00001DFE:	DEC HL
00001DFF:	JR NZ,-27h
00001E01:	INC HL
00001E02:	INC HL
00001E03:	LD D,02h
00001E05:	JR -12h
00001E07:	LD A,01h
00001E09:	LD (1F0Ah),A		; FPLUSF
00001E0C:	INC HL
00001E0D:	LD D,01h
00001E0F:	JR +10h
00001E11:	INC HL
00001E12:	LD A,(HL)
00001E13:	DEC HL
00001E14:	CP 23h	; '#'
00001E16:	LD A,2Eh		; '.'
00001E18:	JR NZ,-40h
00001E1A:	LD D,00h
00001E1C:	JR +03h
00001E1E:	LD D,01h
00001E20:	INC HL
; PULSLS:
00001E21:	EX DE,HL
00001E22:	DEC H
; PUGTFC:
00001E23:	INC H
00001E24:	LD A,(DE)
00001E25:	INC DE
00001E26:	CP 23h	; '#'
00001E28:	JR Z,-07h		; PUGTFC:
00001E2A:	CP 2Ch	; ','
00001E2C:	JR NZ,+07h		; PUCONP:
00001E2E:	LD A,01h
00001E30:	LD (1EBAh),A	; PUCOMF
00001E33:	JR -12h			; PUGTFC:
; PUCONP:
00001E35:	CP 2Eh	; '.'
00001E37:	JR Z,+23h
00001E39:	CP 2Dh	; '-'
00001E3B:	JR NZ,+08h
00001E3D:	LD A,01h
00001E3F:	LD (1F00h),A		; AFTER-FLG
00001E42:	INC DE
00001E43:	JR +10h
00001E45:	CP 2Bh	; '+'
00001E47:	JR NZ,+0Ch
00001E49:	LD A,(1F0Ah)		; FPLUSF
00001E4C:	OR A
00001E4D:	JR NZ,+06h
00001E4F:	LD A,01h
00001E51:	LD (1F05h),A		; RPLUSF  ...###+
00001E54:	INC DE
00001E55:	DEC DE
00001E56:	LD A,H
00001E57:	LD (1EE7h),A		; INTLEN  ..INT length
00001E5A:	JR +33h
00001E5C:	LD A,H
00001E5D:	LD (1EE7h),A		; INTLEN  ..INT length
00001E60:	LD H,FFh
00001E62:	INC H
00001E63:	LD A,(DE)
00001E64:	INC DE
00001E65:	CP 23h	; '#'
00001E67:	JR Z,-07h
00001E69:	CP 2Dh	; '-'
00001E6B:	JR NZ,+08h
00001E6D:	LD A,01h
00001E6F:	LD (1F00h),A		; AFTER-FLG
00001E72:	INC DE
00001E73:	JR +10h
00001E75:	CP 2Bh	; '+'
00001E77:	JR NZ,+0Ch
00001E79:	LD A,(1F0Ah)		; FPLUSF
00001E7C:	OR A
00001E7D:	JR NZ,+06h
00001E7F:	LD A,01h
00001E81:	LD (1F05h),A		; RPLUSF  ...###+
00001E84:	INC DE
00001E85:	DEC DE
00001E86:	LD A,H
00001E87:	LD (1EB0h),A
00001E8A:	JR +03h
00001E8C:	POP DE
00001E8D:	JR +12h
00001E8F:	LD H,04h
00001E91:	PUSH DE
00001E92:	LD A,(DE)
00001E93:	INC DE
00001E94:	CP 5Eh
00001E96:	JR NZ,-0Ch
00001E98:	DEC H
00001E99:	JR NZ,-09h
00001E9B:	POP AF
00001E9C:	LD A,01h
00001E9E:	LD (1EB3h),A	; 1EB3h = PUEXPF:  (self modifying code)
00001EA1:	POP HL
00001EA2:	PUSH DE
00001EA3:	INC HL
00001EA4:	LD A,(HL)
00001EA5:	RES 7,(HL)
00001EA7:	DEC HL
00001EA8:	LD (1F37h),A
00001EAB:	LD A,(1EE7h)		; INTLEN  ..INT length
00001EAE:	LD D,A
00001EAF:	LD A,00h
00001EB1:	LD E,A
00001EB2:	LD A,00h		; 1EB3h = PUEXPF:  (self modifying code)
00001EB4:	PUSH BC
00001EB5:	CALL 5782h		; USNGCV:
00001EB8:	POP BC
00001EB9:	LD A,00h
00001EBB:	OR A
00001EBC:	JR Z,+41h
00001EBE:	PUSH BC
00001EBF:	PUSH DE
00001EC0:	LD A,(1EE7h)		; INTLEN  ..INT length
00001EC3:	LD L,A
00001EC4:	LD H,00h
00001EC6:	ADD HL,DE
00001EC7:	LD DE,A59Ch		; DGBF00
00001ECA:	LD C,00h
00001ECC:	DEC HL
00001ECD:	LD B,03h
00001ECF:	LD A,(HL)
00001ED0:	CP 20h	; ' '
00001ED2:	JR Z,+12h
00001ED4:	INC C
00001ED5:	LD (DE),A
00001ED6:	INC DE
00001ED7:	DEC HL
00001ED8:	DJNZ -0Bh
00001EDA:	LD A,(HL)
00001EDB:	CP 20h	; ' '
00001EDD:	JR Z,+07h
00001EDF:	LD A,2Ch	; ','
00001EE1:	LD (DE),A
00001EE2:	INC DE
00001EE3:	INC C
00001EE4:	JR -19h
00001EE6:	LD A,00h
00001EE8:	CP C
00001EE9:	JP C,1F9Bh
00001EEC:	LD B,C
00001EED:	LD L,A
00001EEE:	LD H,00h
00001EF0:	POP DE
00001EF1:	PUSH DE
00001EF2:	ADD HL,DE
00001EF3:	LD DE,A59Ch		; DGBF00
00001EF6:	DEC HL
00001EF7:	LD A,(DE)
00001EF8:	LD (HL),A
00001EF9:	DEC HL
00001EFA:	INC DE
00001EFB:	DJNZ -06h
00001EFD:	POP DE
00001EFE:	POP BC
00001EFF:	LD A,00h
00001F01:	OR A
00001F02:	JR NZ,+3Dh
00001F04:	LD A,00h
00001F06:	OR A
00001F07:	JR NZ,+38h
00001F09:	LD A,00h
00001F0B:	OR A
00001F0C:	JR NZ,+28h
00001F0E:	LD A,(1F37h)
00001F11:	RLCA
00001F12:	JR NC,+2Dh
00001F14:	LD A,(DE)
00001F15:	CP 20h	; ' '
00001F17:	LD H,2Dh
00001F19:	JR Z,+05h
00001F1B:	CP 30h
00001F1D:	JP NZ,1F9Bh
00001F20:	PUSH DE
00001F21:	LD A,(DE)
00001F22:	INC DE
00001F23:	CP 20h	; ' '
00001F25:	JR Z,-06h
00001F27:	CP 30h
00001F29:	JR Z,-0Ah
00001F2B:	OR A
00001F2C:	JR NZ,+01h
00001F2E:	DEC DE
00001F2F:	DEC DE
00001F30:	DEC DE
00001F31:	LD A,H
00001F32:	LD (DE),A
00001F33:	POP DE
00001F34:	JR +0Bh
00001F36:	LD A,00h
00001F38:	RLCA
00001F39:	LD H,2Bh
00001F3B:	JR NC,-1Dh
00001F3D:	LD H,2Dh
00001F3F:	JR -21h
00001F41:	LD A,00h
00001F43:	OR A
00001F44:	JR Z,+12h
00001F46:	LD A,(DE)
00001F47:	CP 20h	; ' '
00001F49:	JR NZ,+0Dh
00001F4B:	PUSH DE
00001F4C:	LD A,(DE)
00001F4D:	INC DE
00001F4E:	CP 20h	; ' '
00001F50:	JR Z,-06h
00001F52:	DEC DE
00001F53:	DEC DE
00001F54:	LD A,5Ch
00001F56:	LD (DE),A
00001F57:	POP DE
00001F58:	LD A,00h
00001F5A:	OR A
00001F5B:	JR Z,+0Dh
00001F5D:	PUSH DE
00001F5E:	LD A,(DE)
00001F5F:	CP 20h	; ' '
00001F61:	JR NZ,+06h
00001F63:	LD A,2Ah
00001F65:	LD (DE),A
00001F66:	INC DE
00001F67:	JR -0Bh
00001F69:	POP DE
00001F6A:	LD A,(DE)
00001F6B:	OR A
00001F6C:	JR Z,+06h
00001F6E:	CALL 1BF0h
00001F71:	INC DE
00001F72:	JR -0Ah
00001F74:	LD A,(1F05h)		; RPLUSF  ...###+
00001F77:	OR A
00001F78:	JR Z,+0Fh
00001F7A:	LD A,(1F37h)
00001F7D:	RLCA
00001F7E:	LD A,2Bh
00001F80:	JR NC,+02h
00001F82:	LD A,2Dh
00001F84:	CALL 1BF0h
00001F87:	JR +0Eh
00001F89:	LD A,(1F00h)		; AFTER-FLG
00001F8C:	OR A
00001F8D:	JR Z,+08h
00001F8F:	LD A,(1F37h)
00001F92:	RLCA
00001F93:	LD A,20h
00001F95:	JR -17h
00001F97:	POP HL
00001F98:	JP 1CCBh

00001F9B:	LD A,24h		; error code for 'Format over'
00001F9D:	JP 2076h		; Generate error message, error code in 'A'

00001FA0:	CALL 8262h		; skip SPACEs in (HL), A=next char
00001FA3:	OR A
00001FA4:	RET Z
00001FA5:	CP 3Ah	; ':'
00001FA7:	RET Z
00001FA8:	CP 2Ch	; ','
00001FAA:	INC HL
00001FAB:	SCF
00001FAC:	RET Z
00001FAD:	CP 3Bh	; ';'
00001FAF:	SCF
00001FB0:	RET Z
00001FB1:	JP 2066h		; ERROR: Syntax error

; 'STOP'
00001FB4:	LD HL,(363Eh)
00001FB7:	INC HL
00001FB8:	LD (363Eh),HL
00001FBB:	JR +0Dh

00001FBD:	CALL 21AFh		; CLPTR:
00001FC0:	LD HL,FFFFh
00001FC3:	LD (3634h),HL	; current program line
00001FC6:	LD (3623h),SP	; STACK
00001FCA:	LD SP,(3623h)	; STACK
00001FCE:	LD HL,(363Eh)
00001FD1:	LD DE,(3634h)	; current program line
00001FD5:	INC DE
00001FD6:	LD A,D
00001FD7:	OR E
00001FD8:	JR Z,+17h
00001FDA:	LD (3641h),HL
00001FDD:	LD HL,(362Eh)		; NXTLPT: ptr for BASIC interpreter
00001FE0:	LD (3645h),HL
00001FE3:	DEC DE
00001FE4:	LD (3643h),DE
00001FE8:	LD (3630h),DE	; EDLINE
00001FEC:	LD A,01h
00001FEE:	LD (3627h),A	; CONTFG
00001FF1:	CALL 4C5Bh
00001FF4:	LD DE,2132h
00001FF7:	JP 20E0h

00001FFA:	XOR A
00001FFB:	LD (0036h),A	; BRKBUF
00001FFE:	LD (0EA6h),A	; POINT1
00002001:	LD (0EA7h),A	; POINT2
00002004:	RET

; 'CONT'
00002005:	POP DE
00002006:	LD A,(3627h)	; CONTFG
00002009:	OR A
0000200A:	JP Z,2045h		; 	Can't continue
0000200D:	LD HL,(3643h)
00002010:	LD (3634h),HL	; current program line
00002013:	LD HL,(3645h)
00002016:	LD (362Eh),HL		; NXTLPT: ptr for BASIC interpreter
00002019:	LD HL,(3641h)
0000201C:	JP 15E5h

0000201F:	LD A,01h		; STOP..
00002021:	CALL 0DECh		; .. tape recorder
00002024:	CALL 2212h		; 'CLR' (aka CLS)
00002027:	LD A,07h	; Out of memory
00002029:	LD HL,013Eh	; NEXT without FOR
0000202C:	LD HL,083Eh	; Undefined label
0000202F:	LD HL,0A3Eh	; Duplicate definition
00002032:	LD HL,093Eh	; Subscript out of range
00002035:	LD HL,143Eh	; RESUME without error
00002038:	LD HL,203Eh	; WHILE without WEND
0000203B:	LD HL,213Eh	; WEND without while
0000203E:	LD HL,1A3Eh	; UNTIL without repeat
00002041:	LD HL,033Eh	; RETURN without GOSUB
00002044:	LD HL,113Eh	; Can't continue
00002047:	LD HL,0F3Eh	; String too long
0000204A:	LD HL,3F3Eh	; ??  for extended error handler ?
0000204D:	LD HL,1E3Eh	; Bad file mode
00002050:	LD HL,133Eh	; No RESUME
00002053:	LD HL,173Eh	; Line buffer overflow
00002056:	LD HL,0B3Eh	; Division by zero
00002059:	LD HL,063Eh	; Overflow
0000205C:	LD HL,103Eh	; Too complex
0000205F:	LD HL,0D3Eh	; Type mismatch
00002062:	LD HL,233Eh	; FOR without NEXT
00002065:	LD HL,023Eh	; Syntax error
00002068:	LD HL,163Eh	; Missing operand
0000206B:	LD HL,223Eh	; Reserved feature ('OFF', 'ERASE', 'SIZE', 'VDIM' and invalid TOKENS point here)
0000206E:	LD HL,053Eh	; Illegal function call
00002071:	JR +03h

; 'ERROR'
00002073:	CALL 7F95h		; IBYTE: load BASIC argument in A
; Generate error message, error code in 'A'
00002076:	LD HL,0000h
00002079:	LD (91CEh),HL	; FNVRBF
0000207C:	LD SP,(3623h)	; STACK
00002080:	LD C,A
00002081:	LD HL,(3634h)	; current program line
00002084:	INC HL
00002085:	LD A,L
00002086:	OR H
00002087:	LD A,C
00002088:	JR Z,+22h
0000208A:	LD HL,(3634h)	; current program line
0000208D:	LD (3638h),HL	; ERRLNO  ..program line where the last error happened
00002090:	LD (3630h),HL	; EDLINE
00002093:	LD HL,(362Eh)		; NXTLPT: ptr for BASIC interpreter
00002096:	LD (363Ah),HL
00002099:	LD HL,(363Eh)
0000209C:	LD (363Ch),HL
0000209F:	LD (3640h),A		; error code
000020A2:	EX AF,AF'
000020A3:	LD A,(3626h)		; ERRORF  ..current error condition
000020A6:	INC A
000020A7:	CP 02h
000020A9:	JR Z,+63h
000020AB:	EX AF,AF'
000020AC:	CP 4Ah
000020AE:	JR NC,+0Eh
000020B0:	LD DE,7BC8h		; Error message table
000020B3:	CP 26h	; '&'
000020B5:	JR C,+0Ch
000020B7:	LD DE,7DF7h
000020BA:	SUB 31h
000020BC:	JR NC,+05h
000020BE:	LD DE,2118h		; "Unprintable error", 0
000020C1:	JR +18h

000020C3:	OR A
000020C4:	JR Z,-08h
000020C6:	DEC A
000020C7:	JR Z,+0Dh
000020C9:	PUSH AF
000020CA:	LD A,(DE)
000020CB:	INC DE
000020CC:	CP 80h
000020CE:	JR Z,+03h
000020D0:	OR A
000020D1:	JR NZ,-09h
000020D3:	POP AF
000020D4:	JR -10h
000020D6:	LD A,(DE)
000020D7:	CP 80h
000020D9:	JR Z,-1Dh
000020DB:	LD A,07h
000020DD:	CALL 0013h		; OUTCH (PRINT char in A)
000020E0:	CALL 1FFAh
000020E3:	CALL 04A3h
000020E6:	LD A,(0026h)	; COLORF
000020E9:	PUSH AF
000020EA:	LD A,07h
000020EC:	LD (0026h),A	; COLORF
000020EF:	CALL 000Bh		; MSX (aka DEPRT), print message in DE
000020F2:	LD HL,(3634h)	; current program line
000020F5:	INC HL
000020F6:	LD A,L
000020F7:	OR H
000020F8:	JR Z,+0Dh
000020FA:	DEC HL
000020FB:	LD DE,212Ah
000020FE:	CALL 000Bh		; MSX (aka DEPRT), print message in DE
00002101:	CALL 2139h
00002104:	CALL 000Bh		; MSX (aka DEPRT), print message in DE
00002107:	POP AF
00002108:	LD (0026h),A	; COLORF
0000210B:	JP 14ECh		; PROMPT:

0000210E:	LD (3626h),A	; ERRORF  ..current error condition
00002111:	LD HL,(3636h)	; ERRORV
00002114:	PUSH HL
00002115:	JP 15CCh

00002118:	defm "Unprintable error"
00002129:	NOP

0000212A:	defm " in "
0000212E:	NOP

0000212F:	defm "Ok"
00002131:	NOP

0000212F:	defm "Break"
00002138:	NOP

00002139:	LD DE,A59Ch		; DGBF00
0000213C:	CALL 5C7Ah
0000213F:	LD B,04h
00002141:	LD A,(DE)
00002142:	CP 30h		; '0'
00002144:	RET NZ
00002145:	INC DE
00002146:	DJNZ -07h
00002148:	RET

; 'END'
00002149:	CALL 6566h
0000214C:	POP BC
0000214D:	JP 14ECh		; PROMPT:

; 'AUTO'
00002150:	LD DE,000Ah		; 10
00002153:	LD BC,000Ah		; 10
00002156:	JR Z,+2Eh		; jp over if no parameters
00002158:	CP 2Ch	; ','
0000215A:	JR NZ,+09h
0000215C:	CALL 3088h		; Get arguments for line number range (xxx-yyy), DE to BC.
0000215F:	LD DE,(3630h)	; EDLINE
00002163:	JR +21h
00002165:	CALL 8262h		; skip SPACEs in (HL), A=next char
00002168:	CP 2Eh	; '.'
0000216A:	LD DE,(3630h)	; EDLINE
0000216E:	JR NZ,+01h
00002170:	INC HL
00002171:	CALL NZ,7FAAh		; IDEEXP: DE= (HL), A=next character to be parsed
00002174:	CALL 8262h		; skip SPACEs in (HL), A=next char
00002177:	LD BC,000Ah
0000217A:	CP 2Ch	; ','
0000217C:	JR NZ,+08h
0000217E:	PUSH DE
0000217F:	INC HL
00002180:	CALL 7FAAh		; IDEEXP: DE= (HL), A=next character to be parsed
00002183:	LD C,E
00002184:	LD B,D
00002185:	POP DE
00002186:	INC BC
00002187:	LD A,C
00002188:	OR B
00002189:	JR NZ,+03h
0000218B:	LD BC,000Bh		; MSX (aka DEPRT), print message in DE
0000218E:	DEC BC
0000218F:	LD (3630h),DE	; EDLINE
00002193:	LD (3632h),BC
00002197:	LD A,01h
00002199:	LD (362Dh),A
0000219C:	JP 14ECh		; PROMPT:

0000219F:	LD A,(362Dh)

000021A2:	OR A
000021A3:	RET Z
000021A4:	JP 30DBh

000021A7:	LD (A631h),HL		; MEMLMT
000021AA:	DEC H
000021AB:	LD (A62Fh),HL
000021AE:	RET

; CLPTR:
000021AF:	LD HL,(A635h)		; TEXTST,  address of BASIC  program
000021B2:	LD (HL),00h
000021B4:	INC HL
000021B5:	LD (HL),00h
000021B7:	INC HL
000021B8:	LD (A629h),HL		; VARST
000021BB:	LD (HL),00h
000021BD:	INC HL
000021BE:	LD (A62Bh),HL		; STRST
000021C1:	JP 17C4h

; 'NEW'
000021C4:	JR Z,+30h
000021C6:	CP 9Dh			; Token code for 'ON'
000021C8:	JP NZ,2066h		; ERROR: Syntax error
000021CB:	INC HL
000021CC:	LD DE,A73Fh			; KEYBM1 (aka KEYBUF)
000021CF:	LD BC,0169h			; 361
000021D2:	EX DE,HL
000021D3:	ADD HL,BC
000021D4:	EX DE,HL
000021D5:	PUSH DE
000021D6:	CALL 17A8h		; END2C: look for next parameter, Z if none
000021D9:	CALL NZ,7FAAh		; IDEEXP: DE= (HL), A=next character to be parsed
000021DC:	EX HL,(SP)
000021DD:	SCF
000021DE:	SBC HL,DE
000021E0:	JP NC,206Fh		; ERROR: Illegal function call
000021E3:	LD HL,(A631h)		; MEMLMT
000021E6:	LD A,H
000021E7:	SUB 08h
000021E9:	LD H,A
000021EA:	SBC HL,DE
000021EC:	JP C,206Fh		; ERROR: Illegal function call
000021EF:	POP HL
000021F0:	LD (A635h),DE		; TEXTST,  address of BASIC  program
000021F4:	JR +03h

000021F6:	CALL 6566h
000021F9:	CALL 21AFh		; CLPTR:
000021FC:	JP 14DAh		; 

000021FF:	LD A,01h
00002201:	LD (3625h),A	; MAXFILES
00002204:	JP 201Fh		; ERROR: 'Out of memory'

; 'MAXFILES'
00002207:	CALL 7F95h		; IBYTE: load BASIC argument in A
0000220A:	CP 10h
0000220C:	JP NC,206Fh		; ERROR: Illegal function call
0000220F:	LD (3625h),A	; MAXFILES

; 'CLR' (aka CLS)
00002212:	POP DE
00002213:	LD (18FDh),DE
00002217:	LD SP,(A62Fh)
0000221B:	LD DE,FFFFh
0000221E:	PUSH DE
0000221F:	LD (3623h),SP	; STACK
00002223:	PUSH HL
00002224:	LD HL,(A629h)		; VARST
00002227:	LD (HL),00h
00002229:	INC HL
0000222A:	LD (A62Bh),HL		; STRST
0000222D:	LD A,(3625h)	; MAXFILES
00002230:	LD B,A
00002231:	INC B
00002232:	LD DE,0110h
00002235:	LD (HL),00h
00002237:	ADD HL,DE
00002238:	JR C,-3Bh
0000223A:	PUSH HL
0000223B:	PUSH DE
0000223C:	EX DE,HL
0000223D:	LD HL,0000h
00002240:	ADD HL,SP
00002241:	DEC H
00002242:	DEC H
00002243:	OR A
00002244:	SBC HL,DE
00002246:	POP DE
00002247:	POP HL
00002248:	JR C,-4Bh
0000224A:	DJNZ -17h
0000224C:	LD (3628h),HL
0000224F:	LD (HL),00h
00002251:	INC HL
00002252:	LD (HL),00h
00002254:	INC HL
00002255:	LD (A62Dh),HL		; VARED
00002258:	LD (3621h),HL		; TMPEND
0000225B:	LD HL,A5FBh
0000225E:	LD B,1Ah
00002260:	LD A,05h
00002262:	LD (HL),A
00002263:	INC HL
00002264:	DJNZ -04h
00002266:	XOR A
00002267:	LD (364Fh),A
0000226A:	LD (91BBh),A
0000226D:	LD (3627h),A	; CONTFG
00002270:	CALL 2777h
00002273:	LD HL,(18FDh)
00002276:	EX HL,(SP)
00002277:	RET

; 'TRON'
00002278:	LD A,AFh
;00002279:	XOR A		; 'TROFF'
0000227A:	LD (362Bh),A	; TRON/TROFF flag (zero = OFF)
0000227D:	RET

; Subroutine for 'TRACE'
0000227E:	PUSH AF
0000227F:	PUSH HL
00002280:	LD A,5Bh		; '['
00002282:	CALL 0013h		; OUTCH (PRINT char in A)
00002285:	LD HL,(3634h)	; current program line
00002288:	CALL 2139h
0000228B:	CALL 000Bh		; MSX (aka DEPRT), print message in DE
0000228E:	LD A,5Dh		; ']'
00002290:	CALL 0013h		; OUTCH (PRINT char in A)
00002293:	POP HL
00002294:	POP AF
00002295:	RET

; 'OPTION'
00002296:	CP E5h			; Token for 'BASE'
00002298:	JR NZ,+1Ch
0000229A:	LD A,(364Fh)
0000229D:	OR A
0000229E:	JP NZ,2030h		; ERROR: Duplicate definition

000022A1:	INC HL
000022A2:	CALL 7F95h		; IBYTE: load BASIC argument in A
000022A5:	OR A
000022A6:	JR Z,+05h
000022A8:	CP 02h
000022AA:	JP NC,206Fh		; ERROR: Illegal function call
000022AD:	LD (91BBh),A
000022B0:	LD A,01h
000022B2:	LD (364Fh),A
000022B5:	RET

000022B6:	CP C6h
000022B8:	JP NZ,2066h		; ERROR: Syntax error
000022BB:	INC HL
000022BC:	CALL 7F95h		; IBYTE: load BASIC argument in A
000022BF:	DEC A
000022C0:	CP 02h
000022C2:	JP NC,206Fh		; ERROR: Illegal function call
000022C5:	INC A
000022C6:	LD (0A8Bh),A		; SCRMOD
000022C9:	RET

; 'LINPUT'  (AKA 'LINE INPUT')
000022CA:	CALL 8262h		; skip SPACEs in (HL), A=next char
000022CD:	CP 23h	; '#'
000022CF:	JR NZ,+28h
000022D1:	INC HL
000022D2:	CALL 7F95h		; IBYTE: load BASIC argument in A
000022D5:	CALL 6627h		; get file defined by stream number in A, out: IY=ptr
000022D8:	XOR A
000022D9:	JR +21h
000022DB:	CP 22h	; '"'
000022DD:	CALL Z,234Ah
000022E0:	LD IY,(A62Bh)		; STRST
000022E4:	LD DE,69B1h
000022E7:	LD (IY+00h),01h
000022EB:	LD (IY+01h),49h
000022EF:	LD (IY+02h),E
000022F2:	LD (IY+03h),D
000022F5:	LD DE,0000h
000022F8:	RET

000022F9:	CALL 22DBh
000022FC:	PUSH DE
000022FD:	JR NZ,+0Ch
000022FF:	CALL 8262h		; skip SPACEs in (HL), A=next char
00002302:	CP 3Bh	; ';'
00002304:	JR Z,+04h
00002306:	CALL 2E76h		; CH2CH: Check for comma ','
00002309:	LD A,23h
0000230B:	CALL 8C2Eh		; INTGTV:  get variable
0000230E:	CP 03h			; is variable type 'string' ?
00002310:	JP NZ,2060h		; ERROR: Type mismatch
00002313:	EX HL,(SP)
00002314:	PUSH BC
00002315:	LD IY,(A62Bh)		; STRST
00002319:	EX DE,HL
0000231A:	ADD IY,DE
0000231C:	LD DE,(3621h)		; TMPEND
00002320:	LD A,06h
00002322:	CALL 6822h
00002325:	JP C,1FCAh
00002328:	LD HL,(A62Bh)		; STRST
0000232B:	EX DE,HL
0000232C:	PUSH HL
0000232D:	XOR A
0000232E:	LD B,FFh
00002330:	INC B
00002331:	CP (HL)
00002332:	INC HL
00002333:	JR NZ,-05h
00002335:	POP HL
00002336:	OR A
00002337:	SBC HL,DE
00002339:	EX DE,HL
0000233A:	LD HL,(A62Fh)
0000233D:	LD (HL),B
0000233E:	INC HL
0000233F:	LD (HL),E
00002340:	INC HL
00002341:	LD (HL),D
00002342:	DEC HL
00002343:	DEC HL
00002344:	POP DE
00002345:	CALL 16A6h
00002348:	POP HL
00002349:	RET

0000234A:	CALL 7FB9h		; STREXP:
0000234D:	OR A
0000234E:	RET Z
0000234F:	LD B,A
00002350:	LD A,(DE)
00002351:	INC DE
00002352:	CALL 0013h		; OUTCH (PRINT char in A)
00002355:	DJNZ -07h
00002357:	XOR A
00002358:	RET

; 'INPUT'
00002359:	XOR A
0000235A:	LD (2845h),A
0000235D:	CALL 8262h		; skip SPACEs in (HL), A=next char
00002360:	CP 23h	; '#'
00002362:	JP Z,23CFh		;  ..used by INPUT #
00002365:	CALL 22DBh
00002368:	JR NZ,+08h
0000236A:	CALL 8262h		; skip SPACEs in (HL), A=next char
0000236D:	CP 2Ch	; ','
0000236F:	INC HL
00002370:	JR Z,+06h
00002372:	LD DE,2900h
00002375:	CALL 000Bh		; MSX (aka DEPRT), print message in DE
00002378:	LD (2918h),SP
0000237C:	CALL 8C2Eh		; INTGTV:  get variable
0000237F:	PUSH AF
00002380:	PUSH BC
00002381:	CALL 17A8h		; END2C: look for next parameter, Z if none
00002384:	JR Z,+05h
00002386:	CALL 2E76h		; CH2CH: Check for comma ','
00002389:	JR -0Fh
0000238B:	XOR A
0000238C:	PUSH AF
0000238D:	PUSH HL
0000238E:	LD HL,(A62Bh)		; STRST
00002391:	LD DE,0010h
00002394:	ADD HL,DE
00002395:	EX DE,HL
00002396:	CALL 015Ah		; INPUT, DE=ADDR
00002399:	JP C,1FCAh
0000239C:	PUSH DE
0000239D:	LD HL,(2918h)
000023A0:	DEC HL
000023A1:	LD A,(HL)
000023A2:	OR A
000023A3:	JR Z,+23h
000023A5:	LD (2869h),A
000023A8:	DEC HL
000023A9:	DEC HL
000023AA:	LD B,(HL)
000023AB:	DEC HL
000023AC:	LD C,(HL)
000023AD:	DEC HL
000023AE:	LD (2866h),BC
000023B2:	EX HL,(SP)
000023B3:	CALL 8262h		; skip SPACEs in (HL), A=next char
000023B6:	OR A
000023B7:	JR Z,+0Fh
000023B9:	CP 2Ch	; ','
000023BB:	JR NZ,+05h
000023BD:	INC HL
000023BE:	LD A,(HL)
000023BF:	OR A
000023C0:	JR +03h
000023C2:	CALL 281Ah
000023C5:	EX HL,(SP)
000023C6:	JR NZ,-27h
000023C8:	POP DE
000023C9:	POP HL
000023CA:	LD SP,(2918h)
000023CE:	RET

;  ..used by INPUT #
000023CF:	INC HL
000023D0:	CALL 7F95h		; IBYTE: load BASIC argument in A
000023D3:	CALL 6627h		; get file defined by stream number in A, out: IY=ptr
000023D6:	CALL 2E73h		; HCH2CH: Skip spaces and check for comma ','
000023D9:	LD IY,(A62Bh)		; STRST
000023DD:	ADD IY,DE
000023DF:	LD A,(IY+00h)
000023E2:	OR A
000023E3:	JP Z,6886h			; ERROR: File not open
000023E6:	LD A,(IY+01h)
000023E9:	CP 49h
000023EB:	LD A,1Eh		; error code for 'Bad file mode'
000023ED:	JP NZ,2076h		; Generate error message, error code in 'A'
000023F0:	LD C,(IY+02h)
000023F3:	LD B,(IY+03h)
000023F6:	PUSH HL
000023F7:	LD HL,69B1h
000023FA:	OR A
000023FB:	SBC HL,BC
000023FD:	POP HL
000023FE:	JP Z,2378h
00002401:	PUSH DE
00002402:	CALL 8C2Eh		; INTGTV:  get variable
00002405:	LD (2869h),A
00002408:	LD (2866h),BC
0000240C:	EX HL,(SP)
0000240D:	LD DE,A73Fh			; KEYBM1 (aka KEYBUF)
00002410:	EX DE,HL
00002411:	PUSH DE
00002412:	LD IY,(A62Bh)		; STRST
00002416:	ADD IY,DE
00002418:	LD BC,FE00h
0000241B:	CP 03h
0000241D:	JR Z,+52h
0000241F:	CALL 24B4h
00002422:	CP 22h	; '"'
00002424:	JR Z,+62h
00002426:	CALL 24C1h
00002429:	JR Z,+18h
0000242B:	DEC C
0000242C:	JR NZ,+04h
0000242E:	CP 20h	; ' '
00002430:	JR Z,+24h
00002432:	CP 20h	; ' '
00002434:	JR Z,+02h
00002436:	LD C,01h
00002438:	LD (HL),A
00002439:	INC HL
0000243A:	CALL 24AEh
0000243D:	JR C,+04h
0000243F:	DJNZ -1Bh
00002441:	LD (HL),A
00002442:	INC HL
00002443:	LD (HL),00h
00002445:	LD HL,A73Fh		; KEYBM1 (aka KEYBUF)
00002448:	CALL 281Ah
0000244B:	POP DE
0000244C:	POP HL
0000244D:	CALL 8262h		; skip SPACEs in (HL), A=next char
00002450:	CP 2Ch	; ','
00002452:	RET NZ
00002453:	INC HL
00002454:	JR -55h
00002456:	CALL 24AEh
00002459:	JR C,-18h
0000245B:	CP 20h	; ' '
0000245D:	JR Z,-09h
0000245F:	CP 2Ch	; ','
00002461:	JR Z,-20h
00002463:	CP 0Dh
00002465:	JR Z,-24h
00002467:	DEC (IY+0Bh)
0000246A:	LD A,01h
0000246C:	LD (IY+0Ch),A
0000246F:	JR -2Eh
00002471:	CALL 24B4h
00002474:	CP 22h	; '"'
00002476:	JR Z,+10h
00002478:	CALL 24C1h
0000247B:	JR Z,-3Ah
0000247D:	LD (HL),A
0000247E:	INC HL
0000247F:	CALL 24AEh
00002482:	JR C,-41h
00002484:	DJNZ -0Eh
00002486:	JR -45h
00002488:	LD (HL),A
00002489:	INC HL
0000248A:	LD B,FFh
0000248C:	CALL 24AEh
0000248F:	JR C,-4Eh
00002491:	OR A
00002492:	JR Z,-51h
00002494:	CP 0Dh
00002496:	JR Z,-55h
00002498:	LD (HL),A
00002499:	INC HL
0000249A:	CP 22h	; '"'
0000249C:	JR Z,+04h
0000249E:	DJNZ -14h
000024A0:	JR -5Fh
000024A2:	CALL 24AEh
000024A5:	JR C,-64h
000024A7:	CALL 24C1h
000024AA:	JR Z,-69h
000024AC:	JR -47h
000024AE:	LD A,0Ah
000024B0:	CALL 6822h
000024B3:	RET C
000024B4:	LD A,(IY+0Ch)
000024B7:	LD (246Bh),A
000024BA:	LD A,05h
000024BC:	CALL 6822h
000024BF:	OR A
000024C0:	RET

000024C1:	OR A
000024C2:	RET Z
000024C3:	CP 2Ch	; ','
000024C5:	RET Z
000024C6:	CP 0Dh
000024C8:	RET

000024C9:	LD A,(HL)
000024CA:	INC HL
000024CB:	CP BCh
000024CD:	JP Z,270Fh
000024D0:	CP C0h
000024D2:	JP Z,26AEh
000024D5:	CP C4h
000024D7:	JP Z,25F1h
000024DA:	CP C5h
000024DC:	JP Z,2591h
000024DF:	CP C6h
000024E1:	JP Z,2514h
000024E4:	CP CEh
000024E6:	JP NZ,2066h		; ERROR: Syntax error
000024E9:	CALL 24FCh
000024EC:	CALL 7F95h		; IBYTE: load BASIC argument in A
000024EF:	CP 0Ah
000024F1:	JR Z,+05h
000024F3:	CP 07h
000024F5:	JP NC,206Fh		; ERROR: Illegal function call
000024F8:	CALL 0DECh		; .. tape recorder
000024FB:	RET

000024FC:	CALL 8262h		; skip SPACEs in (HL), A=next char
000024FF:	CP F4h			; Token for '='
00002501:	INC HL
00002502:	RET Z
00002503:	JP 2066h		; ERROR: Syntax error

00002506:	CALL 24FCh
00002509:	LD DE,A739h
0000250C:	LD A,EDh		; SUBCPU_GET_CALENDAR
0000250E:	CALL 0023h		; subcpu (A=command, DE=result ptr?)
00002511:	JP 7FB9h		; STREXP:

00002514:	CALL 2506h
00002517:	CP 08h
00002519:	JP NZ,206Fh		; ERROR: Illegal function call
0000251C:	PUSH HL
0000251D:	LD HL,A739h
00002520:	LD B,0Fh
00002522:	CALL 2567h
00002525:	CP A0h
00002527:	JR NC,+65h
00002529:	LD (HL),A
0000252A:	INC HL
0000252B:	CALL 2589h
0000252E:	CALL 2548h
00002531:	JR Z,+5Bh
00002533:	LD C,A
00002534:	LD A,(HL)
00002535:	AND 0Fh
00002537:	OR C
00002538:	LD (HL),A
00002539:	INC HL
0000253A:	EX AF,AF'
0000253B:	JR Z,+51h
0000253D:	LD (HL),A
0000253E:	LD DE,A739h
00002541:	LD A,ECh		; SUBCPU_SET_CALENDAR
00002543:	CALL 0023h		; subcpu (A=command, DE=result ptr?)
00002546:	POP HL
00002547:	RET

00002548:	LD B,00h
0000254A:	CALL 2567h
0000254D:	CALL 263Fh
00002550:	CP 0Dh
00002552:	JR NC,+3Ah
00002554:	RLCA
00002555:	RLCA
00002556:	RLCA
00002557:	RLCA
00002558:	EX AF,AF'
00002559:	CALL 2589h
0000255C:	CALL 2567h
0000255F:	CP 32h
00002561:	JR NC,+2Bh
00002563:	OR A
00002564:	EX AF,AF'
00002565:	OR A
00002566:	RET

00002567:	CALL 2574h
0000256A:	RLCA
0000256B:	RLCA
0000256C:	RLCA
0000256D:	RLCA
0000256E:	LD C,A
0000256F:	CALL 2574h
00002572:	OR C
00002573:	RET

00002574:	LD A,(DE)
00002575:	INC DE
00002576:	SUB 30h
00002578:	JR C,+03h
0000257A:	CP 0Ah
0000257C:	RET C
0000257D:	LD A,B
0000257E:	RET

0000257F:	LD A,(DE)
00002580:	CP 2Ch	; ','
00002582:	JR +03h
00002584:	LD A,(DE)
00002585:	CP 3Ah	; ':'
00002587:	JR +03h
00002589:	LD A,(DE)
0000258A:	CP 2Fh	; '/'
0000258C:	INC DE
0000258D:	RET Z
0000258E:	JP 206Fh		; ERROR: Illegal function call
00002591:	CALL 2506h
00002594:	CP 03h
00002596:	JR NZ,-0Ah
00002598:	PUSH HL
00002599:	CALL 25AAh
0000259C:	JR C,-10h
0000259E:	LD C,A
0000259F:	LD HL,A73Ah
000025A2:	LD A,(HL)
000025A3:	AND F0h
000025A5:	OR C
000025A6:	LD (HL),A
000025A7:	JP 253Eh

000025AA:	LD HL,6EDEh
000025AD:	LD BC,0703h
000025B0:	CALL 1292h
000025B3:	JR Z,+07h
000025B5:	INC HL
000025B6:	INC HL
000025B7:	INC HL
000025B8:	DJNZ -0Ah
000025BA:	LD B,F8h
000025BC:	LD A,07h
000025BE:	SUB B
000025BF:	RET

000025C0:	CALL 24FCh
000025C3:	CALL 7FD1h		; EXPR:
000025C6:	PUSH HL
000025C7:	EX DE,HL
000025C8:	CALL 5436h		; 'CSNG'
000025CB:	CALL 5ACEh
000025CE:	INC HL
000025CF:	LD A,(HL)
000025D0:	BIT 7,A
000025D2:	JR NZ,-46h
000025D4:	OR 80h
000025D6:	LD (HL),A
000025D7:	DEC HL
000025D8:	LD DE,290Dh
000025DB:	PUSH DE
000025DC:	LD BC,0005h
000025DF:	LDIR
000025E1:	LD DE,(A62Fh)
000025E5:	CALL 2656h
000025E8:	POP HL
000025E9:	CALL 9A44h		; ADD:
000025EC:	CALL 26A3h
000025EF:	POP HL
000025F0:	RET

000025F1:	LD A,(HL)
000025F2:	CP 24h	; '$'
000025F4:	JR NZ,-36h
000025F6:	INC HL
000025F7:	CALL 24FCh
000025FA:	CALL 7FB9h		; STREXP:
000025FD:	CP 08h
000025FF:	JP NZ,258Eh
00002602:	PUSH HL
00002603:	LD HL,A73Ch
00002606:	CALL 2627h
00002609:	CP FFh
0000260B:	JP Z,206Fh		; ERROR: Illegal function call
0000260E:	LD (HL),A
0000260F:	INC HL
00002610:	EX AF,AF'
00002611:	LD (HL),A
00002612:	INC HL
00002613:	CALL 2584h
00002616:	CALL 2567h
00002619:	CP 60h
0000261B:	JP NC,206Fh		; ERROR: Illegal function call
0000261E:	LD (HL),A
0000261F:	LD DE,A73Ch
00002622:	LD A,EEh
00002624:	JP 2543h

00002627:	LD B,0Fh
00002629:	CALL 2567h
0000262C:	INC A
0000262D:	CP 25h
0000262F:	JR NC,-16h
00002631:	EX AF,AF'
00002632:	CALL 2584h
00002635:	CALL 2567h
00002638:	CP 60h
0000263A:	JR NC,-21h
0000263C:	EX AF,AF'
0000263D:	DEC A
0000263E:	RET

0000263F:	PUSH BC
00002640:	LD C,A
00002641:	RLCA
00002642:	RLCA
00002643:	RLCA
00002644:	RLCA
00002645:	AND 0Fh
00002647:	LD B,A
00002648:	JR Z,+05h
0000264A:	XOR A
0000264B:	ADD 0Ah
0000264D:	DJNZ -04h
0000264F:	LD B,A
00002650:	LD A,C
00002651:	AND 0Fh
00002653:	ADD B
00002654:	POP BC
00002655:	RET

00002656:	PUSH DE
00002657:	LD DE,A73Fh		; KEYBM1 (aka KEYBUF)
0000265A:	PUSH DE
0000265B:	LD A,EFh		; SUBCPU_GET_CLOCK
0000265D:	CALL 0023h		; subcpu (A=command, DE=result ptr?)
00002660:	POP DE
00002661:	POP HL
00002662:	CALL 9A09h		; CLRFAC: Set FP accumulator to 0
00002665:	EX DE,HL
00002666:	LD A,(HL)
00002667:	INC HL
00002668:	LD B,(HL)
00002669:	INC HL
0000266A:	LD C,(HL)
0000266B:	EX DE,HL
0000266C:	CALL 2688h
0000266F:	LD A,B
00002670:	CALL 2679h
00002673:	LD A,C
00002674:	CALL 2679h
00002677:	EX DE,HL
00002678:	RET

00002679:	PUSH AF
0000267A:	PUSH BC
0000267B:	LD DE,2903h
0000267E:	LD A,05h
00002680:	LD (A5DBh),A		; data type, aka PRCSON
00002683:	CALL 9FF5h		; MUL:
00002686:	POP BC
00002687:	POP AF
00002688:	PUSH BC
00002689:	EX DE,HL
0000268A:	LD HL,A73Fh		; KEYBM1 (aka KEYBUF)
0000268D:	CALL 263Fh
00002690:	LD (HL),A
00002691:	INC HL
00002692:	LD (HL),00h
00002694:	DEC HL
00002695:	LD A,02h			; integer type
00002697:	LD (A5DBh),A		; data type, aka PRCSON
0000269A:	CALL 5436h		; 'CSNG'
0000269D:	EX DE,HL
0000269E:	CALL 9A44h		; ADD:
000026A1:	POP BC
000026A2:	RET

000026A3:	INC HL
000026A4:	BIT 7,(HL)
000026A6:	DEC HL
000026A7:	RET Z
000026A8:	LD DE,2908h
000026AB:	JP 9A44h		; ADD:

000026AE:	CALL 8BFEh		; Check for '('
000026B1:	CALL 7FAAh		; IDEEXP: DE= (HL), A=next character to be parsed
000026B4:	CALL 2E76h		; CH2CH: Check for comma ','
000026B7:	PUSH DE
000026B8:	CALL 7FAAh		; IDEEXP: DE= (HL), A=next character to be parsed
000026BB:	CALL 8C08h		; Check for ')'
000026BE:	CALL 7F98h		; Check byte overflow for value in DE and put in A
000026C1:	PUSH AF
000026C2:	CALL 24FCh
000026C5:	CALL 7FB9h		; STREXP:
000026C8:	POP BC
000026C9:	EX HL,(SP)
000026CA:	CP B
000026CB:	JR NC,+01h
000026CD:	LD B,A
000026CE:	INC B
000026CF:	JR +04h
000026D1:	LD A,(DE)
000026D2:	LD (HL),A
000026D3:	INC DE
000026D4:	INC HL
000026D5:	DJNZ -06h
000026D7:	POP HL
000026D8:	RET

; 'DEF'
000026D9:	CP C7h		; Token for 'KEY'
000026DB:	INC HL
000026DC:	JP Z,3A64h	; 'DEF KEY'
000026DF:	CP FFh
000026E1:	JR NZ,+10h
000026E3:	LD A,(HL)
000026E4:	INC HL
000026E5:	CP A0h		; Token for 'CHR$' (0xFF, 0xC7)
000026E7:	JP Z,416Ah
000026EA:	CP C7h		; Token for 'FN'  (0xFF, 0xC7)
000026EC:	JP Z,9082h
000026EF:	CP C8h		; Token for 'USR' (0xFF, 0xC8)
000026F1:	JR Z,+03h
000026F3:	JP 2066h		; ERROR: Syntax error

; 'DEF USR'
000026F6:	LD C,F4h	;
000026F8:	CALL 8B9Ah
000026FB:	EX DE,HL
000026FC:	PUSH DE
000026FD:	CALL 8262h		; skip SPACEs in (HL), A=next char
00002700:	CP F4h			; Token for '='
00002702:	JP NZ,2066h		; ERROR: Syntax error
00002705:	INC HL
00002706:	CALL 7FAAh		; IDEEXP: DE= (HL), A=next character to be parsed
00002709:	EX HL,(SP)
0000270A:	LD (HL),E
0000270B:	INC HL
0000270C:	LD (HL),D
0000270D:	POP HL
0000270E:	RET

0000270F:	CALL 8BFEh		; Check for '('
00002712:	CALL 8C2Eh		; INTGTV:  get variable
00002715:	CP 03h			; is variable type 'string' ?
00002717:	JP NZ,2060h		; ERROR: Type mismatch
0000271A:	PUSH BC
0000271B:	CALL 2E73h		; HCH2CH: Skip spaces and check for comma ','
0000271E:	CALL 7F95h		; IBYTE: load BASIC argument in A
00002721:	OR A
00002722:	JP Z,206Fh		; ERROR: Illegal function call
00002725:	PUSH AF
00002726:	CALL 8262h		; skip SPACEs in (HL), A=next char
00002729:	CP 29h	; ')'
0000272B:	JR NZ,+04h
0000272D:	LD A,FFh
0000272F:	JR +06h
00002731:	CALL 2E76h		; CH2CH: Check for comma ','
00002734:	CALL 7F95h		; IBYTE: load BASIC argument in A
00002737:	POP BC
00002738:	LD C,A
00002739:	PUSH BC
0000273A:	CALL 28FCh
0000273D:	CALL 8262h		; skip SPACEs in (HL), A=next char
00002740:	CP F4h			; Token for '='
00002742:	JP NZ,2066h		; ERROR: Syntax error
00002745:	INC HL
00002746:	CALL 7FB9h		; STREXP:
00002749:	EXX
0000274A:	POP BC
0000274B:	POP HL
0000274C:	EX AF,AF'
0000274D:	CALL 7FC3h		; Load a string parameter
00002750:	OR A
00002751:	JR Z,+22h
00002753:	SUB B
00002754:	JR C,+1Fh
00002756:	LD L,B
00002757:	DEC L
00002758:	LD H,00h
0000275A:	ADD HL,DE
0000275B:	INC A
0000275C:	LD E,A
0000275D:	EX AF,AF'
0000275E:	CP C
0000275F:	JR C,+01h
00002761:	LD A,C
00002762:	CP E
00002763:	JR C,+01h
00002765:	LD A,E
00002766:	PUSH HL
00002767:	EXX
00002768:	EX HL,(SP)
00002769:	LD B,A
0000276A:	OR A
0000276B:	JR Z,+06h
0000276D:	LD A,(DE)
0000276E:	LD (HL),A
0000276F:	INC DE
00002770:	INC HL
00002771:	DJNZ -06h
00002773:	POP HL
00002774:	RET

00002775:	EXX
00002776:	RET

00002777:	XOR A
00002778:	LD (2920h),A
0000277B:	PUSH HL
0000277C:	LD HL,(A635h)		; TEXTST,  address of BASIC  program
0000277F:	LD E,(HL)
00002780:	INC HL
00002781:	LD D,(HL)
00002782:	INC HL
00002783:	LD A,D
00002784:	OR E
00002785:	DEC DE
00002786:	JR Z,+03h
00002788:	LD E,(HL)
00002789:	INC HL
0000278A:	LD D,(HL)
0000278B:	LD (291Ch),DE
0000278F:	POP HL
00002790:	JP 2E67h		; Move to the next program line

; 'RESTORE'
00002793:	JR Z,-1Eh
00002795:	CP 0Bh
00002797:	JR NZ,+1Dh
00002799:	INC HL
0000279A:	LD E,(HL)
0000279B:	INC HL
0000279C:	LD D,(HL)
0000279D:	INC HL
0000279E:	EX DE,HL
0000279F:	CALL 305Ch
000027A2:	JP C,202Dh		; ERROR: Undefined label
000027A5:	INC HL
000027A6:	INC HL
000027A7:	LD C,(HL)
000027A8:	INC HL
000027A9:	LD B,(HL)
000027AA:	INC HL
000027AB:	LD (291Ch),BC
000027AF:	CALL 28BEh
000027B2:	EX DE,HL
000027B3:	JP 2E67h		; Move to the next program line

000027B6:	CALL 32EDh
000027B9:	PUSH HL
000027BA:	LD HL,(32E6h)
000027BD:	LD (291Ch),HL
000027C0:	POP HL
000027C1:	CALL 28BEh
000027C4:	LD HL,0000h
000027C7:	JP 2E67h		; Move to the next program line

; 'READ'
000027CA:	LD A,3Ah
000027CC:	LD (2845h),A
000027CF:	CALL 8C2Eh		; INTGTV:  get variable
000027D2:	PUSH HL
000027D3:	LD (2869h),A
000027D6:	LD (2866h),BC
000027DA:	LD A,(2920h)
000027DD:	CP 01h
000027DF:	JP Z,27FAh
000027E2:	JR NC,+20h
000027E4:	LD HL,(A635h)		; TEXTST,  address of BASIC  program
000027E7:	LD A,(HL)
000027E8:	INC HL
000027E9:	OR (HL)
000027EA:	JR Z,+0Eh
000027EC:	INC HL
000027ED:	LD E,(HL)
000027EE:	INC HL
000027EF:	LD D,(HL)
000027F0:	LD (291Ch),DE
000027F4:	INC HL
000027F5:	CALL 28BEh
000027F8:	JR NC,+0Ah
000027FA:	LD A,01h
000027FC:	LD (2920h),A
000027FF:	LD A,04h		; error code for 'Out of data'
00002801:	JP 2076h		; Generate error message, error code in 'A'

00002804:	LD HL,(291Eh)
00002807:	CALL 281Ah
0000280A:	LD (291Eh),HL
0000280D:	CALL Z,28BEh
00002810:	POP HL
00002811:	CALL 8262h		; skip SPACEs in (HL), A=next char
00002814:	CP 2Ch	; ','
00002816:	RET NZ
00002817:	INC HL
00002818:	JR -50h
0000281A:	LD DE,(3621h)		; TMPEND
0000281E:	LD B,00h
00002820:	CALL 8262h		; skip SPACEs in (HL), A=next char
00002823:	CP 22h	; '"'
00002825:	JR NZ,+19h
00002827:	INC HL
00002828:	LD A,(HL)
00002829:	OR A
0000282A:	JR Z,+26h
0000282C:	INC HL
0000282D:	CP 22h	; '"'
0000282F:	JR Z,+05h
00002831:	LD (DE),A
00002832:	INC DE
00002833:	INC B
00002834:	JR -0Eh
00002836:	CALL 8262h		; skip SPACEs in (HL), A=next char
00002839:	CP 2Ch	; ','
0000283B:	JR NZ,+15h
0000283D:	INC HL
0000283E:	JR +12h
00002840:	LD A,(HL)
00002841:	OR A
00002842:	JR Z,+0Eh
00002844:	CP 00h
00002846:	JR Z,+0Ah
00002848:	INC HL
00002849:	CP 2Ch	; ','
0000284B:	JR Z,+05h
0000284D:	LD (DE),A
0000284E:	INC DE
0000284F:	INC B
00002850:	JR -12h
00002852:	PUSH HL
00002853:	PUSH AF
00002854:	LD A,(2868h)
00002857:	CP 03h
00002859:	JR Z,+04h
0000285B:	LD A,23h
0000285D:	LD (DE),A
0000285E:	INC DE
0000285F:	XOR A
00002860:	LD (DE),A
00002861:	LD A,B
00002862:	LD (287Eh),A
00002865:	LD DE,B7A4h
00002868:	LD A,03h
0000286A:	CP 03h
0000286C:	JR NZ,+1Dh
0000286E:	LD HL,(3621h)		; TMPEND
00002871:	LD BC,(A62Bh)		; STRST
00002875:	OR A
00002876:	SBC HL,BC
00002878:	LD B,H
00002879:	LD C,L
0000287A:	LD HL,(A62Fh)
0000287D:	LD A,02h
0000287F:	LD (HL),A
00002880:	INC HL
00002881:	LD (HL),C
00002882:	INC HL
00002883:	LD (HL),B
00002884:	DEC HL
00002885:	DEC HL
00002886:	CALL 16A6h
00002889:	JR +2Ch
0000288B:	PUSH DE
0000288C:	PUSH AF
0000288D:	LD HL,(A62Fh)
00002890:	LD DE,(3621h)		; TMPEND
00002894:	CALL 54F6h		; ....get number
00002897:	POP AF
00002898:	PUSH AF
00002899:	CP 02h
0000289B:	JR Z,+09h
0000289D:	CP 05h			; Single precision type ?
0000289F:	JR Z,+0Ah
000028A1:	CALL 5419h		; 'CDBL'
000028A4:	JR +08h			; Double precision type ?
000028A6:	CALL 5A90h		; 'CINT'
000028A9:	JR +03h
000028AB:	CALL 5436h		; 'CSNG'
000028AE:	POP AF
000028AF:	POP DE
000028B0:	LD B,A
000028B1:	LD A,(HL)
000028B2:	LD (DE),A
000028B3:	INC HL
000028B4:	INC DE
000028B5:	DJNZ -06h
000028B7:	POP AF
000028B8:	POP HL
000028B9:	OR A
000028BA:	RET Z
000028BB:	CP 3Ah	; ':'
000028BD:	RET

000028BE:	DEC HL
000028BF:	PUSH DE
000028C0:	LD DE,(291Ch)
000028C4:	LD (1904h),DE
;  This code structure 
;  is similar to the MS BASIC FDTLP (Find next DATA statement)
000028C8:	CALL 354Eh
000028CB:	OR A
000028CC:	JR NZ,+13h
000028CE:	INC HL
000028CF:	LD A,(HL)
000028D0:	INC HL
000028D1:	OR (HL)
000028D2:	SCF
000028D3:	JR Z,+20h
000028D5:	INC HL
000028D6:	PUSH DE
000028D7:	LD E,(HL)
000028D8:	INC HL
000028D9:	LD D,(HL)
000028DA:	LD (28E6h),DE
000028DE:	POP DE
000028DF:	JR -19h
000028E1:	CP 94h		; Token for 'DATA'
000028E3:	JR NZ,-1Dh
000028E5:	LD DE,0000h
000028E8:	LD (291Ch),DE
000028EC:	INC HL
000028ED:	LD (291Eh),HL
000028F0:	LD A,02h
000028F2:	OR A
000028F3:	JR +02h
000028F5:	LD A,01h
000028F7:	LD (2920h),A
000028FA:	POP DE
000028FB:	RET

000028FC:	LD A,(HL)
000028FD:	JP 8C08h		; Check for ')'

2900  3F 20 00 86 70 00 00 00-91 28 C0 00 00 00 00 00   ? ..p....(......
2910  00 00 

2912        85 00 00 00 00 

2917                       00-F4 C6 00 00 01 00 00 00
2920  00 47 4F 54 CF 47 4F 53-55 C2 47 CF 52 55 CE 52   .GOT.GOSU.G.RU.R
2930  45 54 55 52 CE 52 45 53-54 4F 52 C5 52 45 53 55   ETUR.RESTOR.RESU
2940  4D C5 4C 49 53 D4 4C 4C-49 53 D4 44 45 4C 45 54   M.LIS.LLIS.DELET
2950  C5 52 45 4E 55 CD 41 55-54 CF 45 44 49 D4 46 4F   .RENU.AUT.EDI.FO
2960  D2 4E 45 58 D4 50 52 49-4E D4 4C 50 52 49 4E D4   .NEX.PRIN.LPRIN.
2970  49 4E 50 55 D4 4C 49 4E-50 55 D4 49 C6 44 41 54   INPU.LINPU.I.DAT
2980  C1 52 45 41 C4 44 49 CD-52 45 CD 45 4E C4 53 54   .REA.DI.RE.EN.ST
2990  4F D0 43 4F 4E D4 43 4C-D3 43 4C 45 41 D2 4F CE   O.CON.CL.CLEA.O.
29A0  4C 45 D4 4E 45 D7 50 4F-4B C5 4F 46 C6 57 48 49   LE.NE.POK.OF.WHI
29B0  4C C5 57 45 4E C4 52 45-50 45 41 D4 55 4E 54 49   L.WEN.REPEA.UNTI
29C0  CC 80 80 80 54 52 4F CE-54 52 4F 46 C6 80 80 80   ....TRO.TROF....
29D0  44 45 46 49 4E D4 44 45-46 53 4E C7 44 45 46 44   DEFIN.DEFSN.DEFD
29E0  42 CC 44 45 46 53 54 D2-44 45 C6 80 4C 4F 41 C4   B.DEFST.DE..LOA.
29F0  53 41 56 C5 4D 45 52 47-C5 43 48 41 49 CE 43 4F   SAV.MERG.CHAI.CO
2A00  4E 53 4F 4C C5 57 49 44-54 C8 4F 55 D4 53 45 41   NSOL.WIDT.OU.SEA
2A10  52 43 C8 57 41 49 D4 50-41 55 53 C5 57 52 49 54   RC.WAI.PAUS.WRIT
2A20  C5 53 57 41 D0 45 52 41-53 C5 45 52 52 4F D2 45   .SWA.ERAS.ERRO.E
2A30  4C 53 C5 43 41 4C CC 4D-4F CE 4C 4F 43 41 54 C5   LS.CAL.MO.LOCAT.
2A40  53 43 52 45 45 CE 4B 45-D9 80 80 4C 41 42 45 CC   SCREE.KE...LABE.
2A50  52 41 4E 44 4F 4D 49 5A-C5 4F 50 54 49 4F CE 4C   RANDOMIZ.OPTIO.L
2A60  49 4E C5 4F 50 45 CE 43-4C 4F 53 C5 53 49 5A C5   IN.OPE.CLOS.SIZ.
2A70  46 49 45 4C C4 47 45 D4-50 55 D4 53 45 D4 46 49   FIEL.GE.PU.SE.FI
2A80  4C 45 D3 4C 46 49 4C 45-D3 44 45 56 49 43 C5 4E   LE.LFILE.DEVIC.N
2A90  41 4D C5 4B 49 4C CC 4C-53 45 D4 52 53 45 D4 49   AM.KIL.LSE.RSE.I
2AA0  4E 49 D4 56 44 49 CD 4D-41 58 46 49 4C 45 D3 80   NI.VDI.MAXFILE..
2AB0  54 CF 53 54 45 D0 54 48-45 CE 55 53 49 4E C7 53   T.STE.THE.USIN.S
2AC0  55 C2 42 41 53 C5 54 41-C2 53 50 C3 45 51 D6 49   U.BAS.TA.SP.EQ.I
2AD0  4D D0 58 4F D2 4F D2 41-4E C4 4E 4F D4 3E BC 3C   M.XO.O.AN.NO.>.<
2AE0  BE 3D BC 3C BD 3D BE 3E-BD BD BE BC AB AD 4D 4F   .=.<.=.>......MO
2AF0  C4 DC AF AA DE FF                                 ......


2AF6                    57 49-4E 44 4F D7 50 53 45 D4         WINDO.PSE.
2B00  50 52 45 53 45 D4 43 4F-4C 4F D2 43 49 52 43 4C   PRESE.COLO.CIRCL
2B10  C5 50 4F 4C D9 50 41 49-4E D4 80 50 4F 53 49 54   .POL.PAIN..POSIT
2B20  49 4F CE 50 41 54 54 45-52 CE 48 43 4F 50 D9 50   IO.PATTER.HCOP.P
2B30  4C 41 D9 53 4F 55 4E C4-42 45 45 D0 50 52 D7 50   LA.SOUN.BEE.PR.P
2B40  41 4C 45 D4 4C 41 59 45-D2 43 41 4E 56 41 D3 43   ALE.LAYE.CANVA.C
2B50  52 45 D6 43 46 4C 41 53-C8 43 47 45 CE 43 53 49   RE.CFLAS.CGE.CSI
2B60  5A C5 45 4A 45 43 D4 43-53 54 4F D0 46 41 53 D4   Z.EJEC.CSTO.FAS.
2B70  52 45 D7 41 50 53 D3 54-56 50 D7 43 48 41 4E 4E   RE.APS.TVP.CHANN
2B80  45 CC 56 4F CC 43 52 D4-53 43 52 4F 4C CC 45 46   E.VO.CR.SCROL.EF
2B90  46 45 43 D4 47 52 41 50-C8 4D 55 53 49 C3 54 45   FEC.GRAP.MUSI.TE
2BA0  4D 50 CF 43 55 52 53 4F-D2 56 45 52 49 46 D9 43   MP.CURSO.VERIF.C
2BB0  4C D2 4C 49 4D 49 D4 4B-4C 49 53 D4 41 53 CB 4B   L.LIMI.KLIS.AS.K
2BC0  42 55 C6 43 4C 49 43 CB-42 4F 4F D4 44 45 56 49   BU.CLIC.BOO.DEVI
2BD0  A4 44 45 56 4F A4 FF 49-4E D4 41 42 D3 53 49 CE   .DEVO..IN.AB.SI.
2BE0  43 4F D3 54 41 CE 4C 4F-C7 45 58 D0 53 51 D2 52   CO.TA.LO.EX.SQ.R
2BF0  4E C4 50 45 45 CB 41 54-CE 53 47 CE 46 52 41 C3   N.PEE.AT.SG.FRA.
2C00  46 49 D8 50 41 C9 52 41-C4 49 4E D0 43 44 42 CC   FI.PA.RA.IN.CDB.
2C10  43 53 4E C7 43 49 4E D4-80 45 4F C6 46 50 4F D3   CSN.CIN..EO.FPO.
2C20  4C 4F C3 4C 4F C6 50 4F-D3 46 41 C3 53 55 CD 46   LO.LO.PO.FA.SU.F
2C30  52 C5 4C 50 4F D3 53 54-49 43 CB 53 54 52 49 C7   R.LPO.STIC.STRI.
2C40  43 48 52 A4 53 54 52 A4-48 45 58 A4 4F 43 54 A4   CHR.STR.HEX.OCT.
2C50  42 49 4E A4 4D 4B 49 A4-4D 4B 53 A4 4D 4B 44 A4   BIN.MKI.MKS.MKD.
2C60  53 50 41 43 45 A4 43 47-50 41 54 A4 4B 41 4E 4A   SPACE.CGPAT.KANJ
2C70  49 A4 41 53 C3 4C 45 CE-56 41 CC 43 56 D3 43 56   I.AS.LE.VA.CV.CV
2C80  C4 43 56 C9 44 45 56 C6-80 45 52 D2 45 52 CC 43   .CV.DEV..ER.ER.C
2C90  53 52 4C 49 CE 53 54 52-50 54 D2 44 54 CC 80 80   SRLI.STRPT.DT...
2CA0  4C 45 46 54 A4 52 49 47-48 54 A4 4D 49 44 A4 49   LEFT.RIGHT.MID.I
2CB0  4E 4B 45 59 A4 49 4E 53-54 D2 48 45 58 43 48 52   NKEY.INST.HEXCHR
2CC0  A4 4D 45 4D A4 53 43 52-4E A4 56 41 52 50 54 D2   .MEM.SCRN.VARPT.
2CD0  53 54 52 49 4E 47 A4 54-49 4D C5 44 41 59 A4 44   STRING.TIM.DAY.D
2CE0  41 54 45 A4 46 CE 55 53-D2 43 41 4C C3 80 41 54   ATE.F.US.CAL..AT
2CF0  54 52 A4 50 4F 49 4E D4-43 48 41 52 41 43 54 45   TR.POIN.CHARACTE
2D00  52 A4 43 4D D4 4D 49 52-52 4F 52 A4 FF 88 34 7F   R.CM.MIRROR...4.

00002D00:	LD D,D
00002D01:	AND H
00002D02:	LD B,E
00002D03:	LD C,L
00002D04:	CALL NC,494Dh
00002D07:	LD D,D
00002D08:	LD D,D
00002D09:	LD C,A
00002D0A:	LD D,D
00002D0B:	AND H
00002D0C:	RST 38h

00002D0D:	; Jump table

00002DCD:	; Jump table 3
		
00002E0B:	LD HL,614Ch
00002E0E:	LD C,H
00002E0F:	CPL
00002E10:	INC A
00002E11:	LD A,(DE)
00002E12:	LD B,L
00002E13:	LD A,(DE)
00002E14:	LD B,L
00002E15:	SBC L
00002E16:	LD (HL),B6h
00002E18:	LD H,D
00002E19:	LD (DE),A
00002E1A:	LD (2EFBh),HL
00002E1D:	LD L,A
00002E1E:	ADD HL,SP
00002E1F:	SBC 52h
00002E21:	LD H,H
00002E22:	LD C,H
00002E23:	DEC BC
00002E24:	LD D,E
00002E25:	RET NC
00002E26:	LD D,D
00002E27:	CP E
00002E28:	LD E,H
00002E29:	RRCA
00002E2A:	LD E,L

; 'CALL'
00002E2B:	CALL 7FAAh		; IDEEXP: DE= (HL), A=next character to be parsed
00002E2E:	LD (2E49h),DE
00002E32:	CALL 17A8h		; END2C: look for next parameter, Z if none
00002E35:	JR Z,+0Dh
00002E37:	CALL 8BFEh		; Check for '('
00002E3A:	CALL 7FAAh		; IDEEXP: DE= (HL), A=next character to be parsed
00002E3D:	LD (2E46h),DE
00002E41:	CALL 8C08h		; Check for ')'
00002E44:	PUSH HL
00002E45:	LD HL,0000h		; 2E46h
00002E48:	CALL CBD0h
00002E4B:	POP HL
00002E4C:	RET

; 'RANDOMIZE'
00002E4D:	PUSH AF
00002E4E:	LD DE,4193h		; (16787, garbled with the R register)
00002E51:	LD A,R
00002E53:	XOR D
00002E54:	LD D,A
00002E55:	LD A,R
00002E57:	XOR E
00002E58:	LD E,A
00002E59:	POP AF
00002E5A:	JR Z,+03h		; if no parameters, use the automatically generated SEED
00002E5C:	CALL 7FAAh		; IDEEXP: DE= (HL), A=next character to be parsed
00002E5F:	LD (A595h),DE		; SEED
00002E63:	XOR A
00002E64:	LD R,A
00002E66:	RET

; 'DATA', 'LABEL'
; Move to the next program line
00002E67:	DEC HL
; -0bh
00002E68:	CALL 3552h			; Parse the content of a 'DATA' line
00002E6B:	OR A
00002E6C:	SCF
00002E6D:	RET Z
00002E6E:	CP 3Ah	; ':'
00002E70:	RET Z
00002E71:	JR -0Bh

; HCH2CH: Skip spaces and check for comma ','
00002E73:	CALL 8262h		; skip SPACEs in (HL), A=next char
; CH2CH: Check for comma ','
00002E76:	CP 2Ch	; ','
00002E78:	JP NZ,2066h		; ERROR: Syntax error
00002E7B:	INC HL
00002E7C:	RET

; 'SWAP'
00002E7D:	CALL 8C2Eh		; INTGTV:  get variable
00002E80:	PUSH AF
00002E81:	PUSH BC
00002E82:	CALL 2E73h		; HCH2CH: Skip spaces and check for comma ','
00002E85:	CALL 8C2Eh		; INTGTV:  get variable
00002E88:	POP DE
00002E89:	EX HL,(SP)
00002E8A:	CP H
00002E8B:	JP NZ,2060h		; ERROR: Type mismatch
00002E8E:	LD L,C
00002E8F:	LD H,B
00002E90:	LD C,A
00002E91:	LD B,00h
00002E93:	CP 03h			; is variable type 'string' ?
00002E95:	JR Z,+20h
00002E97:	CALL 2E9Ch
00002E9A:	POP HL
00002E9B:	RET

00002E9C:	PUSH HL
00002E9D:	PUSH DE
00002E9E:	PUSH BC
00002E9F:	LD DE,A5E4h		; ZFAC1
00002EA2:	LDIR
00002EA4:	POP BC
00002EA5:	POP HL
00002EA6:	POP DE
00002EA7:	PUSH DE
00002EA8:	PUSH HL
00002EA9:	PUSH BC
00002EAA:	LDIR
00002EAC:	POP BC
00002EAD:	POP DE
00002EAE:	PUSH DE
00002EAF:	LD HL,A5E4h		; ZFAC1
00002EB2:	LDIR
00002EB4:	POP DE
00002EB5:	POP HL
00002EB6:	RET

00002EB7:	CALL 2E9Ch
00002EBA:	LD A,(DE)
00002EBB:	OR (HL)
00002EBC:	JR Z,+08h
00002EBE:	PUSH DE
00002EBF:	CALL 2EC8h
00002EC2:	POP HL
00002EC3:	CALL 2EC8h
00002EC6:	POP HL
00002EC7:	RET
00002EC8:	LD A,(HL)
00002EC9:	OR A
00002ECA:	RET Z
00002ECB:	PUSH HL
00002ECC:	INC HL
00002ECD:	LD C,(HL)
00002ECE:	INC HL
00002ECF:	LD B,(HL)
00002ED0:	LD HL,(A62Bh)		; STRST
00002ED3:	ADD HL,BC
00002ED4:	EX DE,HL
00002ED5:	LD HL,(3628h)
00002ED8:	SCF
00002ED9:	SBC HL,DE
00002EDB:	POP HL
00002EDC:	RET NC
00002EDD:	LD BC,(A629h)		; VARST
00002EE1:	OR A
00002EE2:	SBC HL,BC
00002EE4:	EX DE,HL
00002EE5:	DEC HL
00002EE6:	LD (HL),D
00002EE7:	DEC HL
00002EE8:	LD (HL),E
00002EE9:	RET

; 'OUT'
00002EEA:	CALL 7FAAh		; IDEEXP: DE= (HL), A=next character to be parsed
00002EED:	CALL 2E73h		; HCH2CH: Skip spaces and check for comma ','
00002EF0:	PUSH DE
00002EF1:	CALL 7F95h		; IBYTE: load BASIC argument in A
00002EF4:	POP BC
00002EF5:	OUT (C),A
00002EF7:	RET

; 'CLEAR'
00002EF8:	JP Z,2212h		; 'CLR' (aka CLS)

; 'LIMIT'
00002EFB:	CALL 7FAAh		; IDEEXP: DE= (HL), A=next character to be parsed
00002EFE:	PUSH HL
00002EFF:	LD HL,(A633h)	; MEMMAX
00002F02:	OR A			; no parameters ?
00002F03:	SBC HL,DE
00002F05:	JP C,201Fh		; ERROR: 'Out of memory'
00002F08:	LD HL,(A62Dh)		; VARED
00002F0B:	INC H
00002F0C:	INC H
00002F0D:	INC H
00002F0E:	INC H
00002F0F:	OR A
00002F10:	SBC HL,DE
00002F12:	JP NC,206Fh		; ERROR: Illegal function call
00002F15:	EX DE,HL
00002F16:	CALL 21A7h
00002F19:	POP HL
00002F1A:	POP DE
00002F1B:	LD SP,(A62Fh)
00002F1F:	LD BC,FFFFh
00002F22:	PUSH BC
00002F23:	PUSH DE
00002F24:	RET

; 'DELETE'
00002F25:	JP Z,2069h		; ERROR: Missing operand
00002F28:	CALL 2FEFh		; REFLNO: ... Line ref = Number
00002F2B:	CALL 3088h		; Get arguments for line number range (xxx-yyy), DE to BC.
00002F2E:	EX DE,HL
00002F2F:	LD E,C
00002F30:	LD D,B
00002F31:	CALL A4EEh			; DELSUB:
00002F34:	JP 14DAh		; 

; 'RENUM'
00002F37:	LD DE,000Ah
00002F3A:	LD (2FB4h),DE
00002F3E:	LD (2FBFh),DE
00002F42:	LD E,00h
00002F44:	LD (2FA3h),DE
00002F48:	JR Z,+33h
00002F4A:	CP 2Ch	; ','
00002F4C:	JR Z,+10h
00002F4E:	CALL 7FAAh		; IDEEXP: DE= (HL), A=next character to be parsed
00002F51:	LD (2FB4h),DE
00002F55:	CALL 17A8h		; END2C: look for next parameter, Z if none
00002F58:	JR Z,+23h
00002F5A:	CALL 2E73h		; HCH2CH: Skip spaces and check for comma ','
00002F5D:	DEC HL
00002F5E:	CALL 8261h		; skip SPACEs in (++HL), A=next char
00002F61:	CP 2Ch	; ','
00002F63:	JR Z,+10h
00002F65:	CALL 7FAAh		; IDEEXP: DE= (HL), A=next character to be parsed
00002F68:	LD (2FA3h),DE
00002F6C:	CALL 17A8h		; END2C: look for next parameter, Z if none
00002F6F:	JR Z,+0Ch
00002F71:	CALL 2E73h		; HCH2CH: Skip spaces and check for comma ','
00002F74:	DEC HL
00002F75:	INC HL
00002F76:	CALL 7FAAh		; IDEEXP: DE= (HL), A=next character to be parsed
00002F79:	LD (2FBFh),DE
00002F7D:	PUSH HL
00002F7E:	LD HL,(2FBFh)
00002F81:	LD A,H
00002F82:	OR L
00002F83:	JP Z,206Fh		; ERROR: Illegal function call
00002F86:	LD HL,(2FA3h)
00002F89:	EX DE,HL
00002F8A:	LD HL,(2FB4h)
00002F8D:	OR A
00002F8E:	SBC HL,DE
00002F90:	JP C,206Fh		; ERROR: Illegal function call
00002F93:	CALL 2FE2h
00002F96:	LD HL,(A635h)		; TEXTST,  address of BASIC  program
00002F99:	CALL 1773h		; LDDEMI:
00002F9C:	JR Z,+2Bh
00002F9E:	LD C,(HL)
00002F9F:	INC HL
00002FA0:	LD B,(HL)
00002FA1:	PUSH HL
00002FA2:	LD HL,0000h
00002FA5:	OR A
00002FA6:	SBC HL,BC
00002FA8:	POP HL
00002FA9:	JR Z,+05h
00002FAB:	JR C,+03h
00002FAD:	EX DE,HL
00002FAE:	JR -17h
00002FB0:	DEC HL
00002FB1:	DEC HL
00002FB2:	DEC HL
00002FB3:	LD BC,0000h
00002FB6:	CALL 1773h		; LDDEMI:
00002FB9:	JR Z,+0Eh
00002FBB:	LD (HL),C
00002FBC:	INC HL
00002FBD:	LD (HL),B
00002FBE:	LD HL,0000h
00002FC1:	ADD HL,BC
00002FC2:	JR C,+0Ah
00002FC4:	LD C,L
00002FC5:	LD B,H
00002FC6:	EX DE,HL
00002FC7:	JR -13h
00002FC9:	CALL 2FEFh		; REFLNO: ... Line ref = Number
00002FCC:	POP HL
00002FCD:	RET

00002FCE:	LD HL,000Ah
00002FD1:	LD (2FBFh),HL
00002FD4:	LD (2FB4h),HL
00002FD7:	LD L,00h
00002FD9:	LD (2FA3h),HL
00002FDC:	CALL 2F7Dh
00002FDF:	JP 206Fh		; ERROR: Illegal function call

00002FE2:	PUSH DE
00002FE3:	PUSH HL
00002FE4:	LD HL,3030h
00002FE7:	LD (3014h),HL
00002FEA:	JR +0Bh
00002FEC:	POP HL
00002FED:	POP DE
00002FEE:	RET

; REFLNO: ... Line ref = Number
00002FEF:	PUSH DE
00002FF0:	PUSH HL
00002FF1:	LD HL,3016h
00002FF4:	LD (3014h),HL
00002FF7:	LD HL,(A635h)		; TEXTST,  address of BASIC  program
00002FFA:	DEC HL
00002FFB:	INC HL
00002FFC:	LD A,(HL)
00002FFD:	INC HL
00002FFE:	OR (HL)
00002FFF:	JR Z,-15h
00003001:	INC HL
00003002:	LD E,(HL)
00003003:	INC HL
00003004:	LD D,(HL)
00003005:	CALL 3552h			; Parse the content of a 'DATA' line
00003008:	OR A
00003009:	JR Z,-10h
0000300B:	CP 0Bh
0000300D:	JR Z,+04h
0000300F:	CP 0Ch
00003011:	JR NZ,-0Eh
00003013:	JP 3016h

00003016:	CP 0Bh
00003018:	JR Z,-15h
0000301A:	DEC HL
0000301B:	LD E,(HL)
0000301C:	INC HL
0000301D:	LD D,(HL)
0000301E:	PUSH HL
0000301F:	EX DE,HL
00003020:	INC HL
00003021:	INC HL
00003022:	LD E,(HL)
00003023:	INC HL
00003024:	LD D,(HL)
00003025:	POP HL
00003026:	LD (HL),D
00003027:	DEC HL
00003028:	LD (HL),E
00003029:	DEC HL
0000302A:	LD (HL),0Bh
0000302C:	INC HL
0000302D:	INC HL
0000302E:	JR -2Bh
00003030:	CP 0Ch
00003032:	JR Z,-2Fh
00003034:	DEC HL
00003035:	PUSH HL
00003036:	CALL 316Ch		; LD HL,(HL)
00003039:	LD E,L
0000303A:	LD D,H
0000303B:	LD A,L
0000303C:	OR H
0000303D:	JR Z,+19h
0000303F:	CALL 305Ch
00003042:	JR C,+0Bh
00003044:	EX DE,HL
00003045:	POP HL
00003046:	DEC HL
00003047:	LD (HL),0Ch
00003049:	INC HL
0000304A:	LD (HL),E
0000304B:	INC HL
0000304C:	LD (HL),D
0000304D:	JR -21h
0000304F:	LD DE,FFFFh
00003052:	POP HL
00003053:	DEC HL
00003054:	LD (HL),0Bh
00003056:	JR -0Fh
00003058:	POP HL
00003059:	INC HL
0000305A:	JR -0Fh
0000305C:	PUSH BC
0000305D:	PUSH DE
0000305E:	LD C,L
0000305F:	LD B,H
00003060:	LD HL,(A635h)		; TEXTST,  address of BASIC  program
00003063:	CALL 1773h		; LDDEMI:
00003066:	JR Z,+1Dh
00003068:	PUSH DE
00003069:	LD E,(HL)
0000306A:	INC HL
0000306B:	LD D,(HL)
0000306C:	LD A,C
0000306D:	CP E
0000306E:	JR NZ,+0Ch
00003070:	LD A,B
00003071:	CP D
00003072:	DEC HL
00003073:	DEC HL
00003074:	DEC HL
00003075:	JR NZ,+05h
00003077:	POP BC
00003078:	OR A
00003079:	POP DE
0000307A:	POP BC
0000307B:	RET

0000307C:	PUSH DE
0000307D:	EX DE,HL
0000307E:	OR A
0000307F:	SBC HL,BC
00003081:	POP DE
00003082:	POP HL
00003083:	JR C,-22h
00003085:	SCF
00003086:	JR -0Fh

; ; Get arguments for line number range (xxx-yyy), DE to BC.
00003088:	LD DE,0000h
0000308B:	LD BC,FFFFh
0000308E:	CALL 17A8h		; END2C: look for next parameter, Z if none
00003091:	RET Z
00003092:	CALL 30B4h
00003095:	CP 2Eh	; '.'
00003097:	JR NZ,+06h
00003099:	LD DE,(3630h)	; EDLINE
0000309D:	JR +09h			; NX2C2D:

0000309F:	CP 0Bh
000030A1:	JP NZ,2066h		; ERROR: Syntax error
000030A4:	INC HL
000030A5:	LD E,(HL)
000030A6:	INC HL
000030A7:	LD D,(HL)
; NX2C2D:
000030A8:	INC HL
000030A9:	CALL 17A8h		; END2C: look for next parameter, Z if none
000030AC:	JR Z,+03h		; ONELLN:
000030AE:	CALL 30B4h
; ONELLN:
000030B1:	LD C,E
000030B2:	LD B,D
000030B3:	RET

000030B4:	CP 2Dh	; '-'
000030B6:	JR Z,+03h
000030B8:	CP 2Ch	; ','	; ','
000030BA:	RET NZ
000030BB:	POP AF
000030BC:	INC HL
000030BD:	CALL 17A8h		; END2C: look for next parameter, Z if none
000030C0:	RET Z
000030C1:	CP 2Eh	; '.'
000030C3:	JR NZ,+06h
000030C5:	LD BC,(3630h)	; EDLINE
000030C9:	INC HL
000030CA:	RET

000030CB:	CP 0Bh
000030CD:	JR NZ,-2Eh
000030CF:	INC HL
000030D0:	LD C,(HL)
000030D1:	INC HL
000030D2:	LD B,(HL)
000030D3:	INC HL
000030D4:	RET

; 'EDIT'
000030D5:	CALL 30DCh
000030D8:	JP 1515h

000030DB:	XOR A
000030DC:	LD DE,(3630h)		; EDLINE
000030E0:	CALL NZ,3088h		; ; Get arguments for line number range (xxx-yyy), DE to BC.
000030E3:	LD A,D
000030E4:	OR E
000030E5:	JR Z,+03h
000030E7:	LD A,D
000030E8:	AND E
000030E9:	INC A
000030EA:	JP Z,1537h
000030ED:	XOR A
000030EE:	LD (3627h),A	; CONTFG
000030F1:	PUSH DE
000030F2:	CALL 61AEh
000030F5:	EX DE,HL
000030F6:	CALL 305Ch
000030F9:	POP DE
000030FA:	JR NC,+07h
000030FC:	LD HL,A637h		; IMDBUF - Immediate command buffer
000030FF:	LD (HL),00h
00003101:	JR +04h
00003103:	LD BC,0004h
00003106:	ADD HL,BC
00003107:	EX DE,HL
00003108:	PUSH DE
00003109:	LD (3630h),HL	; EDLINE
0000310C:	CALL 2139h
0000310F:	CALL 000Bh		; MSX (aka DEPRT), print message in DE
00003112:	CALL 04BAh		; OUTSP: print ' '
00003115:	POP HL
00003116:	LD DE,A73Fh		; KEYBM1 (aka KEYBUF)
00003119:	PUSH DE
0000311A:	CALL 795Ch		; Parse next BASIC statement
0000311D:	POP DE
0000311E:	LD B,00h
00003120:	LD A,(DE)
00003121:	INC B
00003122:	OR A
00003123:	JR Z,+0Bh
00003125:	CALL 04C8h
00003128:	INC DE
00003129:	JR -0Bh
0000312B:	LD A,1Dh
0000312D:	CALL 0013h		; OUTCH (PRINT char in A)
00003130:	DJNZ -07h
00003132:	RET

; 'UNTIL'
00003133:	POP DE
00003134:	EXX
00003135:	LD HL,0000h
00003138:	ADD HL,SP
00003139:	LD A,(HL)
0000313A:	INC A
0000313B:	JP Z,203Fh		; ERROR: UNTIL without repeat
0000313E:	CP FDh			; Token for '^'
00003140:	JR Z,+05h
00003142:	CALL 1801h		; HL=(HL)+HL+2
00003145:	JR -0Eh
00003147:	LD SP,HL
00003148:	EXX
00003149:	PUSH DE
0000314A:	CALL 7FD1h		; EXPR:
0000314D:	CALL 5A90h		; 'CINT'
00003150:	EX DE,HL
00003151:	LD A,(HL)
00003152:	INC HL
00003153:	OR (HL)
00003154:	DEC HL
00003155:	EX DE,HL
00003156:	JR NZ,+1Bh
00003158:	LD HL,0004h

0000315B:	ADD HL,SP
0000315C:	LD E,(HL)
0000315D:	INC HL
0000315E:	LD D,(HL)
0000315F:	INC HL
00003160:	LD (3634h),DE	; current program line
00003164:	LD E,(HL)
00003165:	INC HL
00003166:	LD D,(HL)
00003167:	LD (362Eh),DE		; NXTLPT: ptr for BASIC interpreter
0000316B:	INC HL

; LD HL,(HL)
0000316C:	PUSH AF
0000316D:	LD A,(HL)
0000316E:	INC HL
0000316F:	LD H,(HL)
00003170:	LD L,A
00003171:	POP AF
00003172:	RET

; JP(SP) and balance the stack
00003173:	POP IX
00003175:	POP BC
00003176:	POP BC
00003177:	POP BC
00003178:	POP BC
00003179:	JP	(IX)

; 'RETURN'
0000317B:	POP IX
0000317D:	EXX
0000317E:	LD HL,0000h
00003181:	ADD HL,SP
00003182:	LD A,(HL)
00003183:	INC A
00003184:	JP Z,2042h		; ERROR: RETURN without GOSUB
00003187:	CP FCh
00003189:	JR Z,+05h
0000318B:	CALL 1801h		; HL=(HL)+HL+2
0000318E:	JR -0Eh
00003190:	LD SP,HL
00003191:	EXX
00003192:	POP BC
00003193:	CALL 8262h		; skip SPACEs in (HL), A=next char
00003196:	EX DE,HL
00003197:	POP HL
00003198:	LD (3634h),HL	; current program line
0000319B:	POP HL
0000319C:	LD (362Eh),HL		; NXTLPT: ptr for BASIC interpreter
0000319F:	POP HL
000031A0:	PUSH IX
000031A2:	CP 3Ah	; ':'
000031A4:	RET Z
000031A5:	OR A
000031A6:	RET Z
000031A7:	EX DE,HL
000031A8:	JP 3488h		; 'GOTO'

000031AB:	PUSH BC
000031AC:	JP 2042h		; ERROR: RETURN without GOSUB

; 'WHILE'
000031AF:	POP BC
000031B0:	PUSH HL
000031B1:	EX DE,HL
000031B2:	LD HL,(362Eh)		; NXTLPT: ptr for BASIC interpreter
000031B5:	LD (31D4h),HL
000031B8:	PUSH HL
000031B9:	LD HL,(3634h)	; current program line
000031BC:	LD (31DAh),HL
000031BF:	PUSH HL
000031C0:	LD HL,06FDh
000031C3:	PUSH HL
000031C4:	PUSH DE
000031C5:	LD DE,(3621h)		; TMPEND
000031C9:	CALL 8D3Ch			; MEMECK: (SBC SP,DE)
000031CC:	POP DE
000031CD:	EX DE,HL
000031CE:	DEC HL
000031CF:	CALL 3222h
000031D2:	EX DE,HL
000031D3:	LD HL,0000h
000031D6:	LD (362Eh),HL		; NXTLPT: ptr for BASIC interpreter
000031D9:	LD HL,0000h
000031DC:	LD (3634h),HL	; current program line
000031DF:	EX DE,HL
000031E0:	PUSH BC
000031E1:	INC HL

; 'WEND'
000031E2:	POP DE
000031E3:	EXX
000031E4:	LD HL,0000h
000031E7:	ADD HL,SP
000031E8:	LD A,(HL)
000031E9:	INC A
000031EA:	JP Z,203Ch		; ERROR: WEND without while
000031ED:	CP FEh
000031EF:	JR Z,+05h
000031F1:	CALL 1801h		; HL=(HL)+HL+2
000031F4:	JR -0Eh
000031F6:	LD SP,HL
000031F7:	EXX
000031F8:	PUSH DE
000031F9:	PUSH HL
000031FA:	LD HL,000Ah		; 10
000031FD:	ADD HL,SP
000031FE:	CALL 316Ch		; LD HL,(HL)
00003201:	CALL 7FAAh		; IDEEXP: DE= (HL), A=next character to be parsed
00003204:	EX DE,HL
00003205:	LD A,L
00003206:	OR H
00003207:	POP HL
00003208:	JP Z,3173h		; JP(SP) and balance the stack
0000320B:	PUSH DE
0000320C:	LD HL,0008h
0000320F:	CALL 315Bh
00003212:	POP HL
00003213:	RET

00003214:	PUSH BC
00003215:	LD BC,A5A4h		; DGBF08
00003218:	CALL 322Eh
0000321B:	POP BC
0000321C:	RET NC
0000321D:	LD A,25h		; error code for 'REPEAT without UNTIL'
0000321F:	JP 2076h		; Generate error message, error code in 'A'

00003222:	PUSH BC
00003223:	LD BC,A3A2h
00003226:	CALL 322Eh
00003229:	POP BC
0000322A:	RET NC
0000322B:	JP 2039h		; ERROR: WHILE without WEND


0000322E:	CALL 3552h			; Parse the content of a 'DATA' line
00003231:	OR A
00003232:	JR Z,+0Bh
00003234:	CP B
00003235:	RET Z
00003236:	CP C
00003237:	JR NZ,-0Bh
00003239:	CALL 322Eh
0000323C:	JR NC,-10h
0000323E:	RET

0000323F:	INC HL
00003240:	CALL 1773h		; LDDEMI:
00003243:	SCF
00003244:	RET Z
00003245:	LD (31D4h),DE
00003249:	LD E,(HL)
0000324A:	INC HL
0000324B:	LD D,(HL)
0000324C:	LD (31DAh),DE
00003250:	JR -24h
00003252:	EX DE,HL
00003253:	NOP

; 'REPEAT'
00003254:	CP 9Dh			; Token code for 'ON'
00003256:	JR Z,+22h
00003258:	CP A1h			; Token code for 'OFF'
0000325A:	JR Z,+1Dh
0000325C:	POP BC
0000325D:	PUSH HL
0000325E:	CALL 3214h
00003261:	POP HL
00003262:	PUSH HL
00003263:	EX DE,HL
00003264:	LD HL,(362Eh)		; NXTLPT: ptr for BASIC interpreter
00003267:	PUSH HL
00003268:	LD HL,(3634h)	; current program line
0000326B:	PUSH HL
0000326C:	LD HL,06FCh
0000326F:	PUSH HL
00003270:	EX DE,HL
00003271:	PUSH BC
00003272:	LD DE,(A62Dh)		; VARED
00003276:	JP 8D3Ch			; MEMECK: (SBC SP,DE)

00003279:	XOR A
0000327A:	LD (0366h),A		; 0366h= REPTF1 (0=repeat off)
0000327D:	INC HL
0000327E:	RET

; 'GOSUB'
0000327F:	PUSH HL
00003280:	CALL 2E67h		; Move to the next program line
00003283:	EX DE,HL
00003284:	POP HL
00003285:	POP BC
00003286:	PUSH DE
00003287:	EXX
00003288:	LD HL,(362Eh)		; NXTLPT: ptr for BASIC interpreter
0000328B:	PUSH HL
0000328C:	LD HL,(3634h)	; current program line
0000328F:	PUSH HL
00003290:	LD HL,06FBh
00003293:	PUSH HL
00003294:	EXX
00003295:	PUSH BC
00003296:	LD DE,(A62Dh)		; VARED
0000329A:	CALL 8D3Ch			; MEMECK: (SBC SP,DE)
0000329D:	JP 3488h		; 'GOTO'

000032A0:	LD IX,3650h
000032A4:	LD A,(DE)
000032A5:	AND EFh
000032A7:	LD (DE),A
000032A8:	LD A,0Ah
000032AA:	SUB B
000032AB:	ADD A
000032AC:	LD C,A
000032AD:	LD B,00h
000032AF:	ADD IX,BC
000032B1:	LD E,(IX+00h)
000032B4:	LD D,(IX+01h)
000032B7:	LD A,D
000032B8:	OR E
000032B9:	RET Z
000032BA:	POP BC
000032BB:	PUSH HL
000032BC:	LD HL,(362Eh)		; NXTLPT: ptr for BASIC interpreter
000032BF:	PUSH HL
000032C0:	LD HL,(3634h)	; current program line
000032C3:	PUSH HL
000032C4:	LD HL,06FBh
000032C7:	PUSH HL
000032C8:	PUSH BC
000032C9:	EX DE,HL
000032CA:	LD DE,(A62Dh)		; VARED
000032CE:	CALL 8D3Ch			; MEMECK: (SBC SP,DE)
000032D1:	CALL 305Ch
000032D4:	JP C,202Dh		; ERROR: Undefined label
000032D7:	JP 3493h

000032DA:	DEC HL
000032DB:	CALL 32EDh
000032DE:	PUSH HL
000032DF:	LD HL,(3321h)
000032E2:	LD (362Eh),HL		; NXTLPT: ptr for BASIC interpreter
000032E5:	LD HL,0000h
000032E8:	LD (3634h),HL	; current program line
000032EB:	POP HL
000032EC:	RET

000032ED:	CALL 7FD1h		; EXPR:
000032F0:	LD A,(A5DBh)		; data type, aka PRCSON
000032F3:	CP 03h			; string type?
000032F5:	JP NZ,2060h		; ERROR: Type mismatch
000032F8:	LD (27C5h),HL
000032FB:	EX DE,HL
000032FC:	LD A,(HL)
000032FD:	OR A
000032FE:	JP Z,202Dh		; ERROR: Undefined label
00003301:	INC HL
00003302:	LD E,(HL)
00003303:	INC HL
00003304:	LD D,(HL)
00003305:	LD (335Ch),A
00003308:	LD HL,(A62Bh)		; STRST
0000330B:	PUSH HL
0000330C:	ADD HL,DE
0000330D:	POP DE
0000330E:	PUSH HL
0000330F:	LD HL,0010h
00003312:	ADD HL,DE
00003313:	EX DE,HL
00003314:	POP HL
00003315:	LD C,A
00003316:	LD B,00h
00003318:	LDIR
0000331A:	LD HL,(A635h)		; TEXTST,  address of BASIC  program
0000331D:	LD (3321h),HL
00003320:	LD HL,0000h
00003323:	LD (33E3h),HL
00003326:	LD E,(HL)
00003327:	INC HL
00003328:	LD D,(HL)
00003329:	INC HL
0000332A:	LD A,D
0000332B:	OR E
0000332C:	JP Z,202Dh		; ERROR: Undefined label
0000332F:	EX DE,HL
00003330:	ADD HL,DE
00003331:	DEC HL
00003332:	DEC HL
00003333:	LD (3321h),HL
00003336:	EX DE,HL
00003337:	LD E,(HL)
00003338:	INC HL
00003339:	LD D,(HL)
0000333A:	LD (32E6h),DE
0000333E:	CALL 3552h			; Parse the content of a 'DATA' line
00003341:	OR A
00003342:	JR Z,-24h
00003344:	CP CAh
00003346:	JR NZ,-0Ah
00003348:	INC HL
00003349:	CALL 7FD1h		; EXPR:
0000334C:	LD A,(A5DBh)		; data type, aka PRCSON
0000334F:	CP 03h			; string type?
00003351:	JP NZ,2060h		; ERROR: Type mismatch
00003354:	PUSH HL
00003355:	EX DE,HL
00003356:	LD A,(HL)
00003357:	INC HL
00003358:	LD E,(HL)
00003359:	INC HL
0000335A:	LD D,(HL)
0000335B:	CP 00h
0000335D:	JR NZ,+17h
0000335F:	LD B,A
00003360:	LD HL,(A62Bh)		; STRST
00003363:	PUSH HL
00003364:	ADD HL,DE
00003365:	POP DE
00003366:	PUSH HL
00003367:	LD HL,0010h
0000336A:	ADD HL,DE
0000336B:	POP DE
0000336C:	LD A,(DE)
0000336D:	CP (HL)
0000336E:	JR NZ,+06h
00003370:	INC HL
00003371:	INC DE
00003372:	DJNZ -08h
00003374:	POP HL
00003375:	RET

00003376:	POP HL
00003377:	DEC HL
00003378:	JR -3Ch

; 'RESUME'
0000337A:	LD A,(3626h)		; ERRORF  ..current error condition
0000337D:	CP 02h
0000337F:	JP C,2036h			; ERROR: RESUME without error
00003382:	DEC A
00003383:	LD (3626h),A		; ERRORF  ..current error condition
00003386:	CALL 17A8h			; END2C: look for next parameter, Z if none
00003389:	EX DE,HL
0000338A:	LD HL,(3638h)		; ERRLNO  ..program line where the last error happened
0000338D:	LD (3634h),HL		; current program line
00003390:	LD HL,(363Ah)
00003393:	LD (362Eh),HL		; NXTLPT: ptr for BASIC interpreter
00003396:	LD HL,(363Ch)
00003399:	RET Z
0000339A:	CP 8Eh				; Token for 'NEXT'
0000339C:	JP Z,2E67h			; Move to the next program line
0000339F:	EX DE,HL
000033A0:	JP 3488h			; 'GOTO'

000033A3:	CALL 8261h		; skip SPACEs in (++HL), A=next char
000033A6:	CP 80h			; GOTO
000033A8:	JR Z,+0Dh
000033AA:	CP 82h
000033AC:	JP NZ,2066h		; ERROR: Syntax error
000033AF:	CALL 8261h		; skip SPACEs in (++HL), A=next char
000033B2:	CP E0h			; Token for 'TO'
000033B4:	JP NZ,2066h		; ERROR: Syntax error
000033B7:	CALL 8261h		; skip SPACEs in (++HL), A=next char
000033BA:	CP 0Bh
000033BC:	JR NZ,+1Bh
000033BE:	INC HL
000033BF:	PUSH HL
000033C0:	CALL 316Ch		; LD HL,(HL)
000033C3:	LD A,L
000033C4:	OR H
000033C5:	JR Z,+2Fh
000033C7:	CALL 305Ch
000033CA:	JP C,202Dh		; ERROR: Undefined label
000033CD:	LD (3636h),HL	; ERRORV
000033D0:	LD A,01h
000033D2:	LD (3626h),A	; ERRORF  ..current error condition
000033D5:	POP HL
000033D6:	INC HL
000033D7:	INC HL
000033D8:	RET

000033D9:	CP 22h	; '"'
000033DB:	JP NZ,202Dh		; ERROR: Undefined label
000033DE:	PUSH HL
000033DF:	CALL 32EDh
000033E2:	LD HL,0000h
000033E5:	LD (3636h),HL	; ERRORV
000033E8:	POP HL
000033E9:	CALL 359Dh
000033EC:	OR A
000033ED:	JR Z,+01h
000033EF:	INC HL
000033F0:	LD A,01h
000033F2:	LD (3626h),A		; ERRORF  ..current error condition
000033F5:	RET

000033F6:	LD A,(3626h)		; ERRORF  ..current error condition
000033F9:	DEC A
000033FA:	JR Z,-2Ah
000033FC:	XOR A
000033FD:	LD (3626h),A		; ERRORF  ..current error condition
00003400:	LD HL,(3638h)	; ERRLNO  ..program line where the last error happened
00003403:	LD (3634h),HL	; current program line
00003406:	LD A,(3640h)		; error code
00003409:	JP 2076h		; Generate error message, error code in 'A'

; 'ON'
0000340C:	CALL 8262h		; skip SPACEs in (HL), A=next char
0000340F:	CP C7h			; Token for 'KEY'
00003411:	JP Z,34B7h
00003414:	CP C1h			; Token for 'ERROR'
00003416:	JR Z,-75h
00003418:	CALL 7FAAh		; IDEEXP: DE= (HL), A=next character to be parsed
0000341B:	LD C,E
0000341C:	LD B,D
0000341D:	CP 87h			; Token for 'RESUME' + 1
0000341F:	JP NC,2066h		; ERROR: Syntax error
00003422:	CP 82h			; Token for 'GO'
00003424:	JR NZ,+10h
00003426:	CALL 8261h		; skip SPACEs in (++HL), A=next char
00003429:	LD E,81h
0000342B:	CP E4h			; Token for 'SUB'
0000342D:	JR Z,+06h
0000342F:	CP E0h			; Token for 'TO'
00003431:	JP NZ,2066h		; ERROR: Syntax error
00003434:	DEC E
00003435:	LD A,E
00003436:	PUSH HL
00003437:	LD HL,2D0Dh		; Jump table
0000343A:	SUB 80h
0000343C:	ADD A
0000343D:	LD E,A
0000343E:	LD D,00h
00003440:	ADD HL,DE
00003441:	CALL 316Ch		; LD HL,(HL)
00003444:	EX HL,(SP)
00003445:	INC HL
00003446:	LD A,B
00003447:	OR A
00003448:	JR NZ,+24h
0000344A:	LD A,C
0000344B:	OR A
0000344C:	JR Z,+20h
0000344E:	LD B,A
0000344F:	DEC B
00003450:	JP Z,17A8h		; END2C: look for next parameter, Z if none
00003453:	CALL 8262h		; skip SPACEs in (HL), A=next char
00003456:	CP 22h	; '"'
00003458:	JR Z,+18h
0000345A:	CP 0Bh
0000345C:	JR Z,+05h
0000345E:	CP 0Ch
00003460:	JP NZ,2066h		; ERROR: Syntax error
00003463:	INC HL
00003464:	INC HL
00003465:	CALL 8261h		; skip SPACEs in (++HL), A=next char
00003468:	CP 2Ch	; ','
0000346A:	INC HL
0000346B:	JR Z,-1Eh
0000346D:	DEC HL
0000346E:	POP DE
0000346F:	JP 2E67h		; Move to the next program line

00003472:	CALL 359Dh
00003475:	OR A
00003476:	JR Z,-0Ah
00003478:	JR -15h

; 'GO'
0000347A:	CALL 8262h		; skip SPACEs in (HL), A=next char
0000347D:	INC HL
0000347E:	CP E4h			; Token for 'SUB'
00003480:	JP Z,327Fh		; 'GOSUB'
00003483:	CP E0h			; Token for 'TO'
00003485:	JP NZ,2066h		; ERROR: Syntax error

; 'GOTO'
00003488:	CALL 8262h		; skip SPACEs in (HL), A=next char
0000348B:	INC HL
0000348C:	CP 0Ch
0000348E:	JR NZ,+0Dh
00003490:	CALL 316Ch		; LD HL,(HL)
00003493:	LD (362Eh),HL		; NXTLPT: ptr for BASIC interpreter
00003496:	XOR A
00003497:	LD (3627h),A	; CONTFG
0000349A:	JP 15CCh

0000349D:	CP 0Bh
0000349F:	JP NZ,32DAh
000034A2:	LD E,(HL)
000034A3:	INC HL
000034A4:	LD D,(HL)
000034A5:	EX DE,HL
000034A6:	CALL 305Ch
000034A9:	JP C,202Dh		; ERROR: Undefined label
000034AC:	EX DE,HL
000034AD:	LD (HL),D
000034AE:	DEC HL
000034AF:	LD (HL),E
000034B0:	DEC HL
000034B1:	LD (HL),0Ch
000034B3:	EX DE,HL
000034B4:	JP 3493h

000034B7:	INC HL
000034B8:	CALL 8262h		; skip SPACEs in (HL), A=next char
000034BB:	CP 81h
000034BD:	JR Z,+0Ch
000034BF:	CP 82h
000034C1:	JP NZ,2066h		; ERROR: Syntax error
000034C4:	CALL 8261h		; skip SPACEs in (++HL), A=next char
000034C7:	CP E4h			; Token for 'SUB'
000034C9:	JR NZ,-0Ah
000034CB:	LD B,0Ah		; 10 bytes
000034CD:	LD DE,0EE8h		; INTFLG table
000034D0:	LD A,(DE)
000034D1:	AND 0Fh
000034D3:	LD (DE),A
000034D4:	INC DE
000034D5:	DJNZ -07h
000034D7:	LD B,14h
000034D9:	LD DE,3650h
000034DC:	XOR A
000034DD:	LD (DE),A
000034DE:	INC DE
000034DF:	DJNZ -04h
000034E1:	LD A,0Ah		; 10 bytes
000034E3:	LD DE,3650h
000034E6:	LD BC,0EE8h		; INTFLG table
000034E9:	EX AF,AF'
000034EA:	INC HL
000034EB:	CALL 8262h		; skip SPACEs in (HL), A=next char
000034EE:	CP 2Ch	; ','
000034F0:	JR Z,+16h
000034F2:	CP 0Bh
000034F4:	RET NZ
000034F5:	INC HL
000034F6:	LD A,(HL)
000034F7:	LD (DE),A
000034F8:	INC HL
000034F9:	INC DE
000034FA:	LD A,(HL)
000034FB:	LD (DE),A
000034FC:	INC HL
000034FD:	DEC DE
000034FE:	LD A,(BC)
000034FF:	OR 80h
00003501:	LD (BC),A
00003502:	CALL 8262h		; skip SPACEs in (HL), A=next char
00003505:	CP 2Ch	; ','
00003507:	RET NZ
00003508:	INC DE
00003509:	INC DE
0000350A:	INC BC
0000350B:	EX AF,AF'
0000350C:	DEC A
0000350D:	JR NZ,-26h
0000350F:	JP 2066h		; ERROR: Syntax error

; 'IF'
00003512:	CALL 7FAAh		; IDEEXP: DE= (HL), A=next character to be parsed
00003515:	EX AF,AF'
00003516:	LD A,D
00003517:	OR E
00003518:	JR Z,+18h
0000351A:	EX AF,AF'
0000351B:	CP E2h			; token for 'THEN'
0000351D:	RET NZ
0000351E:	INC HL
0000351F:	CALL 8262h		; skip SPACEs in (HL), A=next char
00003522:	CP 0Bh
00003524:	JP Z,348Bh
00003527:	CP 0Ch
00003529:	JP Z,348Bh
0000352C:	CP 22h	; '"'
0000352E:	JP Z,348Bh
00003531:	RET

00003532:	DEC HL
00003533:	CALL 353Bh
00003536:	JR NC,-1Ah
00003538:	JP 15C9h	; 'REM'

0000353B:	CALL 3552h			; Parse the content of a 'DATA' line
0000353E:	OR A
0000353F:	SCF
00003540:	RET Z
00003541:	CP C2h				; Token for 'ELSE'
00003543:	RET Z
00003544:	CP 93h
00003546:	JR NZ,-0Dh
00003548:	CALL 353Bh
0000354B:	RET C
0000354C:	JR -13h
0000354E:	INC HL
0000354F:	LD A,(HL)
00003550:	JR +06h

; Parse the content of a 'DATA' line
00003552:	INC HL
00003553:	LD A,(HL)
00003554:	CP 94h		; Token for 'DATA'
00003556:	JR Z,+25h
00003558:	OR A
00003559:	RET Z
0000355A:	CP 22h	; '"'
0000355C:	JR Z,+3Fh
0000355E:	CP FEh	; Token prefix
00003560:	JR NC,+13h
00003562:	CP 97h	; Token for 'LOC' or 'REM'  (depending on prefix)
00003564:	JR Z,+11h
00003566:	CP 27h
00003568:	JR Z,+0Dh
0000356A:	CP 20h	; ' '
0000356C:	RET NC
0000356D:	CP 0Bh
0000356F:	RET C
00003570:	CP 15h
00003572:	JR NC,+1Eh
00003574:	INC HL
00003575:	INC HL
00003576:	RET

00003577:	LD A,(HL)
00003578:	OR A
00003579:	RET Z
0000357A:	INC HL
0000357B:	JR -06h
0000357D:	LD A,(HL)
0000357E:	OR A
0000357F:	RET Z
00003580:	CP 3Ah	; ':'
00003582:	RET Z
00003583:	CP 22h	; '"'
00003585:	JR Z,+03h
00003587:	INC HL
00003588:	JR -0Dh
0000358A:	CALL 359Dh
0000358D:	OR A
0000358E:	RET Z
0000358F:	INC HL
00003590:	JR -15h
00003592:	AND 0Fh
00003594:	ADD L
00003595:	LD L,A
00003596:	LD A,00h
00003598:	ADC H
00003599:	LD H,A
0000359A:	LD A,20h
0000359C:	RET

0000359D:	INC HL
0000359E:	LD A,(HL)
0000359F:	OR A
000035A0:	RET Z
000035A1:	CP 22h	; '"'
000035A3:	RET Z
000035A4:	JR -09h

; 'DEFINT'
000035A6:	LD C,02h
000035A8:	LD DE,030Eh		; 'DEFSTR'
000035AB:	LD DE,050Eh		; 'DEFSGN'
000035AE:	LD DE,080Eh		; 'DEFDBL'
000035B1:	CALL 8262h		; skip SPACEs in (HL), A=next char
000035B4:	CALL 53F8h		;
000035B7:	CP 5Bh			; '['  (some BASIC subtracts "A" and checks for 26)
000035B9:	RET NC
000035BA:	SUB 41h
000035BC:	RET C
000035BD:	LD E,A
000035BE:	LD D,00h
000035C0:	LD B,A
000035C1:	PUSH HL
000035C2:	LD HL,A5FBh
000035C5:	ADD HL,DE
000035C6:	LD (HL),C
000035C7:	EX DE,HL
000035C8:	POP HL
000035C9:	CALL 8261h		; skip SPACEs in (++HL), A=next char
000035CC:	INC HL
000035CD:	CP 2Ch	; ','
000035CF:	JR Z,-20h
000035D1:	DEC HL
000035D2:	CP F8h			; Token for '-'
000035D4:	RET NZ
000035D5:	CALL 8261h		; skip SPACEs in (++HL), A=next char
000035D8:	CALL 53F8h
000035DB:	CP 5Bh			; '['  (some BASIC subtracts "A" and checks for 26)
000035DD:	RET NC
000035DE:	SUB 41h
000035E0:	RET C
000035E1:	SUB B
000035E2:	JR Z,-1Bh
000035E4:	JR C,-1Dh
000035E6:	EX DE,HL
000035E7:	INC HL
000035E8:	LD (HL),C
000035E9:	DEC A
000035EA:	JR NZ,-05h
000035EC:	EX DE,HL
000035ED:	JR -26h

; 'WAIT'
000035EF:	CALL 7FAAh		; IDEEXP: DE= (HL), A=next character to be parsed
000035F2:	LD (3610h),DE
000035F6:	CALL 2E73h		; HCH2CH: Skip spaces and check for comma ','
000035F9:	CALL 7F95h		; IBYTE: load BASIC argument in A
000035FC:	LD (361Dh),A
000035FF:	XOR A
00003600:	LD (361Bh),A
00003603:	CALL 17A8h		; END2C: look for next parameter, Z if none
00003606:	JR Z,+07h
00003608:	INC HL
00003609:	CALL 7F95h		; IBYTE: load BASIC argument in A
0000360C:	LD (361Bh),A
0000360F:	LD BC,0000h
00003612:	LD A,(0036h)	; BRKBUF
00003615:	CP 03h
00003617:	RET Z
00003618:	IN A,(C)
0000361A:	XOR 00h
0000361C:	AND 00h
0000361E:	JR Z,-0Eh
00003620:	RET

; TMPEND
00003621:	DEFW AE85h

; STACK
00003623:	DEFW FDFE	; STACK

; MAXFILES
00003625:	DEFB 2

00003626:	NOP
; CONTFG
00003627:	NOP
00003628:	CALL 00ADh

; TRON/TROFF flag (zero = OFF)
0000362B:	NOP	

0000362C:	NOP
0000362D:	NOP

; NXTLPT: ptr for BASIC interpreter (word)
0000362E:	DEFB AA ADD HL,BC
0000362F:	XOR D

; EDLINE
00003630:	LD A,(BC)
00003631:	NOP
00003632:	LD A,(BC)
00003633:	NOP
; current program line (word)
00003634:	INC D
00003635:	NOP

; ERRORV
00003636:	CPL
00003637:	OR (HL)

; ERRLNO  ..program line where the last error happened
00003638:	NOP
00003639:	NOP

0000363A:	NOP
0000363B:	NOP
0000363C:	NOP
0000363D:	NOP
0000363E:	JP (HL)

0000363F:	XOR C

; error code
00003640:	NOP

00003641:	NOP
00003642:	NOP

00003643:	NOP
00003644:	NOP

00003645:	NOP
00003646:	NOP

00003647:	NOP

00003648:	DEC B

00003649:	CP D
0000364A:	OR A
0000364B:	NOP
0000364C:	NOP
0000364D:	LD B,H
0000364E:	NOP
0000364F:	NOP
00003650:	NOP
00003651:	NOP
00003652:	DEC BC
00003653:	AND H
00003654:	XOR A
00003655:	LD D,E
00003656:	ADD HL,BC
00003657:	SBC D
00003658:	HALT
00003659:	AND L
0000365A:	INC SP
0000365B:	LD (HL),A
0000365C:	PUSH AF
0000365D:	LD A,(HL)
0000365E:	JP NC,C891h
00003661:	LD A,E
00003662:	CP E
00003663:	LD E,H

; 'POKE'
00003664:	CALL 8262h		; skip SPACEs in (HL), A=next char
00003667:	CP 40h
00003669:	JR Z,+0Eh
0000366B:	CALL 7FAAh		; IDEEXP: DE= (HL), A=next character to be parsed
0000366E:	CP 2Ch	; ','
00003670:	RET NZ
00003671:	CALL 3696h
00003674:	LD (DE),A
00003675:	INC DE
00003676:	LD A,(HL)
00003677:	JR -0Bh

00003679:	INC HL
0000367A:	CALL 7FAAh		; IDEEXP: DE= (HL), A=next character to be parsed
0000367D:	CP 2Ch	; ','
0000367F:	RET NZ
00003680:	CALL 3696h
00003683:	PUSH HL
00003684:	LD HL,1FFFh
00003687:	OR A
00003688:	SBC HL,DE
0000368A:	JP NC,206Fh		; ERROR: Illegal function call
0000368D:	POP HL
0000368E:	LD C,E
0000368F:	LD B,D
00003690:	OUT (C),A
00003692:	INC DE
00003693:	LD A,(HL)
00003694:	JR -19h

00003696:	PUSH DE
00003697:	INC HL
00003698:	CALL 7F95h		; IBYTE: load BASIC argument in A
0000369B:	POP DE
0000369C:	RET

; 'LOCATE', 'CURSOR'
0000369D:	CALL 7F95h		; IBYTE: load BASIC argument in A
000036A0:	LD BC,(001Eh)		; CURXST
000036A4:	INC B
000036A5:	CP C
000036A6:	JR C,+1Bh
000036A8:	CP B
000036A9:	JR NC,+18h
000036AB:	LD (000Eh),A	; CSRXY: X,Y text coordinates
000036AE:	CALL 2E73h		; HCH2CH: Skip spaces and check for comma ','
000036B1:	CALL 7F95h		; IBYTE: load BASIC argument in A
000036B4:	LD BC,(0016h)	; CURYST
000036B8:	INC B
000036B9:	CP C
000036BA:	JR C,+07h
000036BC:	CP B
000036BD:	JR NC,+04h
000036BF:	LD (000Fh),A	; Y text coordinate
000036C2:	RET

000036C3:	JP 206Fh		; ERROR: Illegal function call

; 'WIDTH'
000036C6:	CALL 7F95h		; IBYTE: load BASIC argument in A
000036C9:	PUSH HL
000036CA:	CP 29h	; 40+1 ?
000036CC:	JR C,+05h
000036CE:	CALL 36DEh
000036D1:	POP HL
000036D2:	RET

000036D3:	CALL 36D8h
000036D6:	POP HL
000036D7:	RET

000036D8:	CALL 0998h
000036DB:	XOR A
000036DC:	JR +05h
000036DE:	CALL 098Ch
000036E1:	LD A,29h
000036E3:	LD (3BC4h),A
000036E6:	LD (3CF2h),A
000036E9:	LD (43F6h),A
000036EC:	LD DE,00C7h
000036EF:	LD A,(0007h)	; WIDTH0
000036F2:	CP 28h			; 40?
000036F4:	LD BC,013Fh
000036F7:	JR Z,+03h
000036F9:	LD BC,027Fh
000036FC:	EXX
000036FD:	LD BC,0000h
00003700:	LD DE,0000h
00003703:	XOR A
00003704:	LD (5384h),A
00003707:	LD A,E
00003708:	LD (5092h),A
0000370B:	LD (50C7h),BC
0000370F:	EXX
00003710:	LD A,E
00003711:	LD (50AFh),A
00003714:	LD (50DBh),BC
00003718:	EXX
00003719:	LD A,C
0000371A:	AND 07h
0000371C:	JR Z,+07h
0000371E:	LD L,A
0000371F:	XOR A
00003720:	SCF
00003721:	RRA
00003722:	DEC L
00003723:	JR NZ,-05h
00003725:	LD (3D06h),A
00003728:	EXX
00003729:	LD A,C
0000372A:	AND 07h
0000372C:	INC A
0000372D:	LD L,A
0000372E:	LD A,FFh
00003730:	SRL A
00003732:	DEC L
00003733:	JR NZ,-05h
00003735:	LD (3D1Bh),A
00003738:	LD L,C
00003739:	LD H,B
0000373A:	INC HL
0000373B:	ADD HL,HL
0000373C:	ADD HL,HL
0000373D:	ADD HL,HL
0000373E:	ADD HL,HL
0000373F:	ADD HL,HL
00003740:	LD A,H
00003741:	EXX
00003742:	LD L,C
00003743:	LD H,B
00003744:	ADD HL,HL
00003745:	ADD HL,HL
00003746:	ADD HL,HL
00003747:	ADD HL,HL
00003748:	ADD HL,HL
00003749:	SUB H
0000374A:	JR NZ,+10h
0000374C:	LD A,(3D06h)
0000374F:	LD L,A
00003750:	LD A,(3D1Bh)
00003753:	AND L
00003754:	LD (3D06h),A
00003757:	XOR A
00003758:	LD (3D1Bh),A
0000375B:	INC A
0000375C:	LD (3CE3h),A
0000375F:	LD L,E
00003760:	LD (3CDEh),HL
00003763:	LD A,E
00003764:	EXX
00003765:	SUB E
00003766:	CPL
00003767:	INC A
00003768:	INC A
00003769:	LD (3CE1h),A
0000376C:	EXX
0000376D:	XOR A
0000376E:	SUB C
0000376F:	LD L,A
00003770:	LD A,00h
00003772:	SBC B
00003773:	LD H,A
00003774:	LD (3BACh),HL
00003777:	PUSH HL
00003778:	EXX
00003779:	POP HL
0000377A:	ADD HL,BC
0000377B:	LD A,L
0000377C:	CPL
0000377D:	LD L,A
0000377E:	LD A,H
0000377F:	CPL
00003780:	LD H,A
00003781:	LD (3BB0h),HL
00003784:	EXX
00003785:	XOR A
00003786:	SUB E
00003787:	LD L,A
00003788:	LD A,00h
0000378A:	SBC D
0000378B:	LD H,A
0000378C:	LD (3BA0h),HL
0000378F:	PUSH HL
00003790:	EXX
00003791:	POP HL
00003792:	ADD HL,DE
00003793:	LD A,L
00003794:	CPL
00003795:	LD L,A
00003796:	LD A,H
00003797:	CPL
00003798:	LD H,A
00003799:	LD (3BA4h),HL
0000379C:	EXX
0000379D:	RET

0000379E:	PUSH HL
0000379F:	CALL 36ECh
000037A2:	POP HL
000037A3:	RET

; 'WINDOW'
000037A4:	JR Z,-08h
000037A6:	XOR A
000037A7:	LD (5384h),A
000037AA:	CALL 38B3h		; Get argument pair "(BC,DE)"
000037AD:	PUSH BC
000037AE:	LD (5385h),BC
000037B2:	LD (5387h),DE
000037B6:	PUSH DE
000037B7:	PUSH HL
000037B8:	CALL 3892h
000037BB:	POP HL
000037BC:	CP F8h			; Token for '-'
000037BE:	JP NZ,2066h		; ERROR: Syntax error
000037C1:	INC HL
000037C2:	CALL 38B3h		; Get argument pair "(BC,DE)"
000037C5:	EXX
000037C6:	POP DE
000037C7:	POP BC
000037C8:	EXX
000037C9:	PUSH HL
000037CA:	CALL 3881h
000037CD:	EXX
000037CE:	CALL 3707h
000037D1:	EXX
000037D2:	LD L,C
000037D3:	LD H,B
000037D4:	LD BC,(5385h)
000037D8:	OR A
000037D9:	SBC HL,BC
000037DB:	LD (5389h),HL
000037DE:	EX DE,HL
000037DF:	LD DE,(5387h)
000037E3:	SBC HL,DE
000037E5:	LD (538Bh),HL
000037E8:	POP HL
000037E9:	CALL 3D58h
000037EC:	RET Z
000037ED:	CALL 2E73h		; HCH2CH: Skip spaces and check for comma ','
000037F0:	CALL 8BFEh		; Check for '('
000037F3:	CALL 387Ah
000037F6:	PUSH DE
000037F7:	LD DE,538Dh
000037FA:	CALL 3872h
000037FD:	POP HL
000037FE:	CALL 2E73h		; HCH2CH: Skip spaces and check for comma ','
00003801:	CALL 387Ah
00003804:	PUSH DE
00003805:	LD DE,5392h
00003808:	CALL 3872h
0000380B:	POP HL
0000380C:	LD A,(HL)
0000380D:	CALL 8C08h		; Check for ')'
00003810:	CALL 8262h		; skip SPACEs in (HL), A=next char
00003813:	CP F8h			; Token for '-'
00003815:	JP NZ,2066h		; ERROR: Syntax error
00003818:	CALL 8BFDh		; INC HL and check for '('
0000381B:	CALL 387Ah
0000381E:	PUSH DE
0000381F:	LD A,05h
00003821:	LD (A5DBh),A		; data type, aka PRCSON
00003824:	LD DE,538Dh
00003827:	CALL 9A3Bh		; SUB:
0000382A:	PUSH HL
0000382B:	LD HL,A73Fh		; KEYBM1 (aka KEYBUF)
0000382E:	LD DE,(5389h)
00003832:	CALL 53B4h		; FLTHEX:  (HL)=DE
00003835:	POP DE
00003836:	CALL A0EAh		; DIV:
00003839:	LD DE,5397h
0000383C:	CALL 3872h
0000383F:	POP HL
00003840:	CALL 2E73h		; HCH2CH: Skip spaces and check for comma ','
00003843:	CALL 387Ah
00003846:	PUSH DE
00003847:	LD A,05h
00003849:	LD (A5DBh),A		; data type, aka PRCSON
0000384C:	LD DE,5392h
0000384F:	CALL 9A3Bh		; SUB:
00003852:	PUSH HL
00003853:	LD HL,A73Fh		; KEYBM1 (aka KEYBUF)
00003856:	LD DE,(538Bh)
0000385A:	CALL 53B4h		; FLTHEX:  (HL)=DE
0000385D:	POP DE
0000385E:	CALL A0EAh		; DIV:
00003861:	LD DE,539Ch
00003864:	CALL 3872h
00003867:	POP HL
00003868:	LD A,(HL)
00003869:	CALL 8C08h		; Check for ')'
0000386C:	LD A,01h
0000386E:	LD (5384h),A
00003871:	RET

00003872:	PUSH BC
00003873:	LD BC,0005h
00003876:	LDIR
00003878:	POP BC
00003879:	RET

0000387A:	CALL 7FD1h		; EXPR:
0000387D:	EX DE,HL
0000387E:	JP 5436h		; 'CSNG'

00003881:	PUSH BC
00003882:	PUSH DE
00003883:	EXX
00003884:	POP HL
00003885:	OR A
00003886:	SBC HL,DE
00003888:	JP C,206Fh		; ERROR: Illegal function call
0000388B:	POP HL
0000388C:	SBC HL,BC
0000388E:	JP C,206Fh		; ERROR: Illegal function call
00003891:	EXX
00003892:	LD HL,00C7h
00003895:	OR A
00003896:	SBC HL,DE
00003898:	JP C,206Fh		; ERROR: Illegal function call
0000389B:	LD HL,(0007h)	; WIDTH0
0000389E:	LD H,00h
000038A0:	ADD HL,HL
000038A1:	ADD HL,HL
000038A2:	ADD HL,HL
000038A3:	DEC HL
000038A4:	OR A
000038A5:	SBC HL,BC
000038A7:	JP C,206Fh		; ERROR: Illegal function call
000038AA:	RET

000038AB:	CALL 8BFEh		; Check for '('
000038AE:	CALL 38C5h
000038B1:	JR +03h

; Get argument pair "(BC,DE)"
000038B3:	CALL 38BCh		; Get argument pair "(BC,DE"
000038B6:	CALL 8C08h		; Check for ')'
000038B9:	JP 8262h		; skip SPACEs in (HL), A=next char

; Get argument pair "(BC,DE"
000038BC:	CALL 8BFEh		; Check for '('
000038BF:	LD A,(5384h)
000038C2:	OR A
000038C3:	JR NZ,+0Ch
000038C5:	CALL 7FAAh		; IDEEXP: DE= (HL), A=next character to be parsed
000038C8:	PUSH DE
000038C9:	CALL 2E73h		; HCH2CH: Skip spaces and check for comma ','
000038CC:	CALL 7FAAh		; IDEEXP: DE= (HL), A=next character to be parsed
000038CF:	POP BC
000038D0:	RET

000038D1:	CALL 387Ah
000038D4:	PUSH DE
000038D5:	LD DE,538Dh
000038D8:	CALL 9A3Bh		; SUB:
000038DB:	LD DE,5397h
000038DE:	CALL 9FF5h		; MUL:
000038E1:	CALL 5BAFh		; HLFLT
000038E4:	LD DE,(5385h)
000038E8:	ADD HL,DE
000038E9:	EX HL,(SP)
000038EA:	CALL 2E73h		; HCH2CH: Skip spaces and check for comma ','
000038ED:	CALL 387Ah
000038F0:	PUSH DE
000038F1:	LD DE,5392h
000038F4:	CALL 9A3Bh		; SUB:
000038F7:	LD DE,539Ch
000038FA:	CALL 9FF5h		; MUL:
000038FD:	CALL 5BAFh		; HLFLT
00003900:	LD DE,(5387h)
00003904:	ADD HL,DE
00003905:	EX DE,HL
00003906:	POP HL
00003907:	POP BC
00003908:	JP 8262h		; skip SPACEs in (HL), A=next char

; 'CONSOLE'
0000390B:	JR Z,+2Bh
0000390D:	LD A,(0016h)		; CURYST
00003910:	LD B,19h
00003912:	CALL 394Bh
00003915:	LD (0016h),BC		; CURYST
00003919:	LD A,(HL)
0000391A:	CP 2Ch	; ','
0000391C:	JR NZ,+15h
0000391E:	INC HL
0000391F:	LD A,(0007h)	; WIDTH0
00003922:	LD B,A
00003923:	LD A,(001Eh)		; CURXST
00003926:	CALL 394Bh
00003929:	LD (001Eh),BC		; CURXST
0000392D:	LD A,0Bh
0000392F:	CALL 0013h		; OUTCH (PRINT char in A)
00003932:	RET

00003933:	CALL 393Fh
00003936:	JR -0Bh

; reset cursor position
00003938:	LD BC,1800h		; B=24, C=0
0000393B:	LD (0016h),BC		; CURYST, CURYED
0000393F:	LD A,(0007h)	; WIDTH0
00003942:	DEC A
00003943:	LD B,A
00003944:	LD C,00h
00003946:	LD (001Eh),BC		; CURXST
0000394A:	RET

0000394B:	LD D,00h
0000394D:	LD E,A
0000394E:	CALL 8262h		; skip SPACEs in (HL), A=next char
00003951:	CP 2Ch	; ','
00003953:	JR Z,+05h
00003955:	PUSH BC
00003956:	CALL 7F95h		; IBYTE: load BASIC argument in A
00003959:	POP BC
0000395A:	CALL 2E73h		; HCH2CH: Skip spaces and check for comma ','
0000395D:	LD C,E
0000395E:	PUSH BC
0000395F:	CALL 7F95h		; IBYTE: load BASIC argument in A
00003962:	POP BC
00003963:	DEC A
00003964:	JP M,206Fh		; ERROR: Illegal function call
00003967:	ADD C
00003968:	CP B
00003969:	JP NC,206Fh		; ERROR: Illegal function call
0000396C:	LD B,A
0000396D:	RET

0000396E:	LD A,AFh			; redirect output

; 'KLIST'
;0000396F:	XOR A
00003970:	LD (1472h),A		; FILOUT flag
00003973:	CALL 3C22h
00003976:	PUSH HL
00003977:	LD C,00h
00003979:	CALL 1446h
0000397C:	LD DE,53ABh
0000397F:	CALL 142Fh
00003982:	LD A,C
00003983:	CP 09h
00003985:	JR Z,+0Bh
00003987:	PUSH AF
00003988:	LD A,20h
0000398A:	CALL 1420h		; file stuff, depends on value set in FILOUT
0000398D:	POP AF
0000398E:	ADD 31h
00003990:	JR +06h
00003992:	LD A,31h
00003994:	CALL 1420h		; file stuff, depends on value set in FILOUT
00003997:	DEC A
00003998:	CALL 1420h		; file stuff, depends on value set in FILOUT
0000399B:	LD A,2Ch	; ','
0000399D:	CALL 1420h		; file stuff, depends on value set in FILOUT
000039A0:	LD A,C
000039A1:	CALL 3AC9h		; KEYBCL - HL = Text associated to FN key in A
000039A4:	LD B,(HL)
000039A5:	INC HL
000039A6:	LD DE,A73Fh		; KEYBM1 (aka KEYBUF)
000039A9:	CALL 39BDh
000039AC:	LD DE,A73Fh		; KEYBM1 (aka KEYBUF)
000039AF:	CALL 142Fh
000039B2:	INC C
000039B3:	LD A,C
000039B4:	CP 0Ah
000039B6:	JR NZ,-3Fh
000039B8:	CALL 1446h
000039BB:	POP HL
000039BC:	RET

000039BD:	EX DE,HL
000039BE:	PUSH BC
000039BF:	LD A,B
000039C0:	OR A
000039C1:	LD C,00h
000039C3:	JR Z,+29h
000039C5:	LD A,(DE)
000039C6:	CP 20h	; ' '
000039C8:	JR C,+29h
000039CA:	CP 22h	; '"'
000039CC:	JR Z,+25h
000039CE:	LD A,C
000039CF:	CP 01h
000039D1:	JR Z,+0Ch
000039D3:	OR A
000039D4:	JR Z,+06h
000039D6:	LD (HL),29h
000039D8:	INC HL
000039D9:	LD (HL),2Bh
000039DB:	INC HL
000039DC:	LD (HL),22h	; '"'
000039DE:	INC HL
000039DF:	LD A,(DE)
000039E0:	LD (HL),A
000039E1:	INC DE
000039E2:	INC HL
000039E3:	LD C,01h
000039E5:	DJNZ -22h
000039E7:	LD (HL),22h	; '"'
000039E9:	INC HL
000039EA:	LD (HL),00h
000039EC:	POP BC
000039ED:	RET

000039EE:	LD (HL),22h	; '"'
000039F0:	INC HL
000039F1:	JR -0Ch
000039F3:	LD A,C
000039F4:	CP FFh
000039F6:	JR Z,+37h
000039F8:	OR A
000039F9:	JR Z,+06h
000039FB:	LD (HL),22h	; '"'
000039FD:	INC HL
000039FE:	LD (HL),2Bh
00003A00:	INC HL
00003A01:	LD (HL),43h
00003A03:	INC HL
00003A04:	LD (HL),48h
00003A06:	INC HL
00003A07:	LD (HL),52h
00003A09:	INC HL
00003A0A:	LD (HL),24h
00003A0C:	INC HL
00003A0D:	LD (HL),28h
00003A0F:	INC HL
00003A10:	PUSH DE
00003A11:	PUSH HL
00003A12:	PUSH BC
00003A13:	EX DE,HL
00003A14:	LD L,(HL)
00003A15:	LD H,00h
00003A17:	CALL 2139h
00003A1A:	POP BC
00003A1B:	POP HL
00003A1C:	LD A,(DE)
00003A1D:	OR A
00003A1E:	JR Z,+05h
00003A20:	LD (HL),A
00003A21:	INC DE
00003A22:	INC HL
00003A23:	JR -09h
00003A25:	POP DE
00003A26:	INC DE
00003A27:	LD C,FFh
00003A29:	DJNZ -66h
00003A2B:	LD (HL),29h
00003A2D:	JR -46h
00003A2F:	LD (HL),2Ch	; ','
00003A31:	JR -24h

; on-off-stop
00003A33:	CP 9Dh			; Token code for 'ON'
00003A35:	LD DE,1F80h
00003A38:	RET Z
00003A39:	CP A1h			; Token code for 'OFF'
00003A3B:	LD DE,0F00h
00003A3E:	RET Z
00003A3F:	CP 99h			; Token code for 'STOP'
00003A41:	LD DE,1FC0h
00003A44:	RET

00003A45:	PUSH HL
00003A46:	LD B,0Ah		; 10 bytes
00003A48:	LD HL,0EE8h		; INTFLG
00003A4B:	LD A,(HL)
00003A4C:	AND D
00003A4D:	OR E
00003A4E:	LD (HL),A
00003A4F:	INC HL
00003A50:	DJNZ -07h
00003A52:	POP HL
00003A53:	RET

00003A54:	EX AF,AF'
00003A55:	PUSH HL
00003A56:	DEC A
00003A57:	LD C,A
00003A58:	LD B,00h
00003A5A:	LD HL,0EE8h		; INTFLG
00003A5D:	ADD HL,BC
00003A5E:	LD A,(HL)
00003A5F:	AND D
00003A60:	OR E
00003A61:	LD (HL),A
00003A62:	POP HL
00003A63:	RET

; 'DEF KEY'
00003A64:	CALL 8262h		; skip SPACEs in (HL), A=next char
00003A67:	CP 87h
00003A69:	INC HL
00003A6A:	JP Z,396Fh		; 'KLIST'
00003A6D:	CP 88h
00003A6F:	JP Z,396Eh
00003A72:	CALL 3A33h		; on-off-stop
00003A75:	JR Z,-32h
00003A77:	DEC HL
00003A78:	CALL 7F95h		; IBYTE: load BASIC argument in A
00003A7B:	CP 0Bh
00003A7D:	JP NC,206Fh		; ERROR: Illegal function call
00003A80:	EX AF,AF'
00003A81:	CALL 8262h		; skip SPACEs in (HL), A=next char
00003A84:	INC HL
00003A85:	CALL 3A33h		; on-off-stop
00003A88:	JR Z,-36h
00003A8A:	CP 2Ch	; ','
00003A8C:	JP NZ,2066h		; ERROR: Syntax error
00003A8F:	EX AF,AF'
00003A90:	OR A
00003A91:	JR Z,+1Fh
00003A93:	DEC A
00003A94:	PUSH HL
00003A95:	CALL 3AC9h		; KEYBCL - HL = Text associated to FN key in A
00003A98:	EX HL,(SP)
00003A99:	CALL 7FB9h		; STREXP:
00003A9C:	EX HL,(SP)
00003A9D:	CP 10h
00003A9F:	JR C,+02h
00003AA1:	LD A,0Fh
00003AA3:	LD (HL),A
00003AA4:	OR A
00003AA5:	JR Z,+08h
00003AA7:	LD B,A
00003AA8:	INC HL
00003AA9:	LD A,(DE)
00003AAA:	LD (HL),A
00003AAB:	INC DE
00003AAC:	INC HL
00003AAD:	DJNZ -06h
00003AAF:	POP HL
00003AB0:	EI
00003AB1:	RET

00003AB2:	CALL 7FB9h		; STREXP:
00003AB5:	DEC DE
00003AB6:	DI
00003AB7:	CP 40h
00003AB9:	JR C,+02h
00003ABB:	LD A,3Fh	; '?'
00003ABD:	PUSH HL
00003ABE:	LD HL,0EA6h	; POINT1
00003AC1:	LD (HL),A
00003AC2:	LD B,A
00003AC3:	INC B
00003AC4:	INC HL
00003AC5:	LD (HL),00h
00003AC7:	JR -21h

; KEYBCL - HL = Text associated to FN key in A
00003AC9:	ADD A
00003ACA:	ADD A
00003ACB:	ADD A
00003ACC:	ADD A			; *16
00003ACD:	LD HL,0F42h		; FUNBUF, function key definitions
00003AD0:	ADD L
00003AD1:	LD L,A
00003AD2:	LD A,00h
00003AD4:	ADC H
00003AD5:	LD H,A
00003AD6:	RET

; 'COLOR'
00003AD7:	CP 2Ch	; ','
00003AD9:	LD A,(0026h)	; COLORF
00003ADC:	CALL NZ,4AB0h
00003ADF:	AND 07h
00003AE1:	LD E,A
00003AE2:	LD (40F9h),A
00003AE5:	LD A,(0026h)	; COLORF
00003AE8:	AND F8h			; Token for '-'
00003AEA:	OR E
00003AEB:	LD (0026h),A	; COLORF
00003AEE:	LD A,(HL)
00003AEF:	CP 2Ch	; ','
00003AF1:	RET NZ
00003AF2:	INC HL
00003AF3:	CALL 4AB0h
00003AF6:	JR +34h

; init GPRIOF, RPRIOF and BPRIOF
00003AF8:	LD DE,00F6h		; BPRIOF (I/O: 1000h)
00003AFB:	LD A,AAh		; XOR D
00003AFD:	LD (DE),A
00003AFE:	INC DE			; RPRIOF (I/O: 1100h)
00003AFF:	LD A,CCh
00003B01:	LD (DE),A
00003B02:	INC DE			; GPRIOF (I/O: 1200h)
00003B03:	LD A,F0h
00003B05:	LD (DE),A

; send GPRIOF, RPRIOF and BPRIOF
00003B06:	CALL 3B6Ah			; Wait for VSYNC
00003B09:	LD DE,00F8h			; GPRIOF (I/O: 1200h)
00003B0C:	LD BC,1203h
00003B0F:	LD A,(DE)
00003B10:	OUT (C),A
00003B12:	DEC DE
00003B13:	DEC B
00003B14:	DEC C
00003B15:	JR NZ,-08h
00003B17:	RET

; 'PALET'
00003B18:	CALL 3D58h
00003B1B:	JR Z,-25h
00003B1D:	CALL 4AB0h
00003B20:	PUSH AF
00003B21:	CALL 8262h		; skip SPACEs in (HL), A=next char
00003B24:	CALL 2E73h		; HCH2CH: Skip spaces and check for comma ','
00003B27:	CALL 4AB0h
00003B2A:	POP DE
00003B2B:	LD E,A
00003B2C:	LD A,D
00003B2D:	RLCA
00003B2E:	RLCA
00003B2F:	RLCA
00003B30:	OR C6h
00003B32:	LD (3B53h),A
00003B35:	AND BFh
00003B37:	LD (3B50h),A
00003B3A:	PUSH HL
00003B3B:	LD HL,00F6h		; BPRIOF (I/O: 1000h)
00003B3E:	LD B,03h
00003B40:	CALL 3B4Bh
00003B43:	INC HL
00003B44:	DJNZ -06h
00003B46:	CALL 3B06h		; send GPRIOF, RPRIOF and BPRIOF
00003B49:	POP HL
00003B4A:	RET

00003B4B:	RRC E
00003B4D:	JR C,+03h
00003B4F:	RES 0,(HL)
00003B51:	RET

00003B52:	SET 0,(HL)
00003B54:	RET

; 'PRW'
00003B55:	CALL 3D58h
00003B58:	LD E,00h
00003B5A:	CALL NZ,7F95h		; IBYTE: load BASIC argument in A
00003B5D:	LD A,E
00003B5E:	LD (00F9h),A
00003B61:	CALL 3B6Ah			; Wait for VSYNC
00003B64:	LD BC,1300h
00003B67:	OUT (C),E
00003B69:	RET

; Wait for VSYNC
00003B6A:	LD BC,1A01h		; 8255 CRTC read, port B
00003B6D:	IN A,(C)
00003B6F:	AND 04h			; VSYNC ?
00003B71:	RET NZ
00003B72:	JR -07h

; 'PRESET'
00003B74:	LD BC,A52Fh
00003B77:	LD DE,7D00h
00003B7A:	CALL 3B94h
00003B7D:	JR +03h

; 'PSET'
00003B7F:	CALL 3B8Eh
00003B82:	CALL 3BE1h		; Get argument pair "(BC,DE)"
00003B85:	PUSH HL
00003B86:	EX DE,HL
00003B87:	LD D,B
00003B88:	LD E,C
00003B89:	CALL 40E9h		; set pixel to (DE,HL)
00003B8C:	POP HL
00003B8D:	RET

00003B8E:	LD BC,B500h
00003B91:	LD DE,A52Fh
00003B94:	LD (4111h),BC
00003B98:	LD (411Fh),DE
00003B9C:	RET

00003B9D:	PUSH BC
00003B9E:	PUSH HL
00003B9F:	LD BC,0000h
00003BA2:	ADD HL,BC
00003BA3:	LD BC,FF38h
00003BA6:	ADD HL,BC
00003BA7:	JR C,+0Bh
00003BA9:	EX DE,HL
00003BAA:	PUSH HL
00003BAB:	LD BC,0000h
00003BAE:	ADD HL,BC
00003BAF:	LD BC,FEC0h
00003BB2:	ADD HL,BC
00003BB3:	POP DE
00003BB4:	POP HL
00003BB5:	POP BC
00003BB6:	RET C
00003BB7:	PUSH DE
00003BB8:	EX DE,HL
00003BB9:	LD A,E
00003BBA:	AND F8h			; Token for '-'
00003BBC:	LD L,A
00003BBD:	LD H,00h
00003BBF:	LD C,L
00003BC0:	LD B,H
00003BC1:	ADD HL,HL
00003BC2:	ADD HL,HL
00003BC3:	ADD HL,BC
00003BC4:	NOP
00003BC5:	LD A,E
00003BC6:	AND 07h
00003BC8:	ADD A
00003BC9:	ADD A
00003BCA:	ADD A
00003BCB:	ADD H
00003BCC:	LD H,A
00003BCD:	EX DE,HL
00003BCE:	POP HL
00003BCF:	ADD HL,HL
00003BD0:	ADD HL,HL
00003BD1:	ADD HL,HL	; *8
00003BD2:	LD A,L
00003BD3:	CPL
00003BD4:	ADD HL,HL
00003BD5:	ADD HL,HL	; *32
00003BD6:	LD C,H
00003BD7:	LD B,00h
00003BD9:	LD HL,(00EBh)		; INIADW
00003BDC:	ADD HL,BC
00003BDD:	ADD HL,DE
00003BDE:	AND 38h
00003BE0:	RET

; Get argument pair "(BC,DE)"
00003BE1:	CALL 38BCh		; Get argument pair "(BC,DE"
00003BE4:	INC HL
00003BE5:	CP 29h	; ')'
00003BE7:	JR Z,+1Ah

00003BE9:	DEC HL
00003BEA:	CALL 2E73h		; HCH2CH: Skip spaces and check for comma ','
00003BED:	PUSH DE
00003BEE:	PUSH BC
00003BEF:	CALL 7FAAh		; IDEEXP: DE= (HL), A=next character to be parsed
00003BF2:	CALL 8C08h		; Check for ')'
00003BF5:	CALL 7F98h		; Check byte overflow for value in DE and put in A
00003BF8:	CP 08h
00003BFA:	JP NC,206Fh		; ERROR: Illegal function call
00003BFD:	POP BC
00003BFE:	POP DE
00003BFF:	LD (40F9h),A
00003C02:	RET

; jr here if control code is 29h
00003C03:	LD A,(0026h)	; COLORF
00003C06:	AND 07h
00003C08:	JR -0Bh

; Hide graphics screen
00003C0A:	LD DE,00F8h
00003C0D:	CALL 3B6Ah			; Wait for VSYNC
00003C10:	LD BC,1203h
00003C13:	LD A,(DE)
00003C14:	AND 01h
00003C16:	JR Z,+02h
00003C18:	LD A,FFh
00003C1A:	OUT (C),A
00003C1C:	DEC DE
00003C1D:	DEC B
00003C1E:	DEC C
00003C1F:	JR NZ,-0Eh
00003C21:	RET

00003C22:	PUSH BC
00003C23:	PUSH DE
00003C24:	CALL 3C0Ah		; Hide graphics screen
00003C27:	LD B,13h
00003C29:	XOR A
00003C2A:	OUT (C),A
00003C2C:	POP DE
00003C2D:	POP BC
00003C2E:	RET

; 'SCREEN'
00003C2F:	JR Z,-27h		; Hide graphics screen if no parameter is given
00003C31:	CALL 3B06h		; send GPRIOF, RPRIOF and BPRIOF
00003C34:	LD A,(53A1h)
00003C37:	LD B,03h
00003C39:	CALL 3C7Ch
00003C3C:	PUSH AF
00003C3D:	LD (53A1h),A
00003C40:	CALL 09C0h
00003C43:	POP AF
00003C44:	RET NZ
00003C45:	LD A,(53A2h)
00003C48:	LD B,02h
00003C4A:	INC HL
00003C4B:	CALL 3C7Ch
00003C4E:	LD (53A2h),A
00003C51:	PUSH AF
00003C52:	CALL 09F5h
00003C55:	POP AF
00003C56:	RET NZ
00003C57:	LD A,00h
00003C59:	LD B,04h
00003C5B:	INC HL
00003C5C:	CALL 3C7Ch
00003C5F:	LD (3C58h),A
00003C62:	EX DE,HL
00003C63:	LD L,A
00003C64:	LD H,00h
00003C66:	ADD HL,HL
00003C67:	LD BC,3C74h
00003C6A:	ADD HL,BC
00003C6B:	LD C,(HL)
00003C6C:	INC HL
00003C6D:	LD B,(HL)
00003C6E:	LD (40FDh),BC
00003C72:	EX DE,HL
00003C73:	RET

00003C74:	INC H
00003C75:	LD B,C
00003C76:	LD BC,0841h
00003C79:	LD B,C
00003C7A:	LD D,41h
00003C7C:	LD E,A
00003C7D:	LD D,00h
00003C7F:	CALL 8262h		; skip SPACEs in (HL), A=next char
00003C82:	CP 2Ch	; ','
00003C84:	PUSH BC
00003C85:	CALL NZ,7FAAh		; IDEEXP: DE= (HL), A=next character to be parsed
00003C88:	POP BC
00003C89:	LD C,A
00003C8A:	CALL 7F98h		; Check byte overflow for value in DE and put in A
00003C8D:	CP B
00003C8E:	JP NC,206Fh		; ERROR: Illegal function call
00003C91:	LD B,A
00003C92:	LD A,C
00003C93:	CP 2Ch	; ','
00003C95:	LD A,B
00003C96:	RET

00003C97:	CALL 8262h		; skip SPACEs in (HL), A=next char
00003C9A:	CP 2Ch	; ','
00003C9C:	JR NZ,+0Ch
00003C9E:	INC HL
00003C9F:	CALL 7F95h		; IBYTE: load BASIC argument in A
00003CA2:	LD (0027h),A	; CLSCHR
00003CA5:	LD A,0Ch
00003CA7:	JP 0013h	; OUTCH (PRINT char in A)

00003CAA:	LD A,20h
00003CAC:	JR -0Ch
00003CAE:	CALL 3C97h
00003CB1:	XOR A
00003CB2:	JR +10h

; 'CLS'
00003CB4:	JR Z,-0Ch
00003CB6:	CP 2Ch	; ','
00003CB8:	JR Z,-23h
00003CBA:	CALL 7F95h		; IBYTE: load BASIC argument in A
00003CBD:	CP 04h
00003CBF:	JR Z,-13h
00003CC1:	JP NC,206Fh		; ERROR: Illegal function call
00003CC4:	PUSH HL
00003CC5:	LD HL,3D2Fh
00003CC8:	OR A
00003CC9:	JR Z,+03h
00003CCB:	LD HL,3D29h
00003CCE:	LD (3D08h),HL
00003CD1:	LD (3D1Eh),HL
00003CD4:	RRCA
00003CD5:	RRCA
00003CD6:	LD D,A
00003CD7:	LD E,00h
00003CD9:	LD HL,(00EBh)		; INIADW
00003CDC:	ADD HL,DE
00003CDD:	LD DE,0000h
00003CE0:	LD C,C8h		; Token for 'KEY' + 1 ?
00003CE2:	LD B,28h
00003CE4:	PUSH DE
00003CE5:	PUSH BC
00003CE6:	PUSH HL
00003CE7:	LD A,E
00003CE8:	AND F8h			; Token for '-'
00003CEA:	LD L,A
00003CEB:	LD H,00h
00003CED:	LD C,L
00003CEE:	LD B,H
00003CEF:	ADD HL,HL
00003CF0:	ADD HL,HL
00003CF1:	ADD HL,BC
00003CF2:	NOP
00003CF3:	LD A,E
00003CF4:	AND 07h
00003CF6:	ADD A
00003CF7:	ADD A
00003CF8:	ADD A
00003CF9:	ADD H
00003CFA:	LD H,A
00003CFB:	LD E,D
00003CFC:	LD D,00h
00003CFE:	ADD HL,DE
00003CFF:	POP DE
00003D00:	ADD HL,DE
00003D01:	LD B,H
00003D02:	LD C,L
00003D03:	POP HL
00003D04:	PUSH DE
00003D05:	LD A,00h
00003D07:	CALL 3D2Fh
00003D0A:	CALL C,3D49h
00003D0D:	JR +03h
00003D0F:	XOR A
00003D10:	OUT (C),A
00003D12:	INC BC
00003D13:	DEC H
00003D14:	JR NZ,-07h
00003D16:	CPL
00003D17:	INA (00h)
00003D19:	EI
00003D1A:	LD A,00h
00003D1C:	OR A
00003D1D:	CALL NZ,3D2Fh
00003D20:	LD C,L
00003D21:	POP HL
00003D22:	POP DE
00003D23:	INC E
00003D24:	DEC C
00003D25:	JR NZ,-45h
00003D27:	POP HL
00003D28:	RET

00003D29:	IN D,(C)
00003D2B:	AND D
00003D2C:	OUT (C),A
00003D2E:	RET

00003D2F:	LD D,A
00003D30:	SET 6,B
00003D32:	IN A,(C)
00003D34:	AND D
00003D35:	OUT (C),A
00003D37:	SET 7,B
00003D39:	IN A,(C)
00003D3B:	AND D
00003D3C:	OUT (C),A
00003D3E:	RES 6,B
00003D40:	IN A,(C)
00003D42:	AND D
00003D43:	OUT (C),A
00003D45:	RES 7,B
00003D47:	SCF
00003D48:	RET

00003D49:	PUSH BC
00003D4A:	DI
00003D4B:	LD BC,1A03h		; 8255 CRTC write, set mode
00003D4E:	LD A,0Bh
00003D50:	OUT (C),A
00003D52:	DEC A
00003D53:	OUT (C),A
00003D55:	POP BC
00003D56:	RET

00003D57:	INC HL
00003D58:	LD A,(HL)
00003D59:	CP 20h	; ' '
00003D5B:	JR Z,-06h
00003D5D:	OR A
00003D5E:	RET Z
00003D5F:	CP 3Ah	; ':'
00003D61:	RET

00003D62:	OR A
00003D63:	RET Z
00003D64:	CP 3Ah	; ':'
00003D66:	RET Z
00003D67:	CP 2Ch	; ','
00003D69:	JP NZ,2066h		; ERROR: Syntax error
00003D6C:	OR A
00003D6D:	RET

; 'LINE'
00003D6E:	CALL 8262h		; skip SPACEs in (HL), A=next char
00003D71:	CP 91h			; Token for 'INPUT'
00003D73:	JR NZ,+04h
00003D75:	INC HL
00003D76:	JP 22CAh		; 'LINPUT'

00003D79:	CALL 3DC0h
00003D7C:	CALL 8262h		; skip SPACEs in (HL), A=next char
00003D7F:	CP F8h			; Token for '-'
00003D81:	JR NZ,+10h
00003D83:	EX DE,HL
00003D84:	LD HL,(3EE3h)
00003D87:	LD (3EDEh),HL
00003D8A:	LD HL,(3F00h)
00003D8D:	LD (3EFBh),HL
00003D90:	EX DE,HL
00003D91:	JR +0Fh
00003D93:	CALL 38B3h		; Get argument pair "(BC,DE)"
00003D96:	LD (3EDEh),BC
00003D9A:	LD (3EFBh),DE
00003D9E:	CP F8h			; Token for '-'
00003DA0:	JR NZ,+0Ch
00003DA2:	INC HL
00003DA3:	CALL 38B3h		; Get argument pair "(BC,DE)"
00003DA6:	LD (3EE3h),BC
00003DAA:	LD (3F00h),DE
00003DAE:	CP 2Ch	; ','
00003DB0:	JP Z,3DDAh		; used by 'WINDOW', 'PSET'.. deal with extra arguments
00003DB3:	PUSH HL
00003DB4:	CALL 3EC9h
00003DB7:	POP HL
00003DB8:	CALL 8262h		; skip SPACEs in (HL), A=next char
00003DBB:	CP F8h			; Token for '-'
00003DBD:	JR Z,-3Ch
00003DBF:	RET

00003DC0:	EX DE,HL
00003DC1:	LD HL,3F1Bh
00003DC4:	LD (3F19h),HL
00003DC7:	LD HL,40E9h		; set pixel to (DE,HL)
00003DCA:	LD (3FAEh),HL	; SMC, call address changes for graphics instructions (set pixel, etc..)
00003DCD:	LD HL,FFFFh
00003DD0:	LD (3F9Dh),HL
00003DD3:	CALL 3C03h		; ..as for control code = 29h
00003DD6:	EX DE,HL
00003DD7:	JP 3B8Eh

; used by 'WINDOW', 'PSET'.. deal with extra arguments
00003DDA:	INC HL
00003DDB:	CALL 8262h		; skip SPACEs in (HL), A=next char
00003DDE:	CP EAh			; Token for XOR
00003DE0:	LD E,00h
00003DE2:	JR Z,+22h
00003DE4:	CP FEh
00003DE6:	JR NZ,+0Dh
00003DE8:	INC HL
00003DE9:	LD A,(HL)
00003DEA:	INC E
00003DEB:	CP 81h			; Token for WINDOW ..FEh, 81h
00003DED:	JR Z,+17h
00003DEF:	INC E
00003DF0:	CP 82h			; Token for PSET ..FEh, 82h
00003DF2:	JR Z,+12h
00003DF4:	DEC HL
00003DF5:	CALL 7FB9h		; STREXP:
00003DF8:	OR A
00003DF9:	JR Z,+01h
00003DFB:	LD A,(DE)
00003DFC:	LD (4150h),A
00003DFF:	LD DE,4139h
00003E02:	LD A,18h
00003E04:	JR +1Fh

; xor ?
00003E06:	INC HL
00003E07:	EX DE,HL
00003E08:	LD H,00h
00003E0A:	ADD HL,HL
00003E0B:	ADD HL,HL
00003E0C:	LD BC,415Eh		; table
00003E0F:	ADD HL,BC
00003E10:	LD C,(HL)
00003E11:	INC HL
00003E12:	LD B,(HL)
00003E13:	LD (4111h),BC
00003E17:	INC HL
00003E18:	LD C,(HL)
00003E19:	INC HL
00003E1A:	LD B,(HL)
00003E1B:	LD (411Fh),BC
00003E1F:	EX DE,HL
00003E20:	LD DE,40E9h		; set pixel to (DE,HL)
00003E23:	LD A,28h
00003E25:	EX DE,HL
00003E26:	LD (3FAEh),HL	; SMC, call address changes for graphics instructions (set pixel, etc..)
00003E29:	LD HL,3F9Ch
00003E2C:	LD (3FFFh),HL
00003E2F:	LD (3E82h),A
00003E32:	LD BC,3F1Bh
00003E35:	EX DE,HL
00003E36:	CALL 3D58h
00003E39:	JR Z,+71h
00003E3B:	CALL 2E76h		; CH2CH: Check for comma ','
00003E3E:	CALL 8262h		; skip SPACEs in (HL), A=next char
00003E41:	CALL 53F8h
00003E44:	CP 42h	; 'B'
00003E46:	JR Z,+1Eh
00003E48:	CP 2Ch	; ','
00003E4A:	JR Z,+0Dh
00003E4C:	PUSH BC
00003E4D:	CALL 4AB0h
00003E50:	POP BC
00003E51:	LD (40F9h),A
00003E54:	CALL 3D58h
00003E57:	JR Z,+53h
00003E59:	CALL 2E76h		; CH2CH: Check for comma ','
00003E5C:	CALL 8262h		; skip SPACEs in (HL), A=next char
00003E5F:	CALL 53F8h
00003E62:	CP 42h	; 'B'
00003E64:	JR NZ,+58h
00003E66:	LD BC,3FB3h
00003E69:	INC HL
00003E6A:	CALL 8262h		; skip SPACEs in (HL), A=next char
00003E6D:	CALL 53F8h
00003E70:	CP 46h
00003E72:	JR NZ,+42h
00003E74:	INC HL
00003E75:	LD BC,40F8h
00003E78:	LD (4089h),BC
00003E7C:	LD BC,4009h
00003E7F:	CALL 3D58h
00003E82:	JR +28h

00003E84:	CALL 2E73h		; HCH2CH: Skip spaces and check for comma ','
00003E87:	CALL 7FB9h		; STREXP:
00003E8A:	PUSH HL
00003E8B:	PUSH DE
00003E8C:	LD DE,(3621h)		; TMPEND
00003E90:	LD HL,0258h			; 600
00003E93:	ADD HL,DE
00003E94:	EX DE,HL
00003E95:	CALL 8D3Ch			; MEMECK: (SBC SP,DE)
00003E98:	POP DE
00003E99:	CALL 4A7Eh
00003E9C:	LD HL,40E1h
00003E9F:	LD (4089h),HL
00003EA2:	LD HL,40DDh
00003EA5:	LD (3FAEh),HL	; SMC, call address changes for graphics instructions (set pixel, etc..)
00003EA8:	POP HL
00003EA9:	LD BC,4009h
00003EAC:	LD (3F19h),BC
00003EB0:	PUSH HL
00003EB1:	CALL 3EC9h
00003EB4:	POP HL
00003EB5:	RET

00003EB6:	CALL 3D58h
00003EB9:	JR Z,-0Fh
00003EBB:	CALL 2E76h		; CH2CH: Check for comma ','
00003EBE:	PUSH BC
00003EBF:	CALL 7FAAh		; IDEEXP: DE= (HL), A=next character to be parsed
00003EC2:	LD (3F9Dh),DE
00003EC6:	POP BC
00003EC7:	JR -1Dh

00003EC9:	LD HL,0000h
00003ECC:	LD (3F66h),HL
00003ECF:	LD (3F5Ah),HL
00003ED2:	LD BC,8000h
00003ED5:	LD (3F49h),BC
00003ED9:	LD (3F46h),BC
00003EDD:	LD HL,000Ah
00003EE0:	ADD HL,BC
00003EE1:	EX DE,HL
00003EE2:	LD HL,000Ah
00003EE5:	ADD HL,BC
00003EE6:	OR A
00003EE7:	SBC HL,DE
00003EE9:	LD DE,0001h
00003EEC:	JR NC,+06h
00003EEE:	EX DE,HL
00003EEF:	SBC HL,DE
00003EF1:	LD DE,FFFFh
00003EF4:	PUSH HL
00003EF5:	LD (3F6Dh),DE
00003EF9:	LD A,E
00003EFA:	LD HL,000Eh
00003EFD:	ADD HL,BC
00003EFE:	EX DE,HL
00003EFF:	LD HL,000Fh
00003F02:	ADD HL,BC
00003F03:	OR A
00003F04:	SBC HL,DE
00003F06:	LD DE,0001h
00003F09:	JR NC,+06h
00003F0B:	EX DE,HL
00003F0C:	SBC HL,DE
00003F0E:	LD DE,FFFFh
00003F11:	LD (3F5Fh),DE
00003F15:	LD B,A
00003F16:	LD C,E
00003F17:	POP DE
00003F18:	JP 3F1Bh

00003F1B:	PUSH HL
00003F1C:	OR A
00003F1D:	SBC HL,DE
00003F1F:	POP HL
00003F20:	PUSH DE
00003F21:	JR Z,+20h
00003F23:	JR NC,+54h
00003F25:	CALL 40A6h
00003F28:	DEC C
00003F29:	LD DE,0000h
00003F2C:	JR Z,+0Eh
00003F2E:	XOR A
00003F2F:	EX DE,HL
00003F30:	SBC HL,DE
00003F32:	LD DE,7F7Fh
00003F35:	LD (3F49h),DE
00003F39:	LD DE,FFFFh
00003F3C:	LD (3F5Fh),DE
00003F40:	LD (3F5Ah),HL
00003F43:	POP BC
00003F44:	EXX
00003F45:	LD DE,8000h
00003F48:	LD HL,8000h
00003F4B:	EXX
00003F4C:	LD DE,(3EDEh)
00003F50:	LD HL,(3EFBh)
00003F53:	INC BC
00003F54:	PUSH BC
00003F55:	CALL 3F9Ch
00003F58:	EXX
00003F59:	LD BC,0000h
00003F5C:	ADD HL,BC
00003F5D:	EXX
00003F5E:	LD BC,0001h
00003F61:	ADC HL,BC
00003F63:	EXX
00003F64:	EX DE,HL
00003F65:	LD BC,0000h
00003F68:	ADD HL,BC
00003F69:	EX DE,HL
00003F6A:	EXX
00003F6B:	EX DE,HL
00003F6C:	LD BC,0000h
00003F6F:	ADC HL,BC
00003F71:	EX DE,HL
00003F72:	POP BC
00003F73:	DEC BC
00003F74:	LD A,B
00003F75:	OR C
00003F76:	JR NZ,-24h
00003F78:	RET

00003F79:	LD E,L
00003F7A:	LD D,H
00003F7B:	EX HL,(SP)
00003F7C:	CALL 40A6h
00003F7F:	DEC B
00003F80:	LD DE,0000h
00003F83:	JR Z,+0Eh
00003F85:	XOR A
00003F86:	EX DE,HL
00003F87:	SBC HL,DE
00003F89:	LD DE,7F7Fh
00003F8C:	LD (3F46h),DE
00003F90:	LD DE,FFFFh
00003F93:	LD (3F6Dh),DE
00003F97:	LD (3F66h),HL
00003F9A:	JR -59h
00003F9C:	LD BC,FFFFh
00003F9F:	SLA C
00003FA1:	RL B
00003FA3:	JR NC,+02h
00003FA5:	SET 0,C
00003FA7:	LD (3F9Dh),BC
00003FAB:	PUSH DE
00003FAC:	PUSH HL
00003FAD:	CALL C,4139h		; SMC, call address changes for graphics instructions (set pixel, etc..)
00003FB0:	POP HL
00003FB1:	POP DE
00003FB2:	RET

00003FB3:	PUSH DE
00003FB4:	PUSH BC
00003FB5:	LD A,23h
00003FB7:	DEC C
00003FB8:	JR Z,+02h
00003FBA:	LD A,2Bh
00003FBC:	LD (4003h),A
00003FBF:	PUSH HL
00003FC0:	POP BC
00003FC1:	LD DE,(3EDEh)
00003FC5:	LD HL,(3EFBh)
00003FC8:	PUSH BC
00003FC9:	PUSH HL
00003FCA:	CALL 3FF7h
00003FCD:	POP HL
00003FCE:	POP BC
00003FCF:	LD DE,(3EE3h)
00003FD3:	CALL 3FF7h
00003FD6:	POP BC
00003FD7:	LD A,13h
00003FD9:	DEC B
00003FDA:	JR Z,+02h
00003FDC:	LD A,1Bh
00003FDE:	LD (4003h),A
00003FE1:	POP BC
00003FE2:	INC BC
00003FE3:	LD DE,(3EDEh)
00003FE7:	LD HL,(3EFBh)
00003FEA:	PUSH BC
00003FEB:	PUSH DE
00003FEC:	CALL 4004h
00003FEF:	POP DE
00003FF0:	POP BC
00003FF1:	LD HL,(3F00h)
00003FF4:	JP 4004h
00003FF7:	LD A,B
00003FF8:	OR C
00003FF9:	RET Z
00003FFA:	JP 4002h
00003FFD:	PUSH BC
00003FFE:	CALL 3F9Ch
00004001:	POP BC
00004002:	DEC BC
00004003:	NOP
00004004:	LD A,B
00004005:	OR C
00004006:	JR NZ,-0Bh
00004008:	RET

00004009:	LD A,(3E82h)
0000400C:	CP 18h
0000400E:	JR NZ,+3Bh
00004010:	LD A,13h
00004012:	DEC B
00004013:	JR Z,+02h
00004015:	LD A,1Bh
00004017:	LD (4003h),A
0000401A:	LD A,23h
0000401C:	DEC C
0000401D:	JR Z,+02h
0000401F:	LD A,2Bh
00004021:	LD (403Dh),A
00004024:	PUSH HL
00004025:	POP BC
00004026:	INC BC
00004027:	EX DE,HL
00004028:	INC HL
00004029:	LD (4036h),HL
0000402C:	LD DE,(3EDEh)
00004030:	LD HL,(3EFBh)
00004033:	PUSH DE
00004034:	PUSH BC
00004035:	LD BC,0001h
00004038:	CALL 4004h
0000403B:	POP BC
0000403C:	POP DE
0000403D:	INC HL
0000403E:	LD A,(0036h)	; BRKBUF
00004041:	CP 03h
00004043:	RET Z
00004044:	DEC BC
00004045:	LD A,B
00004046:	OR C
00004047:	JP NZ,4033h
0000404A:	RET

0000404B:	EXX
0000404C:	LD DE,(3EE3h)
00004050:	LD HL,(3F00h)
00004053:	CALL 3B9Dh
00004056:	LD DE,(3EDEh)
0000405A:	LD HL,(3EFBh)
0000405D:	CALL NC,507Eh
00004060:	EXX
00004061:	JR C,-53h
00004063:	INC HL
00004064:	INC DE
00004065:	EX DE,HL
00004066:	LD (4082h),HL
00004069:	DEC B
0000406A:	LD HL,50E2h
0000406D:	JR Z,+03h
0000406F:	LD HL,50D2h
00004072:	LD (408Dh),HL
00004075:	DEC C
00004076:	LD HL,50B3h
00004079:	JR Z,+03h
0000407B:	LD HL,5096h
0000407E:	LD (4099h),HL
00004081:	LD HL,0001h
00004084:	EXX
00004085:	PUSH BC
00004086:	PUSH HL
00004087:	PUSH BC
00004088:	CALL 40E1h
0000408B:	POP BC
0000408C:	CALL 50E2h
0000408F:	EXX
00004090:	DEC HL
00004091:	LD A,H
00004092:	OR L
00004093:	EXX
00004094:	JR NZ,-0Fh
00004096:	POP HL
00004097:	POP BC
00004098:	CALL 50B3h
0000409B:	EXX
0000409C:	LD A,(0036h)	; BRKBUF
0000409F:	CP 03h
000040A1:	RET Z
000040A2:	DEC E
000040A3:	JR NZ,-24h
000040A5:	RET

000040A6:	LD A,H
000040A7:	OR L
000040A8:	RET Z
000040A9:	PUSH BC
000040AA:	LD A,11h
000040AC:	EXX
000040AD:	LD HL,0000h
000040B0:	LD DE,0000h
000040B3:	EXX
000040B4:	PUSH HL
000040B5:	OR A
000040B6:	SBC HL,DE
000040B8:	EXX
000040B9:	PUSH HL
000040BA:	SBC HL,DE
000040BC:	JR C,+06h
000040BE:	EX HL,(SP)
000040BF:	POP HL
000040C0:	EXX
000040C1:	EX HL,(SP)
000040C2:	EXX
000040C3:	PUSH HL
000040C4:	POP HL
000040C5:	EXX
000040C6:	POP HL
000040C7:	CCF
000040C8:	RL C
000040CA:	RL B
000040CC:	SLA L
000040CE:	RL H
000040D0:	EXX
000040D1:	RL L
000040D3:	RL H
000040D5:	EXX
000040D6:	DEC A
000040D7:	JR NZ,-25h
000040D9:	LD L,C
000040DA:	LD H,B
000040DB:	POP BC
000040DC:	RET

000040DD:	CALL 507Eh
000040E0:	RET C
000040E1:	CALL 49FAh
000040E4:	LD (40F9h),A
000040E7:	JR +0Fh

; set pixel to (DE,HL)
000040E9:	CALL 3B9Dh
000040EC:	RET C
000040ED:	OR C7h
000040EF:	LD (40F6h),A
000040F2:	LD C,L
000040F3:	LD B,H
000040F4:	XOR A
000040F5:	SET 0,A
000040F7:	LD H,A
000040F8:	LD A,05h
000040FA:	OR A
000040FB:	PUSH HL
000040FC:	CALL 4124h
000040FF:	POP HL
00004100:	RET

00004101:	LD A,40h
00004103:	JR NZ,+07h
00004105:	JP 411Ah
00004108:	LD A,80h
0000410A:	JR Z,+0Eh
0000410C:	ADD B
0000410D:	LD B,A
0000410E:	IN L,(C)
00004110:	LD A,H

00004111:	NOP
00004112:	OR L

00004113:	OUT (C),A
00004115:	RET

00004116:	LD A,C0h
00004118:	JR NZ,-0Eh
0000411A:	ADD B
0000411B:	LD B,A
0000411C:	IN L,(C)
0000411E:	LD A,H

0000411F:	CPL
00004120:	AND L

00004121:	OUT (C),A
00004123:	RET

00004124:	PUSH DE
00004125:	LD D,A
00004126:	CALL 4131h
00004129:	CALL 4131h
0000412C:	CALL 4131h
0000412F:	POP DE
00004130:	RET

00004131:	LD A,40h
00004133:	RR D
00004135:	JR C,-2Bh
00004137:	JR -1Fh

00004139:	XOR A
0000413A:	CP D
0000413B:	RET NZ
0000413C:	CP H
0000413D:	RET NZ
0000413E:	LD D,L
0000413F:	LD A,(0007h)	; WIDTH0
00004142:	DEC A
00004143:	CP E
00004144:	RET C
00004145:	LD A,18h
00004147:	CP D
00004148:	RET C
00004149:	EX DE,HL
0000414A:	CALL 054Dh		; Entry: H,L = current X,Y position.  Exit: HL=VRAM
0000414D:	LD B,H
0000414E:	LD C,L
0000414F:	LD A,2Ah
00004151:	OR A
00004152:	JR Z,+02h
00004154:	OUT (C),A
00004156:	LD A,(0026h)	; COLORF
00004159:	RES 4,B
0000415B:	OUT (C),A
0000415D:	RET

0000415E:	NOP
0000415F:	XOR L
00004160:	NOP
00004161:	LD A,L
00004162:	NOP
00004163:	OR L
00004164:	CPL
00004165:	AND L
00004166:	CPL
00004167:	AND L
00004168:	NOP
00004169:	LD A,L

; 'DEF CHR$'
0000416A:	CALL 8BFEh		; Check for '('
0000416D:	CALL 7FAAh		; IDEEXP: DE= (HL), A=next character to be parsed
00004170:	CALL 8C08h		; Check for ')'
00004173:	CALL 7F98h		; Check byte overflow for value in DE and put in A
00004176:	PUSH AF
00004177:	CALL 8262h		; skip SPACEs in (HL), A=next char
0000417A:	CP F4h			; Token for '='
0000417C:	JP NZ,2066h		; ERROR: Syntax error
0000417F:	INC HL
00004180:	CALL 7FB9h		; STREXP:
00004183:	CP 18h
00004185:	JP NZ,206Fh		; ERROR: Illegal function call
00004188:	POP AF
00004189:	PUSH HL
0000418A:	EX DE,HL
0000418B:	LD D,A
0000418C:	LD E,15h
0000418E:	CALL 002Bh		; CGRAM (PCG).   D=?   E= I/O page, (15h..17h=CGRAM: BLUE, RED, GREEN)
00004191:	LD E,16h
00004193:	CALL 002Bh		; CGRAM (PCG).   D=?   E= I/O page, (15h..17h=CGRAM: BLUE, RED, GREEN)
00004196:	LD E,17h
00004198:	CALL 002Bh		; CGRAM (PCG).   D=?   E= I/O page, (15h..17h=CGRAM: BLUE, RED, GREEN)
0000419B:	POP HL
0000419C:	RET

; 'CREV'
0000419D:	LD A,00h
0000419F:	CALL NZ,7F95h		; IBYTE: load BASIC argument in A
000041A2:	OR A
000041A3:	LD C,F7h
000041A5:	LD B,00h
000041A7:	JR Z,+02h
000041A9:	LD B,08h

; update result flags
000041AB:	LD A,(0026h)	; COLORF (?)
000041AE:	AND C
000041AF:	OR B
000041B0:	LD (0026h),A	; COLORF (?)
000041B3:	RET

; 'CFLASH'
000041B4:	LD A,00h
000041B6:	CALL NZ,7F95h		; IBYTE: load BASIC argument in A
000041B9:	LD C,EFh
000041BB:	OR A
000041BC:	LD B,00h
000041BE:	JR Z,-15h
000041C0:	LD B,10h
000041C2:	JR -19h

; 'CGEN'
000041C4:	LD A,00h
000041C6:	CALL NZ,7F95h		; IBYTE: load BASIC argument in A
000041C9:	LD C,DFh
000041CB:	OR A
000041CC:	LD B,00h
000041CE:	JR Z,-25h
000041D0:	LD B,20h
000041D2:	JR -29h			; update result flags

; 'CSIZE'
000041D4:	LD A,00h
000041D6:	CALL NZ,7F95h		; IBYTE: load BASIC argument in A
000041D9:	LD (53AAh),A		; CSIZE
000041DC:	RRCA
000041DD:	RRCA
000041DE:	LD B,A
000041DF:	LD C,3Fh
000041E1:	JR -38h			; update result flags

000041E3:	EX DE,HL
000041E4:	NOP

; 'CIRCLE'
000041E5:	LD A,01h
000041E7:	DEFB 01h  ;LD BC,003Eh
; 'POLY'
000041E8:	LD	A,00h
000041EA:	LD (425Ah),A
000041ED:	CALL 3DC0h
000041F0:	CALL 38B3h		; Get argument pair "(BC,DE)"
000041F3:	CALL 2E73h		; HCH2CH: Skip spaces and check for comma ','
000041F6:	LD (43F8h),BC
000041FA:	LD (43FFh),DE
000041FE:	CALL 387Ah
00004201:	PUSH DE
00004202:	PUSH HL
00004203:	LD DE,A73Fh		; KEYBM1 (aka KEYBUF)
00004206:	CALL 3872h
00004209:	POP HL
0000420A:	LD A,(5384h)
0000420D:	OR A
0000420E:	JR Z,+09h
00004210:	LD DE,5397h
00004213:	CALL 9FF5h		; MUL:
00004216:	CALL 9AF2h		; ABS:
00004219:	CALL 5BAFh		; HLFLT
0000421C:	LD (4425h),HL
0000421F:	LD A,(5384h)
00004222:	OR A
00004223:	JR Z,+0Fh
00004225:	LD HL,A73Fh		; KEYBM1 (aka KEYBUF)
00004228:	LD DE,539Ch
0000422B:	CALL 9FF5h		; MUL:
0000422E:	CALL 9AF2h		; ABS:
00004231:	CALL 5BAFh		; HLFLT
00004234:	LD (442Bh),HL
00004237:	POP HL
00004238:	LD A,(HL)
00004239:	CALL 3D62h
0000423C:	JR Z,+6Eh
0000423E:	INC HL
0000423F:	CALL 7FAAh		; IDEEXP: DE= (HL), A=next character to be parsed
00004242:	CALL 3D62h
00004245:	PUSH AF
00004246:	CALL 7F98h		; Check byte overflow for value in DE and put in A
00004249:	CP 08h
0000424B:	JP NC,206Fh		; ERROR: Illegal function call
0000424E:	LD (40F9h),A
00004251:	POP AF
00004252:	JR Z,+58h
00004254:	INC HL
00004255:	CALL 387Ah
00004258:	PUSH DE
00004259:	LD A,00h
0000425B:	OR A
0000425C:	JR Z,+2Ah
0000425E:	EXX
0000425F:	LD HL,A73Fh		; KEYBM1 (aka KEYBUF)
00004262:	LD DE,(442Bh)
00004266:	LD (HL),E
00004267:	INC HL
00004268:	LD (HL),D
00004269:	DEC HL
0000426A:	LD A,02h			; integer type
0000426C:	LD (A5DBh),A		; data type, aka PRCSON
0000426F:	CALL 5436h		; 'CSNG'
00004272:	EXX
00004273:	LD DE,A73Fh		; KEYBM1 (aka KEYBUF)
00004276:	CALL 9FF5h		; MUL:
00004279:	CALL 5A90h		; 'CINT'
0000427C:	LD E,(HL)
0000427D:	INC HL
0000427E:	LD D,(HL)
0000427F:	LD (442Bh),DE
00004283:	LD DE,0001h
00004286:	JR +06h
00004288:	CALL 5A90h		; 'CINT'
0000428B:	LD E,(HL)
0000428C:	INC HL
0000428D:	LD D,(HL)
0000428E:	LD (4313h),DE
00004292:	POP HL
00004293:	LD A,(HL)
00004294:	CALL 3D62h
00004297:	JR Z,+1Ah
00004299:	INC HL
0000429A:	CALL 7FAAh		; IDEEXP: DE= (HL), A=next character to be parsed
0000429D:	LD (42F7h),DE
000042A1:	CALL 3D62h
000042A4:	JR Z,+14h
000042A6:	INC HL
000042A7:	CALL 7FAAh		; IDEEXP: DE= (HL), A=next character to be parsed
000042AA:	JR +11h

000042AC:	LD DE,0001h
000042AF:	LD (4313h),DE
000042B3:	LD DE,0000h
000042B6:	LD (42F7h),DE
000042BA:	LD DE,0168h
000042BD:	LD (431Ch),DE
000042C1:	PUSH HL
000042C2:	LD A,(0007h)	; WIDTH0
000042C5:	CP 50h			; 80?
000042C7:	JR +0Ah
000042C9:	LD HL,(442Bh)
000042CC:	SRA H
000042CE:	RR L
000042D0:	LD (442Bh),HL
000042D3:	LD HL,(4313h)
000042D6:	LD A,H
000042D7:	OR L
000042D8:	JR Z,+05h
000042DA:	CALL 42F6h
000042DD:	POP HL
000042DE:	RET

000042DF:	LD HL,(43F8h)
000042E2:	LD (3EDEh),HL
000042E5:	LD HL,(43FFh)
000042E8:	LD (3EFBh),HL
000042EB:	LD HL,(42F7h)
000042EE:	CALL 432Eh
000042F1:	CALL 3EC9h
000042F4:	POP HL
000042F5:	RET

000042F6:	LD HL,0000h
000042F9:	PUSH HL
000042FA:	CALL 432Eh
000042FD:	LD A,(0036h)	; BRKBUF
00004300:	CP 03h
00004302:	JP Z,1FCAh
00004305:	LD HL,(3EE3h)
00004308:	LD (3EDEh),HL
0000430B:	LD HL,(3F00h)
0000430E:	LD (3EFBh),HL
00004311:	POP HL
00004312:	LD BC,0001h
00004315:	ADD HL,BC
00004316:	PUSH HL
00004317:	LD BC,8000h
0000431A:	ADD HL,BC
0000431B:	LD DE,0168h
0000431E:	EX DE,HL
0000431F:	ADD HL,BC
00004320:	OR A
00004321:	SBC HL,DE
00004323:	POP HL
00004324:	RET C
00004325:	PUSH HL
00004326:	CALL 432Eh
00004329:	CALL 3EC9h
0000432C:	JR -31h

0000432E:	BIT 7,H
00004330:	JR Z,+08h
00004332:	LD DE,0168h
00004335:	ADD HL,DE
00004336:	JR NC,-03h
00004338:	JR +0Ah

0000433A:	LD DE,FE98h
0000433D:	ADD HL,DE
0000433E:	JR C,-03h
00004340:	LD DE,0168h
00004343:	ADD HL,DE
00004344:	LD A,H
00004345:	OR L
00004346:	JP Z,43D3h
00004349:	LD DE,0001h
0000434C:	LD BC,005Ah
0000434F:	SBC HL,BC
00004351:	JP Z,43D8h
00004354:	JR C,+13h
00004356:	SBC HL,BC
00004358:	JP Z,43DDh
0000435B:	JR C,+14h
0000435D:	SBC HL,BC
0000435F:	JP Z,43E2h
00004362:	JR C,+13h
00004364:	LD BC,0000h
00004367:	JR +14h
00004369:	EX DE,HL
0000436A:	SBC HL,DE
0000436C:	LD BC,00FFh
0000436F:	JR +0Ch
00004371:	ADD HL,BC
00004372:	LD BC,FFFFh
00004375:	JR +06h
00004377:	EX DE,HL
00004378:	SBC HL,DE
0000437A:	LD BC,FF00h		; -256
0000437D:	ADD HL,HL
0000437E:	EX DE,HL
0000437F:	LD A,B
00004380:	LD (43B6h),A
00004383:	LD A,C
00004384:	LD (43C4h),A
00004387:	LD HL,4464h
0000438A:	ADD HL,DE
0000438B:	LD A,(HL)
0000438C:	INC HL
0000438D:	LD H,(HL)
0000438E:	LD L,A
0000438F:	INC B
00004390:	JR NZ,+08h
00004392:	PUSH DE
00004393:	LD DE,0000h
00004396:	EX DE,HL
00004397:	SBC HL,DE
00004399:	POP DE
0000439A:	LD (43BAh),HL
0000439D:	LD HL,4518h
000043A0:	OR A
000043A1:	SBC HL,DE
000043A3:	LD A,(HL)
000043A4:	INC HL
000043A5:	LD H,(HL)
000043A6:	LD L,A
000043A7:	INC C
000043A8:	JR NZ,+08h
000043AA:	PUSH DE
000043AB:	LD DE,0000h
000043AE:	EX DE,HL
000043AF:	SBC HL,DE
000043B1:	POP DE
000043B2:	LD (43C8h),HL
000043B5:	LD L,00h
000043B7:	LD H,L
000043B8:	EXX
000043B9:	LD HL,0000h
000043BC:	EXX
000043BD:	CALL 4423h
000043C0:	LD (43F4h),HL
000043C3:	LD L,00h
000043C5:	LD H,L
000043C6:	EXX
000043C7:	LD HL,0000h
000043CA:	EXX
000043CB:	CALL 4429h
000043CE:	LD (4402h),HL
000043D1:	JR +20h
000043D3:	LD BC,0100h
000043D6:	JR +0Dh
000043D8:	LD BC,00FFh
000043DB:	JR +08h
000043DD:	LD BC,FF00h		; -256
000043E0:	JR +03h
000043E2:	LD BC,0001h
000043E5:	LD A,B
000043E6:	CALL 4414h
000043E9:	LD (43F4h),HL
000043EC:	LD A,C
000043ED:	CALL 4409h
000043F0:	LD (4402h),HL
000043F3:	LD HL,0000h
000043F6:	NOP
000043F7:	LD DE,0000h
000043FA:	ADD HL,DE
000043FB:	LD (3EE3h),HL
000043FE:	LD HL,0000h
00004401:	LD DE,0000h
00004404:	ADD HL,DE
00004405:	LD (3F00h),HL
00004408:	RET

00004409:	LD HL,0000h
0000440C:	OR A
0000440D:	RET Z
0000440E:	EX DE,HL
0000440F:	LD HL,(442Bh)
00004412:	JR +09h
00004414:	LD HL,0000h
00004417:	OR A
00004418:	RET Z
00004419:	EX DE,HL
0000441A:	LD HL,(4425h)
0000441D:	INC A
0000441E:	RET NZ
0000441F:	EX DE,HL
00004420:	SBC HL,DE
00004422:	RET

00004423:	EXX
00004424:	LD BC,0001h
00004427:	JR +04h
00004429:	EXX
0000442A:	LD BC,0001h
0000442D:	LD DE,0000h
00004430:	EXX
00004431:	LD B,10h
00004433:	LD DE,0000h
00004436:	EXX
00004437:	EX DE,HL
00004438:	ADD HL,HL
00004439:	EX DE,HL
0000443A:	EXX
0000443B:	EX DE,HL
0000443C:	ADC HL,HL
0000443E:	EX DE,HL
0000443F:	EXX
00004440:	SLA C
00004442:	RL B
00004444:	JR NC,+09h
00004446:	EX DE,HL
00004447:	ADD HL,DE
00004448:	EX DE,HL
00004449:	EXX
0000444A:	EX DE,HL
0000444B:	ADC HL,DE
0000444D:	EX DE,HL
0000444E:	EXX
0000444F:	EXX
00004450:	DJNZ -1Ch
00004452:	LD A,80h
00004454:	BIT 7,D
00004456:	EXX
00004457:	JR Z,+01h
00004459:	CPL
0000445A:	LD H,A
0000445B:	LD L,A
0000445C:	ADD HL,DE
0000445D:	EXX
0000445E:	LD HL,0000h
00004461:	ADC HL,DE
00004463:	RET

00004464:	NOP
00004465:	NOP
00004466:	LD A,B
00004467:	INC B
00004468:	RET P
00004469:	EX AF,AF'
0000446A:	LD H,(HL)
0000446B:	DEC C
0000446C:	CALL C,5011h
0000446F:	LD D,C3h
00004471:	LD A,(DE)
00004472:	INC SP
00004473:	RRA
00004474:	AND C
00004475:	INC HL
00004476:	INC C
00004477:	JR Z,+75h
00004479:	INC L
0000447A:	EXX
0000447B:	JR NC,+3Ah
0000447D:	DEC (HL)
0000447E:	SUB A
0000447F:	ADD HL,SP
00004480:	RST 28h
00004481:	DEC A
00004482:	LD B,D
00004483:	LD B,D
00004484:	SUB C
00004485:	LD B,(HL)
00004486:	EXX
00004487:	LD C,D
00004488:	INC E
00004489:	LD C,A
0000448A:	LD E,C
0000448B:	LD D,E
0000448C:	ADC A
0000448D:	LD D,A
0000448E:	CP (HL)
0000448F:	LD E,E
00004490:	RST 20h	; ' '
00004491:	LD E,A
00004492:	RLCA
00004493:	LD H,H
00004494:	JR NZ,+68h
00004496:	CPL
00004497:	LD L,H
00004498:	ADD HL,SP
00004499:	LD (HL),B
0000449A:	ADD HL,SP
0000449B:	LD (HL),H
0000449C:	JR NC,+78h
0000449E:	DEC E
0000449F:	LD A,H
000044A0:	NOP
000044A1:	ADD B
000044A2:	JP C,A983h
000044A5:	ADD A
000044A6:	LD L,(HL)
000044A7:	ADC E
000044A8:	JR Z,-71h
000044AA:	SUB 92h
000044AC:	LD A,C
000044AD:	SUB (HL)
000044AE:	LD DE,9C9Ah
000044B1:	SBC L
000044B2:	DEC DE
000044B3:	AND C
000044B4:	ADC (HL)
000044B5:	AND H
000044B6:	CALL P,4CA7h
000044B9:	XOR E
000044BA:	SBC B
000044BB:	XOR (HL)
000044BC:	RET P
000044BD:	OR C
000044BE:	ADC E
000044BF:	OR L
000044C0:	LD B,B
000044C1:	CP B
000044C2:	LD D,B
000044C3:	CP E
000044C4:	CCF
000044C5:	CP (HL)
000044C6:	DEC (HL)
000044C7:	POP BC
000044C8:	INC E
000044C9:	CALL NZ,C6F3h
000044CC:	CP E
000044CD:	RET

000044CE:	LD (HL),H
000044CF:	CALL Z,CF1Ch
000044D2:	OR H
000044D3:	POP DE
000044D4:	INC A
000044D5:	CALL NC,D6B3h
000044D8:	LD A,(DE)
000044D9:	EXX
000044DA:	LD (HL),B
000044DB:	INA (B4h)
000044DD:	LD B,B
000044DF:	RST 18h
000044E0:	RET PO
000044E1:	POP HL
000044E2:	SUB A
000044E3:	CALL PO,E61Bh
000044E6:	INC B
000044E7:	RET PE
000044E8:	SBC E9h
000044EA:	AND A
000044EB:	EX DE,HL
000044EC:	LD E,H
000044ED:	DB EDh,FFh
000044EF:	XOR 90h
000044F1:	RET P
000044F2:	LD C,F2h
000044F4:	LD A,C
000044F5:	DI
000044F6:	POP DE
000044F7:	CALL P,F616h
000044FA:	LD B,A
000044FB:	RST 30h
000044FC:	LD H,(HL)
000044FD:	RET M
000044FE:	LD (HL),C
000044FF:	LD SP,HL
00004500:	LD L,B
00004501:	JP M,FB4Ch
00004504:	DEC E
00004505:	CALL M,FCD9h
00004508:	ADD E
00004509:	JR -02h
0000450C:	SBC C
0000450D:	CP 07h
0000450F:	RST 38h
00004510:	LD H,C
00004511:	RST 38h
00004512:	AND A
00004513:	RST 38h
00004514:	RET C
00004515:	RST 38h
00004516:	OR FFh
00004518:	NOP
00004519:	NOP

; 'PLAY', 'MUSIC', 'TEMPO
0000451A:	CALL 7FD1h		; EXPR:
0000451D:	LD A,(A5DBh)		; data type, aka PRCSON
00004520:	PUSH HL
00004521:	EX DE,HL
00004522:	CP 03h			; string type?
00004524:	JR NZ,+20h
00004526:	CALL 7FC3h		; Load a string parameter
00004529:	LD B,A
0000452A:	OR A
0000452B:	JR Z,+17h
0000452D:	LD HL,A73Fh		; KEYBM1 (aka KEYBUF)
00004530:	PUSH HL
00004531:	LD C,B
00004532:	LD A,(DE)
00004533:	LD (HL),A
00004534:	INC DE
00004535:	INC HL
00004536:	DJNZ -06h
00004538:	LD A,3Ah
0000453A:	LD (HL),A
0000453B:	INC HL
0000453C:	LD (HL),A
0000453D:	INC HL
0000453E:	LD (HL),A
0000453F:	LD B,C
00004540:	POP DE
00004541:	CALL 456Dh
00004544:	POP HL
00004545:	RET

00004546:	CALL 5436h		; 'CSNG'
00004549:	EX DE,HL
0000454A:	LD HL,A73Fh		; KEYBM1 (aka KEYBUF)
0000454D:	PUSH HL
0000454E:	LD (HL),8Dh
00004550:	INC HL
00004551:	LD (HL),6Ah
00004553:	INC HL
00004554:	LD (HL),60h
00004556:	INC HL
00004557:	LD (HL),00h
00004559:	POP HL
0000455A:	CALL A0EAh		; DIV:
0000455D:	CALL 5BAFh		; HLFLT
00004560:	EX DE,HL
00004561:	CALL 7F98h		; Check byte overflow for value in DE and put in A
00004564:	OR A
00004565:	JP Z,206Fh		; ERROR: Illegal function call
00004568:	LD (474Ch),A
0000456B:	POP HL
0000456C:	RET

0000456D:	PUSH DE
0000456E:	PUSH BC
0000456F:	LD BC,1C00h		; PSG
00004572:	LD A,07h
00004574:	OUT (C),A
00004576:	DEC B
00004577:	IN A,(C)
00004579:	AND 38h
0000457B:	OUT (C),A
0000457D:	POP BC
0000457E:	LD A,(DE)
0000457F:	CP 3Ah	; ':'
00004581:	INC DE
00004582:	JR Z,+04h
00004584:	DJNZ -08h
00004586:	JR +0Eh
00004588:	LD L,E
00004589:	LD H,D
0000458A:	DJNZ +02h
0000458C:	JR +0Bh
0000458E:	LD A,(DE)
0000458F:	INC DE
00004590:	CP 3Ah	; ':'
00004592:	JR NZ,-0Ah
00004594:	JR +06h
00004596:	LD HL,474Eh
00004599:	LD DE,474Eh
0000459C:	POP BC
0000459D:	PUSH BC
0000459E:	EXX
0000459F:	POP DE
000045A0:	LD BC,475Fh
000045A3:	CALL 45DBh
000045A6:	PUSH DE
000045A7:	EXX
000045A8:	POP BC
000045A9:	PUSH HL
000045AA:	EXX
000045AB:	POP DE
000045AC:	LD BC,4768h
000045AF:	CALL 45DBh
000045B2:	PUSH DE
000045B3:	EXX
000045B4:	POP HL
000045B5:	PUSH DE
000045B6:	EXX
000045B7:	POP DE
000045B8:	LD BC,4771h
000045BB:	CALL 45DBh
000045BE:	PUSH DE
000045BF:	CALL 472Eh
000045C2:	EXX
000045C3:	POP DE
000045C4:	CALL 470Ah
000045C7:	JR NZ,-2Ch
000045C9:	RET

000045CA:	DEC A
000045CB:	LD (BC),A
000045CC:	RET

000045CD:	INC BC
000045CE:	INC BC
000045CF:	LD A,(BC)
000045D0:	LD BC,1C00h		; PSG
000045D3:	OUT (C),A
000045D5:	DEC B
000045D6:	XOR A
000045D7:	OUT (C),A
000045D9:	INC B
000045DA:	RET

000045DB:	LD A,(BC)
000045DC:	OR A
000045DD:	JR NZ,-15h
000045DF:	DEC BC
000045E0:	LD A,(DE)
000045E1:	CP 3Ah	; ':'
000045E3:	JR Z,-18h
000045E5:	CALL 53F8h
000045E8:	CP 56h
000045EA:	JR NZ,+34h
000045EC:	INC DE
000045ED:	LD A,(DE)
000045EE:	SUB 30h
000045F0:	JR C,-12h
000045F2:	CP 0Ah
000045F4:	JR NC,-16h
000045F6:	INC DE
000045F7:	CP 01h
000045F9:	JR NZ,+10h
000045FB:	LD A,(DE)
000045FC:	SUB 30h
000045FE:	JR C,+09h
00004600:	CP 07h
00004602:	JR NC,+05h
00004604:	ADD 0Ah
00004606:	INC DE
00004607:	JR +02h
00004609:	LD A,01h
0000460B:	LD L,A
0000460C:	INC BC
0000460D:	INC BC
0000460E:	INC BC
0000460F:	LD (BC),A
00004610:	DEC BC
00004611:	LD A,(BC)
00004612:	DEC BC
00004613:	DEC BC
00004614:	PUSH BC
00004615:	LD BC,1C00h		; PSG
00004618:	OUT (C),A
0000461A:	DEC B
0000461B:	OUT (C),L
0000461D:	POP BC
0000461E:	JR -40h

00004620:	CALL 53F8h
00004623:	CP 4Fh	; 'O'
00004625:	JP NZ,4636h
00004628:	INC DE
00004629:	LD A,(DE)
0000462A:	SUB 31h	; '1'
0000462C:	JR C,-4Eh
0000462E:	CP 08h
00004630:	JR NC,-52h
00004632:	LD (BC),A
00004633:	INC DE
00004634:	JR -56h
00004636:	EX AF,AF'
00004637:	LD A,(BC)
00004638:	EX AF,AF'
00004639:	LD A,(DE)
0000463A:	CP 2Bh	; '+'
0000463C:	JR NZ,+0Ah
0000463E:	INC DE
0000463F:	EX AF,AF'
00004640:	CP 07h
00004642:	JR Z,+01h
00004644:	INC A
00004645:	EX AF,AF'
00004646:	JR -0Fh
00004648:	CP 2Dh	; '-'
0000464A:	JR NZ,+08h
0000464C:	INC DE
0000464D:	EX AF,AF'
0000464E:	OR A
0000464F:	JR Z,+01h
00004651:	DEC A
00004652:	JR -0Fh
00004654:	LD HL,4774h
00004657:	CP 23h	; '#'
00004659:	JR NZ,+05h
0000465B:	INC DE
0000465C:	LD HL,4782h
0000465F:	LD A,(DE)
00004660:	INC DE
00004661:	CALL 53F8h
00004664:	CP 52h
00004666:	JR Z,+6Fh
00004668:	SUB 41h
0000466A:	JP C,45E0h
0000466D:	CP 07h
0000466F:	JP NC,45E0h
00004672:	PUSH DE
00004673:	LD E,A
00004674:	LD D,00h
00004676:	EX DE,HL
00004677:	ADD HL,HL
00004678:	ADD HL,DE
00004679:	DEC BC
0000467A:	DEC BC
0000467B:	LD A,(HL)
0000467C:	INC HL
0000467D:	LD H,(HL)
0000467E:	LD L,A
0000467F:	EX AF,AF'
00004680:	OR A
00004681:	JR Z,+07h
00004683:	RR H
00004685:	RR L
00004687:	DEC A
00004688:	JR NZ,-0Ah
0000468A:	EX DE,HL
0000468B:	LD L,C
0000468C:	LD H,B
0000468D:	LD (HL),D
0000468E:	DEC HL
0000468F:	LD (HL),E
00004690:	DEC HL
00004691:	DEC HL
00004692:	POP DE
00004693:	LD A,(DE)
00004694:	SUB 30h
00004696:	JR C,+09h
00004698:	CP 0Ah
0000469A:	JR NC,+05h
0000469C:	CALL 473Fh
0000469F:	INC DE
000046A0:	LD (HL),A
000046A1:	PUSH DE
000046A2:	LD E,(HL)
000046A3:	INC HL
000046A4:	LD D,(HL)
000046A5:	INC HL
000046A6:	LD BC,1C00h		; PSG
000046A9:	LD A,(HL)
000046AA:	OUT (C),D
000046AC:	DEC B
000046AD:	OUT (C),A
000046AF:	INC HL
000046B0:	INC B
000046B1:	INC D
000046B2:	LD A,(HL)
000046B3:	OUT (C),D
000046B5:	DEC B
000046B6:	OUT (C),A
000046B8:	INC B
000046B9:	INC HL
000046BA:	INC HL
000046BB:	INC HL
000046BC:	DEC E
000046BD:	LD (HL),E
000046BE:	INC HL
000046BF:	LD A,(HL)
000046C0:	OUT (C),A
000046C2:	DEC B
000046C3:	INC HL
000046C4:	IN A,(C)
000046C6:	AND 10h
000046C8:	OR (HL)
000046C9:	OUT (C),A
000046CB:	INC B
000046CC:	LD A,0Dh
000046CE:	OUT (C),A
000046D0:	DEC B
000046D1:	IN A,(C)
000046D3:	OUT (C),A
000046D5:	POP DE
000046D6:	RET

000046D7:	DEC BC
000046D8:	DEC BC
000046D9:	DEC BC
000046DA:	DEC BC
000046DB:	DEC BC
000046DC:	LD A,(DE)
000046DD:	SUB 30h
000046DF:	JR C,+09h
000046E1:	CP 0Ah
000046E3:	JR NC,+05h
000046E5:	CALL 473Fh
000046E8:	INC DE
000046E9:	LD (BC),A
000046EA:	LD A,(BC)
000046EB:	INC BC
000046EC:	INC BC
000046ED:	INC BC
000046EE:	INC BC
000046EF:	INC BC
000046F0:	INC BC
000046F1:	DEC A
000046F2:	LD (BC),A
000046F3:	JP 45CEh

000046F6:	LD BC,1C00h		; PSG
000046F9:	LD A,08h
000046FB:	CALL 45D3h
000046FE:	LD A,09h
00004700:	CALL 45D3h
00004703:	LD A,0Ah
00004705:	CALL 45D3h
00004708:	XOR A
00004709:	RET

0000470A:	LD A,(0036h)	; BRKBUF
0000470D:	CP 03h
0000470F:	JR Z,-1Bh
00004711:	LD A,(BC)
00004712:	CP 3Ah	; ':'
00004714:	RET NZ
00004715:	LD A,(DE)
00004716:	CP 3Ah	; ':'
00004718:	RET NZ
00004719:	LD A,(HL)
0000471A:	CP 3Ah	; ':'
0000471C:	RET NZ
0000471D:	LD A,(475Fh)
00004720:	OR A
00004721:	RET NZ
00004722:	LD A,(4768h)
00004725:	OR A
00004726:	RET NZ
00004727:	LD A,(4771h)
0000472A:	OR A
0000472B:	RET NZ
0000472C:	JR -38h
0000472E:	LD HL,(474Ch)
00004731:	LD DE,0098h
00004734:	DEC DE
00004735:	LD A,D
00004736:	OR E
00004737:	JR NZ,-05h
00004739:	DEC HL
0000473A:	LD A,H
0000473B:	OR L
0000473C:	JR NZ,-0Dh
0000473E:	RET

0000473F:	PUSH BC
00004740:	PUSH HL
00004741:	LD C,A
00004742:	LD B,00h
00004744:	LD HL,474Fh
00004747:	ADD HL,BC
00004748:	LD A,(HL)
00004749:	POP HL
0000474A:	POP BC
0000474B:	RET

0000474C:	LD A,00h

0000474E:	LD A,(0201h)
00004751:	INC BC
00004752:	INC B
00004753:	LD B,08h
00004755:	INC C
00004756:	DJNZ +18h
00004758:	JR NZ,+08h
0000475A:	NOP
0000475B:	NOP
0000475C:	NOP
0000475D:	CP 03h
0000475F:	NOP
00004760:	EX AF,AF'
00004761:	RRCA
00004762:	EX AF,AF'
00004763:	LD (BC),A
00004764:	NOP
00004765:	NOP
00004766:	INC BC
00004768:	NOP
00004769:	ADD HL,BC
0000476A:	RRCA
0000476B:	EX AF,AF'
0000476C:	INC B
0000476D:	NOP
0000476E:	NOP
0000476F:	EI
00004770:	INC BC
00004771:	NOP
00004772:	LD A,(BC)
00004773:	RRCA
00004774:	POP HL
00004775:	EX AF,AF'
00004776:	JP (HL)

00004777:	RLCA
00004778:	RST 28h
00004779:	LD C,4Dh
0000477B:	DEC C
0000477C:	JP C,2F0Bh
0000477F:	DEC BC
00004780:	RST 30h
00004781:	ADD HL,BC
00004782:	LD H,D
00004783:	EX AF,AF'
00004784:	JP (HL)

00004785:	RLCA
00004786:	RLA
00004787:	LD C,8Eh
00004789:	INC C
0000478A:	JP C,8F0Bh
0000478D:	LD A,(BC)
0000478E:	LD L,B
0000478F:	ADD HL,BC

; 'SOUND'
00004790:	CALL 7FAAh		; IDEEXP: DE= (HL), A=next character to be parsed
00004793:	CALL 2E73h		; HCH2CH: Skip spaces and check for comma ','
00004796:	CALL 7F98h		; Check byte overflow for value in DE and put in A
00004799:	CP 10h
0000479B:	JP NC,206Fh		; ERROR: Illegal function call
0000479E:	PUSH AF
0000479F:	CALL 7F95h		; IBYTE: load BASIC argument in A
000047A2:	POP DE
000047A3:	LD E,A
000047A4:	LD BC,1C00h		; PSG
000047A7:	OUT (C),D
000047A9:	DEC B
000047AA:	OUT (C),E
000047AC:	RET

; 'BEEP'
000047AD:	JR NZ,+06h
000047AF:	PUSH HL
000047B0:	CALL 07F7h		; BEEP
000047B3:	POP HL
000047B4:	RET

000047B5:	CALL 7F95h		; IBYTE: load BASIC argument in A
000047B8:	CP 02h
000047BA:	JP NC,206Fh		; ERROR: Illegal function call
000047BD:	OR A
000047BE:	JR Z,+1Fh
000047C0:	LD DE,04BEh
000047C3:	CALL 47A4h
000047C6:	LD DE,0500h
000047C9:	CALL 47A4h
000047CC:	LD DE,0A0Fh
000047CF:	CALL 47A4h
000047D2:	INC B
000047D3:	LD A,07h
000047D5:	OUT (C),A
000047D7:	DEC B
000047D8:	IN A,(C)
000047DA:	AND FBh
000047DC:	OUT (C),A
000047DE:	RET

000047DF:	LD DE,073Fh
000047E2:	CALL 47A4h
000047E5:	LD DE,0800h
000047E8:	CALL 47A4h
000047EB:	INC D
000047EC:	CALL 47A4h
000047EF:	INC D
000047F0:	CALL 47A4h
000047F3:	RET

; 'PAINT'
000047F4:	LD A,01h
000047F6:	LD (492Bh),A
000047F9:	LD DE,5031h
000047FC:	LD (48F4h),DE
00004800:	CALL 3B8Eh
00004803:	CALL 38B3h		; Get argument pair "(BC,DE)"
00004806:	LD (4872h),SP
0000480A:	LD (4854h),BC
0000480E:	LD (4857h),DE
00004812:	CP 2Ch	; ','
00004814:	LD A,(40F9h)
00004817:	JR NZ,+0Fh
00004819:	INC HL
0000481A:	CALL 7FD1h		; EXPR:
0000481D:	LD A,(A5DBh)		; data type, aka PRCSON
00004820:	CP 03h			; string type?
00004822:	JP Z,4A43h
00004825:	CALL 4A9Ch
00004828:	LD DE,537Ch
0000482B:	LD (DE),A
0000482C:	LD (40F9h),A
0000482F:	LD B,07h
00004831:	CALL 3D58h
00004834:	JR Z,+0Eh
00004836:	CALL 2E73h		; HCH2CH: Skip spaces and check for comma ','
00004839:	PUSH BC
0000483A:	PUSH DE
0000483B:	CALL 7F95h		; IBYTE: load BASIC argument in A
0000483E:	POP DE
0000483F:	POP BC
00004840:	INC DE
00004841:	LD (DE),A
00004842:	DJNZ -13h
00004844:	LD A,09h
00004846:	SUB B
00004847:	LD (4909h),A
0000484A:	PUSH HL
0000484B:	LD (4876h),SP
0000484F:	LD DE,8000h
00004852:	PUSH DE
00004853:	LD DE,0000h
00004856:	LD HL,0000h
00004859:	LD A,H
0000485A:	OR A
0000485B:	JR NZ,+02h
0000485D:	PUSH HL
0000485E:	PUSH DE
0000485F:	LD A,(0036h)	; BRKBUF
00004862:	CP 03h
00004864:	JR Z,+0Fh
00004866:	POP DE
00004867:	POP HL
00004868:	LD A,D
00004869:	CP 80h
0000486B:	JR NZ,+0Eh
0000486D:	LD A,E
0000486E:	OR A
0000486F:	JR NZ,+0Ah
00004871:	LD SP,0000h
00004874:	RET

00004875:	LD SP,0000h
00004878:	POP HL
00004879:	JR -0Ah
0000487B:	LD H,00h
0000487D:	EXX
0000487E:	LD BC,0000h
00004881:	EXX
00004882:	CALL 507Eh
00004885:	JR C,-28h
00004887:	CALL 4916h
0000488A:	JR Z,-2Dh
0000488C:	CALL 50C5h
0000488F:	JR C,+08h
00004891:	CALL 4916h
00004894:	JR NZ,-0Ah
00004896:	CALL 50E2h
00004899:	LD (48ECh),DE
0000489D:	CALL 5091h
000048A0:	JR C,+1Ah
000048A2:	CALL 491Ah
000048A5:	EXX
000048A6:	JR Z,+0Eh
000048A8:	DEC B
000048A9:	JR Z,+07h
000048AB:	EXX
000048AC:	PUSH HL
000048AD:	PUSH DE
000048AE:	CALL 4A2Fh
000048B1:	EXX
000048B2:	LD B,01h
000048B4:	JR +02h
000048B6:	LD B,00h
000048B8:	EXX
000048B9:	CALL 50B3h
000048BC:	CALL 50AEh
000048BF:	JR C,+1Ah
000048C1:	CALL 491Ah
000048C4:	EXX
000048C5:	JR Z,+0Eh
000048C7:	DEC C
000048C8:	JR Z,+07h
000048CA:	EXX
000048CB:	PUSH HL
000048CC:	PUSH DE
000048CD:	CALL 4A2Fh
000048D0:	EXX
000048D1:	LD C,01h
000048D3:	JR +02h
000048D5:	LD C,00h
000048D7:	EXX
000048D8:	CALL 5096h
000048DB:	CALL 50D9h
000048DE:	JR C,+08h
000048E0:	CALL 4916h
000048E3:	JR NZ,-48h
000048E5:	CALL 50D2h
000048E8:	PUSH DE
000048E9:	EXX
000048EA:	POP HL
000048EB:	LD DE,0000h
000048EE:	OR A
000048EF:	SBC HL,DE
000048F1:	INC HL
000048F2:	EXX
000048F3:	CALL 5031h
000048F6:	CALL 50D2h
000048F9:	EXX
000048FA:	DEC HL
000048FB:	LD A,H
000048FC:	OR L
000048FD:	JR NZ,-0Dh
000048FF:	EXX
00004900:	JP 485Fh
00004903:	PUSH HL
00004904:	PUSH BC
00004905:	LD HL,537Ch
00004908:	LD B,01h
0000490A:	CALL 4913h
0000490D:	POP BC
0000490E:	POP HL
0000490F:	RET

00004910:	CP (HL)
00004911:	RET Z
00004912:	INC HL
00004913:	DJNZ -05h
00004915:	RET

00004916:	LD A,18h
00004918:	JR +02h
0000491A:	LD A,28h
0000491C:	LD (4957h),A
0000491F:	LD (4997h),A
00004922:	CALL 49C3h
00004925:	CALL 4903h
00004928:	RET Z
00004929:	EX AF,AF'
0000492A:	LD A,01h
0000492C:	OR A
0000492D:	RET NZ
0000492E:	PUSH BC
0000492F:	PUSH DE
00004930:	PUSH HL
00004931:	LD H,00h
00004933:	LD A,(3C58h)
00004936:	OR A
00004937:	JR NZ,+4Eh
00004939:	LD E,L
0000493A:	LD D,H
0000493B:	ADD HL,HL
0000493C:	ADD HL,DE
0000493D:	LD DE,(4A0Bh)
00004941:	ADD HL,DE
00004942:	EX DE,HL
00004943:	LD HL,4000h
00004946:	CALL 49B6h
00004949:	PUSH BC
0000494A:	LD HL,4000h
0000494D:	CALL Z,49B6h
00004950:	LD HL,4000h
00004953:	CALL Z,49B6h
00004956:	POP BC
00004957:	JR Z,+2Ah
00004959:	IN D,(C)
0000495B:	LD HL,4000h
0000495E:	ADD HL,BC
0000495F:	LD B,H
00004960:	LD C,L
00004961:	IN A,(C)
00004963:	LD HL,4000h
00004966:	ADD HL,BC
00004967:	LD B,H
00004968:	LD C,L
00004969:	IN H,(C)
0000496B:	LD L,A
0000496C:	LD B,08h
0000496E:	XOR A
0000496F:	RRC H
00004971:	RLA
00004972:	RRC L
00004974:	RLA
00004975:	RRC D
00004977:	RLA
00004978:	PUSH HL
00004979:	PUSH BC
0000497A:	CALL 4903h
0000497D:	POP BC
0000497E:	POP HL
0000497F:	JR Z,+2Bh
00004981:	DJNZ -15h
00004983:	POP HL
00004984:	POP DE
00004985:	POP BC
00004986:	RET

00004987:	AND 03h
00004989:	RRCA
0000498A:	RRCA
0000498B:	LD DE,(4A0Bh)
0000498F:	ADD HL,DE
00004990:	EX DE,HL
00004991:	LD H,A
00004992:	LD L,00h
00004994:	CALL 49B6h
00004997:	JR Z,-16h
00004999:	IN D,(C)
0000499B:	LD B,08h
0000499D:	XOR A
0000499E:	RRC D
000049A0:	RLA
000049A1:	PUSH BC
000049A2:	CALL 4903h
000049A5:	POP BC
000049A6:	JR Z,+04h
000049A8:	DJNZ -0Dh
000049AA:	JR -29h
000049AC:	EX AF,AF'
000049AD:	LD C,A
000049AE:	POP HL
000049AF:	CALL 49FAh
000049B2:	CP C
000049B3:	POP DE
000049B4:	POP BC
000049B5:	RET

000049B6:	ADD HL,BC
000049B7:	LD C,L
000049B8:	LD B,H
000049B9:	IN L,(C)
000049BB:	LD A,(DE)
000049BC:	INC DE
000049BD:	CP L
000049BE:	RET

000049BF:	CALL 507Eh
000049C2:	RET C
000049C3:	LD A,(3C58h)
000049C6:	PUSH BC
000049C7:	PUSH DE
000049C8:	EX DE,HL
000049C9:	OR A
000049CA:	JR NZ,+17h
000049CC:	LD HL,C000h
000049CF:	XOR A
000049D0:	CALL 49EDh
000049D3:	LD HL,C000h
000049D6:	CALL 49EDh
000049D9:	LD HL,C000h
000049DC:	CALL 49EDh
000049DF:	EX DE,HL
000049E0:	POP DE
000049E1:	POP BC
000049E2:	RET

000049E3:	AND 03h
000049E5:	RRCA
000049E6:	RRCA
000049E7:	LD H,A
000049E8:	LD L,00h
000049EA:	XOR A
000049EB:	JR -11h
000049ED:	ADD HL,BC
000049EE:	LD C,L
000049EF:	LD B,H
000049F0:	RLCA
000049F1:	LD L,A
000049F2:	IN A,(C)
000049F4:	AND D
000049F5:	LD A,L
000049F6:	RET Z
000049F7:	ADD 01h
000049F9:	RET

000049FA:	PUSH DE
000049FB:	PUSH HL
000049FC:	INC L
000049FD:	LD A,(3C58h)
00004A00:	OR A
00004A01:	LD A,H
00004A02:	LD H,00h
00004A04:	JR NZ,+04h
00004A06:	LD E,L
00004A07:	LD D,H
00004A08:	ADD HL,HL
00004A09:	ADD HL,DE
00004A0A:	LD DE,F000h
00004A0D:	ADD HL,DE
00004A0E:	LD D,A
00004A0F:	LD E,00h
00004A11:	LD A,(3C58h)
00004A14:	OR A
00004A15:	JR NZ,+06h
00004A17:	CALL 4A24h
00004A1A:	CALL 4A24h
00004A1D:	CALL 4A24h
00004A20:	LD A,E
00004A21:	POP HL
00004A22:	POP DE
00004A23:	RET

00004A24:	DEC HL
00004A25:	RLC E
00004A27:	LD A,(HL)
00004A28:	AND D
00004A29:	RET Z
00004A2A:	LD A,01h
00004A2C:	ADD E
00004A2D:	LD E,A
00004A2E:	RET

00004A2F:	PUSH HL
00004A30:	PUSH DE
00004A31:	LD DE,(3621h)		; TMPEND
00004A35:	LD HL,0000h
00004A38:	ADD HL,SP
00004A39:	DEC H
00004A3A:	DEC H
00004A3B:	SBC HL,DE
00004A3D:	JP C,201Fh		; ERROR: 'Out of memory'
00004A40:	POP DE
00004A41:	POP HL
00004A42:	RET

00004A43:	PUSH HL
00004A44:	EX DE,HL
00004A45:	CALL 7FC3h		; Load a string parameter
00004A48:	EXX
00004A49:	POP HL
00004A4A:	EXX
00004A4B:	LD HL,FDA8h			; -600
00004A4E:	ADD HL,SP
00004A4F:	PUSH DE
00004A50:	EX DE,HL
00004A51:	LD HL,(3621h)		; TMPEND
00004A54:	INC H
00004A55:	INC H
00004A56:	SBC HL,DE
00004A58:	JP NC,201Fh		; ERROR: 'Out of memory'
00004A5B:	EX DE,HL
00004A5C:	POP DE
00004A5D:	LD SP,HL
00004A5E:	CALL 4A7Eh
00004A61:	XOR A
00004A62:	LD (492Bh),A
00004A65:	LD DE,502Bh
00004A68:	LD (48F4h),DE
00004A6C:	CALL 3D58h
00004A6F:	LD A,(40F9h)
00004A72:	JP Z,4828h
00004A75:	CALL 2E73h		; HCH2CH: Skip spaces and check for comma ','
00004A78:	CALL 4AB0h
00004A7B:	JP 4828h

00004A7E:	LD C,A
00004A7F:	LD B,A
00004A80:	EXX
00004A81:	LD BC,0258h		; 600
00004A84:	EXX
00004A85:	LD (4A0Bh),HL
00004A88:	PUSH DE
00004A89:	LD A,(DE)
00004A8A:	LD (HL),A
00004A8B:	INC DE
00004A8C:	INC HL
00004A8D:	EXX
00004A8E:	DEC BC
00004A8F:	LD A,B
00004A90:	OR C
00004A91:	JR Z,+07h
00004A93:	EXX
00004A94:	DJNZ -0Dh	; 600 * B times
00004A96:	LD B,C
00004A97:	POP DE
00004A98:	JR -12h
00004A9A:	POP DE
00004A9B:	RET

00004A9C:	PUSH HL
00004A9D:	EX DE,HL
00004A9E:	CALL 5A90h		; 'CINT'
00004AA1:	LD E,(HL)
00004AA2:	INC HL
00004AA3:	LD A,(HL)
00004AA4:	OR A
00004AA5:	JP NZ,206Fh		; ERROR: Illegal function call
00004AA8:	LD A,E
00004AA9:	CP 08h
00004AAB:	JP NC,206Fh		; ERROR: Illegal function call
00004AAE:	POP HL
00004AAF:	RET

00004AB0:	CALL 7F95h		; IBYTE: load BASIC argument in A
00004AB3:	CP 08h
00004AB5:	RET C
00004AB6:	JP 206Fh		; ERROR: Illegal function call

; 'EJECT'
00004AB9:	XOR A
00004ABA:	LD BC,013Eh		; 4ABBh = 'CSTOP'
00004ABD:	LD BC,033Eh		; 4ABEh = 'FAST' (FF..)
00004AC0:	LD BC,043Eh		; 4AC1h = 'REW'
00004AC3:	CALL 0DECh		; .. tape recorder
00004AC6:	LD A,0Ah
00004AC8:	JP 1BB7h

; 'APSS'
00004ACB:	CALL 7FAAh		; IDEEXP: DE= (HL), A=next character to be parsed
00004ACE:	BIT 7,D
00004AD0:	LD C,05h
00004AD2:	JR Z,+09h
00004AD4:	LD A,E
00004AD5:	CPL
00004AD6:	LD E,A
00004AD7:	LD A,D
00004AD8:	CPL
00004AD9:	LD D,A
00004ADA:	INC DE
00004ADB:	LD C,06h
00004ADD:	CALL 7F98h		; Check byte overflow for value in DE and put in A
00004AE0:	OR A
00004AE1:	RET Z
00004AE2:	CP 33h
00004AE4:	JP NC,206Fh		; ERROR: Illegal function call
00004AE7:	LD D,C
00004AE8:	DI
00004AE9:	CALL 4B0Fh
00004AEC:	EI
00004AED:	RET C
00004AEE:	LD BC,1900h
00004AF1:	XOR A
00004AF2:	OUT (C),A
00004AF4:	CALL 4B0Fh
00004AF7:	RET C
00004AF8:	LD BC,1900h
00004AFB:	LD A,E9h
00004AFD:	OUT (C),A
00004AFF:	CALL 4B0Fh
00004B02:	JR C,-05h
00004B04:	DI
00004B05:	LD BC,1900h
00004B08:	OUT (C),D
00004B0A:	DEC E
00004B0B:	JR NZ,-25h
00004B0D:	EI
00004B0E:	RET

00004B0F:	LD BC,1A01h		; 8255 CRTC read, port B
00004B12:	IN A,(C)
00004B14:	RRCA			; BREAK flag ?
00004B15:	CCF
00004B16:	RET C
00004B17:	AND 20h
00004B19:	RET Z
00004B1A:	JR -0Dh

; 'CANVAS'
00004B1C:	LD DE,53A3h
00004B1F:	CALL 4C03h
00004B22:	LD (DE),A
00004B23:	INC DE
00004B24:	CALL 4BFDh
00004B27:	LD (DE),A
00004B28:	INC DE
00004B29:	CALL 4BFDh
00004B2C:	LD (DE),A
00004B2D:	PUSH HL
00004B2E:	JR +45h

; 'LAYER'
00004B30:	CALL 4C12h
00004B33:	LD D,A
00004B34:	CALL 4C0Ch
00004B37:	LD E,A
00004B38:	CALL 4C0Ch
00004B3B:	LD B,A
00004B3C:	PUSH BC
00004B3D:	CALL 4C0Ch
00004B40:	POP BC
00004B41:	LD C,A
00004B42:	PUSH HL
00004B43:	LD IX,53A6h
00004B47:	LD H,00h
00004B49:	LD A,H
00004B4A:	CP 04h
00004B4C:	JR Z,+27h
00004B4E:	LD L,00h
00004B50:	CP D
00004B51:	JR Z,+0Ch
00004B53:	INC L
00004B54:	CP E
00004B55:	JR Z,+08h
00004B57:	INC L
00004B58:	CP B
00004B59:	JR Z,+04h
00004B5B:	INC L
00004B5C:	CP C
00004B5D:	JR NZ,+08h
00004B5F:	LD (IX+00h),L
00004B62:	INC IX
00004B64:	INC H
00004B65:	JR -1Eh
00004B67:	LD HL,53A6h
00004B6A:	LD BC,0400h
00004B6D:	LD (HL),C
00004B6E:	INC HL
00004B6F:	INC C
00004B70:	DJNZ -05h
00004B72:	JP 206Fh		; ERROR: Illegal function call

00004B75:	LD HL,53A3h
00004B78:	LD D,01h
00004B7A:	CALL 4BF8h
00004B7D:	LD D,02h
00004B7F:	CALL 4BF8h
00004B82:	LD D,04h
00004B84:	CALL 4BF8h
00004B87:	LD DE,0102h
00004B8A:	CALL 4BE3h
00004B8D:	CALL 4BEEh
00004B90:	LD D,03h
00004B92:	CALL 3B2Ch
00004B95:	LD DE,0103h
00004B98:	CALL 4BE3h
00004B9B:	CALL 4BEEh
00004B9E:	LD D,05h
00004BA0:	CALL 3B2Ch
00004BA3:	LD DE,0203h
00004BA6:	CALL 4BE3h
00004BA9:	CALL 4BEEh
00004BAC:	LD D,06h
00004BAE:	CALL 3B2Ch
00004BB1:	LD HL,53A6h
00004BB4:	LD A,(HL)
00004BB5:	INC HL
00004BB6:	OR A
00004BB7:	JR Z,-05h
00004BB9:	CALL 4BEEh
00004BBC:	LD D,07h
00004BBE:	CALL 3B2Ch
00004BC1:	LD E,00h
00004BC3:	LD HL,53A6h
00004BC6:	LD A,(HL)
00004BC7:	OR A
00004BC8:	JR Z,+14h
00004BCA:	CP 01h
00004BCC:	LD D,AAh		; XOR D
00004BCE:	JR Z,+08h
00004BD0:	CP 02h
00004BD2:	LD D,CCh
00004BD4:	JR Z,+02h
00004BD6:	LD D,F0h
00004BD8:	LD A,D
00004BD9:	OR E
00004BDA:	LD E,A
00004BDB:	INC HL
00004BDC:	JR -18h
00004BDE:	CALL 3B5Dh
00004BE1:	POP HL
00004BE2:	RET

00004BE3:	LD HL,53A6h
00004BE6:	LD A,(HL)
00004BE7:	CP D
00004BE8:	RET Z
00004BE9:	CP E
00004BEA:	RET Z
00004BEB:	INC HL
00004BEC:	JR -08h
00004BEE:	DEC A
00004BEF:	LD E,A
00004BF0:	LD D,00h
00004BF2:	LD HL,53A3h
00004BF5:	ADD HL,DE
00004BF6:	LD E,(HL)
00004BF7:	RET

00004BF8:	LD E,(HL)
00004BF9:	INC HL
00004BFA:	JP 3B2Ch

00004BFD:	CALL 8262h		; skip SPACEs in (HL), A=next char
00004C00:	CALL 2E76h		; CH2CH: Check for comma ','
00004C03:	CALL 4C1Bh
00004C06:	CP 08h
00004C08:	RET C
00004C09:	JP 206Fh		; ERROR: Illegal function call

00004C0C:	CALL 8262h		; skip SPACEs in (HL), A=next char
00004C0F:	CALL 2E76h		; CH2CH: Check for comma ','
00004C12:	CALL 4C1Bh
00004C15:	DEC A
00004C16:	CP 04h
00004C18:	RET C
00004C19:	JR -12h
00004C1B:	PUSH DE
00004C1C:	CALL 7F95h		; IBYTE: load BASIC argument in A
00004C1F:	POP DE
00004C20:	RET

; 'SCROLL'
00004C21:	JR Z,+38h
00004C23:	CALL 7FAAh		; IDEEXP: DE= (HL), A=next character to be parsed
00004C26:	LD A,D
00004C27:	OR A
00004C28:	LD D,08h
00004C2A:	JR Z,+11h
00004C2C:	CP FFh
00004C2E:	JP NZ,206Fh		; ERROR: Illegal function call
00004C31:	LD A,E
00004C32:	CPL
00004C33:	CP 03h
00004C35:	JP NC,206Fh		; ERROR: Illegal function call
00004C38:	ADD A
00004C39:	ADD 08h
00004C3B:	JR +0Eh
00004C3D:	LD A,E
00004C3E:	OR A
00004C3F:	JR Z,+1Ah
00004C41:	CP 04h
00004C43:	JP NC,206Fh		; ERROR: Illegal function call
00004C46:	ADD A
00004C47:	LD E,A
00004C48:	LD A,08h
00004C4A:	SUB E
00004C4B:	LD BC,1800h		; CRTC
00004C4E:	LD E,05h
00004C50:	OUT (C),E
00004C52:	INC C
00004C53:	OUT (C),A
00004C55:	LD BC,1A03h		; 8255 CRTC write, set mode
00004C58:	OUT (C),D
00004C5A:	RET

00004C5B:	LD D,09h
00004C5D:	LD A,02h
00004C5F:	JR -16h

; 'EFFECT'
00004C61:	JP 2066h		; ERROR: Syntax error

; 'KBUF'
00004C64:	LD B,00h
00004C66:	CP 9Dh			; Token code for 'ON'
00004C68:	JR Z,+06h
00004C6A:	INC B
00004C6B:	CP A1h			; Token code for 'OFF'
00004C6D:	JP NZ,2066h		; ERROR: Syntax error
00004C70:	LD A,B
00004C71:	LD (0EA5h),A
00004C74:	INC HL
00004C75:	RET

; 'GET'
00004C76:	CP 40h
00004C78:	JP NZ,5ED6h
00004C7B:	CALL 4F4Bh
00004C7E:	LD (4CDEh),BC
00004C82:	JR Z,+6Fh
00004C84:	CALL 2E76h		; CH2CH: Check for comma ','
00004C87:	CALL 7F95h		; IBYTE: load BASIC argument in A
00004C8A:	OR A
00004C8B:	RET Z
00004C8C:	CP 08h
00004C8E:	JP NC,206Fh		; ERROR: Illegal function call
00004C91:	EX AF,AF'
00004C92:	LD A,(3C58h)
00004C95:	OR A
00004C96:	JR Z,+07h
00004C98:	RRCA
00004C99:	RRCA
00004C9A:	LD B,A
00004C9B:	LD C,00h
00004C9D:	JR +18h
00004C9F:	EX AF,AF'
00004CA0:	RRCA
00004CA1:	PUSH AF
00004CA2:	LD BC,4000h
00004CA5:	CALL C,4CB7h
00004CA8:	POP AF
00004CA9:	RRCA
00004CAA:	PUSH AF
00004CAB:	LD BC,8000h
00004CAE:	CALL C,4CB7h
00004CB1:	POP AF
00004CB2:	RRCA
00004CB3:	RET NC
00004CB4:	LD BC,C000h
00004CB7:	PUSH HL
00004CB8:	CALL 4E13h
00004CBB:	JR C,+34h
00004CBD:	LD (4E0Eh),BC
00004CC1:	LD (4E04h),DE
00004CC5:	LD (4DFBh),HL
00004CC8:	LD C,A
00004CC9:	EXX
00004CCA:	LD (4DFFh),BC
00004CCE:	LD A,H
00004CCF:	LD (4E02h),A
00004CD2:	EXX
00004CD3:	EX DE,HL
00004CD4:	LD HL,4DD3h
00004CD7:	LD (4CDBh),HL
00004CDA:	CALL 4DD3h
00004CDD:	LD HL,A9A2h
00004CE0:	LD (HL),A
00004CE1:	INC HL
00004CE2:	LD (4CDEh),HL
00004CE5:	JR C,+0Ah
00004CE7:	LD A,C
00004CE8:	LD BC,B78Fh
00004CEB:	OR A
00004CEC:	SBC HL,BC
00004CEE:	LD C,A
00004CEF:	JR C,-17h
00004CF1:	POP HL
00004CF2:	RET

00004CF3:	PUSH HL
00004CF4:	CALL 4D49h
00004CF7:	JR C,-08h
00004CF9:	LD (4D36h),A
00004CFC:	LD A,E
00004CFD:	LD (4D3Bh),A
00004D00:	LD (4D41h),HL
00004D03:	EXX
00004D04:	XOR A
00004D05:	LD (4D24h),A
00004D08:	LD HL,4D22h
00004D0B:	JR -36h
00004D0D:	EXX
00004D0E:	LD H,A
00004D0F:	LD A,00h
00004D11:	XOR 01h
00004D13:	LD (4D10h),A
00004D16:	JR Z,+06h
00004D18:	RES 4,B
00004D1A:	OUT (C),H
00004D1C:	JR +12h
00004D1E:	OUT (C),H
00004D20:	JR +14h
00004D22:	EXX
00004D23:	LD A,00h
00004D25:	XOR 01h
00004D27:	LD (4D24h),A
00004D2A:	JR Z,+08h
00004D2C:	RES 4,B
00004D2E:	IN A,(C)
00004D30:	SET 4,B
00004D32:	EXX
00004D33:	RET

00004D34:	IN A,(C)
00004D36:	INC BC
00004D37:	DEC E
00004D38:	JR NZ,+0Ch
00004D3A:	LD E,28h
00004D3C:	DEC D
00004D3D:	SCF
00004D3E:	JR Z,+07h
00004D40:	LD HL,0000h
00004D43:	ADD HL,BC
00004D44:	LD C,L
00004D45:	LD B,H
00004D46:	OR A
00004D47:	EXX
00004D48:	RET

00004D49:	LD DE,(4E15h)
00004D4D:	LD HL,(4E18h)
00004D50:	CALL 4D9Dh
00004D53:	JP C,206Fh		; ERROR: Illegal function call
00004D56:	PUSH BC
00004D57:	PUSH HL
00004D58:	LD DE,(4E27h)
00004D5C:	LD HL,(4E2Ah)
00004D5F:	CALL 4D9Dh
00004D62:	POP DE
00004D63:	POP BC
00004D64:	JP C,206Fh		; ERROR: Illegal function call
00004D67:	LD A,03h
00004D69:	EX AF,AF'
00004D6A:	LD A,L
00004D6B:	SUB E
00004D6C:	LD L,A
00004D6D:	JR NC,+06h
00004D6F:	NEG
00004D71:	EX AF,AF'
00004D72:	LD A,0Bh
00004D74:	EX AF,AF'
00004D75:	INC A
00004D76:	LD E,A
00004D77:	LD A,H
00004D78:	SUB D
00004D79:	LD H,00h
00004D7B:	LD D,A
00004D7C:	PUSH AF
00004D7D:	XOR L
00004D7E:	AND 80h
00004D80:	LD A,(0007h)	; WIDTH0
00004D83:	LD L,A
00004D84:	LD A,E
00004D85:	JR NZ,+02h
00004D87:	NEG
00004D89:	ADD L
00004D8A:	LD L,A
00004D8B:	POP AF
00004D8C:	JR NC,+0Ch
00004D8E:	NEG
00004D90:	LD D,A
00004D91:	LD A,L
00004D92:	NEG
00004D94:	LD L,A
00004D95:	OR A
00004D96:	JR Z,+02h
00004D98:	LD H,FFh
00004D9A:	INC D
00004D9B:	EX AF,AF'
00004D9C:	RET

00004D9D:	LD A,D
00004D9E:	OR H
00004D9F:	SCF
00004DA0:	RET NZ
00004DA1:	LD A,L
00004DA2:	CP 19h
00004DA4:	CCF
00004DA5:	RET C
00004DA6:	LD A,(0007h)	; WIDTH0
00004DA9:	DEC A
00004DAA:	CP E
00004DAB:	RET C
00004DAC:	LD D,L
00004DAD:	EX DE,HL
00004DAE:	PUSH HL
00004DAF:	CALL 054Dh		; Entry: H,L = current X,Y position.  Exit: HL=VRAM
00004DB2:	LD C,L
00004DB3:	LD B,H
00004DB4:	POP HL
00004DB5:	OR A
00004DB6:	RET

00004DB7:	LD H,A
00004DB8:	LD B,08h
00004DBA:	RL H
00004DBC:	EXX
00004DBD:	IN A,(C)
00004DBF:	JR NC,+04h
00004DC1:	OR H
00004DC2:	CPL
00004DC3:	JR +02h
00004DC5:	CPL
00004DC6:	OR H
00004DC7:	CPL
00004DC8:	OUT (C),A
00004DCA:	EXX
00004DCB:	CALL 4DF2h
00004DCE:	RET C
00004DCF:	DJNZ -17h
00004DD1:	OR A
00004DD2:	RET

00004DD3:	LD H,00h
00004DD5:	LD B,08h
00004DD7:	EXX
00004DD8:	IN A,(C)
00004DDA:	AND H
00004DDB:	JR Z,+01h
00004DDD:	SCF
00004DDE:	EXX
00004DDF:	RL H
00004DE1:	CALL 4DF2h
00004DE4:	JR C,+07h
00004DE6:	DJNZ -11h
00004DE8:	OR A
00004DE9:	LD A,H
00004DEA:	RET

00004DEB:	RL H
00004DED:	DJNZ -04h
00004DEF:	LD A,H
00004DF0:	SCF
00004DF1:	RET

00004DF2:	DEC DE
00004DF3:	LD A,D
00004DF4:	OR E
00004DF5:	JR NZ,+15h
00004DF7:	DEC C
00004DF8:	SCF
00004DF9:	RET Z
00004DFA:	LD DE,0140h
00004DFD:	EXX
00004DFE:	LD BC,C800h
00004E01:	LD H,80h
00004E03:	CALL 50B3h
00004E06:	LD (4DFFh),BC
00004E0A:	JR +04h
00004E0C:	EXX
00004E0D:	CALL 50E2h
00004E10:	EXX
00004E11:	OR A
00004E12:	RET

00004E13:	PUSH BC
00004E14:	LD DE,0000h
00004E17:	LD HL,0000h
00004E1A:	CALL 507Eh
00004E1D:	JR C,+10h
00004E1F:	EX HL,(SP)
00004E20:	ADD HL,BC
00004E21:	LD C,L
00004E22:	LD B,H
00004E23:	POP HL
00004E24:	PUSH DE
00004E25:	EXX
00004E26:	LD DE,013Fh
00004E29:	LD HL,0001h
00004E2C:	CALL 507Eh
00004E2F:	POP BC
00004E30:	JP C,206Fh		; ERROR: Illegal function call
00004E33:	EX DE,HL
00004E34:	SBC HL,BC
00004E36:	LD BC,50E2h
00004E39:	JR NC,+0Ah
00004E3B:	LD A,L
00004E3C:	CPL
00004E3D:	LD L,A
00004E3E:	LD A,H
00004E3F:	CPL
00004E40:	LD H,A
00004E41:	INC HL
00004E42:	LD BC,50D2h
00004E45:	EXX
00004E46:	LD A,L
00004E47:	EXX
00004E48:	SUB E
00004E49:	LD DE,5096h
00004E4C:	JR NC,+05h
00004E4E:	NEG
00004E50:	LD DE,50B3h
00004E53:	INC A
00004E54:	INC HL
00004E55:	OR A
00004E56:	RET

; 'PUT'
00004E57:	CP 40h
00004E59:	JP NZ,5EEDh
00004E5C:	CALL 4F4Bh
00004E5F:	LD (4E82h),BC
00004E63:	JP NZ,4E9Eh
00004E66:	PUSH HL
00004E67:	CALL 4D49h
00004E6A:	JR C,+30h
00004E6C:	LD (4D36h),A
00004E6F:	LD A,E
00004E70:	LD (4D3Bh),A
00004E73:	LD (4D41h),HL
00004E76:	EXX
00004E77:	XOR A
00004E78:	LD (4D10h),A
00004E7B:	LD HL,4D0Dh
00004E7E:	LD (4E86h),HL
00004E81:	LD HL,0000h
00004E84:	LD A,(HL)
00004E85:	CALL 4D0Dh
00004E88:	LD HL,(4E82h)
00004E8B:	INC HL
00004E8C:	LD (4E82h),HL
00004E8F:	JR C,+0Bh
00004E91:	LD A,C
00004E92:	LD BC,(4CE9h)
00004E96:	OR A
00004E97:	SBC HL,BC
00004E99:	LD C,A
00004E9A:	JR C,-1Bh
00004E9C:	POP HL
00004E9D:	RET

00004E9E:	CALL 2E76h		; CH2CH: Check for comma ','
00004EA1:	CALL 8262h		; skip SPACEs in (HL), A=next char
00004EA4:	CP FEh
00004EA6:	JR Z,+0Eh
00004EA8:	CP EEh
00004EAA:	JP NC,2066h		; ERROR: Syntax error
00004EAD:	SUB EAh
00004EAF:	JP C,2066h		; ERROR: Syntax error
00004EB2:	INC A
00004EB3:	INC A
00004EB4:	JR +0Ch
00004EB6:	INC HL
00004EB7:	LD A,(HL)
00004EB8:	SUB 81h
00004EBA:	JP C,2066h		; ERROR: Syntax error
00004EBD:	CP 02h
00004EBF:	JP NC,2066h		; ERROR: Syntax error
00004EC2:	INC HL
00004EC3:	LD E,A
00004EC4:	LD D,00h
00004EC6:	EX DE,HL
00004EC7:	ADD HL,HL
00004EC8:	ADD HL,HL
00004EC9:	LD BC,4F33h
00004ECC:	ADD HL,BC
00004ECD:	LD C,(HL)
00004ECE:	INC HL
00004ECF:	LD B,(HL)
00004ED0:	INC HL
00004ED1:	LD A,(HL)
00004ED2:	INC HL
00004ED3:	LD H,(HL)
00004ED4:	LD L,A
00004ED5:	LD (4DC1h),BC
00004ED9:	LD (4DC5h),HL
00004EDC:	EX DE,HL
00004EDD:	CALL 2E73h		; HCH2CH: Skip spaces and check for comma ','
00004EE0:	CALL 7F95h		; IBYTE: load BASIC argument in A
00004EE3:	OR A
00004EE4:	RET Z
00004EE5:	CP 08h
00004EE7:	JP NC,206Fh		; ERROR: Illegal function call
00004EEA:	EX AF,AF'
00004EEB:	LD A,(3C58h)
00004EEE:	OR A
00004EEF:	JR Z,+07h
00004EF1:	RRCA
00004EF2:	RRCA
00004EF3:	LD B,A
00004EF4:	LD C,00h
00004EF6:	JR +18h
00004EF8:	EX AF,AF'
00004EF9:	RRCA
00004EFA:	PUSH AF
00004EFB:	LD BC,4000h
00004EFE:	CALL C,4F10h
00004F01:	POP AF
00004F02:	RRCA
00004F03:	PUSH AF
00004F04:	LD BC,8000h
00004F07:	CALL C,4F10h
00004F0A:	POP AF
00004F0B:	RRCA
00004F0C:	RET NC
00004F0D:	LD BC,C000h
00004F10:	PUSH HL
00004F11:	CALL 4E13h
00004F14:	JR C,-7Ah
00004F16:	LD (4E0Eh),BC
00004F1A:	LD (4E04h),DE
00004F1E:	LD (4DFBh),HL
00004F21:	LD C,A
00004F22:	EXX
00004F23:	LD (4DFFh),BC
00004F27:	LD A,H
00004F28:	LD (4E02h),A
00004F2B:	EXX
00004F2C:	EX DE,HL
00004F2D:	LD HL,4DB7h
00004F30:	JP 4E7Eh
00004F33:	OR H
00004F34:	CPL
00004F35:	CPL
00004F36:	OR H
00004F37:	CPL
00004F38:	OR H
00004F39:	NOP
00004F3A:	CPL
00004F3B:	XOR H
00004F3C:	CPL
00004F3D:	NOP
00004F3E:	CPL
00004F3F:	OR H
00004F40:	CPL
00004F41:	NOP
00004F42:	CPL
00004F43:	NOP
00004F44:	CPL
00004F45:	CPL
00004F46:	OR H
00004F47:	CPL
00004F48:	OR H
00004F49:	OR H
00004F4A:	CPL
00004F4B:	INC HL
00004F4C:	CALL 38ABh
00004F4F:	LD (4E15h),BC
00004F53:	LD (4E18h),DE
00004F57:	CP F8h			; Token for '-'
00004F59:	JP NZ,2066h		; ERROR: Syntax error
00004F5C:	INC HL
00004F5D:	CALL 38ABh
00004F60:	CALL 2E76h		; CH2CH: Check for comma ','
00004F63:	LD (4E27h),BC
00004F67:	LD (4E2Ah),DE
00004F6B:	CALL 8C0Fh
00004F6E:	CP 03h
00004F70:	JP Z,206Fh		; ERROR: Illegal function call
00004F73:	JP 3D58h

; 'POSITION'
00004F76:	CALL 38C5h
00004F79:	LD (507Ch),BC
00004F7D:	LD (5079h),DE
00004F81:	RET

; 'PATTERN'
00004F82:	CALL 7FAAh		; IDEEXP: DE= (HL), A=next character to be parsed
00004F85:	CALL 2E76h		; CH2CH: Check for comma ','
00004F88:	LD BC,5091h
00004F8B:	BIT 7,D
00004F8D:	LD A,E
00004F8E:	JR Z,+05h
00004F90:	NEG
00004F92:	LD BC,50AEh
00004F95:	LD (4FD1h),BC
00004F99:	OR A
00004F9A:	JP Z,206Fh		; ERROR: Illegal function call
00004F9D:	LD (4FCAh),A
00004FA0:	CALL 7FB9h		; STREXP:
00004FA3:	PUSH HL
00004FA4:	CALL 4FB5h
00004FA7:	POP HL
00004FA8:	CALL 8262h		; skip SPACEs in (HL), A=next char
00004FAB:	CP 2Ch	; ','
00004FAD:	RET NZ
00004FAE:	INC HL
00004FAF:	JR -11h

00004FB1:	NOP
00004FB2:	NOP
00004FB3:	NOP
00004FB4:	NOP
00004FB5:	OR A
00004FB6:	RET Z
00004FB7:	LD C,A
00004FB8:	LD A,(0026h)	; COLORF
00004FBB:	AND 07h
00004FBD:	LD (40F9h),A
00004FC0:	EXX
00004FC1:	CALL 5078h
00004FC4:	RET C
00004FC5:	PUSH BC
00004FC6:	PUSH HL
00004FC7:	PUSH DE
00004FC8:	EXX
00004FC9:	LD B,10h
00004FCB:	LD A,(DE)
00004FCC:	EXX
00004FCD:	CALL 5012h
00004FD0:	CALL 50AEh
00004FD3:	EXX
00004FD4:	INC DE
00004FD5:	JR C,+11h
00004FD7:	DEC C
00004FD8:	JR Z,+0Eh
00004FDA:	DJNZ -11h
00004FDC:	EXX
00004FDD:	POP HL
00004FDE:	CALL 5000h
00004FE1:	POP HL
00004FE2:	POP BC
00004FE3:	JR C,+0Ch
00004FE5:	INC BC
00004FE6:	JR -23h
00004FE8:	DJNZ +22h
00004FEA:	EXX
00004FEB:	POP HL
00004FEC:	CALL 5000h
00004FEF:	POP HL
00004FF0:	POP BC
00004FF1:	JR NC,+04h
00004FF3:	LD DE,(50C7h)
00004FF7:	LD (507Ch),DE
00004FFB:	LD A,L
00004FFC:	LD (5079h),A
00004FFF:	RET

00005000:	LD DE,0008h
00005003:	ADD HL,DE		; {LDIR5:} move on the next 8 bytes in the number queue (HL ptr)
00005004:	EX DE,HL
00005005:	LD HL,(50DBh)
00005008:	OR A
00005009:	SBC HL,DE
0000500B:	RET

0000500C:	EXX
0000500D:	CALL 4FF7h
00005010:	JR +15h
00005012:	PUSH BC
00005013:	PUSH HL
00005014:	PUSH DE
00005015:	LD L,08h
00005017:	RLCA
00005018:	PUSH AF
00005019:	CALL 5037h
0000501C:	CALL 50D9h
0000501F:	JR C,+05h
00005021:	POP AF
00005022:	DEC L
00005023:	JR NZ,-0Eh
00005025:	PUSH AF
00005026:	POP AF
00005027:	POP DE
00005028:	POP HL
00005029:	POP BC
0000502A:	RET

0000502B:	CALL 49FAh
0000502E:	LD (40F9h),A
00005031:	LD A,(40F9h)
00005034:	CP 01h
00005036:	CCF
00005037:	EX AF,AF'
00005038:	PUSH BC
00005039:	LD A,(3C58h)
0000503C:	OR A
0000503D:	JR Z,+0Ah
0000503F:	RRCA
00005040:	RRCA
00005041:	OR B
00005042:	LD B,A
00005043:	EX AF,AF'
00005044:	CALL 5068h
00005047:	POP BC
00005048:	RET

00005049:	EX AF,AF'
0000504A:	LD A,00h
0000504C:	JR NC,+03h
0000504E:	LD A,(40F9h)
00005051:	SET 6,B
00005053:	RRCA
00005054:	PUSH AF
00005055:	CALL 5068h
00005058:	POP AF
00005059:	SET 7,B
0000505B:	RES 6,B
0000505D:	RRCA
0000505E:	PUSH AF
0000505F:	CALL 5068h
00005062:	POP AF
00005063:	SET 6,B
00005065:	RRCA
00005066:	JR -24h
00005068:	JR C,+08h
0000506A:	IN A,(C)
0000506C:	CPL
0000506D:	OR H
0000506E:	CPL
0000506F:	OUT (C),A
00005071:	RET

00005072:	IN A,(C)
00005074:	OR H
00005075:	OUT (C),A
00005077:	RET

00005078:	LD HL,0000h
0000507B:	LD DE,0000h
0000507E:	PUSH DE
0000507F:	PUSH HL
00005080:	CALL 3B9Dh
00005083:	LD C,L
00005084:	LD B,H
00005085:	POP HL
00005086:	POP DE
00005087:	RET C
00005088:	ADD C4h
0000508A:	LD (508Eh),A
0000508D:	SET 0,H
0000508F:	OR A
00005090:	RET

00005091:	LD A,00h
00005093:	CP L
00005094:	SCF
00005095:	RET Z
00005096:	LD A,L
00005097:	DEC L
00005098:	AND 07h
0000509A:	PUSH HL
0000509B:	LD HL,F800h
0000509E:	JR NZ,+08h
000050A0:	LD A,(0007h)	; WIDTH0
000050A3:	NEG
000050A5:	LD L,A
000050A6:	LD H,37h
000050A8:	ADD HL,BC
000050A9:	LD C,L
000050AA:	LD B,H
000050AB:	POP HL
000050AC:	OR A
000050AD:	RET

000050AE:	LD A,C7h
000050B0:	CP L
000050B1:	SCF
000050B2:	RET Z
000050B3:	INC L
000050B4:	LD A,L
000050B5:	AND 07h
000050B7:	PUSH HL
000050B8:	LD HL,0800h
000050BB:	JR NZ,-15h
000050BD:	LD A,(0007h)	; WIDTH0
000050C0:	LD L,A
000050C1:	LD H,C8h		; Token for 'KEY' + 1 ?
000050C3:	JR -1Dh
000050C5:	PUSH HL
000050C6:	LD HL,0000h
000050C9:	OR A
000050CA:	SBC HL,DE
000050CC:	POP HL
000050CD:	SCF
000050CE:	RET Z
000050CF:	BIT 7,D
000050D1:	RET NZ
000050D2:	DEC DE
000050D3:	RLC H
000050D5:	RET NC
000050D6:	DEC BC
000050D7:	OR A
000050D8:	RET

000050D9:	PUSH HL
000050DA:	LD HL,013Fh
000050DD:	SCF
000050DE:	SBC HL,DE
000050E0:	POP HL
000050E1:	RET C
000050E2:	INC DE
000050E3:	RRC H
000050E5:	RET NC
000050E6:	INC BC
000050E7:	OR A
000050E8:	RET

; 'HCOPY'
000050E9:	LD DE,5234h
000050EC:	JR Z,+16h
000050EE:	CALL 7F95h		; IBYTE: load BASIC argument in A
000050F1:	CP 05h			; Single precision type ?
000050F3:	JP NC,206Fh		; ERROR: Illegal function call
000050F6:	EX DE,HL
000050F7:	LD L,A
000050F8:	LD H,00h
000050FA:	ADD HL,HL
000050FB:	LD BC,5172h
000050FE:	ADD HL,BC
000050FF:	LD A,(HL)
00005100:	INC HL
00005101:	LD H,(HL)
00005102:	LD L,A
00005103:	EX DE,HL
00005104:	PUSH HL
00005105:	LD (513Fh),DE
00005109:	LD E,00h
0000510B:	CALL 5168h
0000510E:	LD A,39h
00005110:	CALL 12E2h
00005113:	LD A,0Fh
00005115:	CALL 12E2h
00005118:	LD D,00h
0000511A:	LD A,(0036h)	; BRKBUF
0000511D:	CP 03h
0000511F:	JR Z,+39h
00005121:	CALL 5168h
00005124:	LD A,32h
00005126:	CALL 12E2h
00005129:	LD A,02h
0000512B:	CALL 12E2h
0000512E:	LD A,80h
00005130:	CALL 12E2h
00005133:	PUSH DE
00005134:	LD HL,A73Fh		; KEYBM1 (aka KEYBUF)
00005137:	LD B,08h
00005139:	XOR A

; 'TUPW'
0000513A:	LD (HL),A
0000513B:	INC HL
0000513C:	DJNZ -04h
0000513E:	CALL 5234h
00005141:	LD HL,A73Fh		; KEYBM1 (aka KEYBUF)
00005144:	LD B,08h
00005146:	LD A,(HL)
00005147:	CALL 12E2h
0000514A:	INC HL
0000514B:	DJNZ -07h
0000514D:	POP DE
0000514E:	INC D
0000514F:	LD A,D
00005150:	CP 50h
00005152:	JR C,-21h
00005154:	INC E
00005155:	LD A,E
00005156:	CP 32h
00005158:	JR C,-42h
0000515A:	CALL 5168h
0000515D:	LD A,39h
0000515F:	CALL 12E2h
00005162:	XOR A
00005163:	CALL 12E2h
00005166:	POP HL
00005167:	RET

00005168:	LD A,1Bh
0000516A:	CALL 12E2h
0000516D:	LD A,25h
0000516F:	JP 12E2h

; table for HCOPY
00005170:	defw 517Ch, 518Ch, 5187h, 5182h, 5231h

0000517C:	CALL 518Ch
0000517F:	CALL 5187h
00005182:	LD BC,C000h
00005185:	JR +08h
00005187:	LD BC,8000h
0000518A:	JR +03h
0000518C:	LD BC,4000h
0000518F:	PUSH DE
00005190:	LD L,D
00005191:	XOR A
00005192:	LD D,A
00005193:	SRL E
00005195:	RRA
00005196:	RRCA
00005197:	RRCA
00005198:	LD H,A
00005199:	EX DE,HL
0000519A:	LD A,(0007h)	; WIDTH0
0000519D:	ADD HL,HL
0000519E:	ADD HL,HL
0000519F:	ADD HL,HL
000051A0:	CP 28h		; 40 ?
000051A2:	JR Z,+0Dh
000051A4:	ADD HL,HL
000051A5:	PUSH HL
000051A6:	ADD HL,HL
000051A7:	ADD HL,HL
000051A8:	ADD HL,DE
000051A9:	POP DE
000051AA:	ADD HL,DE
000051AB:	ADD HL,BC
000051AC:	CALL 5209h
000051AF:	JR +3Bh
000051B1:	PUSH HL
000051B2:	ADD HL,HL
000051B3:	ADD HL,HL
000051B4:	XOR A
000051B5:	SRL E
000051B7:	RLA
000051B8:	ADD HL,DE
000051B9:	POP DE
000051BA:	ADD HL,DE
000051BB:	ADD HL,BC
000051BC:	LD DE,(00E9h)		; Get INIADR (CRTC regs for display start address)
000051C0:	ADD HL,DE
000051C1:	PUSH AF
000051C2:	CALL 5209h
000051C5:	POP AF
000051C6:	OR A
000051C7:	JR NZ,+0Bh
000051C9:	LD HL,(3621h)		; TMPEND
000051CC:	LD B,08h
000051CE:	XOR A
000051CF:	RRD
000051D1:	INC HL
000051D2:	DJNZ -06h
000051D4:	LD HL,(3621h)		; TMPEND
000051D7:	LD C,08h
000051D9:	LD D,(HL)
000051DA:	LD B,04h
000051DC:	XOR A
000051DD:	RRCA
000051DE:	RRCA
000051DF:	RRC D
000051E1:	JR NC,+02h
000051E3:	ADD C0h
000051E5:	DJNZ -0Ah
000051E7:	LD (HL),A
000051E8:	INC HL
000051E9:	DEC C
000051EA:	JR NZ,-13h
000051EC:	LD HL,(3621h)		; TMPEND
000051EF:	LD DE,A73Fh		; KEYBM1 (aka KEYBUF)
000051F2:	LD C,08h
000051F4:	LD B,08h
000051F6:	PUSH HL
000051F7:	XOR A
000051F8:	RL (HL)
000051FA:	RLA
000051FB:	INC HL
000051FC:	DJNZ -06h
000051FE:	POP HL
000051FF:	EX DE,HL
00005200:	OR (HL)
00005201:	LD (HL),A
00005202:	EX DE,HL
00005203:	DEC C
00005204:	INC DE
00005205:	JR NZ,-13h
00005207:	POP DE
00005208:	RET

00005209:	LD DE,(3621h)		; TMPEND
0000520D:	CALL 5216h
00005210:	CALL 5216h
00005213:	CALL 5216h
00005216:	LD C,L
00005217:	LD B,H
00005218:	IN A,(C)
0000521A:	LD (DE),A
0000521B:	INC DE
0000521C:	LD (DE),A
0000521D:	INC DE
0000521E:	LD HL,0800h
00005221:	ADD HL,BC
00005222:	RET

00005223:	PUSH HL
00005224:	ADD HL,HL
00005225:	ADD HL,HL
00005226:	XOR A
00005227:	SRL E
00005229:	RLA
0000522A:	LD BC,(00E9h)		; Get INIADR (CRTC regs for display start address)
0000522E:	ADD HL,BC
0000522F:	JR +1Dh

00005231:	CALL 517Ch
00005234:	PUSH DE
00005235:	LD L,D
00005236:	XOR A
00005237:	LD D,A
00005238:	LD H,A
00005239:	SRL E
0000523B:	RLA
0000523C:	EX AF,AF'
0000523D:	EX DE,HL
0000523E:	ADD HL,HL
0000523F:	ADD HL,HL
00005240:	ADD HL,HL
00005241:	LD A,(0007h)		; WIDTH0
00005244:	CP 28h			; 40?
00005246:	JR Z,-25h
00005248:	ADD HL,HL
00005249:	PUSH HL
0000524A:	ADD HL,HL
0000524B:	ADD HL,HL
0000524C:	LD A,02h
0000524E:	EX AF,AF'
0000524F:	ADD HL,DE
00005250:	POP DE
00005251:	ADD HL,DE
00005252:	LD BC,2000h
00005255:	ADD HL,BC
00005256:	LD C,L
00005257:	LD B,H
00005258:	IN E,(C)
0000525A:	SET 4,B
0000525C:	IN D,(C)
0000525E:	PUSH AF
0000525F:	BIT 5,E
00005261:	LD HL,(3621h)		; TMPEND
00005264:	PUSH DE
00005265:	JR Z,+25h
00005267:	LD E,15h
00005269:	CALL 0033h
0000526C:	LD E,16h
0000526E:	CALL 0033h
00005271:	LD E,17h
00005273:	CALL 0033h
00005276:	LD C,02h
00005278:	LD DE,FFF8h			; -8 (normal precision BASICs would have '-5')
0000527B:	EX DE,HL
0000527C:	ADD HL,DE
0000527D:	LD B,08h
0000527F:	DEC DE
00005280:	DEC HL
00005281:	LD A,(DE)
00005282:	OR (HL)
00005283:	LD (HL),A
00005284:	DJNZ -07h
00005286:	EX DE,HL
00005287:	DEC C
00005288:	JR NZ,-12h
0000528A:	JR +05h
0000528C:	LD E,14h
0000528E:	CALL 0033h
00005291:	POP DE
00005292:	BIT 3,E
00005294:	JR Z,+0Bh
00005296:	LD HL,(3621h)		; TMPEND
00005299:	LD B,08h
0000529B:	LD A,(HL)
0000529C:	CPL
0000529D:	LD (HL),A
0000529E:	INC HL
0000529F:	DJNZ -06h
000052A1:	LD HL,(3621h)		; TMPEND
000052A4:	POP AF
000052A5:	LD DE,0004h
000052A8:	EX DE,HL
000052A9:	ADD HL,DE
000052AA:	LD B,04h
000052AC:	OR A
000052AD:	JR Z,+0Ah
000052AF:	LD A,(HL)
000052B0:	LD (DE),A
000052B1:	INC DE
000052B2:	LD (DE),A
000052B3:	INC HL
000052B4:	INC DE
000052B5:	DJNZ -08h
000052B7:	JR +0Eh
000052B9:	INC HL
000052BA:	INC HL
000052BB:	INC HL
000052BC:	INC DE
000052BD:	INC DE
000052BE:	INC DE
000052BF:	LD A,(DE)
000052C0:	LD (HL),A
000052C1:	DEC HL
000052C2:	LD (HL),A
000052C3:	DEC DE
000052C4:	DEC HL
000052C5:	DJNZ -08h
000052C7:	EX AF,AF'
000052C8:	CP 02h
000052CA:	JP Z,51ECh
000052CD:	JP 51C6h

; 'BOOT'
000052D0:	JP NZ,2066h		; ERROR: Syntax error
000052D3:	CALL 6837h		; 'Are you sure ?'
000052D6:	RET NZ
000052D7:	DI
000052D8:	LD HL,0000h
000052DB:	JP A576h		; Page in the IPL ROM and call (HL)

'ASK'
000052DE:	LD A,(0007h)	; WIDTH0
000052E1:	CP 28h			; 40?
000052E3:	JP NZ,6895h			; ERROR: Bad screen mode
000052E6:	LD DE,(00E9h)		; Get INIADR (CRTC regs for display start address)
000052EA:	LD A,D
000052EB:	OR E
000052EC:	JP NZ,6895h			; ERROR: Bad screen mode
000052EF:	DI
000052F0:	CALL 3C0Ah			; Hide graphics screen
000052F3:	LD L,00h
000052F5:	CALL 0133h			; change interrupt vector, L = table address
000052F8:	LD HL,0003h
000052FB:	CALL A576h			; Page in the IPL ROM and call (HL)
000052FE:	CALL 012Dh			; set up interrupt vector, (0052h) = table ptr
00005301:	EI
00005302:	POP HL
00005303:	LD A,0Ch			; chr$(12)
00005305:	CALL 0013h			; OUTCH (PRINT char in A)
00005308:	JP 14ECh			; PROMPT:

; 'CLICK'
0000530B:	INC HL
0000530C:	CP A1h			; Token code for 'OFF'
0000530E:	JR Z,+06h
00005310:	CP 9Dh			; Token code for 'ON'
00005312:	JP NZ,2066h		; ERROR: Syntax error
00005315:	XOR A
00005316:	LD (0E90h),A		; CLICKF
00005319:	RET

0000531A:	INC HL
0000531B:	CP 9Dh			; Token code for 'ON'
0000531D:	JR Z,+09h
0000531F:	CP A1h			; Token code for 'OFF'
00005321:	JP NZ,2066h		; ERROR: Syntax error
00005324:	LD A,0Dh
00005326:	JR +02h
00005328:	LD A,80h
0000532A:	LD DE,A73Fh		; KEYBM1 (aka KEYBUF)
0000532D:	LD (DE),A
0000532E:	LD A,E7h		; SUBCPU_SET_TV
00005330:	JP 0023h		; subcpu (A=command, DE=result ptr?)

; ' CHANNEL'	(sound)
00005333:	CALL 7F95h		; IBYTE: load BASIC argument in A
00005336:	DEC A
00005337:	CP 0Ch
00005339:	JR NC,+13h
0000533B:	ADD 10h
0000533D:	JR -15h

; 'VOL'   (sound volume)
0000533F:	LD A,03h
00005341:	JR Z,-19h
00005343:	CALL 7FAAh		; IDEEXP: DE= (HL), A=next character to be parsed
00005346:	DEC E
00005347:	LD A,D
00005348:	OR A
00005349:	JR Z,+06h
0000534B:	INC A
0000534C:	JR Z,+1Ch
0000534E:	JP 206Fh		; ERROR: Illegal function call

00005351:	LD A,E
00005352:	CP FFh
00005354:	LD A,06h
00005356:	JR Z,-2Eh
00005358:	LD C,01h
0000535A:	LD A,E
0000535B:	CP 40h
0000535D:	JR NC,-11h
0000535F:	LD B,A
00005360:	INC B
00005361:	LD A,C
00005362:	PUSH BC
00005363:	CALL 532Ah
00005366:	POP BC
00005367:	DJNZ -08h
00005369:	RET

0000536A:	LD A,E
0000536B:	LD C,02h
0000536D:	NEG
0000536F:	JR -16h

; 'CRT'
00005371:	CALL 7F95h		; IBYTE: load BASIC argument in A
00005374:	CP 04h
00005376:	JR NC,-2Ah
00005378:	ADD 1Ch
0000537A:	JR -52h

0000537C:	NOP
0000537D:	NOP
0000537E:	NOP
0000537F:	NOP
00005380:	NOP
00005381:	NOP
00005382:	NOP
00005383:	NOP
00005384:	NOP
00005385:	NOP
00005386:	NOP
00005387:	NOP
00005388:	NOP
00005389:	LD H,H
0000538A:	NOP
0000538B:	LD H,H
0000538C:	NOP
0000538D:	NOP
0000538E:	NOP
0000538F:	NOP
00005390:	NOP
00005391:	NOP
00005392:	NOP
00005393:	NOP
00005394:	NOP
00005395:	NOP
00005396:	NOP
00005397:	NOP
00005398:	NOP
00005399:	NOP
0000539A:	NOP
0000539B:	NOP
0000539C:	NOP
0000539D:	NOP
0000539E:	NOP
0000539F:	NOP
000053A0:	NOP
000053A1:	NOP
000053A2:	NOP
000053A3:	LD BC,0402h
000053A6:	NOP
000053A7:	LD BC,0302h
000053AA:	NOP				; CSIZE
000053AB:	LD C,E
000053AC:	LD B,L
000053AD:	LD E,C
000053AE:	NOP
000053AF:	LD A,24h		; error code for 'Format over'
000053B1:	JP 2076h		; Generate error message, error code in 'A'

; FLTHEX:  (HL)=DE
000053B4:	CALL 9A09h		; CLRFAC: Set FP accumulator to 0
000053B7:	LD A,E
000053B8:	OR D
000053B9:	RET Z
000053BA:	BIT 7,D
000053BC:	LD A,7Fh
000053BE:	JR Z,+09h	; NORFLH:
000053C0:	LD A,D
000053C1:	CPL
000053C2:	LD D,A
000053C3:	LD A,E
000053C4:	CPL
000053C5:	LD E,A
000053C6:	INC DE
000053C7:	LD A,FFh
; NORFLH:
000053C9:	LD B,91h
; SFL:
000053CB:	DEC B
000053CC:	BIT 7,D
000053CE:	JR NZ,+06h	; FLHXRT:
000053D0:	RL E
000053D2:	RL D
000053D4:	JR -0Bh		; SFL:
; FLHXRT:
000053D6:	LD (HL),B
000053D7:	INC HL
000053D8:	AND D
000053D9:	LD (HL),A
000053DA:	INC HL
000053DB:	LD (HL),E
000053DC:	DEC HL
000053DD:	DEC HL
000053DE:	RET

000053DF:	PUSH HL
000053E0:	LD HL,0008h
000053E3:	ADD HL,DE
000053E4:	EX DE,HL
000053E5:	POP HL
000053E6:	RET

; LDIR1: (DE) = (FLONE), 8 bytes
000053E7:	LD HL,5C5Dh		; FLONE
; LDIR5: (DE) = (HL), 8 bytes
000053EA:	LD BC,0008h
000053ED:	LDIR
000053EF:	RET

; TSTNUM
000053F0:	CP 30h	; '0'
000053F2:	RET C
000053F3:	CP 3Ah	; '9'+1
000053F5:	CCF
000053F6:	RET

; TOUPPER (DE)
000053F7:	LD A,(DE)
000053F8:	CP 61h
000053FA:	RET C
000053FB:	CP 7Bh
000053FD:	RET NC
000053FE:	SUB 20h
00005400:	RET

; TSTVAR:
00005401:	CP 5Fh
00005403:	RET Z
00005404:	CP 30h	; '0'
00005406:	RET C
00005407:	CP 7Bh
00005409:	CCF
0000540A:	RET C
0000540B:	CP 3Ah	; ':'
0000540D:	CCF
0000540E:	RET NC
0000540F:	CP 41h
00005411:	RET C
00005412:	CP 5Bh			; '['  (some BASIC subtracts "A" and checks for 26)
00005414:	CCF
00005415:	RET NC
00005416:	CP 61h
00005418:	RET

; 'CDBL'
00005419:	CALL 9A32h		; STROMT:  Get argument, on exit: A=data type
0000541C:	CP 08h			; double precision type?
0000541E:	RET Z
0000541F:	CP 02h			; integer type?
00005421:	CALL Z,543Ch
00005424:	PUSH BC
00005425:	PUSH HL
00005426:	PUSH DE
00005427:	LD DE,0005h
0000542A:	ADD HL,DE
0000542B:	XOR A
0000542C:	LD B,03h
0000542E:	LD (HL),A
0000542F:	INC HL
00005430:	DJNZ -04h
00005432:	LD A,08h
00005434:	JR +43h

; 'CSNG'
00005436:	CALL 9A32h		; STROMT:  Get argument, on exit: A=data type
00005439:	CP 05h			; Single precision type ?
0000543B:	RET Z
0000543C:	PUSH BC
0000543D:	PUSH HL
0000543E:	PUSH DE
0000543F:	CP 08h			; double precision type?
00005441:	JR Z,+0Ah
; default, Integer
00005443:	LD E,(HL)
00005444:	INC HL
00005445:	LD D,(HL)
00005446:	DEC HL
00005447:	CALL 53B4h		; FLTHEX:  (HL)=DE
0000544A:	JP 5477h

; Double precision
0000544D:	LD DE,0005h
00005450:	ADD HL,DE
00005451:	LD A,(HL)
00005452:	PUSH HL
00005453:	LD (HL),00h
00005455:	INC HL
00005456:	LD (HL),00h
00005458:	INC HL
00005459:	LD (HL),00h
0000545B:	POP HL
0000545C:	RLCA
0000545D:	JR NC,+18h
0000545F:	LD B,03h
00005461:	DEC HL
00005462:	INC (HL)
00005463:	JR NZ,+12h
00005465:	DJNZ -06h
00005467:	DEC HL
00005468:	LD A,(HL)
00005469:	AND 7Fh
0000546B:	CP 7Fh
0000546D:	JR NZ,+04h
0000546F:	CPL
00005470:	AND (HL)
00005471:	LD (HL),A
00005472:	DEC HL
00005473:	INC (HL)
00005474:	JP Z,205Ah		; ERROR: Overflow
00005477:	LD A,05h
00005479:	POP DE
0000547A:	POP HL
0000547B:	POP BC
0000547C:	LD (A5DBh),A		; data type, aka PRCSON
0000547F:	RET

; bin format
00005480:	PUSH HL
00005481:	LD HL,54D8h		
00005484:	LD (54ADh),HL	; ..Self ModiFying Code (54ADh)
00005487:	LD HL,0918h
0000548A:	JR +16h

; octal format
0000548C:	PUSH HL
0000548D:	LD HL,54DFh
00005490:	LD (54ADh),HL	; ..Self ModiFying Code (54ADh)
00005493:	LD HL,0318h
00005496:	JR +0Ah

; hex format
00005498:	PUSH HL
00005499:	LD HL,54E6h
0000549C:	LD (54ADh),HL	; ..Self ModiFying Code (54ADh)
0000549F:	LD HL,0000h
000054A2:	LD (54B4h),HL
000054A5:	LD HL,0000h
000054A8:	CALL 53F7h		; TOUPPER (DE)
000054AB:	INC DE
000054AC:	CALL 54E6h		; ..Self ModiFying Code (54ADh)
000054AF:	JR C,+19h
000054B1:	CALL 5673h		; ADHLCK:   ADD HL,HL and  check for overvlow (CY)
000054B4:	NOP
000054B5:	NOP
000054B6:	CALL 5673h		; ADHLCK:   ADD HL,HL and  check for overvlow (CY)
000054B9:	CALL 5673h		; ADHLCK:   ADD HL,HL and  check for overvlow (CY)
000054BC:	CALL 5673h		; ADHLCK:   ADD HL,HL and  check for overvlow (CY)
000054BF:	ADD L
000054C0:	LD L,A
000054C1:	LD A,00h
000054C3:	ADC H
000054C4:	JP C,205Ah		; ERROR: Overflow
000054C7:	LD H,A
000054C8:	JR -22h
000054CA:	DEC DE
000054CB:	EX DE,HL
000054CC:	EX HL,(SP)
000054CD:	LD (HL),E
000054CE:	INC HL
000054CF:	LD (HL),D
000054D0:	DEC HL
000054D1:	POP DE
000054D2:	LD A,02h			; integer type
000054D4:	LD (A5DBh),A		; data type, aka PRCSON
000054D7:	RET

; used in bin formatting (smc)
000054D8:	SUB 30h
000054DA:	RET C
000054DB:	CP 02h
000054DD:	CCF
000054DE:	RET

; used in octal formatting (smc)
000054DF:	SUB 30h
000054E1:	RET C
000054E2:	CP 08h
000054E4:	CCF
000054E5:	RET

; used in hex formatting (smc)
000054E6:	SUB 30h
000054E8:	RET C
000054E9:	CP 0Ah
000054EB:	CCF
000054EC:	RET NC
000054ED:	CP 11h
000054EF:	RET C
000054F0:	SUB 07h
000054F2:	CP 10h
000054F4:	CCF
000054F5:	RET

; ....get number
000054F6:	LD A,08h		; double precision type
000054F8:	LD (A5DBh),A		; data type, aka PRCSON
000054FB:	CALL 9A09h		; CLRFAC: Set FP accumulator to 0
000054FE:	LD (A5F7h),A	; DGITCO
00005501:	LD (A5F8h),A	; DGITFG
00005504:	LD (A5F9h),A	; EXPFLG
00005507:	LD (A5FAh),A	; PRODFL+1 ?
;
0000550A:	CALL 568Ch
0000550D:	CP 2Bh	; '+'
0000550F:	JR Z,-07h
00005511:	CP 2Dh	; '-'
00005513:	JR NZ,+06h
00005515:	CALL 550Ah		; if negative, get number, then..
00005518:	JP 9A13h		; TOGLE:  toggle number sign
; if positive, proceed with formatting
0000551B:	CALL 53F8h
0000551E:	CP 26h	; '&'
00005520:	JR NZ,+17h
00005522:	CALL 53F7h		; TOUPPER (DE)
00005525:	INC DE
00005526:	CP 42h	; 'B' (bin)
00005528:	JP Z,5480h
0000552B:	CP 48h	; 'H' (hex)
0000552D:	JP Z,5498h
00005530:	CP 4Fh	; 'O' (octal)
00005532:	JP Z,548Ch
00005535:	DEC DE
00005536:	JP 548Ch

00005539:	CP 30h	; '0'
0000553B:	JR NZ,+0Ah
0000553D:	CALL 53F7h		; TOUPPER (DE)
00005540:	INC DE
00005541:	JR -0Ah
00005543:	CALL 53F7h		; TOUPPER (DE)
00005546:	INC DE
00005547:	CP 20h	; ' '
00005549:	JR NZ,+06h
0000554B:	LD A,(A5F6h)
0000554E:	OR A
0000554F:	JR Z,-0Eh
00005551:	CP 2Eh	; '.'
00005553:	JR Z,+1Bh
00005555:	CALL 53F0h		; TSTNUM
00005558:	JR C,+58h
0000555A:	SUB 30h	; '0'
0000555C:	CALL 5B98h		; MULTEN:
0000555F:	CALL 5678h		; MULDEC:
00005562:	LD A,01h
00005564:	LD (A5F8h),A	; DGITFG
00005567:	LD A,(A5F7h)	; DGITCO
0000556A:	INC A
0000556B:	LD (A5F7h),A	; DGITCO
0000556E:	JR -2Dh
00005570:	LD A,01h
00005572:	LD (A5FAh),A	; PRODFL+1 ?
00005575:	LD C,A
00005576:	CALL 53F7h		; TOUPPER (DE)
00005579:	INC DE
0000557A:	CP 20h	; ' '
0000557C:	JR NZ,+06h
0000557E:	LD A,(A5F6h)
00005581:	OR A
00005582:	JR Z,-0Eh
00005584:	CALL 53F0h		; TSTNUM
00005587:	JR C,+21h
00005589:	INC C
0000558A:	SUB 30h
0000558C:	JR Z,+07h
0000558E:	PUSH AF
0000558F:	LD A,01h
00005591:	LD (A5F8h),A	; DGITFG
00005594:	POP AF
00005595:	PUSH AF
00005596:	LD A,(A5F8h)	; DGITFG
00005599:	LD B,A
0000559A:	LD A,(A5F7h)	; DGITCO
0000559D:	ADD B
0000559E:	LD (A5F7h),A	; DGITCO
000055A1:	POP AF
000055A2:	CALL 5B98h		; MULTEN:
000055A5:	CALL 5678h		; MULDEC:
000055A8:	JR -34h
000055AA:	DEC C
000055AB:	JR Z,+05h
000055AD:	CALL 5662h		; DIVTEN:
000055B0:	JR -08h
000055B2:	CP 45h			; 'E' ..exponent
000055B4:	JP Z,55EDh		; EXPON:
000055B7:	CP 44h
000055B9:	JP Z,55E8h
000055BC:	CP 23h	; '#'
000055BE:	RET Z
000055BF:	CP 21h	; '!'
000055C1:	JR NZ,+03h
000055C3:	JP 5436h		; 'CSNG'

000055C6:	CP 25h
000055C8:	JR NZ,+03h
000055CA:	JP 5A90h		; 'CINT'

000055CD:	DEC DE
000055CE:	LD A,(A5F9h)	; EXPFLG
000055D1:	OR A
000055D2:	RET NZ
000055D3:	LD A,(A5FAh)	; PRODFL+1 ?
000055D6:	OR A
000055D7:	JR NZ,+06h
000055D9:	LD A,(HL)
000055DA:	CP 90h
000055DC:	JP C,5A90h		; 'CINT'
000055DF:	LD A,(A5F7h)	; DGITCO
000055E2:	CP 09h
000055E4:	JP C,5436h		; 'CSNG'
000055E7:	RET

000055E8:	LD A,01h
000055EA:	LD (A5F9h),A	; EXPFLG

; EXPON:
000055ED:	LD A,(DE)
000055EE:	CP 2Dh	; '-'
000055F0:	JR Z,+09h
000055F2:	CP 2Bh	; '+'
000055F4:	JR Z,+05h
000055F6:	CALL 53F0h		; TSTNUM
000055F9:	JR C,-2Eh
000055FB:	LD A,01h
000055FD:	LD (A5FAh),A	; PRODFL+1 ?
00005600:	PUSH HL
00005601:	LD HL,9FF5h		; MUL:
00005604:	LD (565Bh),HL	; EXJPVC
00005607:	LD HL,0000h
0000560A:	LD A,(DE)
0000560B:	INC DE
0000560C:	CP 2Bh	; '+'
0000560E:	JR Z,+0Ch
00005610:	CP 2Dh	; '-'
00005612:	JR NZ,+0Ah
00005614:	PUSH HL
00005615:	LD HL,A0EAh		; DIV:
00005618:	LD (565Bh),HL	; EXJPVC
0000561B:	POP HL
0000561C:	LD A,(DE)
0000561D:	INC DE
0000561E:	SUB 30h			; '0'
00005620:	JR C,+1Ch
00005622:	CP 0Ah			; 10
00005624:	JR NC,+18h
00005626:	PUSH DE
00005627:	CALL 5673h		; ADHLCK:   ADD HL,HL and  check for overvlow (CY)
0000562A:	LD E,L
0000562B:	LD D,H
0000562C:	CALL 5673h		; ADHLCK:   ADD HL,HL and  check for overvlow (CY)
0000562F:	CALL 5673h		; ADHLCK:   ADD HL,HL and  check for overvlow (CY)
00005632:	CALL 566Fh		; ADDECK:
00005635:	LD E,A
00005636:	LD D,00h
00005638:	CALL 566Fh		; ADDECK:
0000563B:	POP DE
0000563C:	JR -22h
0000563E:	LD A,H
0000563F:	OR A
00005640:	JR NZ,+33h
00005642:	LD A,L
00005643:	POP HL
00005644:	PUSH DE
00005645:	PUSH BC
00005646:	PUSH HL
00005647:	LD DE,A5DCh		; ZFAC1
0000564A:	PUSH DE
0000564B:	CALL 53E7h		; LDIR1: (DE) = (FLONE), 8 bytes
0000564E:	POP HL
0000564F:	LD B,A
00005650:	INC B
00005651:	JR +03h

00005653:	CALL 5B98h		; MULTEN:
00005656:	DJNZ -05h
00005658:	EX DE,HL
00005659:	POP HL
0000565A:	CALL 0000h
0000565D:	POP BC
0000565E:	POP DE
0000565F:	JP 55CDh

; DIVTEN:
00005662:	PUSH AF
00005663:	PUSH BC
00005664:	PUSH DE
00005665:	LD DE,5C55h		; FLTEN
00005668:	CALL A0EAh		; DIV:
0000566B:	POP DE
0000566C:	POP BC
0000566D:	POP AF
0000566E:	RET

; ADDECK:
0000566F:	ADD HL,DE
00005670:	RET NC
00005671:	JR +02h

; ADHLCK:   ADD HL,HL and  check for overvlow (CY)
00005673:	ADD HL,HL
00005674:	RET NC
00005675:	JP 205Ah		; ERROR: Overflow

; MULDEC:
00005678:	PUSH DE
00005679:	PUSH HL
0000567A:	LD HL,A5DCh		; ZFAC1
0000567D:	LD E,A
0000567E:	LD D,00h
00005680:	CALL 53B4h		; FLTHEX:  (HL)=DE
00005683:	EX DE,HL
00005684:	POP HL
00005685:	PUSH BC
00005686:	CALL 9A44h		; ADD:
00005689:	POP BC
0000568A:	POP DE
0000568B:	RET

0000568C:	LD A,(DE)
0000568D:	CP 20h	; ' '
0000568F:	INC DE
00005690:	JR Z,-06h
00005692:	RET

00005693:	LD A,(A5DBh)		; data type, aka PRCSON
00005696:	CP 02h			; integer type ?
00005698:	JP Z,5738h
0000569B:	LD A,(HL)
0000569C:	OR A
0000569D:	JR Z,+04h
0000569F:	INC HL
000056A0:	LD A,(HL)
000056A1:	DEC HL
000056A2:	RLCA
000056A3:	LD A,20h
000056A5:	JR NC,+05h		; PLUS:
000056A7:	CALL 9A13h		; TOGLE:  toggle number sign
000056AA:	LD A,2Dh		; "-"
; PLUS:
000056AC:	PUSH AF
000056AD:	CALL 58BDh		; CVASF1:
000056B0:	CALL 597Bh		; ADJDG2:
000056B3:	POP AF
000056B4:	DEC DE
000056B5:	LD (DE),A
000056B6:	RET

; CMP2:
000056B7:	PUSH BC
000056B8:	CALL 9C39h		; CMP:
000056BB:	POP BC
000056BC:	RET

; EXPASC:
000056BD:	LD HL,(A5F4h)	; HLBUF2
000056C0:	LD B,00h
000056C2:	LD DE,5C55h		; FLTEN
000056C5:	CALL 56B7h		; CMP2:
000056C8:	JR C,+06h
000056CA:	CALL 5662h		; DIVTEN:
000056CD:	INC B
000056CE:	JR -0Eh
000056D0:	LD DE,5C5Dh		; FLONE
000056D3:	CALL 56B7h		; CMP2:
000056D6:	JR NC,+06h
000056D8:	CALL 5B98h		; MULTEN:
000056DB:	DEC B
000056DC:	JR -0Eh
000056DE:	PUSH BC
000056DF:	CALL 58BDh		; CVASF1:
000056E2:	CALL 597Eh		; ADJDGT:
000056E5:	POP BC
000056E6:	PUSH DE
000056E7:	EX DE,HL
000056E8:	LD A,(HL)
000056E9:	OR A
000056EA:	JR Z,+03h
000056EC:	INC HL
000056ED:	JR -07h
000056EF:	DEC HL
000056F0:	LD A,(HL)
000056F1:	INC HL
000056F2:	CP 30h
000056F4:	JR NZ,+02h
000056F6:	INC B
000056F7:	DEC HL
000056F8:	LD A,(A5DBh)		; data type, aka PRCSON
000056FB:	CP 08h		; double precision type ?
000056FD:	LD A,44h
000056FF:	JR Z,+01h
00005701:	INC A
00005702:	LD (HL),A
00005703:	INC HL
00005704:	LD A,B
00005705:	LD B,2Bh
00005707:	BIT 7,A
00005709:	JR Z,+04h
0000570B:	NEG
0000570D:	LD B,2Dh
0000570F:	LD (HL),B
00005710:	INC HL
00005711:	LD (HL),30h	; '0'
00005713:	SUB 0Ah
00005715:	JR C,+03h
00005717:	INC (HL)
00005718:	JR -07h
0000571A:	ADD 3Ah	; '9'+1
0000571C:	INC HL
0000571D:	LD (HL),A
0000571E:	INC HL
0000571F:	LD (HL),00h
00005721:	POP DE
00005722:	RET

00005723:	PUSH HL
00005724:	LD E,(HL)
00005725:	INC HL
00005726:	LD D,(HL)
00005727:	EX DE,HL
00005728:	CALL 572Dh
0000572B:	POP HL
0000572C:	RET

0000572D:	LD DE,A59Ch		; DGBF00
00005730:	PUSH DE
00005731:	CALL 5C7Ah
00005734:	POP DE
00005735:	JP 59F6h
00005738:	PUSH HL
00005739:	LD E,(HL)
0000573A:	INC HL
0000573B:	LD D,(HL)
0000573C:	BIT 7,D
0000573E:	LD A,20h
00005740:	JR Z,+09h
00005742:	LD HL,0000h
00005745:	OR A
00005746:	SBC HL,DE
00005748:	EX DE,HL
00005749:	LD A,2Dh
0000574B:	PUSH AF
0000574C:	EX DE,HL
0000574D:	CALL 572Dh
00005750:	DEC DE
00005751:	POP AF
00005752:	LD (DE),A
00005753:	POP HL
00005754:	RET

00005755:	PUSH HL
00005756:	CALL 5BAFh		; HLFLT
00005759:	LD DE,A5A7h
0000575C:	PUSH DE
0000575D:	CALL 5C7Ah
00005760:	POP HL
00005761:	LD A,30h
00005763:	LD B,05h
00005765:	CP (HL)
00005766:	JR NZ,+05h
00005768:	INC HL
00005769:	DJNZ -06h
0000576B:	JR +09h
0000576D:	LD A,B
0000576E:	LD (A5F7h),A	; DGITCO
00005771:	LD A,01h
00005773:	LD (A5F8h),A	; DGITFG
00005776:	LD A,2Eh		; '.'
00005778:	LD (A5ACh),A	; DGBF16
0000577B:	POP HL
0000577C:	CALL 5B60h		; ATN:
0000577F:	JP 593Dh

; USNGCV:
00005782:	OR A
00005783:	JP Z,5814h		; USGCV2:
00005786:	PUSH DE
00005787:	LD A,(HL)
00005788:	OR A
00005789:	JR Z,+3Fh
0000578B:	PUSH HL
0000578C:	LD A,D
0000578D:	LD DE,A5E4h		; ZFAC1
00005790:	PUSH AF
00005791:	CALL 53E7h		; LDIR1: (DE) = (FLONE), 8 bytes
00005794:	POP AF
00005795:	OR A
00005796:	JR Z,+0Bh
00005798:	LD B,A
00005799:	LD HL,A5E4h		; ZFAC1
0000579C:	JR +03h
0000579E:	CALL 5B98h		; MULTEN:
000057A1:	DJNZ -05h
000057A3:	POP HL
000057A4:	LD B,00h
000057A6:	LD DE,A5E4h		; ZFAC1
000057A9:	CALL 56B7h		; CMP2:
000057AC:	JR C,+06h
000057AE:	CALL 5662h		; DIVTEN:
000057B1:	INC B
000057B2:	JR -0Eh
000057B4:	PUSH HL
000057B5:	LD HL,A5E4h		; ZFAC1
000057B8:	CALL 5662h		; DIVTEN:
000057BB:	POP HL
000057BC:	LD DE,A5E4h		; ZFAC1
000057BF:	CALL 56B7h		; CMP2:
000057C2:	JR NC,+06h
000057C4:	CALL 5B98h		; MULTEN:
000057C7:	DEC B
000057C8:	JR -0Eh
000057CA:	POP DE
000057CB:	LD A,(A5DBh)		; data type, aka PRCSON
000057CE:	PUSH BC
000057CF:	PUSH AF
000057D0:	CALL 582Eh			; USGCV1:
000057D3:	POP AF
000057D4:	EX AF,AF'
000057D5:	POP BC
000057D6:	PUSH DE
000057D7:	LD A,(DE)
000057D8:	CP 2Eh	; '.'
000057DA:	JR NZ,+12h
000057DC:	LD DE,A5ACh		; DGBF16
000057DF:	DEC DE
000057E0:	LD A,(DE)
000057E1:	CP 31h
000057E3:	POP DE
000057E4:	PUSH DE
000057E5:	JR NZ,+23h
000057E7:	EX DE,HL
000057E8:	INC HL
000057E9:	LD (HL),31h
000057EB:	DEC HL
000057EC:	JR +1Ah
000057EE:	LD A,(DE)
000057EF:	CP 31h
000057F1:	JR NZ,+17h
000057F3:	EX DE,HL
000057F4:	INC HL
000057F5:	LD A,(HL)
000057F6:	DEC HL
000057F7:	CP 2Eh	; '.'
000057F9:	LD A,30h
000057FB:	JR Z,+02h
000057FD:	LD A,20h
000057FF:	LD (HL),A
00005800:	INC HL
00005801:	LD A,(HL)
00005802:	CP 2Eh	; '.'
00005804:	JR Z,-06h
00005806:	LD (HL),31h
00005808:	EX DE,HL
00005809:	INC B
0000580A:	LD A,(DE)
0000580B:	INC DE
0000580C:	OR A
0000580D:	JR NZ,-05h
0000580F:	DEC DE
00005810:	EX AF,AF'
00005811:	JP 56FBh

; USGCV2:
00005814:	PUSH DE
00005815:	CALL 582Eh		; USGCV1:
00005818:	POP AF
00005819:	OR A
0000581A:	RET NZ
0000581B:	PUSH HL
0000581C:	LD HL,A5ACh		; DGBF16
0000581F:	DEC HL
00005820:	LD A,30h		; "0"
00005822:	CP (HL)
; FOVVXC:
00005823:	JP NZ,53AFh		; ERROR: 'Format over'
00005826:	DEC HL
00005827:	LD A,20h		; " "
00005829:	CP (HL)
0000582A:	JR NZ,-09h		; FOVVXC:
0000582C:	POP HL
0000582D:	RET

; USGCV1:
0000582E:	PUSH DE
0000582F:	CALL 5419h		; 'CDBL'
00005832:	CALL 58BDh		; CVASF1:
00005835:	JP C,53AFh		; ERROR: 'Format over'
00005838:	POP HL
00005839:	PUSH HL
0000583A:	LD H,00h
0000583C:	INC L
0000583D:	JR Z,+01h
0000583F:	DEC L
00005840:	LD DE,A5ADh
00005843:	ADD HL,DE
00005844:	LD A,(HL)
; FRCASU:
00005845:	LD (HL),00h
00005847:	LD DE,3036h
0000584A:	CP 35h
0000584C:	JR C,+0Fh
0000584E:	DEC HL
0000584F:	LD A,(HL)
00005850:	CP 2Eh	; '.'
00005852:	JR Z,-06h
00005854:	INC A
00005855:	JP Z,53AFh		; ERROR: 'Format over'
00005858:	LD (HL),A
00005859:	CP 3Ah			; ':'
0000585B:	JR Z,-15h		; FRCASU
0000585D:	LD HL,A73Fh		; KEYBM1 (aka KEYBUF)
00005860:	LD DE,2000h
00005863:	LD (HL),D
00005864:	INC HL
00005865:	DEC E
00005866:	JR NZ,-05h
00005868:	POP HL
00005869:	PUSH HL
0000586A:	LD E,H
0000586B:	LD D,00h
0000586D:	LD HL,A73Fh		; KEYBM1 (aka KEYBUF)
00005870:	ADD HL,DE
00005871:	PUSH HL
00005872:	LD HL,A59Bh
00005875:	LD (HL),20h		; " "
00005877:	INC HL
00005878:	LD D,0Fh
0000587A:	LD A,(HL)
0000587B:	CP 30h			; "0"
0000587D:	JR NZ,+06h
0000587F:	LD (HL),20h		; " "
00005881:	INC HL
00005882:	DEC D
00005883:	JR NZ,-0Bh
00005885:	POP HL
00005886:	PUSH HL
00005887:	LD B,E
00005888:	LD A,B
00005889:	OR A
0000588A:	JR Z,+17h
0000588C:	LD DE,A5ACh		; DGBF16
0000588F:	DEC HL
00005890:	DEC DE
00005891:	LD A,(DE)
00005892:	LD (HL),A
00005893:	CP 20h	; ' '
00005895:	JR Z,+0Ch
00005897:	DJNZ -0Ah
00005899:	DEC DE
0000589A:	LD A,(DE)
0000589B:	CP 20h	; ' '
0000589D:	JR Z,+04h
0000589F:	INC A
000058A0:	JP NZ,53AFh		; ERROR: 'Format over'
000058A3:	POP HL
000058A4:	POP DE
000058A5:	INC E
000058A6:	JR Z,+0Fh
000058A8:	LD B,E
000058A9:	LD DE,A5ADh
000058AC:	LD (HL),2Eh
000058AE:	INC HL
000058AF:	DEC B
000058B0:	JR Z,+05h
000058B2:	LD A,(DE)
000058B3:	INC DE
000058B4:	LD (HL),A
000058B5:	JR -09h
000058B7:	LD (HL),00h
000058B9:	LD DE,A73Fh		; KEYBM1 (aka KEYBUF)
000058BC:	RET

; CVASF1:
000058BD:	LD (A5F4h),HL	; HLBUF2
000058C0:	XOR A
000058C1:	LD (A5F7h),A	; DGITCO
000058C4:	LD (A5F8h),A	; DGITFG
000058C7:	LD B,31h
000058C9:	PUSH HL
000058CA:	LD HL,A59Bh	
000058CD:	LD (HL),FFh
000058CF:	LD A,30h
000058D1:	INC HL
000058D2:	LD (HL),A
000058D3:	DJNZ -04h
000058D5:	LD A,2Eh			; '.'
000058D7:	LD (A5ACh),A		; DGBF16
000058DA:	POP HL
000058DB:	LD A,(HL)
000058DC:	OR A
000058DD:	RET Z
000058DE:	LD A,(A5DBh)		; data type, aka PRCSON
000058E1:	CP 08h		; double precision type ?
000058E3:	JR Z,+16h
000058E5:	LD DE,5C1Dh
000058E8:	CALL 9C39h		; CMP:
000058EB:	CCF
000058EC:	RET C
000058ED:	LD DE,5C75h
000058F0:	CALL 9C39h		; CMP:
000058F3:	RET C
000058F4:	LD A,FFh
000058F6:	LD (A5A3h),A
000058F9:	JR +14h
000058FB:	LD DE,5BDDh
000058FE:	CALL 9C39h		; CMP:
00005901:	CCF
00005902:	RET C
00005903:	LD DE,5C6Dh
00005906:	CALL 9C39h		; CMP:
00005909:	RET C
0000590A:	LD A,FFh
0000590C:	LD (A59Bh),A
0000590F:	LD DE,A5E4h		; ZFAC1
00005912:	PUSH DE
00005913:	CALL 53EAh		; LDIR5: (DE) = (HL), 8 bytes
00005916:	POP HL
00005917:	LD A,(HL)
00005918:	CP 81h
0000591A:	JR C,+21h
0000591C:	CP 90h
0000591E:	JP C,5755h
00005921:	LD IX,A59Ch		; DGBF00
00005925:	LD A,(A5DBh)		; data type, aka PRCSON
00005928:	CP 08h		; double precision type ?
0000592A:	JR Z,+04h
0000592C:	LD IX,A5A4h		; DGBF08
00005930:	LD DE,5BE5h		; SNGMXP
00005933:	CALL 5A36h
00005936:	CALL 5A44h		; GENDGT:
00005939:	CALL 5A76h		; IS_GEND:  (aka GEND?)
0000593C:	RET NC
0000593D:	LD IX,A5ADh
00005941:	LD DE,5BDDh
00005944:	CALL 5A36h
00005947:	PUSH BC
00005948:	PUSH IX
0000594A:	CALL 9FF5h		; MUL:
0000594D:	POP IX
0000594F:	POP BC
00005950:	CALL 53DFh
00005953:	CALL 5A44h		; GENDGT:
00005956:	CALL 5A76h		; IS_GEND:  (aka GEND?)
00005959:	JR C,-1Ah
0000595B:	RET

0000595C:	LD A,(A5DBh)		; data type, aka PRCSON
0000595F:	CP 02h			; integer type ?
00005961:	JP Z,5723h
00005964:	PUSH HL
00005965:	LD DE,A5ECh
00005968:	PUSH DE
00005969:	CALL 53EAh		; LDIR5: (DE) = (HL), 8 bytes
0000596C:	POP HL
0000596D:	CALL 58BDh		; CVASF1:
00005970:	CALL 597Bh		; ADJDG2:
00005973:	POP HL
00005974:	RET

00005975:	LD DE,A5ACh		; DGBF16
00005978:	LD (DE),A
00005979:	DEC DE
0000597A:	RET

; ADJDG2:
0000597B:	JP C,56BDh		; EXPASC:
; ADJDGT:
0000597E:	LD HL,(A5F4h)	; HLBUF2
00005981:	LD A,(HL)
00005982:	OR A
00005983:	JR Z,-10h
00005985:	CALL 5A05h		; MAXNO:
00005988:	DEC DE
00005989:	EX DE,HL
0000598A:	LD DE,0001h
0000598D:	INC HL
0000598E:	LD A,(HL)
0000598F:	CP 2Eh	; '.'
00005991:	JR NZ,+05h		; TST30H:
00005993:	LD DE,0000h
00005996:	JR -0Bh
; TST30H:
00005998:	CP 30h		; '0'
0000599A:	JR Z,-0Fh
0000599C:	ADD HL,DE
0000599D:	LD A,(A5DBh)		; data type, aka PRCSON
000059A0:	CP 08h		; double precision type ?
000059A2:	LD DE,0008h
000059A5:	JR NZ,+03h
000059A7:	LD DE,0010h
000059AA:	ADD HL,DE		; {LDIR5:} move on the next 8 bytes in the number queue (HL ptr)
000059AB:	LD A,(HL)
000059AC:	LD (HL),30h		; "0"
000059AE:	CP 35h
000059B0:	JR C,+0Fh
000059B2:	DEC HL
000059B3:	LD A,(HL)
000059B4:	CP 2Eh	; '.'
000059B6:	JR Z,-06h
000059B8:	INC A
000059B9:	JR Z,+57h
000059BB:	LD (HL),A
000059BC:	CP 3Ah	; ':'
000059BE:	JR Z,-14h
000059C0:	INC HL
000059C1:	LD DE,A5ACh		; DGBF16
000059C4:	EX DE,HL
000059C5:	OR A
000059C6:	SBC HL,DE
000059C8:	EX DE,HL
000059C9:	JR C,+05h
000059CB:	LD HL,A5ACh		; DGBF16
000059CE:	JR +21h
000059D0:	DEC HL
000059D1:	LD A,(HL)
000059D2:	CP 2Eh	; '.'
000059D4:	DEC HL
000059D5:	JR Z,+19h		; INTDIS:
000059D7:	INC HL
000059D8:	CP 30h
000059DA:	JR Z,-1Bh
000059DC:	PUSH HL
000059DD:	LD A,(A5DBh)		; data type, aka PRCSON
000059E0:	LD DE,A5BDh		; like DGBF25, for double precision
000059E3:	CP 05h			; Single precision type ?
000059E5:	JR NZ,+03h
000059E7:	LD DE,A5B5h		; DGBF25
000059EA:	SBC HL,DE
000059EC:	POP HL
000059ED:	JP NC,56BDh		; EXPASC:
; INTDIS:
000059F0:	INC HL
000059F1:	LD (HL),00h
000059F3:	CALL 5A05h		; MAXNO:
000059F6:	LD A,(DE)
000059F7:	CP 30h
000059F9:	JR NZ,+03h
000059FB:	INC DE
000059FC:	JR -08h
000059FE:	OR A
000059FF:	RET NZ
00005A00:	DEC DE
00005A01:	LD A,30h		; "0"
00005A03:	LD (DE),A
00005A04:	RET

; MAXNO:
00005A05:	LD A,(A5DBh)		; data type, aka PRCSON
00005A08:	LD DE,A59Ch		; DGBF00
00005A0B:	CP 08h		; double precision type ?
00005A0D:	RET Z
00005A0E:	LD DE,A5A4h		; DGBF08
00005A11:	RET

00005A12:	LD HL,A59Ch		; DGBF00
00005A15:	LD (HL),31h
00005A17:	INC HL
00005A18:	LD (HL),44h
00005A1A:	LD DE,3136h
00005A1D:	LD A,(A5DBh)		; data type, aka PRCSON
00005A20:	CP 08h		; double precision type ?
00005A22:	JR Z,+04h
00005A24:	INC (HL)
00005A25:	LD DE,3038h
00005A28:	INC HL
00005A29:	LD (HL),2Bh
00005A2B:	INC HL
00005A2C:	LD (HL),D
00005A2D:	INC HL
00005A2E:	LD (HL),E
00005A2F:	INC HL
00005A30:	LD (HL),00h
00005A32:	LD DE,A59Ch		; DGBF00
00005A35:	RET

00005A36:	LD A,(A5DBh)		; data type, aka PRCSON
00005A39:	CP 08h		; double precision type ?
00005A3B:	RET Z
00005A3C:	PUSH HL
00005A3D:	LD HL,0040h
00005A40:	ADD HL,DE
00005A41:	EX DE,HL
00005A42:	POP HL
00005A43:	RET

; GENDGT:
00005A44:	LD A,(DE)
00005A45:	CP 7Dh
00005A47:	RET Z
00005A48:	CALL 9C39h		; CMP:
00005A4B:	JR C,+13h
00005A4D:	INC (IX+00h)
00005A50:	PUSH IX
00005A52:	PUSH BC
00005A53:	CALL 9A3Bh		; SUB:
00005A56:	POP BC
00005A57:	POP IX
00005A59:	LD A,01h
00005A5B:	LD (A5F8h),A	; DGITFG
00005A5E:	JR -18h

00005A60:	INC IX
00005A62:	CALL 53DFh
00005A65:	LD A,(A5F8h)	; DGITFG
00005A68:	LD B,A
00005A69:	LD A,(A5F7h)	; DGITCO
00005A6C:	ADD B
00005A6D:	LD (A5F7h),A	; DGITCO
00005A70:	CALL 5A76h		; IS_GEND:  (aka GEND?)
00005A73:	RET NC
00005A74:	JR -32h

; IS_GEND:  (aka GEND?)
00005A76:	LD A,(HL)
00005A77:	OR A
00005A78:	RET Z
00005A79:	LD A,(A5DBh)		; data type, aka PRCSON
00005A7C:	CP 08h		; double precision type ?
00005A7E:	LD A,(A5F7h)	; DGITCO
00005A81:	JR Z,+03h
00005A83:	CP 09h
00005A85:	RET

00005A86:	CP 11h
00005A88:	RET

00005A89:	CALL 9A09h		; CLRFAC: Set FP accumulator to 0
00005A8C:	POP DE
00005A8D:	POP HL
00005A8E:	POP BC
00005A8F:	RET

; 'CINT'
00005A90:	CALL 9A32h		; STROMT:  Get argument, on exit: A=data type
00005A93:	CP 02h			; Integer type?
00005A95:	RET Z
00005A96:	INC (HL)
00005A97:	JP Z,205Ah		; ERROR: Overflow
00005A9A:	INC HL
00005A9B:	LD A,(HL)
00005A9C:	DEC HL
00005A9D:	AND 80h
00005A9F:	PUSH DE
00005AA0:	LD DE,5C5Dh		; FLONE
00005AA3:	PUSH BC
00005AA4:	JR NZ,+05h
00005AA6:	CALL 9A44h		; ADD:
00005AA9:	JR +03h
00005AAB:	CALL 9A3Bh		; SUB:
00005AAE:	POP BC
00005AAF:	LD A,(HL)
00005AB0:	OR A
00005AB1:	JR Z,+17h
00005AB3:	DEC (HL)
00005AB4:	CALL 5ACEh
00005AB7:	PUSH HL
00005AB8:	CALL 5BAFh		; HLFLT
00005ABB:	EX DE,HL
00005ABC:	POP HL
00005ABD:	LD (HL),E
00005ABE:	INC HL
00005ABF:	LD (HL),D
00005AC0:	OR 01h
00005AC2:	DEC HL
00005AC3:	POP DE
00005AC4:	LD A,02h			; integer type
00005AC6:	LD (A5DBh),A		; data type, aka PRCSON
00005AC9:	RET

00005ACA:	INC HL
00005ACB:	LD (HL),A
00005ACC:	JR -0Ch

00005ACE:	PUSH BC
00005ACF:	PUSH HL
00005AD0:	PUSH DE
00005AD1:	LD A,(HL)
00005AD2:	CP 81h
00005AD4:	JR C,-4Dh
00005AD6:	LD A,(A5DBh)		; data type, aka PRCSON
00005AD9:	BIT 3,A
00005ADB:	LD A,(HL)
00005ADC:	JR NZ,+2Eh
00005ADE:	CP A0h
00005AE0:	JR NC,-56h
00005AE2:	INC HL
00005AE3:	CALL 5B59h			; Load EDC from (HL)
00005AE6:	PUSH HL
00005AE7:	LD L,(HL)
00005AE8:	LD B,00h
00005AEA:	SRL E
00005AEC:	RR D
00005AEE:	RR C
00005AF0:	RR L
00005AF2:	INC A
00005AF3:	INC B
00005AF4:	CP A0h
00005AF6:	JR NZ,-0Eh
00005AF8:	SLA L
00005AFA:	RL C
00005AFC:	RL D
00005AFE:	RL E
00005B00:	DJNZ -0Ah
00005B02:	LD A,L
00005B03:	POP HL
00005B04:	LD (HL),A
00005B05:	DEC HL
00005B06:	CALL 5B53h			; Write EDC to (HL)
00005B09:	JP 5A8Ch

00005B0C:	CP B8h			; Token for 'CONSOLE'
00005B0E:	JP NC,5A8Ch
00005B11:	INC HL
00005B12:	CALL 5B59h			; Load EDC from (HL)
00005B15:	PUSH HL
00005B16:	EXX
00005B17:	POP HL
00005B18:	CALL 5B59h			; Load EDC from (HL)
00005B1B:	LD B,(HL)
00005B1C:	EXX
00005B1D:	LD B,00h
00005B1F:	SRL E
00005B21:	RR D
00005B23:	RR C
00005B25:	EXX
00005B26:	RR E
00005B28:	RR D
00005B2A:	RR C
00005B2C:	RR B
00005B2E:	EXX
00005B2F:	INC B
00005B30:	INC A
00005B31:	CP B8h
00005B33:	JR NZ,-16h
00005B35:	EXX
00005B36:	SLA B
00005B38:	RL C
00005B3A:	RL D
00005B3C:	RL E
00005B3E:	EXX
00005B3F:	RL C
00005B41:	RL D
00005B43:	RL E
00005B45:	DJNZ -12h
00005B47:	EXX
00005B48:	LD (HL),B
00005B49:	DEC HL
00005B4A:	CALL 5B53h			; Write EDC to (HL)
00005B4D:	DEC HL
00005B4E:	PUSH HL
00005B4F:	EXX
00005B50:	POP HL
00005B51:	JR -4Dh

; Write EDC to (HL)
00005B53:	LD (HL),C
00005B54:	DEC HL
00005B55:	LD (HL),D
00005B56:	DEC HL
00005B57:	LD (HL),E
00005B58:	RET

; Load EDC from (HL)
00005B59:	LD E,(HL)
00005B5A:	INC HL
00005B5B:	LD D,(HL)
00005B5C:	INC HL
00005B5D:	LD C,(HL)
00005B5E:	INC HL
00005B5F:	RET

; ATN:
00005B60:	LD A,(A5DBh)		; data type, aka PRCSON
00005B63:	CP 02h			; integer type ?
00005B65:	JP Z,9A09h		; CLRFAC: Set FP accumulator to 0
00005B68:	LD A,(HL)
00005B69:	OR A
00005B6A:	RET Z
00005B6B:	INC HL
00005B6C:	LD A,(HL)
00005B6D:	RES 7,(HL)
00005B6F:	DEC HL
00005B70:	PUSH AF
00005B71:	CALL 5B7Ah		; ATN2:
00005B74:	POP AF
00005B75:	RLCA
00005B76:	RET NC
00005B77:	JP 9A13h		; TOGLE:  toggle number sign

; ATN2:
00005B7A:	PUSH BC
00005B7B:	PUSH HL
00005B7C:	PUSH DE
00005B7D:	LD A,(HL)
00005B7E:	CP 81h			; compare to '1'
00005B80:	JP C,5A8Ch
00005B83:	LD DE,A5DCh		; ZFAC1
00005B86:	PUSH HL
00005B87:	CALL 53EAh		; LDIR5: (DE) = (HL), 8 bytes
00005B8A:	LD HL,A5DCh		; ZFAC1
00005B8D:	CALL 5ACEh
00005B90:	POP DE
00005B91:	EX DE,HL
00005B92:	CALL 9A3Bh		; SUB:
00005B95:	JP 5A8Ch

; MULTEN:
00005B98:	PUSH AF
00005B99:	PUSH BC
00005B9A:	PUSH DE
00005B9B:	LD DE,5C55h		; FLTEN
00005B9E:	CALL 9FF5h		; MUL:
00005BA1:	POP DE
00005BA2:	POP BC
00005BA3:	POP AF
00005BA4:	RET

00005BA5:	LD A,(HL)
00005BA6:	CP 91h
00005BA8:	JR C,+05h
00005BAA:	CCF
00005BAB:	LD HL,0000h
00005BAE:	RET

; HLFLT
00005BAF:	INC HL
00005BB0:	BIT 7,(HL)
00005BB2:	JR Z,+0Bh
00005BB4:	CALL 5BBFh
00005BB7:	LD A,H
00005BB8:	CPL
00005BB9:	LD H,A
00005BBA:	LD A,L
00005BBB:	CPL
00005BBC:	LD L,A
00005BBD:	INC HL
00005BBE:	RET

00005BBF:	DEC HL
00005BC0:	LD A,(HL)
00005BC1:	CP 91h
00005BC3:	JP NC,205Ah		; ERROR: Overflow
00005BC6:	CP 81h
00005BC8:	JR C,-20h
00005BCA:	PUSH AF
00005BCB:	INC HL
00005BCC:	LD A,(HL)
00005BCD:	INC HL
00005BCE:	LD L,(HL)
00005BCF:	LD H,A
00005BD0:	POP AF
00005BD1:	SET 7,H
00005BD3:	CP 90h
00005BD5:	RET Z
00005BD6:	INC A
00005BD7:	SRL H
00005BD9:	RR L
00005BDB:	JR -0Ah

00005BDD:	OR (HL)
00005BDE:	LD C,1Bh
00005BE0:	RET

00005BE1:	CP A
00005BE2:	INC B
00005BE3:	NOP
00005BE4:	NOP
; SNGMXP
00005BE5:	OR D
00005BE6:	LD H,E
00005BE7:	LD E,A
00005BE8:	XOR C
00005BE9:	LD SP,00A0h
00005BEC:	NOP
00005BED:	XOR A
00005BEE:	DEC (HL)
00005BEF:	AND 20h	; ' '
00005BF1:	CALL P,0080h
00005BF4:	NOP
00005BF5:	XOR H
00005BF6:	LD DE,E784h
00005BF9:	LD HL,(0000h)
00005BFC:	NOP
00005BFD:	XOR B
00005BFE:	LD L,B
00005BFF:	CALL NC,10A5h
00005C02:	NOP
00005C03:	NOP
00005C04:	NOP
00005C05:	AND L
00005C06:	LD A,(B743h)
00005C09:	LD B,B
00005C0A:	NOP
00005C0B:	NOP
00005C0C:	NOP
00005C0D:	AND D
00005C0E:	DEC D
00005C0F:	LD (BC),A
00005C10:	LD SP,HL
00005C11:	NOP
00005C12:	NOP
00005C13:	NOP
00005C14:	NOP
00005C15:	SBC (HL)
00005C16:	LD L,(HL)
00005C17:	LD L,E
00005C18:	JR Z,+00h
00005C1A:	NOP
00005C1B:	NOP
00005C1C:	NOP
00005C1D:	SBC E
00005C1E:	LD A,BCh
00005C20:	JR NZ,+00h
00005C22:	NOP
00005C23:	NOP
00005C24:	NOP
00005C25:	SBC B
00005C26:	JR -6Ah
00005C28:	ADD B
00005C29:	NOP
00005C2A:	NOP
00005C2B:	NOP
00005C2C:	NOP
00005C2D:	SUB H
00005C2E:	LD (HL),H
00005C2F:	INC H
00005C30:	NOP
00005C31:	NOP
00005C32:	NOP
00005C33:	NOP
00005C34:	NOP
00005C35:	SUB C
00005C36:	LD B,E
00005C37:	LD D,B
00005C38:	NOP
00005C39:	NOP
00005C3A:	NOP
00005C3B:	NOP
00005C3C:	NOP
00005C3D:	ADC (HL)
00005C3E:	INC E
00005C3F:	LD B,B
00005C40:	NOP
00005C41:	NOP
00005C42:	NOP
00005C43:	NOP
00005C44:	NOP
00005C45:	ADC D
00005C46:	LD A,D
00005C47:	NOP
00005C48:	NOP
00005C49:	NOP
00005C4A:	NOP
00005C4B:	NOP
00005C4C:	NOP
00005C4D:	ADD A
00005C4E:	LD C,B
00005C4F:	NOP
00005C50:	NOP
00005C51:	NOP
00005C52:	NOP
00005C53:	NOP
00005C54:	NOP
; FLTEN
00005C55:	ADD H
00005C56:	JR NZ,+00h
00005C58:	NOP
00005C59:	NOP
00005C5A:	NOP
00005C5B:	NOP
00005C5C:	NOP
; FLONE
00005C5D:	ADD C
00005C5E:	NOP
00005C5F:	NOP
00005C60:	NOP
00005C61:	NOP
00005C62:	NOP
00005C63:	NOP
00005C64:	NOP
00005C65:	LD A,L
00005C66:	LD C,H
00005C67:	CALL Z,CCCCh
00005C6A:	CALL Z,CDCCh
00005C6D:	LD C,E
00005C6E:	LD H,(HL)
00005C6F:	SUB L
00005C70:	SUB H
00005C71:	CP (HL)
00005C72:	CALL NZ,E24Dh
00005C75:	LD H,(HL)
00005C76:	DEC HL
00005C77:	CALL Z,1277h

00005C7A:	PUSH HL
00005C7B:	PUSH DE
00005C7C:	PUSH BC
00005C7D:	LD C,00h
00005C7F:	PUSH DE
00005C80:	LD B,00h
00005C82:	LD DE,2710h
00005C85:	CALL 5CA6h
00005C88:	LD DE,03E8h
00005C8B:	CALL 5CA6h
00005C8E:	LD DE,0064h
00005C91:	CALL 5CA6h
00005C94:	LD DE,000Ah
00005C97:	CALL 5CA6h
00005C9A:	LD A,L
00005C9B:	POP DE
00005C9C:	OR 30h
00005C9E:	LD (DE),A
00005C9F:	INC DE
00005CA0:	XOR A
00005CA1:	LD (DE),A
00005CA2:	POP BC
00005CA3:	POP DE
00005CA4:	POP HL
00005CA5:	RET

00005CA6:	LD A,FFh
00005CA8:	INC A
00005CA9:	OR A
00005CAA:	SBC HL,DE
00005CAC:	JR NC,-06h
00005CAE:	ADD HL,DE
00005CAF:	OR A
00005CB0:	INC B
00005CB1:	OR 30h
00005CB3:	POP DE
00005CB4:	EX HL,(SP)
00005CB5:	LD (HL),A
00005CB6:	INC HL
00005CB7:	EX HL,(SP)
00005CB8:	PUSH DE
00005CB9:	INC C
00005CBA:	RET

; 'DEVI$'
00005CBB:	CALL 5D74h
00005CBE:	LD IY,(A62Bh)		; STRST
00005CC2:	PUSH HL
00005CC3:	PUSH IY
00005CC5:	POP HL
00005CC6:	LD BC,0010h
00005CC9:	ADD HL,BC
00005CCA:	LD BC,0100h
00005CCD:	LD (IY+01h),49h
00005CD1:	LD A,13h
00005CD3:	CALL 6822h
00005CD6:	LD (IY+00h),00h
00005CDA:	CALL 6B6Ch
00005CDD:	POP HL
00005CDE:	CALL 5D66h
00005CE1:	PUSH HL
00005CE2:	LD HL,(A62Fh)
00005CE5:	LD (HL),80h
00005CE7:	INC HL
00005CE8:	LD (HL),10h
00005CEA:	INC HL
00005CEB:	LD (HL),00h
00005CED:	DEC HL
00005CEE:	DEC HL
00005CEF:	CALL 16ABh		; STRDI2:
00005CF2:	POP HL
00005CF3:	CALL 8262h		; skip SPACEs in (HL), A=next char
00005CF6:	CALL 2E76h		; CH2CH: Check for comma ','
00005CF9:	CALL 5D66h
00005CFC:	PUSH HL
00005CFD:	LD HL,(A62Fh)
00005D00:	LD (HL),80h
00005D02:	INC HL
00005D03:	LD (HL),90h
00005D05:	INC HL
00005D06:	LD (HL),00h
00005D08:	DEC HL
00005D09:	DEC HL
00005D0A:	CALL 16ABh		; STRDI2:
00005D0D:	POP HL
00005D0E:	RET

; 'DEVO$'
00005D0F:	CALL 5D74h
00005D12:	PUSH DE
00005D13:	CALL 7FB9h		; STREXP:
00005D16:	PUSH HL
00005D17:	CP 80h
00005D19:	JP NZ,206Fh		; ERROR: Illegal function call
00005D1C:	LD HL,(A62Bh)		; STRST
00005D1F:	LD BC,0010h
00005D22:	ADD HL,BC
00005D23:	EX DE,HL
00005D24:	LD BC,0080h
00005D27:	LDIR
00005D29:	POP HL
00005D2A:	CALL 8262h		; skip SPACEs in (HL), A=next char
00005D2D:	CALL 2E76h		; CH2CH: Check for comma ','
00005D30:	CALL 7FB9h		; STREXP:
00005D33:	PUSH HL
00005D34:	CP 80h
00005D36:	JP NZ,206Fh		; ERROR: Illegal function call
00005D39:	LD HL,(A62Bh)		; STRST
00005D3C:	LD BC,0090h
00005D3F:	ADD HL,BC
00005D40:	EX DE,HL
00005D41:	LD BC,0080h
00005D44:	LDIR
00005D46:	POP HL
00005D47:	POP DE
00005D48:	PUSH HL
00005D49:	LD HL,(A62Bh)		; STRST
00005D4C:	PUSH HL
00005D4D:	POP IY
00005D4F:	LD (HL),41h
00005D51:	LD BC,0010h
00005D54:	ADD HL,BC
00005D55:	LD BC,0100h
00005D58:	LD A,14h
00005D5A:	CALL 6822h
00005D5D:	CALL 6B6Ch
00005D60:	POP HL
00005D61:	LD (IY+00h),00h
00005D65:	RET

00005D66:	CALL 8C2Eh		; INTGTV:  get variable
00005D69:	CP 03h			; is variable type 'string' ?
00005D6B:	JP NZ,2060h		; ERROR: Type mismatch
00005D6E:	LD (A5DBh),A		; data type, aka PRCSON
00005D71:	LD D,B
00005D72:	LD E,C
00005D73:	RET

; Parse arguments for DEVI$ and DEVO$
00005D74:	CALL 6702h
00005D77:	CALL 8262h		; skip SPACEs in (HL), A=next char
00005D7A:	CALL 2E76h		; CH2CH: Check for comma ','
00005D7D:	CALL 7FAAh		; IDEEXP: DE= (HL), A=next character to be parsed
00005D80:	JP 2E76h		; CH2CH: Check for comma ','

; 'LPOS'
00005D83:	CALL 5A90h		; 'CINT'
00005D86:	LD A,(131Bh)	; LPOS - line counter for Printer
00005D89:	JR +1Ah

; 'POS'
00005D8B:	CALL 5A90h		; 'CINT'
00005D8E:	LD A,(HL)
00005D8F:	OR A
00005D90:	JR Z,+10h		; if no parameter, then get X position for text console

00005D92:	CALL 6627h		; get file defined by stream number in A, out: IY=ptr
00005D95:	CALL 6652h		; in: DE=file offset, out: IY=file ptr
00005D98:	CALL 5DAAh		; Check if file (pointed by IY) is open
00005D9B:	LD A,0Bh
00005D9D:	CALL 6822h
00005DA0:	JR +03h

00005DA2:	LD A,(000Eh)	; CSRXY: X,Y text coordinates
00005DA5:	LD (HL),A
00005DA6:	INC HL
00005DA7:	LD (HL),00h
00005DA9:	RET

; Check if file (pointed by IY) is open
00005DAA:	LD A,(IY+00h)
00005DAD:	OR A
00005DAE:	RET NZ
00005DAF:	JP 6886h			; ERROR: File not open

; 'DEVF'
00005DB2:	PUSH HL
00005DB3:	CALL 7FC3h		; Load a string parameter
00005DB6:	CALL 6661h
00005DB9:	CALL 5DC7h
00005DBC:	POP HL
00005DBD:	LD (HL),C
00005DBE:	INC HL
00005DBF:	LD (HL),B
00005DC0:	DEC HL
00005DC1:	LD A,02h			; integer type
00005DC3:	LD (A5DBh),A		; data type, aka PRCSON
00005DC6:	RET

00005DC7:	LD HL,FF00h		; -256
00005DCA:	LD DE,000Eh
00005DCD:	LD A,01h
00005DCF:	CALL 7063h
00005DD2:	LD BC,8000h
00005DD5:	LD HL,FF00h		; -256
00005DD8:	LD A,(HL)
00005DD9:	OR A
00005DDA:	JR NZ,+01h
00005DDC:	INC C
00005DDD:	INC HL
00005DDE:	DJNZ -08h
00005DE0:	RET

00005DE1:	CALL 5A90h		; 'CINT'
00005DE4:	LD E,(HL)
00005DE5:	INC HL
00005DE6:	LD A,(HL)
00005DE7:	OR A
00005DE8:	JP NZ,688Fh			; ERROR: Bad file number
00005DEB:	LD A,E
00005DEC:	CALL 6636h			; check stream/file number in A, out: DE=offset
00005DEF:	JP Z,688Fh			; ERROR: Bad file number
00005DF2:	CALL 6652h		; in: DE=file offset, out: IY=file ptr
00005DF5:	EX DE,HL
00005DF6:	LD A,(IY+00h)
00005DF9:	OR A
00005DFA:	RET NZ
00005DFB:	JP 6886h			; ERROR: File not open

; 'FPOS'
00005DFE:	CALL 5DE1h
00005E01:	LD L,(IY+07h)
00005E04:	LD H,00h
00005E06:	ADD HL,HL
00005E07:	ADD HL,HL
00005E08:	ADD HL,HL
00005E09:	ADD HL,HL
00005E0A:	LD A,(IY+0Eh)
00005E0D:	AND 0Fh
00005E0F:	LD C,A
00005E10:	LD B,00h
00005E12:	ADD HL,BC
00005E13:	EX DE,HL
00005E14:	LD (HL),D
00005E15:	DEC HL
00005E16:	LD (HL),E
00005E17:	RET

; 'LOC'
00005E18:	CALL 5DE1h
00005E1B:	LD L,(IY+0Eh)
00005E1E:	LD H,(IY+0Fh)
00005E21:	JR -10h

; 'LOF'
00005E23:	CALL 5DE1h
00005E26:	PUSH DE
00005E27:	CALL 747Ch
00005E2A:	CALL 7264h
00005E2D:	LD A,(IY+0Ah)
00005E30:	SUB 80h
00005E32:	JR C,+06h
00005E34:	LD C,A
00005E35:	LD A,E
00005E36:	AND F0h
00005E38:	OR C
00005E39:	LD E,A
00005E3A:	POP HL
00005E3B:	JR -29h

; 'DEVICE'
00005E3D:	CALL 7FB9h		; STREXP:
00005E40:	PUSH HL
00005E41:	LD C,A
00005E42:	LD B,00h
00005E44:	EX DE,HL
00005E45:	ADD HL,BC
00005E46:	LD DE,7498h
00005E49:	LD B,C
00005E4A:	LD C,05h
00005E4C:	DEC HL
00005E4D:	LD A,(HL)
00005E4E:	CP 3Ah	; ':'
00005E50:	JR Z,+05h
00005E52:	DJNZ -08h
00005E54:	JP 206Fh		; ERROR: Illegal function call

;
00005E57:	DEC DE
00005E58:	LD (DE),A
00005E59:	DEC HL
00005E5A:	LD A,(HL)
00005E5B:	DEC C
00005E5C:	JR Z,+09h
00005E5E:	DJNZ -09h
00005E60:	LD A,20h
00005E62:	DEC DE
00005E63:	LD (DE),A
00005E64:	DEC C
00005E65:	JR NZ,-07h
00005E67:	POP HL
00005E68:	RET

; 'FIELD'
00005E69:	CP 23h	; '#'
00005E6B:	JR NZ,+01h
00005E6D:	INC HL
00005E6E:	CALL 7F95h		; IBYTE: load BASIC argument in A
00005E71:	CALL 6627h		; get file defined by stream number in A, out: IY=ptr
00005E74:	JP Z,689Bh			; ERROR: Bad file mode
00005E77:	PUSH HL
00005E78:	LD HL,0011h
00005E7B:	ADD HL,DE
00005E7C:	EX DE,HL
00005E7D:	POP HL
00005E7E:	LD BC,FFFFh
00005E81:	CALL 8262h		; skip SPACEs in (HL), A=next char
00005E84:	CALL 2E76h		; CH2CH: Check for comma ','
00005E87:	PUSH DE
00005E88:	PUSH BC
00005E89:	CALL 7F95h		; IBYTE: load BASIC argument in A
00005E8C:	PUSH DE
00005E8D:	CALL 5EC0h
00005E90:	CALL 8C2Eh		; INTGTV:  get variable
00005E93:	PUSH HL
00005E94:	CP 03h			; is variable type 'string' ?
00005E96:	JP NZ,2060h		; ERROR: Type mismatch
00005E99:	LD L,C
00005E9A:	LD H,B
00005E9B:	PUSH HL
00005E9C:	CALL 1713h
00005E9F:	POP IX
00005EA1:	POP HL
00005EA2:	EXX
00005EA3:	POP HL
00005EA4:	POP BC
00005EA5:	LD (IX+00h),L
00005EA8:	ADD HL,BC
00005EA9:	LD A,H
00005EAA:	DEC A
00005EAB:	JP Z,68A4h			; ERROR: FIELD overflow
00005EAE:	EX HL,(SP)
00005EAF:	PUSH HL
00005EB0:	ADD HL,BC
00005EB1:	LD (IX+01h),L
00005EB4:	LD (IX+02h),H
00005EB7:	EXX
00005EB8:	POP DE
00005EB9:	POP BC
00005EBA:	CALL 17A8h		; END2C: look for next parameter, Z if none
00005EBD:	RET Z
00005EBE:	JR -3Fh
00005EC0:	CALL 8262h		; skip SPACEs in (HL), A=next char
00005EC3:	CALL 53F8h
00005EC6:	CP 41h
00005EC8:	JR NZ,+09h
00005ECA:	INC HL
00005ECB:	LD A,(HL)
00005ECC:	CALL 53F8h
00005ECF:	CP 53h
00005ED1:	INC HL
00005ED2:	RET Z
00005ED3:	JP 2066h		; ERROR: Syntax error

00005ED6:	XOR A
00005ED7:	CALL 5EFDh
00005EDA:	PUSH IY
00005EDC:	EX HL,(SP)
00005EDD:	LD BC,0010h
00005EE0:	ADD HL,BC
00005EE1:	LD A,13h
00005EE3:	EX AF,AF'
00005EE4:	CALL 747Ch
00005EE7:	EX AF,AF'
00005EE8:	CALL 6822h
00005EEB:	POP HL
00005EEC:	RET

00005EED:	LD A,01h
00005EEF:	CALL 5EFDh
00005EF2:	PUSH IY
00005EF4:	EX HL,(SP)
00005EF5:	LD BC,0010h
00005EF8:	ADD HL,BC
00005EF9:	LD A,14h
00005EFB:	JR -1Ah
00005EFD:	LD (6007h),A
00005F00:	CALL 8262h		; skip SPACEs in (HL), A=next char
00005F03:	CP 23h	; '#'
00005F05:	JR NZ,+01h
00005F07:	INC HL
00005F08:	CALL 7F95h		; IBYTE: load BASIC argument in A
00005F0B:	CALL 6627h		; get file defined by stream number in A, out: IY=ptr
00005F0E:	JP Z,688Fh			; ERROR: Bad file number
00005F11:	PUSH DE
00005F12:	LD E,(IY+0Eh)
00005F15:	LD D,(IY+0Fh)
00005F18:	PUSH DE
00005F19:	INC DE
00005F1A:	CALL 17A8h		; END2C: look for next parameter, Z if none
00005F1D:	JR Z,+06h
00005F1F:	CALL 2E76h		; CH2CH: Check for comma ','
00005F22:	CALL 7FAAh		; IDEEXP: DE= (HL), A=next character to be parsed
00005F25:	POP BC
00005F26:	EX HL,(SP)
00005F27:	EX DE,HL
00005F28:	CALL 6652h		; in: DE=file offset, out: IY=file ptr
00005F2B:	LD A,(IY+01h)
00005F2E:	CP 52h
00005F30:	JP NZ,689Bh			; ERROR: Bad file mode
00005F33:	PUSH HL
00005F34:	LD A,L
00005F35:	AND F0h
00005F37:	LD L,A
00005F38:	LD A,C
00005F39:	AND F0h
00005F3B:	LD C,A
00005F3C:	OR A
00005F3D:	SBC HL,BC
00005F3F:	JP Z,5FE5h
00005F42:	CALL 747Ch
00005F45:	LD HL,FF00h		; -256
00005F48:	LD DE,000Eh
00005F4B:	LD A,01h
00005F4D:	CALL 7063h
00005F50:	LD DE,FF00h		; -256
00005F53:	LD A,(IY+0Ch)
00005F56:	OR A
00005F57:	JR Z,+10h
00005F59:	LD L,(IY+07h)
00005F5C:	LD H,00h
00005F5E:	ADD HL,DE
00005F5F:	LD C,(IY+0Ah)
00005F62:	LD A,(HL)
00005F63:	CP 80h
00005F65:	JP C,68B7h
00005F68:	LD (HL),C
00005F69:	LD A,(IY+04h)
00005F6C:	POP DE
00005F6D:	PUSH DE
00005F6E:	LD B,04h
00005F70:	RR D
00005F72:	RR E
00005F74:	DJNZ -06h
00005F76:	LD B,E
00005F77:	INC B
00005F78:	LD D,00h
00005F7A:	LD E,A
00005F7B:	LD HL,FF00h		; -256
00005F7E:	ADD HL,DE
00005F7F:	LD A,(HL)
00005F80:	CP 80h
00005F82:	JR NC,+38h
00005F84:	DJNZ -0Eh
00005F86:	PUSH AF
00005F87:	LD A,(IY+0Ch)
00005F8A:	OR A
00005F8B:	JR Z,+11h
00005F8D:	PUSH DE
00005F8E:	LD A,01h
00005F90:	LD DE,000Eh
00005F93:	LD HL,FF00h		; -256
00005F96:	CALL 705Dh
00005F99:	LD (IY+0Ch),00h
00005F9D:	POP DE
00005F9E:	POP AF
00005F9F:	LD (IY+07h),E
00005FA2:	LD (IY+0Ah),A
00005FA5:	POP HL
00005FA6:	LD (IY+0Eh),L
00005FA9:	LD (IY+0Fh),H
00005FAC:	LD A,L
00005FAD:	AND 0Fh
00005FAF:	LD C,A
00005FB0:	LD B,00h
00005FB2:	LD L,E
00005FB3:	LD H,B
00005FB4:	ADD HL,HL
00005FB5:	ADD HL,HL
00005FB6:	ADD HL,HL
00005FB7:	ADD HL,HL
00005FB8:	ADD HL,BC
00005FB9:	EX DE,HL
00005FBA:	POP HL
00005FBB:	RET

00005FBC:	DEC B
00005FBD:	JR Z,+0Fh
00005FBF:	EX DE,HL
00005FC0:	LD HL,FF00h		; -256
00005FC3:	PUSH BC
00005FC4:	CALL 7317h
00005FC7:	LD (DE),A
00005FC8:	CALL 6005h
00005FCB:	POP BC
00005FCC:	JR -56h
00005FCE:	SUB 80h
00005FD0:	POP BC
00005FD1:	PUSH BC
00005FD2:	LD B,A
00005FD3:	LD A,C
00005FD4:	AND 0Fh
00005FD6:	LD C,A
00005FD7:	LD A,B
00005FD8:	CP C
00005FD9:	LD A,(HL)
00005FDA:	JR NC,-56h
00005FDC:	LD A,C
00005FDD:	ADD 80h
00005FDF:	LD (HL),A
00005FE0:	CALL 6005h
00005FE3:	JR -5Fh
00005FE5:	LD A,(IY+0Ah)
00005FE8:	SUB 80h
00005FEA:	LD E,(IY+07h)
00005FED:	JR C,-4Ah
00005FEF:	POP HL
00005FF0:	PUSH HL
00005FF1:	LD H,A
00005FF2:	LD A,L
00005FF3:	AND 0Fh
00005FF5:	LD L,A
00005FF6:	LD A,H
00005FF7:	CP L
00005FF8:	JR NC,-55h
00005FFA:	LD A,L
00005FFB:	OR 80h
00005FFD:	CALL 6005h
00006000:	LD (IY+0Ah),A
00006003:	JR -60h
00006005:	EX AF,AF'
00006006:	LD A,00h
00006008:	OR A
00006009:	JP Z,6883h		; ERROR: Input past end
0000600C:	LD (IY+0Ch),01h
00006010:	EX AF,AF'
00006011:	RET

00006012:	LD A,(A5DBh)		; data type, aka PRCSON
00006015:	CP 03h			; string type?
00006017:	JP NZ,2060h		; ERROR: Type mismatch
0000601A:	CALL 7FC3h		; Load a string parameter
0000601D:	CALL 6661h
00006020:	CALL 6705h
00006023:	CALL 1396h
00006026:	XOR A
00006027:	LD (1480h),A	; FCB (DIRIMG)
0000602A:	RET

; 'ATTR$'
0000602B:	PUSH DE
0000602C:	CALL 8262h		; skip SPACEs in (HL), A=next char
0000602F:	CALL 8C01h
00006032:	CALL 7FDEh
00006035:	CALL 8C08h		; Check for ')'
00006038:	EX HL,(SP)
00006039:	PUSH HL
0000603A:	LD HL,(A62Bh)		; STRST
0000603D:	LD C,(HL)
0000603E:	INC HL
0000603F:	LD B,(HL)
00006040:	INC HL
00006041:	LD E,(HL)
00006042:	INC HL
00006043:	LD D,(HL)
00006044:	POP HL
00006045:	PUSH DE
00006046:	PUSH BC
00006047:	PUSH HL
00006048:	CALL 6012h
0000604B:	CALL 732Bh
0000604E:	CALL 681Ch
00006051:	JP Z,6889h			; ERROR: File not found
00006054:	LD A,(HL)
00006055:	LD HL,(3621h)		; TMPEND
00006058:	PUSH HL
00006059:	AND 60h
0000605B:	JR Z,+12h
0000605D:	BIT 5,A
0000605F:	JR Z,+02h
00006061:	LD (HL),52h
00006063:	BIT 6,A
00006065:	JR Z,+02h
00006067:	LD (HL),50h
00006069:	INC HL
0000606A:	LD (3621h),HL		; TMPEND
0000606D:	LD A,01h
0000606F:	POP HL
00006070:	LD DE,(A62Bh)		; STRST
00006074:	OR A
00006075:	SBC HL,DE
00006077:	EX DE,HL
00006078:	POP HL
00006079:	LD (HL),A
0000607A:	INC HL
0000607B:	LD (HL),E
0000607C:	INC HL
0000607D:	LD (HL),D
0000607E:	LD DE,0006h
00006081:	ADD HL,DE
00006082:	EX DE,HL
00006083:	LD HL,(A62Bh)		; STRST
00006086:	POP BC
00006087:	LD (HL),C
00006088:	INC HL
00006089:	LD (HL),B
0000608A:	INC HL
0000608B:	POP BC
0000608C:	LD (HL),C
0000608D:	INC HL
0000608E:	LD (HL),B
0000608F:	POP HL
00006090:	JP 8262h		; skip SPACEs in (HL), A=next char

; 'SET'
00006093:	CP 23h	; '#'
00006095:	JR Z,+42h		; 'SET #'
00006097:	CALL 7FD1h		; EXPR:
0000609A:	PUSH HL
0000609B:	EX DE,HL
0000609C:	CALL 6012h
0000609F:	POP HL
000060A0:	LD A,(HL)
000060A1:	CALL 2E76h		; CH2CH: Check for comma ','
000060A4:	CALL 7FB9h		; STREXP:
000060A7:	PUSH HL
000060A8:	OR A
000060A9:	LD HL,008Fh
000060AC:	JR Z,+12h
000060AE:	LD L,FFh
000060B0:	LD A,(DE)
000060B1:	CP 50h		; 'P'
000060B3:	JR NZ,+04h
000060B5:	SET 6,H
000060B7:	JR +07h
000060B9:	CP 52h		; 'R'
000060BB:	JP NZ,206Fh			; ERROR: Illegal function call
000060BE:	SET 5,H
000060C0:	PUSH HL
000060C1:	CALL 732Bh
000060C4:	CALL 681Ch
000060C7:	JP Z,6889h			; ERROR: File not found
000060CA:	POP BC
000060CB:	LD A,(HL)
000060CC:	AND C
000060CD:	OR B
000060CE:	LD (HL),A
000060CF:	LD HL,A73Fh		; KEYBM1 (aka KEYBUF)
000060D2:	LD A,01h
000060D4:	CALL 705Dh
000060D7:	POP HL
000060D8:	RET

; Entry for 'SET #'
000060D9:	INC HL
000060DA:	CALL 7F95h		; IBYTE: load BASIC argument in A
000060DD:	OR A
000060DE:	JP Z,688Fh			; ERROR: Bad file number
000060E1:	PUSH AF
000060E2:	LD A,(HL)
000060E3:	CALL 2E76h		; CH2CH: Check for comma ','
000060E6:	CALL 7FB9h		; STREXP:
000060E9:	OR A
000060EA:	LD BC,003Fh
000060ED:	JR Z,+0Eh
000060EF:	LD A,(DE)
000060F0:	CP 50h		; 'P'
000060F2:	LD B,80h
000060F4:	JR Z,+07h
000060F6:	CP 52h		; 'R'
000060F8:	LD B,40h
000060FA:	JP NZ,206Fh		; ERROR: Illegal function call
000060FD:	POP AF
000060FE:	PUSH BC
000060FF:	CALL 6627h		; get file defined by stream number in A, out: IY=ptr
00006102:	LD A,(IY+00h)
00006105:	POP BC
00006106:	AND C
00006107:	OR B
00006108:	LD (IY+00h),A
0000610B:	RET

0000610C:	INC HL
0000610D:	CALL 8262h		; skip SPACEs in (HL), A=next char

; 'KILL'
00006110:	JP Z,2069h			; ERROR: Missing operand
00006113:	CP 23h	; '#'
00006115:	JP NZ,612Eh
00006118:	INC HL
00006119:	CALL 7F95h		; IBYTE: load BASIC argument in A
0000611C:	CALL 6636h		; check stream/file number in A, out: DE=offset
0000611F:	CALL 6652h		; in: DE=file offset, out: IY=file ptr
00006122:	LD (IY+00h),00h
00006126:	CALL 8262h		; skip SPACEs in (HL), A=next char
00006129:	CP 2Ch	; ','
0000612B:	JR Z,-21h
0000612D:	RET
; no '#' specified
0000612E:	CALL 6702h
00006131:	PUSH HL
00006132:	LD A,03h
00006134:	CALL 6822h
00006137:	LD (IY+00h),00h
0000613B:	POP HL
0000613C:	RET

; 'SEARCH'
0000613D:	CALL 61AEh
00006140:	CALL 7FB9h		; STREXP:
00006143:	LD C,A
00006144:	PUSH HL
00006145:	LD HL,(A635h)		; TEXTST,  address of BASIC  program
00006148:	LD A,(0036h)	; BRKBUF
0000614B:	CP 03h
0000614D:	JP Z,1FCAh
00006150:	PUSH DE
00006151:	PUSH BC
00006152:	CALL 6183h
00006155:	POP BC
00006156:	POP DE
00006157:	JR Z,+28h
00006159:	CALL 6275h
0000615C:	JR Z,+23h
0000615E:	PUSH HL
0000615F:	LD HL,A73Fh		; KEYBM1 (aka KEYBUF)
00006162:	LD A,(HL)
00006163:	OR A
00006164:	JR Z,+18h
00006166:	CALL 1292h
00006169:	JR Z,+03h
0000616B:	INC HL
0000616C:	JR -0Ch
0000616E:	CALL 04A3h
00006171:	LD HL,A73Fh		; KEYBM1 (aka KEYBUF)
00006174:	LD A,(HL)
00006175:	OR A
00006176:	JR Z,+06h
00006178:	CALL 04C8h
0000617B:	INC HL
0000617C:	JR -0Ah
0000617E:	POP HL
0000617F:	JR -39h
00006181:	POP HL
00006182:	RET

00006183:	CALL 1773h		; LDDEMI:
00006186:	RET Z
00006187:	PUSH DE
00006188:	LD E,(HL)
00006189:	INC HL
0000618A:	LD D,(HL)
0000618B:	INC HL
0000618C:	PUSH HL
0000618D:	EX DE,HL
0000618E:	LD (3630h),HL	; EDLINE
00006191:	CALL 2139h
00006194:	LD HL,A73Fh		; KEYBM1 (aka KEYBUF)
00006197:	LD A,(DE)
00006198:	OR A
00006199:	JR Z,+05h
0000619B:	LD (HL),A
0000619C:	INC DE
0000619D:	INC HL
0000619E:	JR -09h
000061A0:	LD (HL),20h
000061A2:	INC HL
000061A3:	LD (HL),00h
000061A5:	EX DE,HL
000061A6:	POP HL
000061A7:	CALL 795Ch		; Parse next BASIC statement
000061AA:	POP HL
000061AB:	OR 01h
000061AD:	RET

000061AE:	CALL 3C22h
000061B1:	LD A,(0026h)	; COLORF
000061B4:	AND 3Fh
000061B6:	LD (0026h),A	; COLORF
000061B9:	XOR A
000061BA:	LD (53AAh),A	; CSIZE
000061BD:	RET

; 'LLIST'
000061BE:	LD DE,69E6h
000061C1:	JR +06h

; 'LIST'
000061C3:	CALL 61AEh
000061C6:	LD DE,693Ah
000061C9:	CALL 8262h		; skip SPACEs in (HL), A=next char
000061CC:	CP 22h	; '"'
000061CE:	JR Z,+15h
000061D0:	PUSH HL
000061D1:	LD IY,(A62Bh)		; STRST
000061D5:	LD (IY+00h),01h
000061D9:	LD (IY+01h),4Fh	; 'O'
000061DD:	LD (IY+02h),E
000061E0:	LD (IY+03h),D
000061E3:	JR +28h

000061E5:	CALL 6659h
000061E8:	CALL 17A8h		; END2C: look for next parameter, Z if none
000061EB:	CALL NZ,2E76h		; CH2CH: Check for comma ','
000061EE:	PUSH HL
000061EF:	LD A,04h
000061F1:	LD (1480h),A	; FCB (DIRIMG)
000061F4:	LD HL,0000h
000061F7:	LD (1494h),HL
000061FA:	LD (1492h),HL
000061FD:	LD (1496h),HL
00006200:	LD IY,(A62Bh)		; STRST
00006204:	LD (IY+00h),00h
00006208:	LD A,4Fh	; 'O'
0000620A:	CALL 65FBh
0000620D:	POP HL
0000620E:	CALL 3088h			; ; Get arguments for line number range (xxx-yyy), DE to BC.
00006211:	LD (6229h),DE		; LISTSN (self modifying code)
00006215:	LD (6237h),BC		; LISTEN (self modifying code)
00006219:	PUSH HL
0000621A:	LD HL,(A635h)		; TEXTST,  address of BASIC  program
0000621D:	CALL 1773h		; LDDEMI:
00006220:	JR Z,+6Dh
00006222:	PUSH DE
00006223:	LD E,(HL)
00006224:	INC HL
00006225:	LD D,(HL)
00006226:	INC HL
00006227:	PUSH HL
00006228:	LD HL,0000h		; 6229h = LISTSN (self modifying code)
0000622B:	OR A
0000622C:	SBC HL,DE
0000622E:	JR C,+06h
00006230:	JR Z,+04h
00006232:	POP HL
00006233:	POP HL
00006234:	JR -19h
00006236:	LD HL,FFFFh		; 6237h = LISTEN (self modifying code)
00006239:	OR A
0000623A:	SBC HL,DE
0000623C:	JR NC,+04h
0000623E:	POP HL
0000623F:	POP HL
00006240:	JR +4Dh

00006242:	POP HL
00006243:	EX DE,HL
00006244:	PUSH DE
00006245:	LD (3630h),HL	; EDLINE
00006248:	CALL 2139h
0000624B:	EI
0000624C:	CALL 629Dh
0000624F:	LD A,20h
00006251:	CALL 62AAh
00006254:	POP HL
00006255:	LD DE,A73Fh		; KEYBM1 (aka KEYBUF)
00006258:	PUSH IY
0000625A:	PUSH DE
0000625B:	CALL 795Ch		; Parse next BASIC statement
0000625E:	EI
0000625F:	POP DE
00006260:	POP IY
00006262:	CALL 629Dh
00006265:	CALL 62B0h
00006268:	POP HL
00006269:	CALL 6275h
0000626C:	JR NZ,-51h
0000626E:	CALL 6294h
00006271:	POP HL
00006272:	JP 1FCAh
00006275:	LD A,(0036h)	; BRKBUF
00006278:	CP 03h
0000627A:	EI
0000627B:	RET Z
0000627C:	CP 13h
0000627E:	RET NZ
0000627F:	XOR A
00006280:	LD (0036h),A	; BRKBUF
00006283:	LD (0EA6h),A	; POINT1
00006286:	LD (0EA7h),A	; POINT2
00006289:	INC A
0000628A:	CALL 001Bh
0000628D:	JR -17h

0000628F:	CALL 6294h
00006292:	POP HL
00006293:	RET

00006294:	LD IY,(A62Bh)		; STRST
00006298:	LD A,02h
0000629A:	JP 6822h

0000629D:	PUSH DE
0000629E:	LD A,(DE)
0000629F:	OR A
000062A0:	JR Z,+06h
000062A2:	CALL 62AAh
000062A5:	INC DE
000062A6:	JR -0Ah
000062A8:	POP DE
000062A9:	RET

000062AA:	EX AF,AF'
000062AB:	LD A,07h
000062AD:	JP 6822h

000062B0:	LD A,09h
000062B2:	JP 6822h

000062B5:	INC HL

; 'VERIFY'
000062B6:	CALL 6659h
000062B9:	XOR A
000062BA:	LD (1480h),A	; FCB (DIRIMG)
000062BD:	PUSH HL
000062BE:	LD IY,(A62Bh)		; STRST
000062C2:	LD (IY+00h),00h
000062C6:	LD A,49h
000062C8:	CALL 65FBh
000062CB:	LD A,(1480h)	; FCB (DIRIMG)
000062CE:	AND 0Fh
000062D0:	CP 04h
000062D2:	JR Z,+26h
000062D4:	LD HL,(1494h)
000062D7:	CP 02h
000062D9:	JR NZ,+06h
000062DB:	CALL 2FEFh			; REFLNO: ... Line ref = Number
000062DE:	LD HL,(A635h)		; TEXTST,  address of BASIC  program
000062E1:	LD BC,(1492h)
000062E5:	LD A,11h
000062E7:	CALL 6822h
000062EA:	JR NC,+07h
000062EC:	DEC A
000062ED:	JP Z,1FCAh
000062F0:	JP 689Eh		; ERROR: Tape read error

000062F3:	LD A,02h
000062F5:	CALL 6822h
000062F8:	POP HL
000062F9:	RET

000062FA:	LD A,0Ah
000062FC:	CALL 6822h
000062FF:	JR C,-0Eh
00006301:	LD A,05h
00006303:	CALL 6822h
00006306:	JR -0Eh

00006308:	INC HL
00006309:	CALL 6659h
0000630C:	CALL 17A8h		; END2C: look for next parameter, Z if none
0000630F:	JR Z,+17h
00006311:	CALL 2E76h		; CH2CH: Check for comma ','
00006314:	CALL 8262h		; skip SPACEs in (HL), A=next char
00006317:	CP 2Ch	; ','
00006319:	JR Z,+0Dh
0000631B:	PUSH BC
0000631C:	PUSH DE
0000631D:	CALL 7FAAh		; IDEEXP: DE= (HL), A=next character to be parsed
00006320:	LD (74C0h),DE
00006324:	POP DE
00006325:	POP BC
00006326:	OR 01h
00006328:	LD A,01h
0000632A:	LD (1480h),A	; FCB (DIRIMG)
0000632D:	PUSH HL
0000632E:	PUSH AF
0000632F:	LD IY,(A62Bh)		; STRST
00006333:	LD (IY+00h),00h
00006337:	LD A,49h
00006339:	CALL 65FBh
0000633C:	POP AF
0000633D:	LD HL,(1494h)
00006340:	JR Z,+03h
00006342:	LD HL,(74C0h)
00006345:	LD BC,(1492h)
00006349:	LD A,0Fh
0000634B:	CALL 6822h
0000634E:	LD A,02h
00006350:	CALL 6822h
00006353:	POP HL
00006354:	CALL 8262h		; skip SPACEs in (HL), A=next char
00006357:	CP 2Ch	; ','
00006359:	RET NZ
0000635A:	INC HL
0000635B:	CALL 8262h		; skip SPACEs in (HL), A=next char
0000635E:	CP 52h
00006360:	JP NZ,2066h		; ERROR: Syntax error
00006363:	INC HL
00006364:	PUSH HL
00006365:	LD HL,636Dh
00006368:	PUSH HL
00006369:	LD HL,(1496h)
0000636C:	JP (HL)

0000636D:	POP HL
0000636E:	RET

; load program from disk and run it
0000636F:	PUSH DE
00006370:	CALL 6479h
00006373:	CALL 63BCh
00006376:	POP DE
00006377:	JP 15C2h		; Begin the BASIC program execution

; 'LOAD'
0000637A:	CP 8Fh			;
0000637C:	JP Z,62B5h
0000637F:	CALL 53F8h
00006382:	CP 4Dh			;
00006384:	JP Z,6308h
00006387:	CALL 6659h
0000638A:	LD (6399h),BC
0000638E:	LD (639Ch),DE
00006392:	LD (639Fh),HL
00006395:	CALL 17C4h
00006398:	LD BC,749Ah
0000639B:	LD DE,74C9h
0000639E:	LD HL,A65Ch
000063A1:	CALL 647Ch
000063A4:	LD DE,14ECh			; PROMPT:
000063A7:	JR +12h

; 'CHAIN'
000063A9:	LD SP,(A62Fh)
000063AD:	LD DE,FFFFh
000063B0:	PUSH DE
000063B1:	LD (3623h),SP	; STACK
000063B5:	CALL 6479h
000063B8:	LD DE,15C2h			; Begin the BASIC program execution
000063BB:	PUSH DE

000063BC:	LD A,(1480h)	; FCB (DIRIMG)
000063BF:	AND 0Fh
000063C1:	CP 04h				;
000063C3:	JR Z,+53h
000063C5:	CP 02h				;
000063C7:	JP NZ,689Bh			; ERROR: Bad file mode
000063CA:	LD HL,0000h
000063CD:	LD DE,FFFFh
000063D0:	CALL A4EEh			; DELSUB:
000063D3:	LD DE,(1492h)
000063D7:	DEC DE
000063D8:	DEC DE
000063D9:	LD HL,(A635h)		; TEXTST,  address of BASIC  program
000063DC:	CALL A47Dh
000063DF:	LD IY,(A62Bh)		; STRST
000063E3:	LD HL,(A635h)		; TEXTST,  address of BASIC  program
000063E6:	LD BC,(1492h)
000063EA:	LD A,0Fh
000063EC:	CALL 6822h
000063EF:	JR NC,+0Bh
000063F1:	CP 02h
000063F3:	JP NZ,1FBDh
000063F6:	CALL 21AFh		; CLPTR:
000063F9:	JP 689Eh		; ERROR: Tape read error

000063FC:	LD A,02h
000063FE:	JP 6822h

00006401:	LD DE,14ECh		; PROMPT:
00006404:	CALL 8262h		; skip SPACEs in (HL), A=next char
00006407:	CP 2Ch	; ','
00006409:	RET NZ
0000640A:	INC HL
0000640B:	CALL 8262h		; skip SPACEs in (HL), A=next char
0000640E:	CALL 53F8h
00006411:	CP 52h
00006413:	RET NZ
00006414:	LD DE,15BFh
00006417:	RET

00006418:	LD HL,0000h
0000641B:	LD DE,FFFFh
0000641E:	CALL A4EEh			; DELSUB:
00006421:	JR +12h

; 'MERGE'
00006423:	CALL 6479h
00006426:	CALL 6401h
00006429:	EX DE,HL
0000642A:	EX HL,(SP)
0000642B:	LD A,(1480h)	; FCB (DIRIMG)
0000642E:	AND 0Fh
00006430:	CP 04h
00006432:	JP NZ,689Bh			; ERROR: Bad file mode
00006435:	POP HL
00006436:	LD (6477h),HL
00006439:	LD HL,6442h
0000643C:	LD (1526h),HL
0000643F:	JP 1519h

00006442:	LD IY,(A62Bh)		; STRST
00006446:	LD A,0Ah
00006448:	PUSH DE
00006449:	CALL 6822h
0000644C:	POP DE
0000644D:	JR C,+20h
0000644F:	LD A,06h
00006451:	CALL 6822h
00006454:	PUSH DE
00006455:	EX DE,HL
00006456:	CALL 8262h		; skip SPACEs in (HL), A=next char
00006459:	CP 3Ah	; ':'
0000645B:	JR NC,+07h
0000645D:	CP 30h
0000645F:	JR C,+03h
00006461:	EX DE,HL
00006462:	POP DE
00006463:	RET

00006464:	LD HL,0003h
00006467:	LD (1526h),HL
0000646A:	LD A,0Ch		; ERROR: Illegal direct
0000646C:	JP 68A6h		; STOP tape and give error message in A

0000646F:	LD HL,0003h
00006472:	LD (1526h),HL
00006475:	POP AF
00006476:	JP 14ECh		; PROMPT:

00006479:	CALL 6659h
0000647C:	XOR A
0000647D:	LD (1480h),A	; FCB (DIRIMG)
00006480:	PUSH HL
00006481:	LD IY,(A62Bh)		; STRST
00006485:	LD (IY+00h),00h
00006489:	LD A,49h
0000648B:	CALL 65FBh
0000648E:	LD A,(1480h)	; FCB (DIRIMG)
00006491:	AND 0Fh
00006493:	POP HL
00006494:	RET

00006495:	INC HL
00006496:	CALL 6659h
00006499:	CALL 2E73h		; HCH2CH: Skip spaces and check for comma ','
0000649C:	PUSH DE
0000649D:	PUSH BC
0000649E:	CALL 7FAAh		; IDEEXP: DE= (HL), A=next character to be parsed
000064A1:	LD (1494h),DE
000064A5:	CALL 2E73h		; HCH2CH: Skip spaces and check for comma ','
000064A8:	CALL 7FAAh		; IDEEXP: DE= (HL), A=next character to be parsed
000064AB:	PUSH HL
000064AC:	EX DE,HL
000064AD:	LD DE,(1494h)
000064B1:	OR A
000064B2:	SBC HL,DE
000064B4:	INC HL
000064B5:	LD (1492h),HL
000064B8:	POP HL
000064B9:	CALL 17A8h		; END2C: look for next parameter, Z if none
000064BC:	LD DE,(1494h)
000064C0:	JR Z,+06h
000064C2:	CALL 2E76h		; CH2CH: Check for comma ','
000064C5:	CALL 7FAAh		; IDEEXP: DE= (HL), A=next character to be parsed
000064C8:	LD (1496h),DE
000064CC:	POP BC
000064CD:	POP DE
000064CE:	PUSH HL
000064CF:	PUSH DE
000064D0:	LD A,01h
000064D2:	JR +46h

; Token for 'SAVE'
000064D4:	CALL 53F8h
000064D7:	CP 4Dh			;
000064D9:	JR Z,-46h
000064DB:	CALL 2FEFh		; REFLNO: ... Line ref = Number
000064DE:	CALL 6659h
000064E1:	CALL 17A8h		; END2C: look for next parameter, Z if none
000064E4:	JR Z,+0Fh
000064E6:	CALL 2E76h		; CH2CH: Check for comma ','
000064E9:	CALL 8262h		; skip SPACEs in (HL), A=next char
000064EC:	CP 41h			;
000064EE:	JP NZ,2066h		; ERROR: Syntax error
000064F1:	INC HL
000064F2:	JP 61EEh

000064F5:	PUSH HL
000064F6:	PUSH DE
000064F7:	LD HL,(A635h)		; TEXTST,  address of BASIC  program
000064FA:	PUSH HL
000064FB:	LD E,(HL)
000064FC:	INC HL
000064FD:	LD D,(HL)
000064FE:	DEC HL
000064FF:	LD A,D
00006500:	OR E
00006501:	JR Z,+03h
00006503:	ADD HL,DE
00006504:	JR -0Bh
00006506:	INC HL
00006507:	INC HL
00006508:	POP DE
00006509:	OR A
0000650A:	SBC HL,DE
0000650C:	LD (1492h),HL
0000650F:	LD HL,0000h
00006512:	LD (1496h),HL
00006515:	LD (1494h),HL
00006518:	LD A,02h
0000651A:	LD IY,(A62Bh)		; STRST
0000651E:	LD (IY+00h),00h
00006522:	POP DE
00006523:	LD (1480h),A	; FCB (DIRIMG)
00006526:	PUSH AF
00006527:	LD A,4Fh	; 'O'
00006529:	CALL 65FBh
0000652C:	POP AF
0000652D:	CP 01h
0000652F:	LD HL,(1494h)
00006532:	JR Z,+03h
00006534:	LD HL,(A635h)		; TEXTST,  address of BASIC  program
00006537:	LD BC,(1492h)
0000653B:	LD A,10h
0000653D:	CALL 6822h
00006540:	LD A,02h
00006542:	CALL 6822h
00006545:	POP HL
00006546:	RET

; 'CLOSE'
00006547:	JR Z,+1Dh
00006549:	CALL 8262h		; skip SPACEs in (HL), A=next char
0000654C:	OR A
0000654D:	RET Z
0000654E:	CP 23h	; '#'
00006550:	JR NZ,+01h
00006552:	INC HL
00006553:	CALL 7F95h		; IBYTE: load BASIC argument in A
00006556:	OR A
00006557:	JP Z,688Fh			; ERROR: Bad file number
0000655A:	CALL 6573h
0000655D:	CALL 8262h		; skip SPACEs in (HL), A=next char
00006560:	CP 2Ch	; ','
00006562:	RET NZ
00006563:	INC HL
00006564:	JR -1Dh

00006566:	LD A,(3625h)	; MAXFILES
00006569:	OR A
0000656A:	RET Z
0000656B:	LD B,A
0000656C:	LD A,B
0000656D:	CALL 6573h
00006570:	DJNZ -06h
00006572:	RET

00006573:	PUSH BC
00006574:	PUSH DE
00006575:	PUSH HL
00006576:	CALL 6636h		; check stream/file number in A, out: DE=offset
00006579:	CALL 6652h		; in: DE=file offset, out: IY=file ptr
0000657C:	LD A,(IY+00h)
0000657F:	OR A
00006580:	JR Z,+09h
00006582:	LD A,02h
00006584:	CALL 6822h
00006587:	LD (IY+00h),00h
0000658B:	POP HL
0000658C:	POP DE
0000658D:	POP BC
0000658E:	RET

; 'EOF'
0000658F:	CALL 5A90h		; 'CINT'
00006592:	PUSH HL
00006593:	CALL 316Ch		; LD HL,(HL)
00006596:	LD A,H
00006597:	OR A
00006598:	JP NZ,688Fh			; ERROR: Bad file number
0000659B:	LD A,L
0000659C:	OR A
0000659D:	JP Z,688Fh			; ERROR: Bad file number
000065A0:	CALL 6627h		; get file defined by stream number in A, out: IY=ptr
000065A3:	CALL 6652h		; in: DE=file offset, out: IY=file ptr
000065A6:	LD A,(IY+01h)
000065A9:	CP 49h
000065AB:	JP NZ,689Bh			; ERROR: Bad file mode
000065AE:	LD A,0Ah
000065B0:	CALL 6822h
000065B3:	SBC A
000065B4:	LD E,A
000065B5:	LD D,A
000065B6:	POP HL
000065B7:	LD (HL),E
000065B8:	INC HL
000065B9:	LD (HL),D
000065BA:	DEC HL
000065BB:	RET

; 'OPEN'
000065BC:	PUSH HL
000065BD:	LD HL,0000h
000065C0:	LD (1494h),HL
000065C3:	LD (1492h),HL
000065C6:	LD (1496h),HL
000065C9:	POP HL
000065CA:	CALL 7FB9h		; STREXP:
000065CD:	OR A
000065CE:	JP Z,689Bh			; ERROR: Bad file mode
000065D1:	LD A,(DE)
000065D2:	PUSH AF
000065D3:	LD A,04h
000065D5:	LD (1480h),A	; FCB (DIRIMG)
000065D8:	CALL 2E73h		; HCH2CH: Skip spaces and check for comma ','
000065DB:	CALL 8262h		; skip SPACEs in (HL), A=next char
000065DE:	CP 23h	; '#'
000065E0:	JR NZ,+01h
000065E2:	INC HL
000065E3:	CALL 7F95h		; IBYTE: load BASIC argument in A
000065E6:	OR A
000065E7:	JP Z,688Fh			; ERROR: Bad file number
000065EA:	CALL 6636h			; check stream/file number in A, out: DE=offset
000065ED:	PUSH DE
000065EE:	CALL 2E73h		; HCH2CH: Skip spaces and check for comma ','
000065F1:	CALL 6659h
000065F4:	EXX
000065F5:	POP DE
000065F6:	CALL 6652h		; in: DE=file offset, out: IY=file ptr
000065F9:	EXX
000065FA:	POP AF

000065FB:	PUSH HL
000065FC:	EX AF,AF'
000065FD:	LD A,(IY+00h)
00006600:	OR A
00006601:	JP NZ,688Ch			; ERROR: Already open
00006604:	CALL 6D43h
00006607:	EX AF,AF'
00006608:	LD (IY+01h),A
0000660B:	LD (IY+02h),E
0000660E:	LD (IY+03h),D
00006611:	LD A,01h
00006613:	CALL 6822h
00006616:	LD A,(1480h)	; FCB (DIRIMG)
00006619:	AND 0Fh
0000661B:	LD C,A
0000661C:	LD A,(IY+00h)
0000661F:	AND F0h
00006621:	OR C
00006622:	LD (IY+00h),A
00006625:	POP HL
00006626:	RET

; get file defined by stream number in A, out: IY=ptr
00006627:	CALL 6636h			; check stream/file number in A, out: DE=offset
0000662A:	RET Z
0000662B:	CALL 6652h		; in: DE=file offset, out: IY=file ptr
0000662E:	LD A,(IY+00h)
00006631:	OR A
00006632:	RET NZ
00006633:	JP 6886h			; ERROR: File not open

; check stream/file number in A, out: DE=offset
00006636:	OR A
00006637:	LD DE,0000h
0000663A:	RET Z
0000663B:	PUSH BC
0000663C:	LD B,A
0000663D:	LD A,(3625h)	; MAXFILES
00006640:	CP B
00006641:	JP C,688Fh			; ERROR: Bad file number
00006644:	PUSH HL
00006645:	EX DE,HL
00006646:	LD DE,0110h		; 272
00006649:	ADD HL,DE
0000664A:	DJNZ -06h
0000664C:	EX DE,HL
0000664D:	POP HL
0000664E:	POP BC
0000664F:	OR 01h
00006651:	RET

; in: DE=file offset, out: IY=file ptr
00006652:	LD IY,(A62Bh)		; in: DE=file offset, out: IY=file ptr
00006656:	ADD IY,DE
00006658:	RET

00006659:	CALL 17A8h		; END2C: look for next parameter, Z if none
0000665C:	LD A,00h
0000665E:	CALL NZ,7FB9h	; STREXP:
00006661:	CP 20h	; ' '
00006663:	JP NC,206Fh		; ERROR: Illegal function call
00006666:	PUSH HL
00006667:	LD C,A
00006668:	LD B,00h
0000666A:	EX DE,HL
0000666B:	LD DE,7498h
0000666E:	PUSH DE
0000666F:	OR A
00006670:	JR Z,+02h
00006672:	LDIR
00006674:	XOR A
00006675:	LD (DE),A
00006676:	POP HL
00006677:	LD DE,7493h
0000667A:	LD A,(HL)
0000667B:	INC HL
0000667C:	OR A
0000667D:	JR Z,+07h
0000667F:	CP 3Ah	; ':'
00006681:	JR NZ,-09h
00006683:	LD DE,7498h
00006686:	EX DE,HL
00006687:	LD A,(HL)
00006688:	CP 20h	; ' '
0000668A:	JR NZ,+03h
0000668C:	INC HL
0000668D:	JR -08h
0000668F:	LD B,03h
00006691:	LD DE,74B9h
00006694:	XOR A
00006695:	LD (DE),A
00006696:	LD A,(HL)
00006697:	CP 41h
00006699:	JR C,+05h
0000669B:	LD (DE),A
0000669C:	INC DE
0000669D:	INC HL
0000669E:	DJNZ -0Ch
000066A0:	LD B,00h
000066A2:	LD A,(HL)
000066A3:	CP 3Ah	; ':'
000066A5:	JR Z,+10h
000066A7:	CALL 53F0h			; TSTNUM
000066AA:	JP C,6898h			; ERROR: Bad file descripter
000066AD:	SUB 30h
000066AF:	LD B,A
000066B0:	INC HL
000066B1:	LD A,(HL)
000066B2:	CP 3Ah	; ':'
000066B4:	JP NZ,6898h			; ERROR: Bad file descripter
000066B7:	LD A,B
000066B8:	LD (74BEh),A
000066BB:	INC HL
000066BC:	PUSH HL
000066BD:	LD BC,68BBh
000066C0:	XOR A
000066C1:	EX AF,AF'
000066C2:	LD L,C
000066C3:	LD H,B
000066C4:	LD DE,74B9h
000066C7:	LD C,(HL)
000066C8:	INC HL
000066C9:	LD B,(HL)
000066CA:	INC HL
000066CB:	LD A,B
000066CC:	OR C
000066CD:	JP Z,6898h			; ERROR: Bad file descripter
000066D0:	PUSH HL
000066D1:	LD A,(DE)
000066D2:	CP (HL)
000066D3:	JR NZ,+0Dh
000066D5:	OR A
000066D6:	INC DE
000066D7:	INC HL
000066D8:	JR NZ,-09h
000066DA:	EX AF,AF'
000066DB:	LD (74BFh),A
000066DE:	POP DE
000066DF:	POP BC
000066E0:	POP HL
000066E1:	RET

000066E2:	POP HL
000066E3:	EX AF,AF'
000066E4:	INC A
000066E5:	EX AF,AF'
000066E6:	JR -26h

; 'INIT'
000066E8:	JR Z,+12h
000066EA:	CALL 6702h
000066ED:	PUSH HL
000066EE:	CALL 6837h		; 'Are you sure ?'
000066F1:	LD A,12h
000066F3:	CALL Z,6822h
000066F6:	POP HL
000066F7:	LD (IY+00h),00h
000066FB:	RET

000066FC:	PUSH HL
000066FD:	CALL 1551h
00006700:	POP HL
00006701:	RET

00006702:	CALL 6659h
00006705:	LD IY,(A62Bh)		; STRST
00006709:	LD (IY+00h),01h
0000670D:	LD (IY+01h),4Fh	; 'O'
00006711:	LD (IY+02h),E
00006714:	LD (IY+03h),D
00006717:	RET

; 'LFILES'
00006718:	LD A,AFh			; redirect output

; 'FILES'
;00006719:   XOR A				; output to screen
0000671A:	LD (1472h),A		; FILOUT flag
0000671D:	CALL 3C22h
00006720:	CALL 6702h
00006723:	PUSH HL
00006724:	LD A,00h
00006726:	CALL 6822h
00006729:	POP HL
0000672A:	LD (IY+00h),00h
0000672E:	RET

; 'RSET'
0000672F:	CALL 677Ch
00006732:	PUSH HL
00006733:	EX AF,AF'
00006734:	LD H,A
00006735:	EX AF,AF'
00006736:	LD L,A
00006737:	CP H
00006738:	JR C,+26h
0000673A:	LD H,00h
0000673C:	ADD HL,BC
0000673D:	EX DE,HL
0000673E:	EX AF,AF'
0000673F:	LD C,A
00006740:	LD B,00h
00006742:	ADD HL,BC
00006743:	EX AF,AF'
00006744:	LD B,A
00006745:	INC C
00006746:	INC B
00006747:	JR +04h
00006749:	DEC HL
0000674A:	DEC DE
0000674B:	LD A,(HL)
0000674C:	LD (DE),A
0000674D:	DEC C
0000674E:	JR Z,+08h
00006750:	DJNZ -09h
00006752:	POP HL
00006753:	RET

00006754:	DEC DE
00006755:	LD A,20h
00006757:	LD (DE),A
00006758:	DJNZ -06h
0000675A:	POP HL
0000675B:	RET

; 'LSET'
0000675C:	CALL 677Ch
0000675F:	PUSH HL
00006760:	LD L,A
00006761:	EX AF,AF'
00006762:	LD H,A
00006763:	INC H
00006764:	INC L
00006765:	JR +04h
00006767:	LD A,(DE)
00006768:	LD (BC),A
00006769:	INC DE
0000676A:	INC BC
0000676B:	DEC H
0000676C:	JR Z,+09h
0000676E:	DEC L
0000676F:	JR NZ,-0Ah
00006771:	POP HL
00006772:	RET

00006773:	LD A,20h
00006775:	LD (BC),A
00006776:	INC BC
00006777:	DEC L
00006778:	JR NZ,-07h
0000677A:	POP HL
0000677B:	RET

0000677C:	CALL 8C2Eh		; INTGTV:  get variable
0000677F:	CP 03h			; is variable type 'string' ?
00006781:	JP NZ,2060h		; ERROR: Type mismatch
00006784:	PUSH BC
00006785:	CALL 8262h		; skip SPACEs in (HL), A=next char
00006788:	CP F4h			; Token for '='
0000678A:	JP NZ,2066h		; ERROR: Syntax error
0000678D:	INC HL
0000678E:	CALL 7FB9h		; STREXP:
00006791:	EX AF,AF'
00006792:	EX HL,(SP)
00006793:	PUSH DE
00006794:	CALL 7FC3h		; Load a string parameter
00006797:	LD C,E
00006798:	LD B,D
00006799:	POP DE
0000679A:	POP HL
0000679B:	RET

; 'NAME'
0000679C:	CALL 6702h
0000679F:	PUSH HL
000067A0:	LD A,(74BFh)
000067A3:	LD E,A
000067A4:	LD A,(74BEh)
000067A7:	LD D,A
000067A8:	PUSH DE
000067A9:	CALL 1396h
000067AC:	XOR A
000067AD:	LD (1480h),A	; FCB (DIRIMG)
000067B0:	CALL 732Bh
000067B3:	CALL 681Ch
000067B6:	JP Z,6889h			; ERROR: File not found
000067B9:	AND 40h
000067BB:	JP NZ,68A1h			; ERROR: Write protected
000067BE:	POP BC
000067BF:	EX HL,(SP)
000067C0:	PUSH DE
000067C1:	PUSH BC
000067C2:	PUSH HL
000067C3:	LD HL,A73Fh		; KEYBM1 (aka KEYBUF)
000067C6:	LD DE,FF00h		; -256
000067C9:	LD BC,0100h
000067CC:	LDIR
000067CE:	POP HL
000067CF:	CALL 5EC0h
000067D2:	CALL 6702h
000067D5:	EX HL,(SP)
000067D6:	LD DE,(74BFh)
000067DA:	LD A,(74BEh)
000067DD:	LD D,A
000067DE:	OR A
000067DF:	SBC HL,DE
000067E1:	JP NZ,206Fh		; ERROR: Illegal function call
000067E4:	CALL 1396h
000067E7:	XOR A
000067E8:	LD (1480h),A	; FCB (DIRIMG)
000067EB:	CALL 732Bh
000067EE:	CALL 681Ch
000067F1:	LD A,39h		; ERROR: File already exists
000067F3:	JP NZ,68A6h		; STOP tape and give error message in A
000067F6:	LD HL,FF00h		; -256
000067F9:	LD DE,A73Fh		; KEYBM1 (aka KEYBUF)
000067FC:	LD BC,0100h
000067FF:	LDIR
00006801:	POP HL
00006802:	POP DE
00006803:	EXX
00006804:	POP HL
00006805:	LD DE,1480h	; FCB (DIRIMG)
00006808:	LD B,11h
0000680A:	INC HL
0000680B:	INC DE
0000680C:	LD A,(DE)
0000680D:	LD (HL),A
0000680E:	DJNZ -06h
00006810:	EXX
00006811:	PUSH HL
00006812:	LD HL,A73Fh		; KEYBM1 (aka KEYBUF)
00006815:	LD A,01h
00006817:	CALL 705Dh
0000681A:	POP HL
0000681B:	RET

0000681C:	LD A,(HL)
0000681D:	OR A
0000681E:	RET Z
0000681F:	CP FFh
00006821:	RET

;;;;
00006822:	PUSH HL
00006823:	ADD 02h
00006825:	ADD A
00006826:	ADD (IY+02h)
00006829:	LD L,A
0000682A:	LD A,00h
0000682C:	ADC (IY+03h)
0000682F:	LD H,A
00006830:	LD A,(HL)
00006831:	INC HL
00006832:	LD H,(HL)
00006833:	LD L,A
00006834:	EX AF,AF'
00006835:	EX HL,(SP)
00006836:	RET

; 'Are you sure ?'
00006837:	LD DE,(3634h)	; current program line
0000683B:	INC DE
0000683C:	LD A,D
0000683D:	OR E
0000683E:	JR NZ,+1Ch
00006840:	CALL 04A3h
00006843:	LD DE,685Eh		; "Are you sure ? (y or n)"
00006846:	CALL 000Bh		; MSX (aka DEPRT), print message in DE
00006849:	LD A,01h
0000684B:	CALL 001Bh
0000684E:	CALL 53F8h
00006851:	CP 59h
00006853:	PUSH AF
00006854:	CALL 0013h		; OUTCH (PRINT char in A)
00006857:	CALL 04A3h
0000685A:	POP AF
0000685B:	RET

0000685C:	XOR A
0000685D:	RET

0000685E:	defm "Are you sure ? (y or n)"
00006875:	NOP

00006876:	XOR A		; EJECT
00006877:	CALL 0DECh	; .. tape recorder
0000687A:	LD A,1Bh	; Out of tape
0000687C:	LD HL,383Eh	; Device I/O error
0000687F:	LD HL,493Eh	; Device offline
00006882:	LD HL,3D3Eh	; Input past end
00006885:	LD HL,473Eh	; File not open
00006888:	LD HL,353Eh	; File not found
0000688B:	LD HL,363Eh	; Already open
0000688E:	LD HL,343Eh	; Bad file number
00006891:	LD HL,423Eh	; Bad record    ..?? not used ??
00006894:	LD HL,193Eh	; Bad screen mode
00006897:	LD HL,413Eh	; Bad file descripter
0000689A:	LD HL,1E3Eh	; Bad file mode
0000689D:	LD HL,1D3Eh	; Tape read error
000068A0:	LD HL,483Eh	; Write protected
000068A3:	LD HL,323Eh	; FIELD overflow

; STOP tape and give error message in A
000068A6:	PUSH AF
000068A7:	LD A,01h		; STOP..
000068A9:	CALL 0DECh		; .. tape recorder
000068AC:	CALL 764Ch		; Stop floppy disk drive
000068AF:	POP AF
000068B0:	JP 2076h		; Generate error message, error code in 'A'

000068B3:	LD A,(HL)
000068B4:	CP 01h
000068B6:	RET Z
000068B7:	LD A,40h
000068B9:	JR -15h
000068BB:	JR C,+69h

; Stream data for #2 (output to video)
000068BD:	LD D,E
000068BE:	LD B,E
000068BF:	LD D,D
000068C0:	NOP
000068C1:	SBC E
000068C2:	LD L,B
000068C3:	RST 28h
000068C4:	LD L,B
000068C5:	AND B
000068C6:	LD L,D
000068C7:	AND B
000068C8:	LD L,D
000068C9:	SBC E
000068CA:	LD L,B
000068CB:	SBC E
000068CC:	LD L,B
000068CD:	SBC E
000068CE:	LD L,B
000068CF:	INC DE
000068D0:	NOP
000068D1:	XOR E
000068D2:	INC B
000068D3:	AND A
000068D4:	INC B
000068D5:	SBC E
000068D6:	LD L,B
000068D7:	INC (HL)
000068D8:	LD L,C
000068D9:	SBC E
000068DA:	LD L,B
000068DB:	SBC E
000068DC:	LD L,B
000068DD:	SBC E
000068DE:	LD L,B
000068DF:	SBC E
000068E0:	LD L,B
000068E1:	CALL M,9B68h
000068E4:	LD L,B
000068E5:	LD D,C
000068E6:	DEC D
000068E7:	SBC E
000068E8:	LD L,B
000068E9:	CALL M,3E68h
000068EC:	LD C,C
000068ED:	JR +02h
000068EF:	LD A,4Fh	; 'O'
000068F1:	CP (IY+01h)
000068F4:	JP NZ,689Bh			; ERROR: Bad file mode
000068F7:	LD (IY+00h),01h
000068FB:	RET

000068FC:	LD IX,0013h		; [OUTCH (PRINT char in A)]
00006900:	JR +0Ah
00006902:	LD IX,6975h
00006906:	JR +04h
00006908:	LD IX,12E2h
0000690C:	LD (6915h),IX	; SMC
00006910:	CALL 691Eh
00006913:	LD A,(HL)
00006914:	CALL 0013h		; depends on IX
00006917:	INC HL
00006918:	DEC BC
00006919:	LD A,B
0000691A:	OR C
0000691B:	JR NZ,-0Ah
0000691D:	RET

0000691E:	PUSH AF
0000691F:	CALL 5DAAh		; Check if file (pointed by IY) is open
00006922:	RLCA
00006923:	JP C,68A1h			; ERROR: Write protected
00006926:	LD A,(IY+01h)
00006929:	CP 52h
0000692B:	JR Z,+05h
0000692D:	CP 4Fh	; 'O'
0000692F:	JP NZ,689Bh			; ERROR: Bad file mode
00006932:	POP AF
00006933:	RET

00006934:	LD A,(000Eh)	; CSRXY: X,Y text coordinates
00006937:	RET

00006938:	XOR A
00006939:	LD L,C
0000693A:	LD B,E
0000693B:	LD D,D
0000693C:	LD D,H
0000693D:	NOP
0000693E:	SBC E
0000693F:	LD L,B
00006940:	RST 28h
00006941:	LD L,B
00006942:	AND B
00006943:	LD L,D
00006944:	AND B
00006945:	LD L,D
00006946:	SBC E
00006947:	LD L,B
00006948:	SBC E
00006949:	LD L,B
0000694A:	SBC E
0000694B:	LD L,B
0000694C:	LD (HL),L
0000694D:	LD L,C
0000694E:	XOR E
0000694F:	INC B
00006950:	LD L,B
00006951:	LD L,C
00006952:	SBC E
00006953:	LD L,B
00006954:	INC (HL)
00006955:	LD L,C
00006956:	SBC E
00006957:	LD L,B
00006958:	SBC E
00006959:	LD L,B
0000695A:	SBC E
0000695B:	LD L,B
0000695C:	SBC E
0000695D:	LD L,B
0000695E:	LD (BC),A
0000695F:	LD L,C
00006960:	SBC E
00006961:	LD L,B
00006962:	LD D,C
00006963:	DEC D
00006964:	SBC E
00006965:	LD L,B
00006966:	LD (BC),A
00006967:	LD L,C
00006968:	LD A,(53AAh)		; CSIZE
0000696B:	AND 01h
0000696D:	JR Z,+03h
0000696F:	CALL 04A7h			; LETNL (PRINT CR)
00006972:	JP 04A7h			; LETNL (PRINT CR)

; output char to..
00006975:	PUSH AF
00006976:	LD A,(53AAh)		; CSIZE
00006979:	DEC A
0000697A:	JR Z,+16h
0000697C:	DEC A
0000697D:	JR Z,+07h
0000697F:	DEC A
00006980:	JR Z,+0Bh
00006982:	POP AF
00006983:	JP 04C8h

00006986:	POP AF
00006987:	CALL 04C8h
0000698A:	JP 04C8h

0000698D:	POP AF
0000698E:	PUSH AF
0000698F:	CALL 6993h
00006992:	POP AF
00006993:	CALL 04C8h
00006996:	PUSH AF
00006997:	LD A,1Dh
00006999:	CALL 0013h		; OUTCH (PRINT char in A)
0000699C:	LD A,1Fh
0000699E:	CALL 0013h		; OUTCH (PRINT char in A)
000069A1:	POP AF
000069A2:	CALL 04C8h
000069A5:	LD A,(000Eh)	; CSRXY: X,Y text coordinates
000069A8:	OR A
000069A9:	RET Z
000069AA:	LD A,1Eh
000069AC:	JP 0013h	; OUTCH (PRINT char in A)

000069AF:	CALL PO,4B69h
000069B2:	LD B,L
000069B3:	LD E,C
000069B4:	NOP
000069B5:	SBC E
000069B6:	LD L,B
000069B7:	EX DE,HL
000069B8:	LD L,B
000069B9:	AND B
000069BA:	LD L,D
000069BB:	AND B
000069BC:	LD L,D
000069BD:	SBC E
000069BE:	LD L,B
000069BF:	RST 18h
000069C0:	LD L,C
000069C1:	INC BC
000069C2:	NOP
000069C3:	SBC E
000069C4:	LD L,B
000069C5:	SBC E
000069C6:	LD L,B
000069C7:	SBC E
000069C8:	LD L,B
000069C9:	SBC E
000069CA:	LD L,B
000069CB:	SBC E
000069CC:	LD L,B
000069CD:	SBC E
000069CE:	LD L,B
000069CF:	SBC E
000069D0:	LD L,B
000069D1:	SBC E
000069D2:	LD L,B
000069D3:	SBC E
000069D4:	LD L,B
000069D5:	SBC E
000069D6:	LD L,B
000069D7:	SBC E
000069D8:	LD L,B
000069D9:	SBC E
000069DA:	LD L,B
000069DB:	SBC E
000069DC:	LD L,B
000069DD:	SBC E
000069DE:	LD L,B
000069DF:	LD A,01h
000069E1:	JP 001Bh
000069E4:	JR +6Ah

; Stream data for #3 (outputs to printer)
000069E6:	LD C,H
000069E7:	LD D,B
000069E8:	LD D,H
000069E9:	NOP
000069EA:	SBC E
000069EB:	LD L,B
000069EC:	RST 28h
000069ED:	LD L,B
000069EE:	AND B
000069EF:	LD L,D
000069F0:	AND B
000069F1:	LD L,D
000069F2:	SBC E
000069F3:	LD L,B
000069F4:	SBC E
000069F5:	LD L,B
000069F6:	SBC E
000069F7:	LD L,B
000069F8:	CALL C,1512h
000069FB:	INC DE
000069FC:	PUSH DE
000069FD:	LD (DE),A
000069FE:	SBC E
000069FF:	LD L,B
00006A00:	INC D
00006A01:	LD L,D
00006A02:	SBC E
00006A03:	LD L,B
00006A04:	SBC E
00006A05:	LD L,B
00006A06:	SBC E
00006A07:	LD L,B
00006A08:	SBC E
00006A09:	LD L,B
00006A0A:	EX AF,AF'
00006A0B:	LD L,C
00006A0C:	SBC E
00006A0D:	LD L,B
00006A0E:	SBC E
00006A0F:	LD L,B
00006A10:	SBC E
00006A11:	LD L,B
00006A12:	EX AF,AF'
00006A13:	LD L,C
00006A14:	LD A,(131Bh)		; LPOS - line counter for Printer
00006A17:	RET

00006A18:	OR 6Eh
00006A1A:	LD B,E
00006A1B:	LD B,C
00006A1C:	LD D,E
00006A1D:	NOP
00006A1E:	SUB D
00006A1F:	LD L,L
00006A20:	CALL Z,776Ch
00006A23:	LD L,D
00006A24:	SBC E
00006A25:	LD L,D
00006A26:	SBC E
00006A27:	LD L,B
00006A28:	OR 6Ah
00006A2A:	LD IXl,D
00006A2C:	SUB L
00006A2D:	LD L,H
00006A2E:	ADD C
00006A2F:	LD L,H
00006A30:	ADC (HL)
00006A31:	LD L,H
00006A32:	LD C,6Bh
00006A34:	LD A,L
00006A35:	LD L,H
00006A36:	SBC E
00006A37:	LD L,B
00006A38:	SBC E
00006A39:	LD L,B
00006A3A:	SBC E
00006A3B:	LD L,B
00006A3C:	LD H,H
00006A3D:	LD L,D
00006A3E:	LD (HL),C
00006A3F:	LD L,D
00006A40:	LD C,B
00006A41:	LD L,D
00006A42:	LD E,B
00006A43:	LD L,L
00006A44:	LD C,(HL)
00006A45:	LD L,D
00006A46:	LD L,D
00006A47:	LD L,D
00006A48:	CALL 6C6Bh
00006A4B:	JP 0047h	; file data block ??, HL=ADDR, BC=SIZE

00006A4E:	DEC HL
00006A4F:	DEC HL
00006A50:	LD BC,0102h
00006A53:	CALL 6A64h
00006A56:	JP C,6DA6h
00006A59:	LD A,(HL)
00006A5A:	CP E
00006A5B:	JR NZ,-0Dh
00006A5D:	INC HL
00006A5E:	LD A,(HL)
00006A5F:	DEC HL
00006A60:	CP D
00006A61:	JR NZ,-13h
00006A63:	RET

00006A64:	CALL 6C6Bh
00006A67:	JP 0044h			; file data block, HL=ADDR, BC=SIZE

00006A6A:	DEC HL
00006A6B:	LD (HL),D
00006A6C:	DEC HL
00006A6D:	LD (HL),E
00006A6E:	LD BC,0102h
00006A71:	CALL 691Eh
00006A74:	JP 003Eh	; file ???  HL=FCB

00006A77:	LD A,(IY+01h)
00006A7A:	CP 52h
00006A7C:	JR Z,+28h
00006A7E:	CP 4Fh	; 'O'
00006A80:	JR NZ,+19h
00006A82:	LD A,(IY+00h)
00006A85:	BIT 2,A
00006A87:	JR Z,+12h
00006A89:	CALL 6CBFh
00006A8C:	LD (HL),1Ah
00006A8E:	PUSH IY
00006A90:	POP HL
00006A91:	LD BC,000Eh
00006A94:	ADD HL,BC
00006A95:	CALL 747Ch
00006A98:	CALL 6BD8h
00006A9B:	LD A,01h		; STOP..
00006A9D:	CALL 0DECh		; .. tape recorder
00006AA0:	LD (IY+00h),00h
00006AA4:	OR A
00006AA5:	RET

00006AA6:	LD A,(IY+0Ch)
00006AA9:	OR A
00006AAA:	JR Z,-0Ch
00006AAC:	CALL 747Ch
00006AAF:	LD HL,FF00h		; -256
00006AB2:	LD DE,000Eh
00006AB5:	LD A,01h
00006AB7:	CALL 7063h
00006ABA:	LD DE,FF00h		; -256
00006ABD:	LD L,(IY+07h)
00006AC0:	LD H,00h
00006AC2:	ADD HL,DE
00006AC3:	LD A,(HL)
00006AC4:	CP 80h
00006AC6:	JP C,68B7h
00006AC9:	CP 90h
00006ACB:	JP NC,68B7h
00006ACE:	LD A,(IY+0Ah)
00006AD1:	LD (HL),A
00006AD2:	EX DE,HL
00006AD3:	LD DE,000Eh
00006AD6:	LD A,01h
00006AD8:	CALL 705Dh
00006ADB:	JR -3Dh
00006ADD:	PUSH DE
00006ADE:	PUSH BC
00006ADF:	LD B,FFh
00006AE1:	CALL 6B0Eh
00006AE4:	JR C,+0Bh
00006AE6:	CALL 6AF6h
00006AE9:	CP 0Dh
00006AEB:	JR Z,+04h
00006AED:	LD (DE),A
00006AEE:	INC DE
00006AEF:	DJNZ -10h
00006AF1:	XOR A
00006AF2:	LD (DE),A
00006AF3:	POP BC
00006AF4:	POP DE
00006AF5:	RET

00006AF6:	PUSH HL
00006AF7:	PUSH BC
00006AF8:	CALL 6B0Eh
00006AFB:	JP C,6883h		; ERROR: Input past end
00006AFE:	CALL 6CBFh
00006B01:	LD A,(HL)
00006B02:	INC (IY+0Bh)
00006B05:	JR NZ,+04h
00006B07:	LD (IY+0Ch),00h
00006B0B:	POP BC
00006B0C:	POP HL
00006B0D:	RET

00006B0E:	PUSH BC
00006B0F:	PUSH DE
00006B10:	PUSH HL
00006B11:	CALL 6C6Bh
00006B14:	PUSH IY
00006B16:	POP HL
00006B17:	LD BC,000Eh
00006B1A:	ADD HL,BC
00006B1B:	LD A,(IY+0Ch)
00006B1E:	AND 0Fh
00006B20:	JR NZ,+0Ch
00006B22:	PUSH HL
00006B23:	CALL 747Ch
00006B26:	CALL 6B49h
00006B29:	POP HL
00006B2A:	LD (IY+0Bh),00h
00006B2E:	INC HL
00006B2F:	LD A,(IY+0Ch)
00006B32:	AND 80h
00006B34:	JR Z,+0Fh
00006B36:	LD BC,0100h
00006B39:	ADD HL,BC
00006B3A:	LD A,(HL)
00006B3B:	DEC HL
00006B3C:	DEC C
00006B3D:	OR A
00006B3E:	JR Z,-06h
00006B40:	LD A,(IY+0Bh)
00006B43:	CP C
00006B44:	CCF
00006B45:	POP HL
00006B46:	POP DE
00006B47:	POP BC
00006B48:	RET

00006B49:	LD A,(74BFh)
00006B4C:	SUB 04h
00006B4E:	JR NZ,+21h
00006B50:	CALL 6B62h
00006B53:	LD A,(HL)
00006B54:	INC HL
00006B55:	AND (HL)
00006B56:	DEC HL
00006B57:	INC A
00006B58:	LD A,01h
00006B5A:	JR NZ,+02h
00006B5C:	LD A,81h
00006B5E:	LD (IY+0Ch),A
00006B61:	RET

00006B62:	LD BC,0102h
00006B65:	CALL 0044h			; file data block, HL=ADDR, BC=SIZE
00006B68:	OR A
00006B69:	JP NZ,6DA6h
00006B6C:	LD A,01h		; STOP..
00006B6E:	JP 0DECh		; .. tape recorder

00006B71:	INC (HL)
00006B72:	LD (IY+0Ch),01h
00006B76:	LD A,(HL)
00006B77:	INC HL
00006B78:	JR NZ,+01h
00006B7A:	INC (HL)
00006B7B:	INC HL
00006B7C:	AND 0Fh
00006B7E:	PUSH HL
00006B7F:	CALL Z,6B9Eh
00006B82:	POP HL
00006B83:	CALL 6C54h
00006B86:	LD A,01h
00006B88:	CALL 7063h
00006B8B:	LD A,(IY+0Ah)
00006B8E:	SUB 80h
00006B90:	RET C
00006B91:	LD C,A
00006B92:	LD A,(IY+0Eh)
00006B95:	AND 0Fh
00006B97:	CP C
00006B98:	RET C
00006B99:	LD (IY+0Ch),81h
00006B9D:	RET

00006B9E:	LD DE,000Eh
00006BA1:	LD A,01h
00006BA3:	LD HL,FF00h		; -256
00006BA6:	PUSH HL
00006BA7:	CALL 7063h
00006BAA:	POP HL
00006BAB:	CALL 68B3h
00006BAE:	LD E,(IY+0Ah)
00006BB1:	LD D,00h
00006BB3:	LD (IY+07h),E
00006BB6:	ADD HL,DE
00006BB7:	LD A,(HL)
00006BB8:	LD (IY+0Ah),A
00006BBB:	RET

00006BBC:	LD A,(74BFh)
00006BBF:	SUB 04h
00006BC1:	JR NZ,+24h
00006BC3:	LD BC,0102h
00006BC6:	CALL 003Eh	; file ???  HL=FCB
00006BC9:	EX AF,AF'
00006BCA:	CALL 6BD0h
00006BCD:	EX AF,AF'
00006BCE:	JR -68h
00006BD0:	INC (IY+0Eh)
00006BD3:	RET NZ
00006BD4:	INC (IY+0Fh)
00006BD7:	RET

00006BD8:	LD A,(74BFh)
00006BDB:	SUB 04h
00006BDD:	JR NZ,+45h
00006BDF:	LD A,FFh
00006BE1:	LD (HL),A
00006BE2:	INC HL
00006BE3:	LD (HL),A
00006BE4:	DEC HL
00006BE5:	JR -24h
00006BE7:	CALL 6C52h
00006BEA:	CALL 705Dh
00006BED:	CALL 6BD0h
00006BF0:	INC (IY+0Ah)
00006BF3:	LD A,(IY+0Eh)
00006BF6:	AND 0Fh
00006BF8:	RET NZ
00006BF9:	LD HL,FF00h		; -256
00006BFC:	PUSH HL
00006BFD:	LD DE,000Eh
00006C00:	LD A,01h
00006C02:	CALL 7063h
00006C05:	POP HL
00006C06:	CALL 68B3h
00006C09:	LD E,(IY+07h)
00006C0C:	LD D,00h
00006C0E:	EX DE,HL
00006C0F:	ADD HL,DE
00006C10:	EX DE,HL
00006C11:	CALL 7317h
00006C14:	LD (DE),A
00006C15:	LD (IY+07h),A
00006C18:	LD (IY+0Ah),80h
00006C1C:	LD DE,000Eh
00006C1F:	LD A,01h
00006C21:	JP 705Dh

00006C24:	CALL 6C52h
00006C27:	CALL 705Dh
00006C2A:	LD HL,FF00h		; -256
00006C2D:	PUSH HL
00006C2E:	LD DE,000Eh
00006C31:	LD A,01h
00006C33:	CALL 7063h
00006C36:	POP HL
00006C37:	CALL 68B3h
00006C3A:	LD E,(IY+07h)
00006C3D:	LD D,00h
00006C3F:	EX DE,HL
00006C40:	ADD HL,DE
00006C41:	LD A,(HL)
00006C42:	CP 80h
00006C44:	JP C,68B7h
00006C47:	LD A,(IY+0Eh)
00006C4A:	AND 0Fh
00006C4C:	ADD 80h
00006C4E:	LD (HL),A
00006C4F:	EX DE,HL
00006C50:	JR -36h
00006C52:	INC HL
00006C53:	INC HL
00006C54:	EX DE,HL
00006C55:	LD L,(IY+07h)
00006C58:	LD H,00h
00006C5A:	ADD HL,HL
00006C5B:	ADD HL,HL
00006C5C:	ADD HL,HL
00006C5D:	ADD HL,HL
00006C5E:	LD A,(IY+0Eh)
00006C61:	AND 0Fh
00006C63:	LD C,A
00006C64:	LD B,00h
00006C66:	ADD HL,BC
00006C67:	EX DE,HL
00006C68:	LD A,01h
00006C6A:	RET

00006C6B:	PUSH AF
00006C6C:	CALL 5DAAh		; Check if file (pointed by IY) is open
00006C6F:	LD A,(IY+01h)
00006C72:	CP 52h
00006C74:	JR Z,+05h
00006C76:	CP 49h
00006C78:	JP NZ,689Bh			; ERROR: Bad file mode
00006C7B:	POP AF
00006C7C:	RET

00006C7D:	LD A,(IY+0Dh)
00006C80:	RET

00006C81:	LD A,20h
00006C83:	CALL 6C95h
00006C86:	LD A,(IY+0Dh)
00006C89:	AND 07h
00006C8B:	RET Z
00006C8C:	JR -0Dh
00006C8E:	LD A,FFh
00006C90:	LD (IY+0Dh),A
00006C93:	LD A,0Dh
00006C95:	PUSH HL
00006C96:	PUSH DE
00006C97:	PUSH BC
00006C98:	PUSH AF
00006C99:	CALL 691Eh
00006C9C:	INC (IY+0Dh)
00006C9F:	CALL 6CBFh
00006CA2:	POP AF
00006CA3:	LD (HL),A
00006CA4:	PUSH AF
00006CA5:	INC (IY+0Bh)
00006CA8:	JR NZ,+10h
00006CAA:	PUSH IY
00006CAC:	POP HL
00006CAD:	LD BC,000Eh
00006CB0:	ADD HL,BC
00006CB1:	CALL 747Ch
00006CB4:	CALL 6BBCh
00006CB7:	CALL 6D37h
00006CBA:	POP AF
00006CBB:	POP BC
00006CBC:	POP DE
00006CBD:	POP HL
00006CBE:	RET

00006CBF:	PUSH IY
00006CC1:	POP HL
00006CC2:	LD C,10h
00006CC4:	LD B,00h
00006CC6:	ADD HL,BC
00006CC7:	LD C,(IY+0Bh)
00006CCA:	ADD HL,BC
00006CCB:	RET

00006CCC:	LD A,(IY+01h)
00006CCF:	CP 4Fh	; 'O'
00006CD1:	JR NZ,+21h
00006CD3:	CALL 1396h
00006CD6:	LD HL,1480h	; FCB (DIRIMG)
00006CD9:	LD DE,145Ah
00006CDC:	CALL 6D2Bh
00006CDF:	LD BC,0020h	; FCB size ?
00006CE2:	CALL 003Bh	; save data block:  HL=FCB (header) or data position, BC=SIZE
00006CE5:	OR A
00006CE6:	JP NZ,6DA6h
00006CE9:	LD A,(1480h)	; FCB (DIRIMG)
00006CEC:	CP 04h
00006CEE:	CALL Z,6B6Ch
00006CF1:	JP 71E5h
00006CF4:	CP 49h
00006CF6:	JP NZ,689Bh			; ERROR: Bad file mode
00006CF9:	CALL 1396h
00006CFC:	LD HL,A73Fh		; KEYBM1 (aka KEYBUF)
00006CFF:	LD BC,0020h
00006D02:	CALL 0041h	; file open?  HL=FCB
00006D05:	OR A
00006D06:	JP NZ,6DA6h
00006D09:	CALL 134Eh
00006D0C:	JR Z,+0Dh
00006D0E:	LD A,05h		; APSS+1..
00006D10:	CALL 0DECh		; .. tape recorder
00006D13:	LD DE,146Ah
00006D16:	CALL 6D2Bh
00006D19:	JR -1Fh
00006D1B:	LD DE,1480h	; FCB (DIRIMG)
00006D1E:	LD BC,0020h
00006D21:	PUSH HL
00006D22:	LDIR
00006D24:	POP HL
00006D25:	CALL 6CE9h
00006D28:	LD DE,1462h
00006D2B:	PUSH HL
00006D2C:	LD HL,(3634h)	; current program line
00006D2F:	INC HL
00006D30:	LD A,H
00006D31:	OR L
00006D32:	POP HL
00006D33:	RET NZ
00006D34:	JP 1321h
00006D37:	PUSH HL
00006D38:	PUSH BC
00006D39:	PUSH IY
00006D3B:	POP HL
00006D3C:	LD BC,0010h
00006D3F:	ADD HL,BC
00006D40:	XOR A
00006D41:	JR +0Ch
00006D43:	PUSH HL
00006D44:	PUSH BC
00006D45:	PUSH IY
00006D47:	POP HL
00006D48:	LD B,10h
00006D4A:	XOR A
00006D4B:	LD (HL),A
00006D4C:	INC HL
00006D4D:	DJNZ -04h
00006D4F:	LD B,00h
00006D51:	LD (HL),A
00006D52:	INC HL
00006D53:	DJNZ -04h
00006D55:	POP BC
00006D56:	POP HL
00006D57:	RET

00006D58:	CALL 6D68h
00006D5B:	CALL 0DF6h
00006D5E:	AND 04h
00006D60:	JP Z,68A1h		; ERROR: Write protected
00006D63:	LD A,0Ah		; REC ..
00006D65:	JP 0DECh		; .. tape recorder

00006D68:	LD A,04h		;
00006D6A:	CALL 0DECh		; .. tape recorder
00006D6D:	CALL 6D85h
00006D70:	CALL 004Ah	; Z=1 -> SHIFT+BREAK, CTRL/C
00006D73:	JR Z,+08h
00006D75:	CALL 0DF6h
00006D78:	AND 01h
00006D7A:	JR NZ,-0Ch
00006D7C:	RET

00006D7D:	LD A,01h		; STOP..
00006D7F:	CALL 0DECh		; .. tape recorder
00006D82:	JP 1FCAh

00006D85:	PUSH HL
00006D86:	LD HL,0000h
00006D89:	DEC HL
00006D8A:	PUSH HL
00006D8B:	POP HL
00006D8C:	LD A,L
00006D8D:	OR H
00006D8E:	JR NZ,-07h
00006D90:	POP HL
00006D91:	RET

00006D92:	CALL 6D68h
00006D95:	LD BC,0020h
00006D98:	LD HL,A73Fh		; KEYBM1 (aka KEYBUF)
00006D9B:	CALL 0041h	; file open?  HL=FCB
00006D9E:	OR A
00006D9F:	JR Z,+18h
00006DA1:	CP 05h			; Single precision type ?
00006DA3:	JR C,+01h
00006DA5:	RET

00006DA6:	DEC A
00006DA7:	JP Z,1FCAh
00006DAA:	DEC A
00006DAB:	JP Z,689Eh		; ERROR: Tape read error
00006DAE:	DEC A
00006DAF:	JP Z,6876h		; EJECT + ERROR: Out of tape
00006DB2:	DEC A
00006DB3:	JP Z,68A1h		; ERROR: Write protected
00006DB6:	JP 1FCAh
00006DB9:	CALL 6DC3h
00006DBC:	LD A,05h		;
00006DBE:	CALL 0DECh		; .. tape recorder
00006DC1:	JR -2Eh
00006DC3:	LD A,(HL)
00006DC4:	OR A
00006DC5:	RET Z
00006DC6:	BIT 7,A
00006DC8:	LD DE,6ED6h
00006DCB:	JR NZ,+11h
00006DCD:	LD DE,6ED2h
00006DD0:	BIT 0,A
00006DD2:	JR NZ,+0Ah
00006DD4:	LD DE,6EDAh
00006DD7:	BIT 1,A
00006DD9:	JR NZ,+03h
00006DDB:	LD DE,6ECEh
00006DDE:	CALL 142Fh
00006DE1:	BIT 6,(HL)
00006DE3:	LD A,2Ah
00006DE5:	CALL NZ,1420h		; file stuff, depends on value set in FILOUT
00006DE8:	BIT 5,(HL)
00006DEA:	LD A,23h
00006DEC:	CALL NZ,1420h		; file stuff, depends on value set in FILOUT
00006DEF:	CALL 143Ch
00006DF2:	LD A,22h	; '"'
00006DF4:	CALL 1420h		; file stuff, depends on value set in FILOUT
00006DF7:	LD E,(IY+02h)
00006DFA:	LD D,(IY+03h)
00006DFD:	CALL 142Fh
00006E00:	LD A,(74BEh)
00006E03:	AND 0Fh
00006E05:	ADD 30h
00006E07:	CALL 1420h		; file stuff, depends on value set in FILOUT
00006E0A:	LD A,3Ah
00006E0C:	CALL 1420h		; file stuff, depends on value set in FILOUT
00006E0F:	PUSH HL
00006E10:	LD B,0Dh
00006E12:	INC HL
00006E13:	LD A,(HL)
00006E14:	CALL 1420h		; file stuff, depends on value set in FILOUT
00006E17:	DJNZ -07h
00006E19:	LD A,2Eh		; '.'
00006E1B:	CALL 1420h		; file stuff, depends on value set in FILOUT
00006E1E:	LD B,03h
00006E20:	INC HL
00006E21:	LD A,(HL)
00006E22:	CALL 1420h		; file stuff, depends on value set in FILOUT
00006E25:	DJNZ -07h
00006E27:	LD DE,0008h
00006E2A:	ADD HL,DE		; {LDIR5:} move on the next 8 bytes in the number queue (HL ptr)
00006E2B:	LD A,22h	; '"'
00006E2D:	CALL 1420h		; file stuff, depends on value set in FILOUT
00006E30:	CALL 143Ch
00006E33:	LD A,27h
00006E35:	CALL 1420h		; file stuff, depends on value set in FILOUT
00006E38:	LD DE,A73Fh		; KEYBM1 (aka KEYBUF)
00006E3B:	CALL 6E65h		; format date (full DATE$)
00006E3E:	CALL 142Fh
00006E41:	LD A,20h
00006E43:	CALL 1420h		; file stuff, depends on value set in FILOUT
00006E46:	CALL 6E9Dh		; format date (DAY$)
00006E49:	CALL 142Fh
00006E4C:	LD A,20h
00006E4E:	CALL 1420h		; file stuff, depends on value set in FILOUT
00006E51:	INC HL
00006E52:	INC HL
00006E53:	INC HL
00006E54:	CALL 6EB8h
00006E57:	LD B,05h
00006E59:	LD A,(DE)
00006E5A:	CALL 1420h		; file stuff, depends on value set in FILOUT
00006E5D:	INC DE
00006E5E:	DJNZ -07h
00006E60:	CALL 1446h
00006E63:	POP HL
00006E64:	RET

; format date (full DATE$)
00006E65:	PUSH DE
00006E66:	PUSH HL
00006E67:	LD A,(HL)
00006E68:	CALL 6E8Dh
00006E6B:	LD A,2Fh
00006E6D:	CALL 6E9Ah
00006E70:	INC HL
00006E71:	LD A,(HL)
00006E72:	RRCA
00006E73:	RRCA
00006E74:	RRCA
00006E75:	RRCA
00006E76:	AND 0Fh
00006E78:	ADD 00h
00006E7A:	DAA
00006E7B:	CALL 6E8Dh
00006E7E:	LD A,2Fh
00006E80:	CALL 6E9Ah
00006E83:	INC HL
00006E84:	LD A,(HL)
00006E85:	CALL 6E8Dh
00006E88:	XOR A
00006E89:	LD (DE),A
00006E8A:	POP HL
00006E8B:	POP DE
00006E8C:	RET

00006E8D:	PUSH AF
00006E8E:	RRCA
00006E8F:	RRCA
00006E90:	RRCA
00006E91:	RRCA
00006E92:	CALL 6E96h
00006E95:	POP AF
00006E96:	AND 0Fh
00006E98:	ADD 30h
00006E9A:	LD (DE),A
00006E9B:	INC DE
00006E9C:	RET

; format date (DAY$)
00006E9D:	PUSH HL
00006E9E:	PUSH DE
00006E9F:	INC HL
00006EA0:	LD A,(HL)
00006EA1:	AND 07h
00006EA3:	LD E,A
00006EA4:	LD D,00h
00006EA6:	LD HL,6EDEh
00006EA9:	ADD HL,DE
00006EAA:	ADD HL,DE
00006EAB:	ADD HL,DE
00006EAC:	LD BC,0003h
00006EAF:	POP DE
00006EB0:	PUSH DE
00006EB1:	LDIR
00006EB3:	XOR A
00006EB4:	LD (DE),A
00006EB5:	POP DE
00006EB6:	POP HL
00006EB7:	RET

00006EB8:	PUSH DE
00006EB9:	PUSH HL
00006EBA:	LD B,02h
00006EBC:	LD A,(HL)
00006EBD:	CALL 6E8Dh
00006EC0:	LD A,3Ah
00006EC2:	CALL 6E9Ah
00006EC5:	INC HL
00006EC6:	DJNZ -0Ch
00006EC8:	LD A,(HL)
00006EC9:	CALL 6E8Dh
00006ECC:	JR -46h
00006ECE:	LD B,C
00006ECF:	LD (HL),E
00006ED0:	LD H,E
00006ED1:	NOP
00006ED2:	LD B,D
00006ED3:	LD L,C
00006ED4:	LD L,(HL)
00006ED5:	NOP
00006ED6:	LD B,H
00006ED7:	LD L,C
00006ED8:	LD (HL),D
00006ED9:	NOP
00006EDA:	LD B,D
00006EDB:	LD H,C
00006EDC:	LD (HL),E
00006EDD:	NOP
00006EDE:	LD D,E
00006EDF:	LD D,L
00006EE0:	LD C,(HL)
00006EE1:	LD C,L
00006EE2:	LD C,A
00006EE3:	LD C,(HL)
00006EE4:	LD D,H
00006EE5:	LD D,L
00006EE6:	LD B,L
00006EE7:	LD D,A
00006EE8:	LD B,L
00006EE9:	LD B,H
00006EEA:	LD D,H
00006EEB:	LD C,B
00006EEC:	LD D,L
00006EED:	LD B,(HL)
00006EEE:	LD D,D
00006EEF:	LD C,C
00006EF0:	LD D,E
00006EF1:	LD B,C
00006EF2:	LD D,H
00006EF3:	CCF
00006EF4:	CCF
00006EF5:	CCF
00006EF6:	SBC L
00006EF7:	LD L,A
00006EF8:	LD C,L
00006EF9:	LD B,L
00006EFA:	LD C,L
00006EFB:	NOP
00006EFC:	ADD (HL)
00006EFD:	LD (HL),B
00006EFE:	AND (HL)
00006EFF:	LD (HL),C
00006F00:	LD (HL),A
00006F01:	LD L,D
00006F02:	LD SP,9B71h
00006F05:	LD L,B
00006F06:	OR 6Ah
00006F08:	LD IXl,D
00006F0A:	SUB L
00006F0B:	LD L,H
00006F0C:	ADD C
00006F0D:	LD L,H
00006F0E:	ADC (HL)
00006F0F:	LD L,H
00006F10:	LD C,6Bh
00006F12:	LD A,L
00006F13:	LD L,H
00006F14:	SBC E
00006F15:	LD L,B
00006F16:	SBC E
00006F17:	LD L,B
00006F18:	SBC E
00006F19:	LD L,B
00006F1A:	RLCA
00006F1B:	LD (HL),H
00006F1C:	XOR B
00006F1D:	LD (HL),E
00006F1E:	LD L,C
00006F1F:	LD (HL),B
00006F20:	RET NC
00006F21:	LD (HL),B
00006F22:	LD H,6Fh
00006F24:	LD (HL),6Fh
00006F26:	LD A,01h
00006F28:	CALL 6F5Ah
00006F2B:	IN A,(C)
00006F2D:	LD (HL),A
00006F2E:	INC BC
00006F2F:	INC HL
00006F30:	DEC DE
00006F31:	LD A,D
00006F32:	OR E
00006F33:	JR NZ,-0Ah
00006F35:	RET

00006F36:	LD A,01h
00006F38:	CALL 6F5Ah
00006F3B:	CALL 771Bh
00006F3E:	LD A,(HL)
00006F3F:	OUT (C),A
00006F41:	INC BC
00006F42:	INC HL
00006F43:	DEC DE
00006F44:	LD A,D
00006F45:	OR E
00006F46:	JR NZ,-0Ah
00006F48:	RET

00006F49:	CALL 6F5Ah
00006F4C:	IN A,(C)
00006F4E:	CP (HL)
00006F4F:	JP NZ,687Dh		; ERROR: Device I/O error
00006F52:	INC BC
00006F53:	INC HL
00006F54:	DEC DE
00006F55:	LD A,D
00006F56:	OR E
00006F57:	JR NZ,-0Dh
00006F59:	RET

00006F5A:	EX AF,AF'
00006F5B:	LD A,(0A8Bh)		; SCRMOD
00006F5E:	CP 02h
00006F60:	JP NZ,6895h			; ERROR: Bad screen mode
00006F63:	LD A,(74BEh)
00006F66:	AND 0Fh
00006F68:	JP NZ,6898h			; ERROR: Bad file descripter
00006F6B:	LD A,D
00006F6C:	OR A
00006F6D:	JR NZ,+22h
00006F6F:	LD C,D
00006F70:	EX AF,AF'
00006F71:	LD D,A
00006F72:	LD A,E
00006F73:	ADD 40h
00006F75:	LD B,A
00006F76:	LD E,C
00006F77:	CP 40h
00006F79:	JR C,+16h
00006F7B:	DEC A
00006F7C:	ADD D
00006F7D:	JR C,+12h
00006F7F:	IN A,(C)
00006F81:	EX AF,AF'
00006F82:	LD A,E6h
00006F84:	OUT (C),A
00006F86:	IN A,(C)
00006F88:	CP E6h
00006F8A:	JP NZ,6880h		; ERROR: Device offline
00006F8D:	EX AF,AF'
00006F8E:	OUT (C),A
00006F90:	RET

00006F91:	LD A,42h			; error code for 'Bad record'
00006F93:	LD HL,3C3Eh
00006F96:	LD (IY+00h),00h
00006F9A:	JP 2076h		; Generate error message, error code in 'A'

00006F9D:	RST 00h
00006F9E:	LD (HL),H
00006F9F:	LD B,L
00006FA0:	LD C,L
00006FA1:	LD C,L
00006FA2:	NOP
00006FA3:	ADD (HL)
00006FA4:	LD (HL),B
00006FA5:	AND (HL)
00006FA6:	LD (HL),C
00006FA7:	LD (HL),A
00006FA8:	LD L,D
00006FA9:	LD SP,9B71h
00006FAC:	LD L,B
00006FAD:	OR 6Ah
00006FAF:	LD IXl,D
00006FB1:	SUB L
00006FB2:	LD L,H
00006FB3:	ADD C
00006FB4:	LD L,H
00006FB5:	ADC (HL)
00006FB6:	LD L,H
00006FB7:	LD C,6Bh
00006FB9:	LD A,L
00006FBA:	LD L,H
00006FBB:	SBC E
00006FBC:	LD L,B
00006FBD:	SBC E
00006FBE:	LD L,B
00006FBF:	SBC E
00006FC0:	LD L,B
00006FC1:	RLCA
00006FC2:	LD (HL),H
00006FC3:	XOR B
00006FC4:	LD (HL),E
00006FC5:	LD L,C
00006FC6:	LD (HL),B
00006FC7:	RET NC
00006FC8:	LD (HL),B
00006FC9:	INC L
00006FCA:	LD (HL),B
00006FCB:	LD A,(DE)
00006FCC:	LD (HL),B
00006FCD:	PUSH HL
00006FCE:	LD L,A
00006FCF:	LD B,0Dh
00006FD1:	LD A,(74BEh)
00006FD4:	AND 0Fh
00006FD6:	RLCA
00006FD7:	RLCA
00006FD8:	LD C,A
00006FD9:	PUSH BC
00006FDA:	CALL 700Fh
00006FDD:	IN H,(C)
00006FDF:	POP BC
00006FE0:	PUSH BC
00006FE1:	CALL 700Fh
00006FE4:	LD A,E6h
00006FE6:	OUT (C),A
00006FE8:	POP BC
00006FE9:	PUSH BC
00006FEA:	CALL 700Fh
00006FED:	IN A,(C)
00006FEF:	CP E6h
00006FF1:	JP NZ,6880h		; ERROR: Device offline
00006FF4:	POP BC
00006FF5:	PUSH BC
00006FF6:	CALL 700Fh
00006FF9:	OUT (C),H
00006FFB:	POP BC
00006FFC:	CALL 700Fh
00006FFF:	LD H,A
00007000:	LD A,L
00007001:	ADD HL,DE
00007002:	LD DE,0501h
00007005:	OR A
00007006:	SBC HL,DE
00007008:	JR NC,-79h
0000700A:	LD E,00h
0000700C:	LD D,A
0000700D:	POP HL
0000700E:	RET

0000700F:	XOR A
00007010:	OUT (C),A
00007012:	INC C
00007013:	OUT (C),E
00007015:	INC C
00007016:	OUT (C),D
00007018:	INC C
00007019:	RET

0000701A:	LD A,01h
0000701C:	CALL 6FCDh
0000701F:	CALL 771Bh
00007022:	LD A,(HL)
00007023:	OUT (C),A
00007025:	INC HL
00007026:	DEC DE
00007027:	LD A,D
00007028:	OR E
00007029:	JR NZ,-09h
0000702B:	RET

0000702C:	LD A,01h
0000702E:	CALL 6FCDh
00007031:	IN A,(C)
00007033:	LD (HL),A
00007034:	INC HL
00007035:	DEC DE
00007036:	LD A,D
00007037:	OR E
00007038:	JR NZ,-09h
0000703A:	RET

0000703B:	CALL 6FCDh
0000703E:	IN A,(C)
00007040:	CP (HL)
00007041:	JP NZ,687Dh		; ERROR: Device I/O error
00007044:	INC HL
00007045:	DEC DE
00007046:	LD A,D
00007047:	OR E
00007048:	JR NZ,-0Ch
0000704A:	RET

0000704B:	JR C,+6Fh
0000704D:	INC E
0000704E:	LD (HL),B
0000704F:	LD E,D
00007050:	HALT
00007051:	JR Z,+6Fh
00007053:	LD L,70h
00007055:	OUTA (75h)
00007057:	LD C,C
00007058:	LD L,A
00007059:	DEC SP
0000705A:	LD (HL),B
0000705B:	JP Z,E576h
0000705E:	LD HL,704Bh
00007061:	JR +0Ah
00007063:	PUSH HL
00007064:	LD HL,7051h
00007067:	JR +04h
00007069:	PUSH HL
0000706A:	LD HL,7057h
0000706D:	EX AF,AF'
0000706E:	LD A,(74BFh)
00007071:	SUB 05h
00007073:	CP 03h
00007075:	JP NC,6898h			; ERROR: Bad file descripter
00007078:	ADD A
00007079:	ADD L
0000707A:	LD L,A
0000707B:	LD A,00h
0000707D:	ADC H
0000707E:	LD H,A
0000707F:	LD A,(HL)
00007080:	INC HL
00007081:	LD H,(HL)
00007082:	LD L,A
00007083:	EX AF,AF'
00007084:	EX HL,(SP)
00007085:	RET

00007086:	CALL 5DC7h
00007089:	LD L,C
0000708A:	LD H,B
0000708B:	CALL 2139h
0000708E:	CALL 142Fh
00007091:	LD DE,7724h
00007094:	CALL 142Fh
00007097:	CALL 1446h
0000709A:	LD DE,0010h
0000709D:	LD HL,A73Fh		; KEYBM1 (aka KEYBUF)
000070A0:	LD A,01h
000070A2:	PUSH DE
000070A3:	CALL 7063h
000070A6:	LD BC,0820h
000070A9:	LD HL,A73Fh		; KEYBM1 (aka KEYBUF)
000070AC:	LD A,(HL)
000070AD:	CP FFh
000070AF:	JR Z,+1Dh
000070B1:	BIT 4,A
000070B3:	PUSH HL
000070B4:	PUSH BC
000070B5:	CALL Z,6DC3h
000070B8:	POP BC
000070B9:	POP HL
000070BA:	LD A,B
000070BB:	LD B,00h
000070BD:	ADD HL,BC
000070BE:	LD B,A
000070BF:	CALL 6275h
000070C2:	JR Z,+0Ah
000070C4:	DJNZ -1Ah
000070C6:	POP DE
000070C7:	INC E
000070C8:	LD A,E
000070C9:	CP 20h	; ' '
000070CB:	JR C,-30h
000070CD:	RET

000070CE:	POP DE
000070CF:	RET

000070D0:	LD DE,001Fh		; CURXED
000070D3:	LD HL,A73Fh		; KEYBM1 (aka KEYBUF)
000070D6:	LD B,00h
000070D8:	LD A,FFh
000070DA:	LD (HL),A
000070DB:	INC HL
000070DC:	DJNZ -04h
000070DE:	LD HL,A73Fh		; KEYBM1 (aka KEYBUF)
000070E1:	PUSH DE
000070E2:	LD A,01h
000070E4:	CALL 705Dh
000070E7:	POP DE
000070E8:	DEC E
000070E9:	LD A,E
000070EA:	CP 10h
000070EC:	JR NC,-10h
000070EE:	LD HL,A73Fh		; KEYBM1 (aka KEYBUF)
000070F1:	LD B,00h
000070F3:	XOR A
000070F4:	LD (HL),A
000070F5:	INC HL
000070F6:	DJNZ -04h
000070F8:	LD HL,A73Fh		; KEYBM1 (aka KEYBUF)
000070FB:	LD DE,000Fh
000070FE:	LD A,01h
00007100:	CALL 705Dh
00007103:	LD HL,A73Fh		; KEYBM1 (aka KEYBUF)
00007106:	LD (HL),01h
00007108:	INC HL
00007109:	LD (HL),8Fh
0000710B:	LD A,(74BFh)
0000710E:	SUB 05h
00007110:	LD B,74h
00007112:	JR Z,+07h
00007114:	DEC A
00007115:	LD B,30h
00007117:	JR Z,+02h
00007119:	LD B,30h
0000711B:	LD A,B
0000711C:	LD BC,007Eh
0000711F:	ADD HL,BC
00007120:	LD B,A
00007121:	LD (HL),8Fh
00007123:	DEC HL
00007124:	DJNZ -05h
00007126:	LD A,01h
00007128:	LD HL,A73Fh		; KEYBM1 (aka KEYBUF)
0000712B:	LD DE,000Eh
0000712E:	JP 705Dh

00007131:	CALL 1396h
00007134:	XOR A
00007135:	LD (1480h),A	; FCB (DIRIMG)
00007138:	CALL 732Bh
0000713B:	CALL 719Dh
0000713E:	CALL 7196h
00007141:	PUSH HL
00007142:	POP IX
00007144:	LD A,(74BFh)
00007147:	AND 0Fh
00007149:	RLCA
0000714A:	RLCA
0000714B:	RLCA
0000714C:	RLCA
0000714D:	LD C,A
0000714E:	LD A,(74BEh)
00007151:	AND 0Fh
00007153:	OR C
00007154:	PUSH HL
00007155:	PUSH DE
00007156:	LD H,(IX+1Eh)
00007159:	LD L,A
0000715A:	LD DE,0110h
0000715D:	LD A,(3625h)	; MAXFILES
00007160:	LD B,A
00007161:	OR A
00007162:	JR Z,+1Bh
00007164:	ADD IY,DE
00007166:	LD A,(IY+00h)
00007169:	OR A
0000716A:	JR Z,+0Dh
0000716C:	LD A,(IY+06h)
0000716F:	CP L
00007170:	JR NZ,+07h
00007172:	LD A,(IY+04h)
00007175:	CP H
00007176:	JP Z,688Ch			; ERROR: Already open
00007179:	DJNZ -17h
0000717B:	LD IY,(A62Bh)		; STRST
0000717F:	POP DE
00007180:	POP HL
00007181:	XOR A
00007182:	LD (HL),A
00007183:	LD HL,A73Fh		; KEYBM1 (aka KEYBUF)
00007186:	LD A,01h
00007188:	CALL 705Dh
0000718B:	CALL 72F9h
0000718E:	LD DE,000Eh
00007191:	LD A,01h
00007193:	JP 705Dh

00007196:	LD A,(HL)
00007197:	AND 40h
00007199:	RET Z
0000719A:	JP 68A1h			; ERROR: Write protected

0000719D:	LD A,(HL)
0000719E:	OR A
0000719F:	JR Z,+02h
000071A1:	INC A
000071A2:	RET NZ
000071A3:	JP 6889h			; ERROR: File not found

000071A6:	CALL 1396h
000071A9:	CALL 732Bh
000071AC:	LD A,(IY+01h)
000071AF:	CP 4Fh	; 'O'
000071B1:	JP Z,729Fh
000071B4:	CP 41h
000071B6:	JR Z,+4Fh
000071B8:	CP 52h
000071BA:	JP Z,7291h
000071BD:	CP 49h
000071BF:	JP NZ,689Bh			; ERROR: Bad file mode
000071C2:	CALL 719Dh
000071C5:	LD (IY+0Eh),FFh
000071C9:	LD (IY+0Fh),FFh
000071CD:	LD IX,1480h	; FCB (DIRIMG)
000071D1:	LD E,(IX+1Eh)
000071D4:	LD D,00h
000071D6:	LD (IY+04h),E
000071D9:	LD (IY+05h),D
000071DC:	LD (IY+07h),E
000071DF:	LD (IY+08h),D
000071E2:	LD (IY+0Ah),E
000071E5:	LD A,(74BFh)
000071E8:	RLCA
000071E9:	RLCA
000071EA:	RLCA
000071EB:	RLCA
000071EC:	AND F0h
000071EE:	LD B,A
000071EF:	LD A,(74BEh)
000071F2:	AND 0Fh
000071F4:	OR B
000071F5:	LD (IY+06h),A
000071F8:	LD (IY+09h),A
000071FB:	LD A,(1480h)	; FCB (DIRIMG)
000071FE:	AND 60h
00007200:	RLCA
00007201:	OR 01h
00007203:	LD (IY+00h),A
00007206:	RET

00007207:	LD (IY+01h),49h
0000720B:	CALL 71C2h
0000720E:	CALL 7264h
00007211:	LD (IY+01h),4Fh	; 'O'
00007215:	LD (IY+07h),C
00007218:	LD (IY+0Ah),B
0000721B:	LD (IY+0Eh),E
0000721E:	LD (IY+0Fh),D
00007221:	LD L,C
00007222:	LD H,00h
00007224:	LD A,E
00007225:	AND 0Fh
00007227:	LD E,A
00007228:	LD D,H
00007229:	ADD HL,HL
0000722A:	ADD HL,HL
0000722B:	ADD HL,HL
0000722C:	ADD HL,HL
0000722D:	ADD HL,DE
0000722E:	EX DE,HL
0000722F:	PUSH IY
00007231:	POP HL
00007232:	LD BC,0010h
00007235:	ADD HL,BC
00007236:	LD A,01h
00007238:	PUSH HL
00007239:	CALL 7063h
0000723C:	LD (IY+0Ch),01h
00007240:	POP HL
00007241:	LD BC,00FFh
00007244:	ADD HL,BC
00007245:	LD A,(HL)
00007246:	CP 1Ah
00007248:	JR Z,+04h
0000724A:	DEC HL
0000724B:	DJNZ -08h
0000724D:	RET

0000724E:	DEC B
0000724F:	LD (IY+0Bh),B
00007252:	INC B
00007253:	JR +05h
00007255:	LD A,(HL)
00007256:	CP 0Dh
00007258:	JR Z,+06h
0000725A:	INC C
0000725B:	DEC HL
0000725C:	DJNZ -09h
0000725E:	LD C,00h
00007260:	LD (IY+0Dh),C
00007263:	RET

00007264:	LD HL,FF00h		; -256
00007267:	LD DE,000Eh
0000726A:	LD A,01h
0000726C:	CALL 7063h
0000726F:	LD C,(IY+04h)
00007272:	LD B,00h
00007274:	LD DE,0000h
00007277:	LD HL,FF00h		; -256
0000727A:	ADD HL,BC
0000727B:	LD A,(HL)
0000727C:	CP 80h
0000727E:	JR NC,+04h
00007280:	INC E
00007281:	LD C,A
00007282:	JR -0Dh
00007284:	EX DE,HL
00007285:	ADD HL,HL
00007286:	ADD HL,HL
00007287:	ADD HL,HL
00007288:	ADD HL,HL
00007289:	LD D,B
0000728A:	LD B,A
0000728B:	SUB 80h
0000728D:	LD E,A
0000728E:	ADD HL,DE
0000728F:	EX DE,HL
00007290:	RET

00007291:	CALL 72A7h
00007294:	LD (IY+0Eh),00h
00007298:	LD (IY+0Fh),00h
0000729C:	JP 6B9Eh
0000729F:	CALL 72AFh
000072A2:	LD (IY+0Ah),80h
000072A6:	RET

000072A7:	LD A,(HL)
000072A8:	OR A
000072A9:	JR Z,+04h
000072AB:	INC A
000072AC:	JP NZ,71C2h
000072AF:	PUSH HL
000072B0:	POP IX
000072B2:	LD A,(HL)
000072B3:	OR A
000072B4:	JR Z,+03h
000072B6:	INC A
000072B7:	JR NZ,+36h
000072B9:	PUSH DE
000072BA:	PUSH HL
000072BB:	LD HL,FF00h		; -256
000072BE:	LD DE,000Eh
000072C1:	LD A,01h
000072C3:	PUSH HL
000072C4:	CALL 7063h
000072C7:	POP HL
000072C8:	CALL 68B3h
000072CB:	CALL 7317h
000072CE:	LD (149Eh),A
000072D1:	LD DE,000Eh
000072D4:	LD A,01h
000072D6:	CALL 705Dh
000072D9:	POP HL
000072DA:	LD DE,1480h		; FCB (DIRIMG)
000072DD:	EX DE,HL
000072DE:	LD BC,0020h
000072E1:	LDIR
000072E3:	LD HL,A73Fh		; KEYBM1 (aka KEYBUF)
000072E6:	POP DE
000072E7:	LD A,01h
000072E9:	CALL 705Dh
000072EC:	JP 71D1h
000072EF:	PUSH DE
000072F0:	PUSH HL
000072F1:	CALL 7196h
000072F4:	CALL 72F9h
000072F7:	JR -2Eh
000072F9:	LD HL,FF00h		; -256
000072FC:	PUSH HL
000072FD:	LD DE,000Eh
00007300:	LD A,01h
00007302:	CALL 7063h
00007305:	POP HL
00007306:	LD E,(IX+1Eh)
00007309:	LD D,00h
0000730B:	PUSH HL
0000730C:	ADD HL,DE
0000730D:	LD A,(HL)
0000730E:	LD (HL),00h
00007310:	POP HL
00007311:	CP 80h
00007313:	RET NC
00007314:	LD E,A
00007315:	JR -0Ch
00007317:	PUSH HL
00007318:	LD B,80h
0000731A:	LD A,(HL)
0000731B:	OR A
0000731C:	JR Z,+06h
0000731E:	INC HL
0000731F:	DJNZ -07h
00007321:	JP 6F94h
00007324:	LD A,80h
00007326:	SUB B
00007327:	LD (HL),80h
00007329:	POP HL
0000732A:	RET

0000732B:	LD DE,0010h
0000732E:	XOR A
0000732F:	LD (736Dh),A
00007332:	LD HL,A73Fh		; KEYBM1 (aka KEYBUF)
00007335:	LD A,01h
00007337:	PUSH DE
00007338:	PUSH HL
00007339:	CALL 7063h
0000733C:	POP HL
0000733D:	POP DE
0000733E:	LD BC,0820h
00007341:	LD A,(HL)
00007342:	CP FFh
00007344:	JR Z,+5Bh
00007346:	PUSH BC
00007347:	OR A
00007348:	JR NZ,+0Fh
0000734A:	LD BC,736Dh
0000734D:	LD A,(BC)
0000734E:	OR A
0000734F:	JR NZ,+05h
00007351:	LD A,E
00007352:	LD (BC),A
00007353:	LD (737Ah),HL
00007356:	POP BC
00007357:	JR +06h
00007359:	CALL 7398h
0000735C:	POP BC
0000735D:	JR Z,+1Eh
0000735F:	LD A,B
00007360:	LD B,00h
00007362:	ADD HL,BC
00007363:	LD B,A
00007364:	DJNZ -25h
00007366:	INC DE
00007367:	LD A,E
00007368:	CP 20h	; ' '
0000736A:	JR C,-3Ah
0000736C:	LD DE,0000h
0000736F:	LD HL,A73Fh		; KEYBM1 (aka KEYBUF)
00007372:	LD A,01h
00007374:	PUSH DE
00007375:	CALL 7063h
00007378:	POP DE
00007379:	LD HL,0000h
0000737C:	RET

0000737D:	LD A,(IY+01h)
00007380:	CP 4Fh	; 'O'
00007382:	RET Z
00007383:	LD A,(HL)
00007384:	OR A
00007385:	RET Z
00007386:	INC A
00007387:	RET Z
00007388:	PUSH BC
00007389:	PUSH DE
0000738A:	PUSH HL
0000738B:	LD DE,1480h	; FCB (DIRIMG)
0000738E:	LD BC,0020h
00007391:	LDIR
00007393:	POP HL
00007394:	POP DE
00007395:	POP BC
00007396:	XOR A
00007397:	RET

00007398:	PUSH DE
00007399:	PUSH HL
0000739A:	LD DE,1480h	; FCB (DIRIMG)
0000739D:	INC DE
0000739E:	JP 1359h

000073A1:	LD A,(736Dh)
000073A4:	OR A
000073A5:	RET Z
000073A6:	JR -3Ch
000073A8:	CALL 691Eh
000073AB:	CALL 747Ch
000073AE:	LD A,C
000073AF:	OR A
000073B0:	JR NZ,+01h
000073B2:	DEC B
000073B3:	EX DE,HL
000073B4:	LD L,(IY+07h)
000073B7:	LD H,00h
000073B9:	ADD HL,HL
000073BA:	ADD HL,HL
000073BB:	ADD HL,HL
000073BC:	ADD HL,HL
000073BD:	EX DE,HL
000073BE:	LD A,B
000073BF:	CP 10h
000073C1:	JR C,+02h
000073C3:	LD A,0Fh
000073C5:	PUSH BC
000073C6:	PUSH HL
000073C7:	PUSH AF
000073C8:	INC A
000073C9:	CALL 705Dh
000073CC:	LD HL,FF00h		; -256
000073CF:	LD DE,000Eh
000073D2:	LD A,01h
000073D4:	CALL 7063h
000073D7:	LD HL,FF00h		; -256
000073DA:	LD E,(IY+07h)
000073DD:	LD D,00h
000073DF:	POP AF
000073E0:	JR C,+08h
000073E2:	CALL 7317h
000073E5:	LD (IY+07h),A
000073E8:	SUB 80h
000073EA:	ADD 80h
000073EC:	ADD HL,DE
000073ED:	LD (HL),A
000073EE:	LD HL,FF00h		; -256
000073F1:	LD DE,000Eh
000073F4:	LD A,01h
000073F6:	CALL 705Dh
000073F9:	POP HL
000073FA:	POP BC
000073FB:	LD A,B
000073FC:	SUB 10h
000073FE:	CCF
000073FF:	RET NC
00007400:	LD B,A
00007401:	LD DE,1000h
00007404:	ADD HL,DE
00007405:	JR -54h
00007407:	CALL 6C6Bh
0000740A:	CALL 747Ch
0000740D:	LD A,C
0000740E:	OR A
0000740F:	JR Z,+01h
00007411:	INC B
00007412:	LD E,(IY+07h)
00007415:	LD D,00h
00007417:	EX DE,HL
00007418:	ADD HL,HL
00007419:	ADD HL,HL
0000741A:	ADD HL,HL
0000741B:	ADD HL,HL
0000741C:	EX DE,HL
0000741D:	LD A,B
0000741E:	CP 11h
00007420:	JR C,+2Eh
00007422:	LD A,10h
00007424:	PUSH BC
00007425:	PUSH HL
00007426:	CALL 7063h
00007429:	LD HL,FF00h		; -256
0000742C:	LD DE,000Eh
0000742F:	LD A,01h
00007431:	CALL 7063h
00007434:	LD HL,FF00h		; -256
00007437:	CALL 68B3h
0000743A:	LD E,(IY+07h)
0000743D:	LD D,00h
0000743F:	ADD HL,DE
00007440:	LD E,(HL)
00007441:	LD (IY+07h),E
00007444:	POP HL
00007445:	LD DE,1000h
00007448:	ADD HL,DE
00007449:	POP BC
0000744A:	LD A,B
0000744B:	SUB 10h
0000744D:	LD B,A
0000744E:	JR -3Eh
00007450:	DEC A
00007451:	PUSH BC
00007452:	PUSH HL
00007453:	JR Z,+10h
00007455:	PUSH DE
00007456:	PUSH AF
00007457:	CALL 7063h
0000745A:	POP AF
0000745B:	POP HL
0000745C:	LD C,A
0000745D:	LD B,00h
0000745F:	ADD HL,BC
00007460:	EX DE,HL
00007461:	POP HL
00007462:	ADD H
00007463:	LD H,A
00007464:	PUSH HL
00007465:	LD HL,A73Fh		; KEYBM1 (aka KEYBUF)
00007468:	LD A,01h
0000746A:	CALL 7063h
0000746D:	POP DE
0000746E:	POP BC
0000746F:	LD B,00h
00007471:	LD A,C
00007472:	OR A
00007473:	JR NZ,+01h
00007475:	INC B
00007476:	LD HL,A73Fh		; KEYBM1 (aka KEYBUF)
00007479:	LDIR
0000747B:	RET

0000747C:	LD A,(IY+09h)
0000747F:	AND 0Fh
00007481:	LD (74BEh),A
00007484:	LD A,(IY+09h)
00007487:	AND F0h
00007489:	RRCA
0000748A:	RRCA
0000748B:	RRCA
0000748C:	RRCA
0000748D:	LD (74BFh),A
00007490:	RET

00007491:	NOP
00007492:	NOP
00007493:	JR NZ,+20h
00007495:	JR NZ,+30h
00007497:	LD A,(3A30h)
0000749A:	LD B,D
0000749B:	LD B,C
0000749C:	LD D,E
0000749D:	LD C,C
0000749E:	LD B,E
0000749F:	JR NZ,+43h
000074A1:	LD E,D
000074A2:	JR C,+46h
000074A4:	LD B,D
000074A5:	JR NC,+31h
000074A7:	LD L,53h
000074A9:	LD A,C
000074AA:	LD (HL),E
000074AB:	NOP
000074AC:	NOP
000074AD:	NOP
000074AE:	NOP
000074AF:	NOP
000074B0:	NOP
000074B1:	NOP
000074B2:	NOP
000074B3:	NOP
000074B4:	NOP
000074B5:	NOP
000074B6:	NOP
000074B7:	NOP
000074B8:	NOP
000074B9:	NOP
000074BA:	NOP
000074BB:	NOP
000074BC:	NOP
000074BD:	NOP
000074BE:	SUB B
000074BF:	RLCA
000074C0:	NOP
000074C1:	RET Z
000074C2:	NOP
000074C3:	INC B
000074C4:	NOP
000074C5:	NOP
000074C6:	NOP
000074C7:	SUB C
000074C8:	LD (HL),H
000074C9:	NOP
000074CA:	NOP
000074CB:	NOP
000074CC:	NOP
000074CD:	ADD (HL)
000074CE:	LD (HL),B
000074CF:	AND (HL)
000074D0:	LD (HL),C
000074D1:	LD (HL),A
000074D2:	LD L,D
000074D3:	LD SP,9B71h
000074D6:	LD L,B
000074D7:	OR 6Ah
000074D9:	LD IXl,D
000074DB:	SUB L
000074DC:	LD L,H
000074DD:	ADD C
000074DE:	LD L,H
000074DF:	ADC (HL)
000074E0:	LD L,H
000074E1:	LD C,6Bh
000074E3:	LD A,L
000074E4:	LD L,H
000074E5:	SBC E
000074E6:	LD L,B
000074E7:	SBC E
000074E8:	LD L,B
000074E9:	SBC E
000074EA:	LD L,B
000074EB:	RLCA
000074EC:	LD (HL),H
000074ED:	XOR B
000074EE:	LD (HL),E
000074EF:	SBC E
000074F0:	LD L,B
000074F1:	RET NC
000074F2:	LD (HL),B
000074F3:	POP DE
000074F4:	LD (HL),L
000074F5:	LD E,B
000074F6:	HALT
000074F7:	LD A,FCh
000074F9:	DEC A
000074FA:	NOP
000074FB:	NOP
000074FC:	NOP
000074FD:	JR NZ,-06h
000074FF:	RET

00007500:	LD H,FFh
00007502:	LD BC,0FFBh
00007505:	LD A,A5h
00007507:	OUT (C),A
00007509:	LD A,0Ah
0000750B:	CALL 74F9h
0000750E:	IN A,(C)
00007510:	CP A5h
00007512:	RET Z
00007513:	DEC H
00007514:	JR NZ,-14h
00007516:	JR +37h
00007518:	NOP
00007519:	NOP
0000751A:	NOP
0000751B:	CALL 74F7h
0000751E:	PUSH HL
0000751F:	DI
00007520:	CALL 7500h
00007523:	LD A,(74BEh)
00007526:	AND 03h
00007528:	SRL D
0000752A:	JR NC,+02h
0000752C:	OR 10h
0000752E:	OR 80h
00007530:	LD (74BEh),A
00007533:	LD C,FCh
00007535:	OUT (C),A
00007537:	PUSH DE
00007538:	LD E,03h
0000753A:	LD HL,0000h
0000753D:	LD BC,0FF8h
00007540:	IN A,(C)
00007542:	AND 81h
00007544:	JR Z,+5Ah
00007546:	DEC HL
00007547:	LD A,H
00007548:	OR L
00007549:	JR NZ,-0Bh
0000754B:	DEC E
0000754C:	JR NZ,-0Eh
0000754E:	JP 6880h		; ERROR: Device offline

00007551:	PUSH AF
00007552:	PUSH HL
00007553:	PUSH DE
00007554:	CALL 756Eh
00007557:	LD (HL),00h
00007559:	XOR A
0000755A:	LD BC,0FF9h
0000755D:	OUT (C),A
0000755F:	DEC C
00007560:	LD A,02h
00007562:	OUT (C),A
00007564:	CALL 7592h
00007567:	POP DE
00007568:	CALL 757Dh
0000756B:	POP HL
0000756C:	POP AF
0000756D:	RET

0000756E:	LD HL,74C3h
00007571:	PUSH DE
00007572:	LD A,(74BEh)
00007575:	AND 0Fh
00007577:	LD E,A
00007578:	LD D,00h
0000757A:	ADD HL,DE
0000757B:	POP DE
0000757C:	RET

0000757D:	LD C,FBh
0000757F:	OUT (C),D
00007581:	PUSH HL
00007582:	CALL 756Eh
00007585:	LD A,(HL)
00007586:	LD C,F9h
00007588:	OUT (C),A
0000758A:	LD (HL),D
0000758B:	POP HL
0000758C:	LD C,F8h
0000758E:	LD A,1Eh
00007590:	OUT (C),A
00007592:	PUSH HL
00007593:	PUSH DE
00007594:	LD B,14h
00007596:	DJNZ -02h
00007598:	LD BC,0FF8h
0000759B:	IN A,(C)
0000759D:	RRCA
0000759E:	JR C,-05h
000075A0:	POP DE
000075A1:	POP HL
000075A2:	RET

000075A3:	PUSH HL
000075A4:	LD L,A
000075A5:	EX AF,AF'
000075A6:	LD A,(74BEh)
000075A9:	AND 0Fh
000075AB:	CP 04h
000075AD:	JP NC,6898h			; ERROR: Bad file descripter
000075B0:	LD H,04h
000075B2:	LD A,FFh
000075B4:	DEC L
000075B5:	SUB L
000075B6:	LD L,A
000075B7:	OR A
000075B8:	SBC HL,DE
000075BA:	POP HL
000075BB:	JP C,6F91h		; ERROR: 'Bad record'
000075BE:	LD A,E
000075BF:	RLCA
000075C0:	RL D
000075C2:	RLCA
000075C3:	RL D
000075C5:	RLCA
000075C6:	RL D
000075C8:	RLCA
000075C9:	RL D
000075CB:	LD A,E
000075CC:	AND 0Fh
000075CE:	INC A
000075CF:	LD E,A
000075D0:	RET

000075D1:	LD A,01h
000075D3:	CALL 75A3h
000075D6:	CALL 751Eh
000075D9:	CALL 757Dh
000075DC:	LD A,05h
000075DE:	PUSH AF
000075DF:	PUSH HL
000075E0:	LD A,80h
000075E2:	CALL 763Ch
000075E5:	PUSH DE
000075E6:	LD DE,F8FBh
000075E9:	LD C,E
000075EA:	IN A,(C)
000075EC:	LD C,D
000075ED:	IN A,(C)
000075EF:	RRCA
000075F0:	JR NC,+0Bh
000075F2:	RRCA
000075F3:	JR NC,-08h
000075F5:	LD C,E
000075F6:	IN A,(C)
000075F8:	LD (HL),A
000075F9:	INC HL
000075FA:	LD C,D
000075FB:	JR -10h
000075FD:	BIT 6,A
000075FF:	JP NZ,6880h		; ERROR: Device offline
00007602:	AND 4Eh
00007604:	POP DE
00007605:	JR Z,+0Bh
00007607:	POP HL
00007608:	POP AF
00007609:	DEC A
0000760A:	JP Z,76A1h
0000760D:	CALL 7551h
00007610:	JR -34h
00007612:	POP AF
00007613:	POP AF
00007614:	EX AF,AF'
00007615:	DEC A
00007616:	JR Z,+34h
00007618:	EX AF,AF'
00007619:	CALL 7620h
0000761C:	JR NC,-42h
0000761E:	JR -47h
00007620:	INC E
00007621:	LD A,10h
00007623:	CP E
00007624:	RET NC
00007625:	LD E,01h
00007627:	PUSH HL
00007628:	LD HL,74BEh
0000762B:	LD A,(HL)
0000762C:	XOR 10h
0000762E:	LD (HL),A
0000762F:	AND 10h
00007631:	JR NZ,+02h
00007633:	INC D
00007634:	SCF
00007635:	LD C,FCh
00007637:	LD A,(HL)
00007638:	OUT (C),A
0000763A:	POP HL
0000763B:	RET

0000763C:	EI
0000763D:	LD C,FAh
0000763F:	DI
00007640:	OUT (C),E
00007642:	LD C,F8h
00007644:	OUT (C),A
00007646:	LD A,07h
00007648:	DEC A
00007649:	JR NZ,-03h
0000764B:	RET

; Stop floppy disk drive
0000764C:	LD BC,0FFCh		; floppy drive
0000764F:	LD A,(74BEh)
00007652:	AND 13h
00007654:	OUT (C),A
00007656:	EI
00007657:	RET

00007658:	LD A,01h
0000765A:	LD (76C3h),A
0000765D:	LD (76C5h),DE
00007661:	LD (76C8h),HL
00007664:	CALL 75A3h
00007667:	CALL 771Bh
0000766A:	CALL 751Bh
0000766D:	CALL 757Dh
00007670:	LD A,05h
00007672:	PUSH AF
00007673:	PUSH HL
00007674:	LD A,A0h
00007676:	CALL 763Ch
00007679:	PUSH DE
0000767A:	LD DE,F8FBh
0000767D:	IN A,(C)
0000767F:	RRCA
00007680:	JR NC,+0Bh
00007682:	RRCA
00007683:	JR NC,-08h
00007685:	LD A,(HL)
00007686:	LD C,E
00007687:	OUT (C),A
00007689:	INC HL
0000768A:	LD C,D
0000768B:	JR -10h
0000768D:	BIT 6,A
0000768F:	JP NZ,6880h		; ERROR: Device offline
00007692:	BIT 5,A
00007694:	JP NZ,68A1h		; ERROR: Write protected
00007697:	AND 7Eh
00007699:	POP DE
0000769A:	JR Z,+10h
0000769C:	POP HL
0000769D:	POP AF
0000769E:	DEC A
0000769F:	JR NZ,+06h
000076A1:	CALL 764Ch		; Stop floppy disk drive
000076A4:	JP 687Dh		; ERROR: Device I/O error

000076A7:	CALL 7551h
000076AA:	JR -3Ah
000076AC:	POP AF
000076AD:	POP AF
000076AE:	EX AF,AF'
000076AF:	DEC A
000076B0:	JR Z,+08h
000076B2:	EX AF,AF'
000076B3:	CALL 7620h
000076B6:	JR NC,-48h
000076B8:	JR -4Dh
000076BA:	LD A,(IY+00h)
000076BD:	AND 40h
000076BF:	JP Z,764Ch		; Stop floppy disk drive
000076C2:	LD A,10h
000076C4:	LD DE,0090h
000076C7:	LD HL,7000h
000076CA:	CALL 75A3h
000076CD:	CALL 751Bh
000076D0:	CALL 757Dh
000076D3:	LD A,05h
000076D5:	PUSH AF
000076D6:	PUSH HL
000076D7:	LD A,80h
000076D9:	CALL 763Ch
000076DC:	PUSH DE
000076DD:	LD DE,F8FBh
000076E0:	LD C,E
000076E1:	IN A,(C)
000076E3:	LD C,D
000076E4:	IN A,(C)
000076E6:	RRCA
000076E7:	JR NC,+12h
000076E9:	RRCA
000076EA:	JR NC,-08h
000076EC:	LD C,E
000076ED:	IN A,(C)
000076EF:	CP (HL)
000076F0:	INC HL
000076F1:	LD C,D
000076F2:	JR Z,-10h
000076F4:	CALL 7592h
000076F7:	JR +06h
000076F9:	NOP
000076FA:	NOP
000076FB:	AND 4Eh
000076FD:	JR Z,+0Ch
000076FF:	POP DE
00007700:	POP HL
00007701:	POP AF
00007702:	DEC A
00007703:	JP Z,76A1h
00007706:	CALL 7551h
00007709:	JR -36h
0000770B:	POP DE
0000770C:	POP AF
0000770D:	POP AF
0000770E:	EX AF,AF'
0000770F:	DEC A
00007710:	JP Z,764Ch		; Stop floppy disk drive
00007713:	EX AF,AF'
00007714:	CALL 7620h
00007717:	JR NC,-46h
00007719:	JR -4Bh
0000771B:	LD A,(IY+00h)
0000771E:	AND 80h
00007720:	RET Z
00007721:	JP 68A1h		; ERROR: Write protected
00007724:	JR NZ,+43h
00007726:	LD L,H
00007727:	LD (HL),L
00007728:	LD (HL),E
00007729:	LD (HL),H
0000772A:	LD H,L
0000772B:	LD (HL),D
0000772C:	LD (HL),E
0000772D:	JR NZ,+66h
0000772F:	LD (HL),D
00007730:	LD H,L
00007731:	LD H,L
00007732:	NOP

; CVIMTX: convert immediate buffer for direct execution
00007733:	PUSH DE
00007734:	PUSH BC
00007735:	LD C,00h
00007737:	CALL 78D3h		; IMSPACE: check for required SPACE and pick next byte from line
0000773A:	OR A
0000773B:	JR Z,+2Fh
0000773D:	INC DE
0000773E:	CP 80h
00007740:	JR NC,-0Bh
00007742:	CP 20h	; ' '
00007744:	JR C,-0Fh
00007746:	DEC DE
00007747:	CP 3Fh	; '?'
00007749:	JR Z,+1Ah		; alias for 'PRINT'
0000774B:	CP 22h	; '"'
0000774D:	JR Z,+21h
0000774F:	CP 27h
00007751:	JR Z,+24h
00007753:	CP 2Eh	; '.'
00007755:	JR Z,+09h
00007757:	CP 26h	; '&'
00007759:	JR Z,+05h
0000775B:	CALL 53F0h		; TSTNUM
0000775E:	JR C,+42h
00007760:	CALL 78DDh
00007763:	JR -2Eh

; alias for 'PRINT'
00007765:	LD (HL),8Fh		; force token for 'PRINT'
00007767:	CALL 78CCh		; move a byte forward in line being edited
0000776A:	JR -35h
0000776C:	LD (HL),A
0000776D:	POP BC
0000776E:	POP DE
0000776F:	RET

00007770:	CALL 78C0h
00007773:	JR Z,-09h
00007775:	JR -40h
00007777:	LD (HL),3Ah
00007779:	CALL 78CDh		; move a byte forward in line being edited (write ptr only)
0000777C:	CALL 78CBh		; put token/character code and move a byte forward in line being edited
0000777F:	LD A,(DE)
00007780:	OR A
00007781:	JR NZ,-07h
00007783:	JR -4Eh

00007785:	CALL 78CBh		; put token/character code and move a byte forward in line being edited
00007788:	JR -53h

0000778A:	POP BC
0000778B:	CALL 53F7h		; TOUPPER (DE)
0000778E:	CP 41h
00007790:	JR C,-0Dh
00007792:	CP 5Bh			; '['  (some BASIC subtracts "A" and checks for 26)
00007794:	JR NC,-11h
00007796:	LD A,(DE)
00007797:	CALL 78CBh		; put token/character code and move a byte forward in line being edited
0000779A:	LD A,(DE)
0000779B:	CALL 5401h		; TSTVAR:
0000779E:	JR NC,-09h
000077A0:	JR -6Bh

; IMRSV
000077A2:	PUSH BC
000077A3:	LD BC,2921h		; TOKEN table
000077A6:	CALL 788Ch		; IMSER: search in Token Table
000077A9:	JR NC,+35h

000077AB:	LD BC,2AF6h		; TOKEN table for prefix $FE
000077AE:	CALL 788Ch		; IMSER: search in Token Table
000077B1:	LD C,FEh
000077B3:	JR NC,+0Ah

000077B5:	LD BC,2BD7h		; TOKEN table for prefix $FF
000077B8:	CALL 788Ch		; IMSER: search in Token Table
000077BB:	LD C,FFh
000077BD:	JR C,-35h

000077BF:	LD (HL),C
000077C0:	INC HL
000077C1:	LD (HL),B
000077C2:	LD A,B
000077C3:	POP BC
000077C4:	CALL 78CEh
000077C7:	CALL 78CDh		; move a byte forward in line being edited (write ptr only)
000077CA:	CP B7h		; Token for 'CHAIN'
000077CC:	JR Z,+04h
000077CE:	CP B4h		; Token for 'LOAD'
000077D0:	JR NZ,-4Fh
000077D2:	CALL 78D3h		; IMSPACE: check for required SPACE and pick next byte from line
000077D5:	CP 3Dh	; '='
000077D7:	JR NZ,-56h
000077D9:	LD (HL),F4h		;  force token for '='
000077DB:	CALL 78CCh	; move a byte forward in line being edited
000077DE:	JR +3Eh
000077E0:	LD A,B
000077E1:	POP BC
000077E2:	CALL 78CDh		; move a byte forward in line being edited (write ptr only)
000077E5:	CP 97h		; Token for 'REM'
000077E7:	JR Z,-6Ah
000077E9:	CP 94h		; Token for 'DATA'
000077EB:	JP Z,7876h
000077EE:	CP C2h		; Token for 'ELSE'
000077F0:	JR Z,+7Ah
000077F2:	CP E2h		; token for 'THEN'
000077F4:	JR Z,+28h
000077F6:	CP 8Dh		; Token for 'FOR'

000077F8:	JR NC,-77h
000077FA:	CP 87h		; Token for 'LIST'
000077FC:	JR NC,+4Ch
000077FE:	CP 82h		; Token for 'GO'
00007800:	JR NZ,+1Ch	; 781Eh

00007802:	CALL 78D3h		; IMSPACE: check for required SPACE and pick next byte from line
00007805:	OR A
00007806:	JR Z,-10h
00007808:	PUSH BC
00007809:	LD BC,2921h		; TOKEN table
0000780C:	CALL 788Ch		; IMSER: search in Token Table
0000780F:	LD A,B
00007810:	POP BC
00007811:	JR C,-73h
00007813:	CALL 78CDh		; move a byte forward in line being edited (write ptr only)
00007816:	CP E0h			; Token for 'TO'
00007818:	JR Z,+04h
0000781A:	CP E4h			; Token for 'SUB'
0000781C:	JR NZ,-26h

;
0000781E:	CALL 78D3h		; IMSPACE: check for required SPACE and pick next byte from line
00007821:	CP 2Ch	; ','
00007823:	JR Z,+0Ah
00007825:	CALL 53F0h		; TSTNUM
00007828:	JR C,+0Ah
0000782A:	CALL 793Fh
0000782D:	JR -11h
0000782F:	CALL 78CBh		; put token/character code and move a byte forward in line being edited
00007832:	JR -16h
00007834:	CALL 7957h
00007837:	JP Z,7783h
0000783A:	CP 22h	; '"'
0000783C:	JP NZ,7783h
0000783F:	CALL 78C0h
00007842:	JP Z,776Ch
00007845:	JR -29h
00007847:	CALL 78CBh		; put token/character code and move a byte forward in line being edited
0000784A:	CALL 78D3h		; IMSPACE: check for required SPACE and pick next byte from line
0000784D:	CP 22h	; '"'
0000784F:	JR NZ,+08h
00007851:	CALL 78C0h
00007854:	JR NZ,-0Ch
00007856:	JP 776Ch

00007859:	CP 2Ch	; ','
0000785B:	JR C,+07h
0000785D:	CP 2Fh	; '/'
0000785F:	JR C,-1Ah
00007861:	CALL 53F0h		; TSTNUM
00007864:	JP C,7783h
00007867:	CALL 793Fh
0000786A:	JR -22h
0000786C:	DEC HL
0000786D:	LD (HL),3Ah
0000786F:	INC HL
00007870:	LD (HL),A
00007871:	CALL 78CDh		; move a byte forward in line being edited (write ptr only)
00007874:	JR -58h
00007876:	LD A,(DE)
00007877:	CALL 7957h
0000787A:	JP Z,7737h
0000787D:	CALL 78CBh		; put token/character code and move a byte forward in line being edited
00007880:	CP 22h	; '"'
00007882:	JR NZ,-0Eh
00007884:	CALL 78C4h
00007887:	JP Z,776Ch
0000788A:	JR -16h

; IMSER: search in Token Table
; Encode Token, BC=table, A=code
0000788C:	PUSH HL
0000788D:	PUSH DE
0000788E:	LD L,C
0000788F:	LD H,B
00007890:	LD B,7Fh
00007892:	POP DE
00007893:	PUSH DE
00007894:	INC B
00007895:	LD A,(HL)
00007896:	INC A
00007897:	JR NZ,+04h
00007899:	POP DE
0000789A:	POP HL
0000789B:	SCF
0000789C:	RET

0000789D:	CALL 53F7h		; TOUPPER (DE)
000078A0:	LD C,(HL)
000078A1:	INC HL
000078A2:	INC DE
000078A3:	CP 2Eh	; '.'
000078A5:	JR Z,+0Fh

000078A7:	SUB C
000078A8:	JR Z,-0Dh
000078AA:	CP 80h
000078AC:	JR Z,+0Eh
000078AE:	DEC HL
000078AF:	LD A,(HL)
000078B0:	RLCA
000078B1:	INC HL
000078B2:	JR NC,-05h
000078B4:	JR -24h
000078B6:	LD A,B
000078B7:	CP EEh			; Token code for arithmentic symbols ?
000078B9:	JR NC,-0Dh
000078BB:	CCF
000078BC:	POP HL
000078BD:	POP HL
000078BE:	LD (HL),B
000078BF:	RET

000078C0:	LD (HL),A
000078C1:	CALL 78CCh	; move a byte forward in line being edited
000078C4:	LD A,(DE)
000078C5:	OR A
000078C6:	RET Z
000078C7:	CP 22h	; '"'
000078C9:	JR NZ,-0Bh


; put token/character code and move a byte forward in line being edited
000078CB:	LD (HL),A
; move a byte forward in line being edited
000078CC:	INC DE
; move a byte forward in line being edited (write ptr only)
000078CD:	INC HL
;
000078CE:	INC C
000078CF:	RET NZ
000078D0:	JP 2054h	; ERROR: Line buffer overflow

; IMSPACE: check for required SPACE and pick next byte from line
000078D3:	LD A,(DE)
000078D4:	CP 20h	; ' '
000078D6:	RET NZ
000078D7:	LD (HL),A
000078D8:	CALL 78CCh	; move a byte forward in line being edited
000078DB:	JR -0Ah

000078DD:	PUSH BC
000078DE:	CP 26h	; '&'
000078E0:	PUSH HL
000078E1:	INC HL
000078E2:	JR NZ,+1Dh
000078E4:	PUSH DE
000078E5:	INC DE
000078E6:	CALL 53F7h		; TOUPPER (DE)
000078E9:	POP DE
000078EA:	PUSH AF
000078EB:	CALL 54F6h		; ....get number
000078EE:	POP AF
000078EF:	CP 48h	; 'H' (hex)
000078F1:	LD B,0Fh
000078F3:	JR Z,+06h
000078F5:	DEC B
000078F6:	CP 42h	; 'B' (bin)
000078F8:	JR Z,+01h
000078FA:	DEC B
000078FB:	LD A,B
000078FC:	LD C,(HL)
000078FD:	INC HL
000078FE:	LD B,(HL)
000078FF:	JR +27h

00007901:	CALL 54F6h		; ....get number
00007904:	LD A,(A5DBh)		; data type, aka PRCSON
00007907:	CP 02h			; integer type ?
00007909:	JR NZ,+3Ch
0000790B:	LD A,(HL)
0000790C:	INC HL
0000790D:	LD H,(HL)
0000790E:	LD L,A
0000790F:	LD A,H
00007910:	BIT 7,A
00007912:	JP NZ,205Ah		; ERROR: Overflow
00007915:	OR A
00007916:	JR NZ,+0Ch
00007918:	LD A,L
00007919:	CP 0Ah
0000791B:	JR NC,+07h
0000791D:	INC A
0000791E:	POP HL
0000791F:	LD B,A
00007920:	LD A,01h
00007922:	JR +0Bh
00007924:	LD A,12h
00007926:	LD C,L
00007927:	LD B,H
00007928:	POP HL
00007929:	LD (HL),A
0000792A:	LD A,03h
0000792C:	INC HL
0000792D:	LD (HL),C
0000792E:	INC HL
0000792F:	LD (HL),B
00007930:	INC HL
00007931:	POP BC
00007932:	ADD C
00007933:	JP C,2054h	; ERROR: Line buffer overflow
00007936:	LD C,A
00007937:	DEC DE
00007938:	LD A,(DE)
00007939:	CP 20h	; ' '
0000793B:	JR Z,-06h
0000793D:	INC DE
0000793E:	RET

0000793F:	PUSH BC
00007940:	CALL 7B8Eh		; CVBCAS:	Convert ASCII to BC
00007943:	LD A,0Bh
00007945:	JR -1Eh
00007947:	LD A,(A5DBh)		; data type, aka PRCSON
0000794A:	LD C,A
0000794B:	OR 10h
0000794D:	POP HL
0000794E:	LD (HL),A
0000794F:	INC HL
00007950:	LD B,00h
00007952:	ADD HL,BC
00007953:	LD A,C
00007954:	INC A
00007955:	JR -26h
00007957:	CP 3Ah	; ':'
00007959:	RET Z
0000795A:	OR A
0000795B:	RET

	; Parse next BASIC statement
0000795C:	PUSH HL
0000795D:	PUSH DE
0000795E:	PUSH BC
0000795F:	XOR A
00007960:	LD (A5CEh),A
00007963:	LD C,00h

	; Parse next BASIC statement (ELSE, etc..)
00007965:	LD A,(HL)
00007966:	INC HL
00007967:	OR A
00007968:	JR Z,+21h
0000796A:	LD BC,2921h		; TOKEN table
0000796D:	CP 20h	; ' '
0000796F:	JP C,79F5h
00007972:	CP 22h	; '"'
00007974:	JR Z,+53h
00007976:	CP 3Ah	; ':'
00007978:	JR Z,+6Ah
0000797A:	CP 97h			; token for 'REM'
0000797C:	JR Z,+5Dh
0000797E:	CP 94h			; Token for 'DATA'
00007980:	JR Z,+22h
00007982:	CP 80h
00007984:	JR NC,+0Ah
00007986:	CALL 7ABDh
00007989:	JR -26h
0000798B:	LD (DE),A
0000798C:	POP BC
0000798D:	POP DE
0000798E:	POP HL
0000798F:	RET

00007990:	CP FEh
00007992:	JR C,+0Bh
00007994:	INC A
00007995:	LD BC,2BD7h		; TOKEN table for prefix $FF
00007998:	JR Z,+03h
0000799A:	LD BC,2AF6h		; TOKEN table for prefix $FE
0000799D:	LD A,(HL)
0000799E:	INC HL
0000799F:	CALL 7AA0h
000079A2:	JR -1Bh
000079A4:	CALL 7AA0h
000079A7:	JR Z,-20h
000079A9:	LD A,(HL)
000079AA:	CP 22h	; '"'
000079AC:	JR Z,+0Dh
000079AE:	CALL 7957h
000079B1:	JR Z,-4Eh
000079B3:	CALL 7ABDh
000079B6:	INC HL
000079B7:	JR NZ,-10h
000079B9:	JR -30h
000079BB:	CALL 7ABDh
000079BE:	INC HL
000079BF:	LD A,(HL)
000079C0:	OR A
000079C1:	JR Z,-5Eh
000079C3:	CP 22h	; '"'
000079C5:	JR NZ,-0Ch
000079C7:	JR -16h
000079C9:	LD B,22h	; '"'
000079CB:	CALL 7ABDh
000079CE:	LD A,(HL)
000079CF:	OR A
000079D0:	JR Z,-47h
000079D2:	INC HL
000079D3:	CP B
000079D4:	JR Z,-50h
000079D6:	CALL 7ABDh
000079D9:	JR -0Dh
000079DB:	CALL 7AA0h
000079DE:	JR Z,-55h
000079E0:	LD B,00h
000079E2:	JR -16h
000079E4:	LD (DE),A
000079E5:	LD A,(HL)
000079E6:	CP 27h
000079E8:	JR Z,-0Ah
000079EA:	CP C2h				; Token for 'ELSE'
000079EC:	JP Z,7965h			; Parse next BASIC statement (ELSE, etc..)

000079EF:	CALL 7AC0h
000079F2:	JP 7989h

000079F5:	CP 14h
000079F7:	JR NC,+44h
000079F9:	CP 0Bh
000079FB:	JR NC,+05h
000079FD:	DEC A
000079FE:	OR 30h
00007A00:	JR -7Ch
00007A02:	PUSH DE
00007A03:	LD E,(HL)
00007A04:	INC HL
00007A05:	LD D,(HL)
00007A06:	INC HL
00007A07:	PUSH HL
00007A08:	CP 12h
00007A0A:	JR Z,+0Dh
00007A0C:	CP 0Ch
00007A0E:	JR C,+09h
00007A10:	JP NZ,7AEEh
00007A13:	EX DE,HL
00007A14:	INC HL
00007A15:	INC HL
00007A16:	LD E,(HL)
00007A17:	INC HL
00007A18:	LD D,(HL)
00007A19:	EX DE,HL
00007A1A:	LD DE,A5A7h
00007A1D:	CALL 5C7Ah
00007A20:	XOR A
00007A21:	LD (A5ACh),A		; DGBF16
00007A24:	LD B,04h
00007A26:	LD A,(DE)
00007A27:	CP 30h
00007A29:	JR NZ,+03h
00007A2B:	INC DE
00007A2C:	DJNZ -08h
00007A2E:	LD C,E
00007A2F:	LD B,D
00007A30:	POP HL
00007A31:	POP DE
00007A32:	LD A,(BC)
00007A33:	OR A
00007A34:	JP Z,7965h			; Parse next BASIC statement (ELSE, etc..)
00007A37:	CALL 7ABDh
00007A3A:	INC BC
00007A3B:	JR -0Bh
00007A3D:	AND 0Fh
00007A3F:	LD (A5DBh),A		; data type, aka PRCSON
00007A42:	PUSH HL
00007A43:	PUSH DE
00007A44:	CALL 595Ch
00007A47:	EX DE,HL
00007A48:	POP DE
00007A49:	LD A,(HL)
00007A4A:	OR A
00007A4B:	JR Z,+13h
00007A4D:	LD (DE),A
00007A4E:	CP 2Eh	; '.'
00007A50:	JR Z,+30h
00007A52:	CP 45h
00007A54:	JR Z,+2Ch
00007A56:	CP 44h
00007A58:	JR Z,+37h
00007A5A:	INC HL
00007A5B:	CALL 7AC0h
00007A5E:	JR -17h
00007A60:	LD A,(A5DBh)		; data type, aka PRCSON
00007A63:	CP 08h		; double precision type ?
00007A65:	LD A,21h
00007A67:	JR NZ,+02h
00007A69:	LD A,23h
00007A6B:	CALL 7ABDh
00007A6E:	LD A,(A5DBh)		; data type, aka PRCSON
00007A71:	LD C,A
00007A72:	LD B,00h
00007A74:	POP HL
00007A75:	ADD HL,BC
00007A76:	JP 7965h			; Parse next BASIC statement (ELSE, etc..)

00007A79:	LD A,(HL)
00007A7A:	OR A
00007A7B:	JR Z,+0Bh
00007A7D:	LD (DE),A
00007A7E:	CP 44h
00007A80:	JR Z,+0Fh
00007A82:	INC HL
00007A83:	CALL 7AC0h
00007A86:	JR -0Fh
00007A88:	LD A,(A5DBh)		; data type, aka PRCSON
00007A8B:	CP 08h		; double precision type ?
00007A8D:	JR Z,-26h
00007A8F:	JR -23h
00007A91:	INC HL
00007A92:	CALL 7AC0h
00007A95:	DEC B
00007A96:	LD A,(HL)
00007A97:	OR A
00007A98:	JR Z,-2Ch
00007A9A:	CALL 7ABDh
00007A9D:	INC HL
00007A9E:	JR -0Ah
00007AA0:	CP 80h
00007AA2:	JR Z,+0Bh
00007AA4:	EX AF,AF'
00007AA5:	LD A,(BC)
00007AA6:	RLCA
00007AA7:	INC BC
00007AA8:	JP NC,7AA5h
00007AAB:	EX AF,AF'
00007AAC:	DEC A
00007AAD:	JR -0Fh
00007AAF:	LD A,(BC)
00007AB0:	BIT 7,A
00007AB2:	JR NZ,+07h
00007AB4:	CALL 7ABDh
00007AB7:	RET Z
00007AB8:	INC BC
00007AB9:	JR -0Ch
00007ABB:	AND 7Fh
00007ABD:	LD (DE),A
00007ABE:	OR A
00007ABF:	RET Z

00007AC0:	INC DE
00007AC1:	LD A,(A5CEh)
00007AC4:	INC A
00007AC5:	LD (A5CEh),A
00007AC8:	RET NZ
00007AC9:	LD (DE),A
00007ACA:	DEC DE
00007ACB:	DEC A
00007ACC:	JR -09h
00007ACE:	LD A,42h
00007AD0:	EX AF,AF'
00007AD1:	EX DE,HL
00007AD2:	LD DE,A59Ch		; DGBF00
00007AD5:	CALL 7B77h
00007AD8:	LD B,0Fh
00007ADA:	JR +22h
00007ADC:	CP 0Dh
00007ADE:	JR NZ,-12h
00007AE0:	LD A,4Fh	; 'O'
00007AE2:	EX AF,AF'
00007AE3:	EX DE,HL
00007AE4:	LD DE,A5A6h
00007AE7:	CALL 7B1Bh
00007AEA:	LD B,05h
00007AEC:	JR +10h
00007AEE:	CP 0Fh
00007AF0:	JR NZ,-16h
00007AF2:	LD A,48h
00007AF4:	EX AF,AF'
00007AF5:	EX DE,HL
00007AF6:	LD DE,A5A8h
00007AF9:	CALL 7B52h
00007AFC:	LD B,03h
00007AFE:	LD A,(DE)
00007AFF:	CP 30h
00007B01:	JR NZ,+03h
00007B03:	INC DE
00007B04:	DJNZ -08h
00007B06:	LD C,E
00007B07:	LD B,D
00007B08:	POP HL
00007B09:	POP DE
00007B0A:	LD A,26h
00007B0C:	CALL 7ABDh
00007B0F:	JP Z,798Bh
00007B12:	EX AF,AF'
00007B13:	CALL 7ABDh
00007B16:	JR Z,-09h
00007B18:	JP 7A32h
00007B1B:	PUSH DE
00007B1C:	CALL 7B21h
00007B1F:	JR +35h
00007B21:	LD A,H
00007B22:	RLA
00007B23:	LD A,00h
00007B25:	ADC 30h
00007B27:	LD (DE),A
00007B28:	INC DE
00007B29:	LD A,H
00007B2A:	RRCA
00007B2B:	RRCA
00007B2C:	RRCA
00007B2D:	RRCA
00007B2E:	CALL 7B4Bh
00007B31:	LD A,H
00007B32:	RRCA
00007B33:	CALL 7B4Bh
00007B36:	LD A,H
00007B37:	AND 01h
00007B39:	LD H,L
00007B3A:	RL H
00007B3C:	RLA
00007B3D:	RL H
00007B3F:	RLA
00007B40:	CALL 7B4Bh
00007B43:	LD A,L
00007B44:	RRCA
00007B45:	RRCA
00007B46:	RRCA
00007B47:	CALL 7B4Bh
00007B4A:	LD A,L
00007B4B:	AND 07h
00007B4D:	ADD 30h
00007B4F:	LD (DE),A
00007B50:	INC DE
00007B51:	RET

00007B52:	PUSH DE
00007B53:	CALL 7B5Ah
00007B56:	XOR A
00007B57:	LD (DE),A
00007B58:	POP DE
00007B59:	RET

00007B5A:	LD A,H
00007B5B:	CALL 7B5Fh
00007B5E:	LD A,L
00007B5F:	PUSH AF
00007B60:	RRCA
00007B61:	RRCA
00007B62:	RRCA
00007B63:	RRCA
00007B64:	AND 0Fh
00007B66:	CALL 7B6Ch
00007B69:	POP AF
00007B6A:	AND 0Fh
00007B6C:	ADD 30h
00007B6E:	CP 3Ah	; ':'
00007B70:	JR C,+02h
00007B72:	ADD 07h
00007B74:	LD (DE),A
00007B75:	INC DE
00007B76:	RET

00007B77:	PUSH DE
00007B78:	CALL 7B7Dh
00007B7B:	JR -27h
00007B7D:	LD C,H
00007B7E:	CALL 7B82h
00007B81:	LD C,L
00007B82:	LD B,08h
00007B84:	XOR A
00007B85:	RL C
00007B87:	ADC 30h
00007B89:	LD (DE),A
00007B8A:	INC DE
00007B8B:	DJNZ -09h
00007B8D:	RET

; CVBCAS:	Convert ASCII to BC
00007B8E:	PUSH HL
00007B8F:	CALL 7BA1h
00007B92:	LD C,L
00007B93:	LD B,H
00007B94:	DEC DE
00007B95:	DEC DE
00007B96:	POP HL
00007B97:	LD A,(DE)
00007B98:	CP 20h	; ' '
00007B9A:	JR NZ,+03h
00007B9C:	DEC DE
00007B9D:	JR -08h
00007B9F:	INC DE
00007BA0:	RET

00007BA1:	LD HL,0000h
00007BA4:	CALL 568Ch
00007BA7:	SUB 30h
00007BA9:	RET C
00007BAA:	CP 0Ah
00007BAC:	RET NC
00007BAD:	CALL 7BC4h
00007BB0:	LD C,L
00007BB1:	LD B,H
00007BB2:	CALL 7BC4h
00007BB5:	CALL 7BC4h
00007BB8:	ADD HL,BC
00007BB9:	JR C,+06h
00007BBB:	LD C,A
00007BBC:	LD B,00h
00007BBE:	ADD HL,BC
00007BBF:	JR NC,-1Dh
00007BC1:	JP 205Ah		; ERROR: Overflow

00007BC4:	ADD HL,HL
00007BC5:	RET NC
00007BC6:	JR -07h

		; Error message table
00007BC8:	LD C,(HL)

142E:7BC0  E3 C3 5A 20 29 D0 18 F9-4E 45 58 54 20 77 69 74   ..Z )...NEXT wit
142E:7BD0  68 6F 75 74 20 46 4F 52-00 53 79 6E 74 61 78 20   hout FOR.Syntax
142E:7BE0  65 72 72 6F 72 00 52 45-54 55 52 4E 20 77 69 74   error.RETURN wit
142E:7BF0  68 6F 75 74 20 47 4F 53-55 42 00 4F 75 74 20 6F   hout GOSUB.Out o
142E:7C00  66 20 64 61 74 61 00 49-6C 6C 65 67 61 6C 20 66   f data.Illegal f
142E:7C10  75 6E 63 74 69 6F 6E 20-63 61 6C 6C 00 4F 76 65   unction call.Ove
142E:7C20  72 66 6C 6F 77 00 4F 75-74 20 6F 66 20 6D 65 6D   rflow.Out of mem
142E:7C30  6F 72 79 00 55 6E 64 65-66 69 6E 65 64 20 6C 61   ory.Undefined la
142E:7C40  62 65 6C 00 53 75 62 73-63 72 69 70 74 20 6F 75   bel.Subscript ou
142E:7C50  74 20 6F 66 20 72 61 6E-67 65 00 44 75 70 6C 69   t of range.Dupli
142E:7C60  63 61 74 65 20 64 65 66-69 6E 69 74 69 6F 6E 00   cate definition.
142E:7C70  44 69 76 69 73 69 6F 6E-20 62 79 20 7A 65 72 6F   Division by zero
142E:7C80  00 49 6C 6C 65 67 61 6C-20 64 69 72 65 63 74 00   .Illegal direct.
142E:7C90  54 79 70 65 20 6D 69 73-6D 61 74 63 68 00 80 53   Type mismatch..S
142E:7CA0  74 72 69 6E 67 20 74 6F-6F 20 6C 6F 6E 67 00 54   tring too long.T
142E:7CB0  6F 6F 20 63 6F 6D 70 6C-65 78 00 43 61 6E 27 74   oo complex.Can't
142E:7CC0  20 63 6F 6E 74 69 6E 75-65 00 55 6E 64 65 66 69    continue.Undefi
142E:7CD0  6E 65 64 20 66 75 6E 63-74 69 6F 6E 00 4E 6F 20   ned function.No
142E:7CE0  52 45 53 55 4D 45 00 52-45 53 55 4D 45 20 77 69   RESUME.RESUME wi
142E:7CF0  74 68 6F 75 74 20 65 72-72 6F 72 00 49 6C 6C 65   thout error.Ille
142E:7D00  67 61 6C 20 66 6F 72 6D-61 74 00 4D 69 73 73 69   gal format.Missi
142E:7D10  6E 67 20 6F 70 65 72 61-6E 64 00 4C 69 6E 65 20   ng operand.Line
142E:7D20  62 75 66 66 65 72 20 6F-76 65 72 66 6C 6F 77 00   buffer overflow.
142E:7D30  80 42 61 64 20 73 63 72-65 65 6E 20 6D 6F 64 65   .Bad screen mode
142E:7D40  00 55 4E 54 49 4C 20 77-69 74 68 6F 75 74 20 52   .UNTIL without R
142E:7D50  45 50 45 41 54 00 4F 75-74 20 6F 66 20 74 61 70   EPEAT.Out of tap
142E:7D60  65 00 80 54 61 70 65 20-72 65 61 64 20 65 72 72   e..Tape read err
142E:7D70  6F 72 00 42 61 64 20 66-69 6C 65 20 6D 6F 64 65   or.Bad file mode
142E:7D80  00 4F 75 74 20 6F 66 20-73 74 61 63 6B 00 57 48   .Out of stack.WH
142E:7D90  49 4C 45 20 77 69 74 68-6F 75 74 20 57 45 4E 44   ILE without WEND
142E:7DA0  00 57 45 4E 44 20 77 69-74 68 6F 75 74 20 57 48   .WEND without WH
142E:7DB0  49 4C 45 00 52 65 73 65-72 76 65 64 20 66 65 61   ILE.Reserved fea
142E:7DC0  74 75 72 65 00 46 4F 52-20 77 69 74 68 6F 75 74   ture.FOR without
142E:7DD0  20 4E 45 58 54 00 46 6F-72 6D 61 74 20 6F 76 65    NEXT.Format ove
142E:7DE0  72 00 52 45 50 45 41 54-20 77 69 74 68 6F 75 74   r.REPEAT without
142E:7DF0  20 55 4E 54 49 4C 00 46-49 45 4C 44 20 6F 76 65    UNTIL.FIELD ove
142E:7E00  72 66 6C 6F 77 00 44 65-76 69 63 65 20 69 6E 20   rflow.Device in
142E:7E10  75 73 65 00 42 61 64 20-66 69 6C 65 20 6E 75 6D   use.Bad file num
142E:7E20  62 65 72 00 46 69 6C 65-20 6E 6F 74 20 66 6F 75   ber.File not fou
142E:7E30  6E 64 00 41 6C 72 65 61-64 79 20 6F 70 65 6E 00   nd.Already open.
142E:7E40  80 44 65 76 69 63 65 20-49 2F 4F 20 65 72 72 6F   .Device I/O erro
142E:7E50  72 00 46 69 6C 65 20 61-6C 72 65 61 64 79 20 65   r.File already e
142E:7E60  78 69 73 74 73 00 80 80-44 65 76 69 63 65 20 66   xists...Device f
142E:7E70  75 6C 6C 00 49 6E 70 75-74 20 70 61 73 74 20 65   ull.Input past e
142E:7E80  6E 64 00 80 80 42 61 64-20 61 6C 6C 6F 63 61 74   nd...Bad allocat
142E:7E90  69 6F 6E 20 74 61 62 6C-65 00 42 61 64 20 66 69   ion table.Bad fi
142E:7EA0  6C 65 20 64 65 73 63 72-69 70 74 65 72 00 42 61   le descripter.Ba
142E:7EB0  64 20 72 65 63 6F 72 64-00 4E 6F 20 70 61 73 73   d record.No pass
142E:7EC0  77 6F 72 64 00 80 80 80-46 69 6C 65 20 6E 6F 74   word....File not
142E:7ED0  20 6F 70 65 6E 00 57 72-69 74 65 20 70 72 6F 74    open.Write prot
142E:7EE0  65 63 74 65 64 00 44 65-76 69 63 65 20 6F 66 66   ected.Device off
142E:7EF0  6C 69 6E 65 00 E6 92 DE-92 AF 94 95 94 A9 95 67   line...........g

00007EF4:	NOP

; Jump table 2
00007EF5:	AND 92h
00007EF7:	SBC 92h
00007EF9:	XOR A
00007EFA:	SUB H
00007EFB:	SUB L
00007EFC:	SUB H
00007EFD:	XOR C
00007EFE:	SUB L
00007EFF:	LD H,A
00007F00:	SBC B
00007F01:	LD C,A
00007F02:	SUB A
00007F03:	CCF
00007F04:	SUB E
00007F05:	DEC E
00007F06:	SUB A
00007F07:	INC D
00007F08:	SUB A
00007F09:	CALL BA93h
00007F0C:	SUB (HL)
00007F0D:	RRA
00007F0E:	SUB E
00007F0F:	LD D,93h
00007F11:	EX DE,HL
00007F12:	SUB (HL)
00007F13:	EX HL,(SP)
00007F14:	SUB (HL)
00007F15:	RLCA
00007F16:	SUB A
00007F17:	ADD HL,DE
00007F18:	LD D,H
00007F19:	LD (HL),54h		; 'T'
00007F1B:	SUB B
00007F1C:	LD E,D
00007F1D:	LD L,H
00007F1E:	JR NZ,-71h
00007F20:	LD H,L
00007F21:	CP 5Dh			; ']'
00007F23:	JR +5Eh
00007F25:	INC HL
00007F26:	LD E,(HL)
00007F27:	ADC E
00007F28:	LD E,L
00007F29:	LD A,C
00007F2A:	SUB E
00007F2B:	LD D,H
00007F2C:	SUB E
00007F2D:	ADD C
00007F2E:	ADD H
00007F2F:	ADD E
00007F30:	LD E,L
00007F31:	CALL Z,B084h
00007F34:	ADD H
00007F35:	DEC L
00007F36:	ADD L
00007F37:	RET M
00007F38:	ADD (HL)
00007F39:	AND A
00007F3A:	ADD L
00007F3B:	SUB C
00007F3C:	ADD L
00007F3D:	SBC H
00007F3E:	ADD L
00007F3F:	INC HL
00007F40:	ADD (HL)
00007F41:	JR Z,-7Ah
00007F43:	DEC L
00007F44:	ADD (HL)
00007F45:	ADD HL,SP
00007F46:	ADD (HL)
00007F47:	LD E,A
00007F48:	ADD (HL)
00007F49:	ADD E
00007F4A:	ADD (HL)
00007F4B:	DEC DE
00007F4C:	ADD A
00007F4D:	DAA
00007F4E:	ADD A
00007F4F:	CPL

00007F50:	ADD A
00007F51:	LD C,C
00007F52:	ADD A
00007F53:	LD C,L
00007F54:	ADD A
00007F55:	LD B,L
00007F56:	ADD A
00007F57:	OR D
00007F58:	LD E,L
00007F59:	LD L,H
00007F5A:	JR NZ,-61h
00007F5C:	ADD H
00007F5D:	DJNZ -7Bh
00007F5F:	SUB A
00007F60:	ADD H
00007F61:	AND H
00007F62:	ADD H
00007F63:	XOR D
00007F64:	ADD H
00007F65:	LD L,H
00007F66:	JR NZ,+6Ch
00007F68:	JR NZ,-20h
00007F6A:	ADD A
00007F6B:	RET M
00007F6C:	ADD A
00007F6D:	LD D,88h
00007F6F:	CP H
00007F70:	ADC B
00007F71:	DEC C
00007F72:	ADC D
00007F73:	SBC D
00007F74:	ADC D
00007F75:	CALL M,3388h
00007F78:	ADC C
00007F79:	LD H,H
00007F7A:	ADD A
00007F7B:	OR H
00007F7C:	ADC C
00007F7D:	ADC E
00007F7E:	ADC B
00007F7F:	LD L,E
00007F80:	ADC B
00007F81:	LD A,H
00007F82:	ADC B
00007F83:	EX DE,HL
00007F84:	SUB B
00007F85:	LD H,B
00007F86:	ADC E
00007F87:	OR L
00007F88:	ADC E
00007F89:	LD L,H
00007F8A:	JR NZ,+2Bh
00007F8C:	LD H,B
00007F8D:	ADC L
00007F8E:	ADC C
00007F8F:	JR Z,-77h
00007F91:	SBC B
00007F92:	ADD A
00007F93:	ADD HL,SP
00007F94:	ADC E
00007F95:	CALL 7FAAh		; IDEEXP: DE= (HL), A=next character to be parsed

; Check byte overflow for value in DE and put in A
00007F98:	LD A,D
00007F99:	OR A
00007F9A:	JP NZ,206Fh		; ERROR: Illegal function call
00007F9D:	LD A,E
00007F9E:	RET

; DEEXP:
00007F9F:	CALL 7FDEh
00007FA2:	EX DE,HL
00007FA3:	LD BC,FFF8h			; -8 (normal precision BASICs would have '-5')
00007FA6:	ADD HL,BC
00007FA7:	EX DE,HL
00007FA8:	JR +03h			; STDEFC

; EXPR:
00007FAA:	CALL 7FD1h		; IDEEXP: DE= (HL), A=next character to be parsed

; STDEFC:
00007FAD:	PUSH AF
00007FAE:	PUSH HL
00007FAF:	EX DE,HL
00007FB0:	CALL 5A90h		; 'CINT'
00007FB3:	LD E,(HL)
00007FB4:	INC HL
00007FB5:	LD D,(HL)
00007FB6:	POP HL
00007FB7:	POP AF
00007FB8:	RET

; STREXP:
00007FB9:	CALL 7FD1h		; EXPR:
00007FBC:	PUSH HL
00007FBD:	EX DE,HL
00007FBE:	CALL 7FC3h		; Load a string parameter
00007FC1:	POP HL
00007FC2:	RET

; Load a string parameter
00007FC3:	CALL 917Fh		; Verify we have a string in the accumulator
00007FC6:	LD A,(HL)
00007FC7:	INC HL
00007FC8:	LD E,(HL)
00007FC9:	INC HL
00007FCA:	LD D,(HL)
00007FCB:	LD HL,(A62Bh)		; STRST
00007FCE:	ADD HL,DE
00007FCF:	EX DE,HL
00007FD0:	RET

; EXPR:
00007FD1:	CALL 8DEAh			; INTGTV_SUB:
00007FD4:	CALL 7FDEh
00007FD7:	LD DE,(A62Fh)
00007FDB:	JP 8262h		; skip SPACEs in (HL), A=next char

00007FDE:	CALL 800Eh
00007FE1:	CP E8h			; Token for 'EQV'
00007FE3:	RET NZ
00007FE4:	CALL 817Fh
00007FE7:	INC HL
00007FE8:	CALL 800Eh
00007FEB:	PUSH AF
00007FEC:	CALL 817Fh
00007FEF:	PUSH HL
00007FF0:	CALL 8000h
00007FF3:	LD A,(HL)
00007FF4:	XOR C
00007FF5:	CPL
00007FF6:	LD (HL),A
00007FF7:	INC HL
00007FF8:	LD A,(HL)
00007FF9:	XOR B
00007FFA:	CPL
00007FFB:	LD (HL),A
00007FFC:	POP HL
00007FFD:	POP AF
00007FFE:	JR -1Fh

00008000:	LD HL,FFF8h			; -8 (normal precision BASICs would have '-5')
00008003:	ADD HL,DE
00008004:	PUSH HL
00008005:	LD C,(HL)
00008006:	INC HL
00008007:	LD B,(HL)
00008008:	LD DE,FFF7h			; -9
0000800B:	ADD HL,DE
0000800C:	POP DE
0000800D:	RET

0000800E:	CALL 8030h
00008011:	CP E9h			; Token for 'IMP'
00008013:	RET NZ
00008014:	CALL 817Fh
00008017:	INC HL
00008018:	CALL 8030h
0000801B:	PUSH AF
0000801C:	CALL 817Fh
0000801F:	PUSH HL
00008020:	CALL 8000h
00008023:	LD A,(HL)
00008024:	CPL
00008025:	OR C
00008026:	LD (HL),A
00008027:	INC HL
00008028:	LD A,(HL)
00008029:	CPL
0000802A:	OR B
0000802B:	LD (HL),A
0000802C:	POP HL
0000802D:	POP AF
0000802E:	JR -1Fh

00008030:	CALL 8050h
00008033:	CP EAh			; Token for 'XOR'
00008035:	RET NZ
00008036:	CALL 817Fh
00008039:	INC HL
0000803A:	CALL 8050h
0000803D:	PUSH AF
0000803E:	CALL 817Fh
00008041:	PUSH HL
00008042:	CALL 8000h
00008045:	LD A,(HL)
00008046:	XOR C				; .XOR.
00008047:	LD (HL),A
00008048:	INC HL
00008049:	LD A,(HL)
0000804A:	XOR B				; .XOR.
0000804B:	LD (HL),A
0000804C:	POP HL
0000804D:	POP AF
0000804E:	JR -1Dh
00008050:	CALL 8070h
00008053:	CP EBh			; Token for 'OR'
00008055:	RET NZ
00008056:	CALL 817Fh
00008059:	INC HL
0000805A:	CALL 8070h
0000805D:	PUSH AF
0000805E:	CALL 817Fh
00008061:	PUSH HL
00008062:	CALL 8000h
00008065:	LD A,(HL)
00008066:	OR C				; .OR.
00008067:	LD (HL),A
00008068:	INC HL
00008069:	LD A,(HL)
0000806A:	OR B				; .OR.
0000806B:	LD (HL),A
0000806C:	POP HL
0000806D:	POP AF
0000806E:	JR -1Dh

00008070:	CALL 8090h		; EXPR4:
00008073:	CP ECh			; Token for 'AND'
00008075:	RET NZ
00008076:	CALL 817Fh
00008079:	INC HL
0000807A:	CALL 8090h		; EXPR4:
0000807D:	PUSH AF
0000807E:	CALL 817Fh
00008081:	PUSH HL
00008082:	CALL 8000h
00008085:	LD A,(HL)
00008086:	AND C				; .AND.
00008087:	LD (HL),A
00008088:	INC HL
00008089:	LD A,(HL)
0000808A:	AND B				; .AND.
0000808B:	LD (HL),A
0000808C:	POP HL
0000808D:	POP AF
0000808E:	JR -1Dh

; EXPR4:
00008090:	CALL 8262h		; skip SPACEs in (HL), A=next char
00008093:	CP EDh			; Token for 'NOT'
00008095:	JR NZ,+1Ch		; EXPR3:
00008097:	INC HL
00008098:	CALL 8090h		; EXPR4:
0000809B:	PUSH AF
0000809C:	PUSH HL
0000809D:	LD HL,FFF8h		; -8 (normal precision BASICs would have '-5')
000080A0:	ADD HL,DE
000080A1:	CALL 5A90h		; 'CINT'
000080A4:	LD A,(HL)
000080A5:	CPL				; .NOT.
000080A6:	LD (HL),A
000080A7:	INC HL
000080A8:	LD A,(HL)
000080A9:	CPL				; .NOT.
000080AA:	LD (HL),A
000080AB:	LD DE,0007h
000080AE:	ADD HL,DE
000080AF:	EX DE,HL
000080B0:	POP HL
000080B1:	POP AF
000080B2:	RET

; EXPR3:
000080B3:	CALL 8116h		; EXPR2:
000080B6:	CP EEh			; Token for ><
000080B8:	RET C
000080B9:	PUSH AF
000080BA:	LD A,(A5DBh)		; data type, aka PRCSON
000080BD:	PUSH AF
000080BE:	INC HL
000080BF:	CALL 8116h		; EXPR2:
000080C2:	POP BC
000080C3:	EX HL,(SP)
000080C4:	PUSH AF
000080C5:	PUSH HL
000080C6:	CALL 8CE2h		; ADJUST:
000080C9:	CALL 9C39h		; CMP:
000080CC:	EX AF,AF'
000080CD:	POP AF
000080CE:	CP F6h			; Token for '<'
000080D0:	JR NZ,+17h
000080D2:	EX AF,AF'
000080D3:	JR C,+0Fh		; TRUE:
; FALSE:
000080D5:	LD BC,0000h
; RLBACK:
000080D8:	LD (HL),C
000080D9:	INC HL
000080DA:	LD (HL),B
000080DB:	LD A,02h			; integer type
000080DD:	LD (A5DBh),A		; data type, aka PRCSON
000080E0:	POP AF
000080E1:	POP HL
000080E2:	JR -2Eh			; EXPR3L
; TRUE:
000080E4:	LD BC,FFFFh
000080E7:	JR -11h			; RLBACK:
; NXTCP1:
000080E9:	CP F5h			; Token for '>'
000080EB:	JR NZ,+07h		; NXTCP2:
000080ED:	EX AF,AF'
000080EE:	JR Z,-1Bh
000080F0:	JR C,-1Dh
000080F2:	JR -10h
; NXTCP2:
000080F4:	CP F4h			; Token for '='
000080F6:	JR NZ,+05h		; NXTCP3:
000080F8:	EX AF,AF'
000080F9:	JR Z,-17h
000080FB:	JR -28h
; NXTCP3:
000080FD:	CP F2h			; Token for =>,>=
000080FF:	JR C,+05h		; NXTCP4:
00008101:	EX AF,AF'
00008102:	JR NC,-20h
00008104:	JR -31h
; NXTCP4:
00008106:	CP F0h			; Token for =<,<=
00008108:	JR C,+07h		; NXTCP5:
0000810A:	EX AF,AF'
0000810B:	JR Z,-29h
0000810D:	JR C,-2Bh
0000810F:	JR -3Ch
; NXTCP5:
00008111:	EX AF,AF'		; test <>,><
00008112:	JR Z,-3Fh		; FALSE
00008114:	JR -32h			; TRUE

; EXPR2:
00008116:	CALL 8141h		; EXPR1:
;EXPR2L:
00008119:	CP F7h			; Token for '+' (test +,-)
0000811B:	RET C
0000811C:	LD A,(A5DBh)		; data type, aka PRCSON
0000811F:	PUSH AF
00008120:	INC HL
00008121:	JR Z,+10h		; '+'
00008123:	CALL 8141h		; EXPR1:
00008126:	POP BC
00008127:	PUSH AF
00008128:	PUSH HL
00008129:	CALL 8CE2h		; ADJUST:
0000812C:	CALL 9A3Bh		; SUB:
0000812F:	POP HL
00008130:	POP AF
00008131:	JR -1Ah			; EXPR2L:
00008133:	CALL 8141h		; EXPR1:
00008136:	POP BC
00008137:	PUSH AF
00008138:	PUSH HL
00008139:	CALL 8CE2h		; ADJUST:
0000813C:	CALL 9A44h		; ADD:
0000813F:	JR -12h

; EXPR1:
00008141:	CALL 818Bh		; EXPR0:
; EXPR1L:
00008144:	CP F9h			; Token for MOD, YEN
00008146:	RET C
00008147:	PUSH AF
00008148:	CALL 817Fh
0000814B:	INC HL
0000814C:	CALL 818Bh		; EXPR0:
0000814F:	CALL 817Fh
00008152:	POP AF
00008153:	EX AF,AF'
00008154:	PUSH HL
00008155:	LD HL,FFF8h			; -8 (normal precision BASICs would have '-5')
00008158:	ADD HL,DE
00008159:	PUSH HL
0000815A:	LD C,(HL)
0000815B:	INC HL
0000815C:	LD B,(HL)
0000815D:	LD A,C
0000815E:	OR B
0000815F:	JP Z,2057h			; ERROR: Division by zero
00008162:	LD DE,FFF7h			; -9
00008165:	ADD HL,DE
00008166:	PUSH HL
00008167:	LD E,(HL)
00008168:	INC HL
00008169:	LD D,(HL)
0000816A:	LD HL,0000h
0000816D:	CALL 9F1Fh
00008170:	EX AF,AF'
00008171:	JR NZ,+01h
00008173:	EX DE,HL
00008174:	POP HL
00008175:	LD (HL),E
00008176:	INC HL
00008177:	LD (HL),D
00008178:	POP DE
00008179:	POP HL
0000817A:	CALL 8262h		; skip SPACEs in (HL), A=next char
0000817D:	JR -3Bh

0000817F:	PUSH HL
00008180:	PUSH DE
00008181:	LD HL,FFF8h			; -8 (normal precision BASICs would have '-5')
00008184:	ADD HL,DE
00008185:	CALL 5A90h		; 'CINT'
00008188:	POP DE
00008189:	POP HL
0000818A:	RET

; EXPR0:
0000818B:	CALL 81B7h		; EXPRZ:
; EXPR0L:
0000818E:	CP FBh			; Token for '/'  (test /,*)
00008190:	RET C
00008191:	LD A,(A5DBh)		; data type, aka PRCSON
00008194:	PUSH AF
00008195:	INC HL
00008196:	JR Z,+10h		; (/)
00008198:	CALL 81B7h		; EXPRZ:
0000819B:	POP BC
0000819C:	PUSH AF
0000819D:	PUSH HL
0000819E:	CALL 8CE2h		; ADJUST:
000081A1:	CALL 9FF5h		; MUL:
000081A4:	POP HL
000081A5:	POP AF
000081A6:	JR -1Ah			; EXPR0L:
000081A8:	CALL 81B7h		; EXPRZ:
000081AB:	POP BC
000081AC:	PUSH AF
000081AD:	PUSH HL
000081AE:	CALL 8CE2h		; ADJUST:
000081B1:	CALL A0EAh		; DIV:
000081B4:	JR -12h

000081B6:	INC HL
; EXPRZ:
000081B7:	CALL 8262h		; skip SPACEs in (HL), A=next char
000081BA:	CP F7h			; Token for '+'
000081BC:	JR Z,-08h
000081BE:	CP F8h			; Token for '-'
000081C0:	JR NZ,+27h
000081C2:	INC HL
000081C3:	CALL 81B7h		; EXPRZ:
000081C6:	PUSH AF
000081C7:	PUSH HL
000081C8:	LD HL,FFF8h			; -8 (normal precision BASICs would have '-5')
000081CB:	ADD HL,DE
000081CC:	CALL 9A13h		; TOGLE:  toggle number sign
000081CF:	LD DE,0008h
000081D2:	ADD HL,DE		; {LDIR5:} move on the next 8 bytes in the number queue (HL ptr)
000081D3:	EX DE,HL
000081D4:	POP HL
000081D5:	POP AF
000081D6:	RET

000081D7:	INC HL

000081D8:	CALL 8262h		; skip SPACEs in (HL), A=next char
000081DB:	CP F7h			; Token for '+'
000081DD:	JR Z,-08h
000081DF:	CP F8h			; Token for '-'
000081E1:	JR NZ,+2Ch
000081E3:	INC HL
000081E4:	CALL 81D8h
000081E7:	JR -23h
000081E9:	CALL 820Fh		; FACTOR:
000081EC:	CP FDh			; Token for '^'
000081EE:	RET NZ
000081EF:	INC HL
000081F0:	LD A,(A5DBh)		; data type, aka PRCSON
000081F3:	CP 03h			; string type?
000081F5:	JP Z,2060h		; ERROR: Type mismatch
000081F8:	PUSH AF
000081F9:	CALL 81D8h
000081FC:	POP BC
000081FD:	PUSH AF
000081FE:	PUSH HL
000081FF:	LD A,(A5DBh)		; data type, aka PRCSON
00008202:	LD (9A08h),A
00008205:	CALL 8CE2h		; ADJUST:
00008208:	CALL 9234h		; POWERS:	(HL)^(DE)
0000820B:	POP HL
0000820C:	POP AF
0000820D:	JR -23h

; FACTOR:
0000820F:	CALL 17A8h		; END2C: look for next parameter, Z if none
00008212:	JP Z,2069h			; ERROR: Missing operand
00008215:	CALL 8225h		; FAC0:
00008218:	EX AF,AF'
00008219:	LD A,(A5DBh)		; data type, aka PRCSON
0000821C:	OR A
0000821D:	JP Z,2066h		; ERROR: Syntax error
00008220:	EX AF,AF'
00008221:	INC A
00008222:	RET Z
00008223:	DEC A
00008224:	RET

; FAC0:
00008225:	XOR A
00008226:	LD (A5DBh),A		; data type, aka PRCSON
00008229:	LD B,08h
0000822B:	PUSH HL
0000822C:	LD HL,(A631h)		; MEMLMT
0000822F:	SCF
00008230:	SBC HL,DE
00008232:	JP C,205Dh		; ERROR: Too complex
00008235:	POP HL
00008236:	PUSH DE
00008237:	LD (DE),A
00008238:	INC DE
00008239:	DJNZ -04h
0000823B:	POP DE
0000823C:	CALL 8262h		; skip SPACEs in (HL), A=next char
0000823F:	INC HL
00008240:	CP 7Fh
00008242:	JP Z,82E5h
00008245:	CP D0h
00008247:	JP Z,8472h
0000824A:	DEC HL
0000824B:	CP 0Bh
0000824D:	JR NC,+19h
0000824F:	OR A
00008250:	RET Z
00008251:	INC HL
00008252:	DEC A
00008253:	LD (DE),A
00008254:	LD A,02h			; integer type
; FACRX:
00008256:	LD (A5DBh),A		; data type, aka PRCSON
00008259:	EX DE,HL
0000825A:	LD BC,0008h
0000825D:	ADD HL,BC
0000825E:	EX DE,HL
0000825F:	JR +01h

; skip SPACEs in (++HL), A=next char
00008261:	INC HL
; skip SPACEs in (HL), A=next char
00008262:	LD A,(HL)
00008263:	CP 20h	; ' '
00008265:	JR Z,-06h
00008267:	RET

00008268:	CP 15h
0000826A:	JR NC,+25h
0000826C:	INC HL
0000826D:	LD C,(HL)
0000826E:	INC HL
0000826F:	LD B,(HL)
00008270:	INC HL
00008271:	CP 0Ch
00008273:	JR NZ,+09h		; FACI6:
00008275:	INC BC
00008276:	INC BC
00008277:	LD A,(BC)
00008278:	INC BC
00008279:	EX AF,AF'
0000827A:	LD A,(BC)
0000827B:	LD B,A
0000827C:	EX AF,AF'

0000827D:	LD C,A
; FACI6:
0000827E:	EX DE,HL
0000827F:	LD (HL),C
00008280:	INC HL
00008281:	LD (HL),B
00008282:	DEC HL
00008283:	LD A,B
00008284:	XOR 80h
00008286:	OR C
00008287:	JR Z,+03h
00008289:	EX DE,HL
0000828A:	JR -38h
0000828C:	CALL 5436h		; 'CSNG'
0000828F:	JR -37h
00008291:	JR Z,+04h
00008293:	CP 18h
00008295:	JR NZ,+11h
00008297:	AND 0Fh
00008299:	INC HL
0000829A:	PUSH DE
0000829B:	LD C,A
0000829C:	LD B,A
0000829D:	LD A,(HL)
0000829E:	LD (DE),A
0000829F:	INC HL
000082A0:	INC DE
000082A1:	DJNZ -06h
000082A3:	LD A,C
000082A4:	POP DE
000082A5:	JP 8256h			; FACRX:

; VARFNC:
000082A8:	CP 22h	; '"'
000082AA:	JR NZ,+29h
000082AC:	INC HL
000082AD:	PUSH DE
000082AE:	PUSH HL
000082AF:	CALL 8D21h			; STRLCK:   ..B=len(HL str.)
000082B2:	EX HL,(SP)
000082B3:	PUSH HL
000082B4:	LD HL,(3621h)		; TMPEND
000082B7:	PUSH BC
000082B8:	LD BC,(A62Bh)		; STRST
000082BC:	OR A
000082BD:	SBC HL,BC			; HL=OFSET+ADR
000082BF:	POP BC
000082C0:	EX DE,HL
000082C1:	LD (HL),B			;FAC set len.
000082C2:	INC HL
000082C3:	LD (HL),E			;FAC set adrs
000082C4:	INC HL
000082C5:	LD (HL),D
000082C6:	LD HL,(3621h)		; TMPEND
000082C9:	POP DE
000082CA:	CALL 8D2Dh			; STRENT:
000082CD:	LD (3621h),HL		; TMPEND
000082D0:	POP HL
000082D1:	LD A,03h
000082D3:	JR -31h
000082D5:	CP 28h	; '('
000082D7:	JR NZ,+21h
000082D9:	INC HL
000082DA:	CALL 7FDEh
000082DD:	CP 29h	; ')'
000082DF:	JP NZ,2066h		; ERROR: Syntax error
000082E2:	JP 8261h		; skip SPACEs in (++HL), A=next char

000082E5:	PUSH DE
000082E6:	CALL 8262h		; skip SPACEs in (HL), A=next char
000082E9:	CP 23h	; '#'
000082EB:	LD A,05h
000082ED:	JR NZ,+03h
000082EF:	INC HL
000082F0:	LD A,08h
000082F2:	PUSH HL
000082F3:	LD HL,96F7h		; FLTPAI  (Greek PI)
000082F6:	LD B,A
000082F7:	LD C,A
000082F8:	JR +1Ch

000082FA:	CALL 53F8h
000082FD:	CP 41h
000082FF:	RET C
00008300:	CP 5Bh			; '['  (some BASIC subtracts "A" and checks for 26)
00008302:	JP NC,83BFh
00008305:	LD BC,(91CEh)	; FNVRBF
00008309:	LD A,B
0000830A:	OR C
0000830B:	JR NZ,+12h		; FNGTVR:
0000830D:	CALL 8C31h		; GETVAR:
00008310:	PUSH DE
00008311:	PUSH HL
00008312:	LD L,C
00008313:	LD H,B
00008314:	LD B,A
00008315:	LD C,A
00008316:	LD A,(HL)
00008317:	LD (DE),A
00008318:	INC HL
00008319:	INC DE
0000831A:	DJNZ -06h
0000831C:	POP HL
0000831D:	JR -7Ch

; FNGTVR:
0000831F:	PUSH DE
00008320:	CALL 8C8Bh			; VSRTST:
00008323:	PUSH HL
00008324:	INC B
00008325:	LD DE,A73Fh			; KEYBM1 (aka KEYBUF)
00008328:	LD HL,(3621h)		; TMPEND
0000832B:	CALL 8D2Dh			; STRENT:
0000832E:	LD B,00h
00008330:	LD HL,(91CEh)	; FNVRBF
00008333:	CALL 8262h		; skip SPACEs in (HL), A=next char
00008336:	CP F4h			; Token for '='
00008338:	JR Z,+2Fh
0000833A:	CP 28h	; '('
0000833C:	JP NZ,2066h		; ERROR: Syntax error
0000833F:	INC HL
00008340:	INC B
00008341:	PUSH BC
00008342:	CALL 8C8Bh			; VSRTST:
00008345:	LD A,C
00008346:	POP DE
00008347:	CP E
00008348:	JR NZ,+11h
0000834A:	PUSH DE
0000834B:	LD C,B
0000834C:	INC C
0000834D:	PUSH HL
0000834E:	LD HL,(3621h)		; TMPEND
00008351:	LD DE,A73Fh			; KEYBM1 (aka KEYBUF)
00008354:	CALL 1292h
00008357:	POP HL
00008358:	POP BC
00008359:	JR Z,+24h
0000835B:	CALL 8262h		; skip SPACEs in (HL), A=next char
0000835E:	CP 29h	; ')'
00008360:	JR Z,+07h
00008362:	CP 2Ch	; ','
00008364:	JR Z,-27h
00008366:	JP 2066h		; ERROR: Syntax error

00008369:	LD HL,(3621h)		; TMPEND
0000836C:	LD DE,A73Fh			; KEYBM1 (aka KEYBUF)
0000836F:	LD A,(HL)
00008370:	LD (DE),A
00008371:	LD B,A
00008372:	INC HL
00008373:	INC DE
00008374:	LD A,(HL)
00008375:	LD (DE),A
00008376:	DJNZ -06h
00008378:	POP HL
00008379:	POP DE
0000837A:	CALL 83BBh
0000837D:	JR -6Fh
0000837F:	LD HL,(91D0h)
00008382:	CALL 8BFEh		; Check for '('
00008385:	DEC B
00008386:	JR Z,+18h
00008388:	DEC HL
00008389:	PUSH BC
0000838A:	CALL 3552h			; Parse the content of a 'DATA' line
0000838D:	CALL 17A8h		; END2C: look for next parameter, Z if none
00008390:	JP Z,2066h		; ERROR: Syntax error
00008393:	CP 29h	; ')'
00008395:	JP Z,2066h		; ERROR: Syntax error
00008398:	CP 2Ch	; ','
0000839A:	JR NZ,-12h
0000839C:	POP BC
0000839D:	DJNZ -16h
0000839F:	INC HL
000083A0:	EX DE,HL
000083A1:	POP HL
000083A2:	EX HL,(SP)
000083A3:	EX DE,HL
000083A4:	LD BC,(91CEh)	; FNVRBF
000083A8:	PUSH BC
000083A9:	LD BC,0000h
000083AC:	LD (91CEh),BC	; FNVRBF
000083B0:	CALL 7FDEh
000083B3:	POP HL
000083B4:	LD (91CEh),HL	; FNVRBF
000083B7:	POP HL
000083B8:	JP 8262h		; skip SPACEs in (HL), A=next char

000083BB:	PUSH DE
000083BC:	JP 8C35h

000083BF:	CP 91h
000083C1:	JP Z,8D4Ah
000083C4:	CP FFh
000083C6:	RET NZ
000083C7:	INC HL
000083C8:	LD A,(HL)
000083C9:	CP ABh
000083CB:	JR NC,+6Eh
000083CD:	CP 88h
000083CF:	JR Z,+51h
000083D1:	CP A0h
000083D3:	JP Z,852Dh		; 'CHR$'
000083D6:	CP 89h
000083D8:	PUSH AF
000083D9:	JR NZ,+07h
000083DB:	INC HL
000083DC:	LD A,(HL)
000083DD:	CP 40h
000083DF:	JR Z,+1Ch
000083E1:	DEC HL
000083E2:	CALL 8BFDh		; INC HL and check for '('
000083E5:	CALL 7FDEh
000083E8:	CALL 8C08h		; Check for ')'
000083EB:	CALL 9A32h		; STROMT:  Get argument, on exit: A=data type
000083EE:	POP AF
000083EF:	PUSH DE
000083F0:	PUSH HL
000083F1:	LD HL,FFF8h			; -8 (normal precision BASICs would have '-5')
000083F4:	ADD HL,DE
000083F5:	CALL 8461h
000083F8:	POP HL
000083F9:	POP DE
000083FA:	JP 8262h		; skip SPACEs in (HL), A=next char

000083FD:	POP AF
000083FE:	PUSH DE
000083FF:	CALL 8BFDh		; INC HL and check for '('
00008402:	CALL 7FDEh
00008405:	CALL 8C08h		; Check for ')'
00008408:	CALL 9A32h		; STROMT:  Get argument, on exit: A=data type
0000840B:	EX DE,HL
0000840C:	EX HL,(SP)
0000840D:	PUSH DE
0000840E:	CALL 5A90h		; 'CINT'
00008411:	LD C,(HL)
00008412:	INC HL
00008413:	LD B,(HL)
00008414:	LD A,B
00008415:	CP 20h	; ' '
00008417:	JP C,206Fh		; ERROR: Illegal function call
0000841A:	LD (HL),00h
0000841C:	DEC HL
0000841D:	IN A,(C)
0000841F:	LD (HL),A
00008420:	JR -2Ah
00008422:	PUSH AF
00008423:	INC HL
00008424:	CALL 8262h		; skip SPACEs in (HL), A=next char
00008427:	CP 28h	; '('
00008429:	JR NZ,+03h
0000842B:	INC HL
0000842C:	JR -49h
0000842E:	LD A,05h
00008430:	LD (A5DBh),A		; data type, aka PRCSON
00008433:	EX DE,HL
00008434:	LD BC,0008h
00008437:	ADD HL,BC
00008438:	EX DE,HL
00008439:	JR -4Dh
0000843B:	CP B3h
0000843D:	JR NC,+14h
0000843F:	PUSH AF
00008440:	CALL 8BFDh		; INC HL and check for '('
00008443:	CALL 7FDEh
00008446:	CALL 8C08h		; Check for ')'
00008449:	LD A,(A5DBh)		; data type, aka PRCSON
0000844C:	CP 03h			; string type?
0000844E:	JP NZ,2060h		; ERROR: Type mismatch
00008451:	JR -65h

00008453:	CP BAh
00008455:	JR NC,+06h
00008457:	PUSH AF
00008458:	LD A,02h
0000845A:	INC HL
0000845B:	JR -2Dh
0000845D:	CP D0h
0000845F:	RET NC
00008460:	INC HL
00008461:	PUSH HL
00008462:	SUB 80h
00008464:	LD L,A
00008465:	LD H,00h
00008467:	LD BC,7EF5h		; Jump table 2
0000846A:	ADD HL,HL
0000846B:	ADD HL,BC
0000846C:	LD A,(HL)
0000846D:	INC HL
0000846E:	LD H,(HL)
0000846F:	LD L,A
00008470:	EX HL,(SP)
00008471:	RET

00008472:	PUSH HL
00008473:	PUSH BC
00008474:	CALL 8482h
00008477:	POP BC
00008478:	LD DE,0007h
0000847B:	ADD HL,DE
0000847C:	EX DE,HL
0000847D:	POP HL
0000847E:	JP 8262h		; skip SPACEs in (HL), A=next char

; 'FRE'
00008481:	EX DE,HL	; save ptr to result value (HL->DE)
00008482:	LD HL,0000h
00008485:	ADD HL,SP
00008486:	LD BC,(3621h)		; TMPEND
0000848A:	OR A
0000848B:	SBC HL,BC
0000848D:	EX DE,HL

; Put word in 'DE' as an integer result value
0000848E:	LD (HL),E
0000848F:	INC HL
00008490:	LD (HL),D
00008491:	LD A,02h			; integer type
00008493:	LD (A5DBh),A		; data type, aka PRCSON
00008496:	RET

; 'CSRLIN'
00008497:	LD A,(000Fh)	; Y text coordinate

; Put byte in 'A' as an integer result value
0000849A:	LD E,A
0000849B:	LD D,00h
0000849D:	JR -11h

; 'ERR'
0000849F:	LD A,(3640h)		; error code
000084A2:	JR -0Ah

; 'STRPTR'
000084A4:	LD DE,(A62Bh)		; STRST
000084A8:	JR -1Ch

; 'DTL'
000084AA:	LD DE,(291Ch)
000084AE:	JR +64h

; 'STRIG'
000084B0:	PUSH HL
000084B1:	CALL 84F0h
000084B4:	JP NZ,84C5h
000084B7:	CALL 8505h
000084BA:	CP 20h
000084BC:	POP HL
000084BD:	LD DE,0000h
000084C0:	JR NZ,+01h
000084C2:	DEC DE
000084C3:	JR -37h

000084C5:	CALL 84FAh	; read joystick data from PSG
000084C8:	AND 20h
000084CA:	JR -10h

; 'STICK'
000084CC:	PUSH HL
000084CD:	CALL 84F0h
000084D0:	JP NZ,84E0h
000084D3:	CALL 8505h
000084D6:	SUB 30h
000084D8:	CP 0Ah
000084DA:	JR C,+01h
000084DC:	XOR A
000084DD:	POP HL
000084DE:	JR -46h
000084E0:	CALL 84FAh	; read joystick data from PSG
000084E3:	CPL
000084E4:	AND 0Fh
000084E6:	LD L,A
000084E7:	LD H,00h
000084E9:	LD BC,91BCh
000084EC:	ADD HL,BC
000084ED:	LD A,(HL)
000084EE:	JR -13h

000084F0:	CALL 8655h
000084F3:	CP 03h
000084F5:	JP NC,206Fh		; ERROR: Illegal function call
000084F8:	OR A
000084F9:	RET

; read joystick data from PSG
000084FA:	ADD 0Dh
000084FC:	LD BC,1C00h		; PSG
000084FF:	OUT (C),A
00008501:	DEC B
00008502:	IN A,(C)
00008504:	RET

00008505:	LD BC,0000h
00008508:	LD (0EA6h),BC	; POINT1
0000850C:	XOR A
0000850D:	JP 001Bh

; 'ERL'
00008510:	LD DE,(3638h)	; ERRLNO  ..program line where the last error happened
00008514:	CALL 848Eh		; Put word in 'DE' as an integer result value
00008517:	BIT 7,D
00008519:	PUSH AF
0000851A:	DEC HL
0000851B:	CALL 5436h		; 'CSNG'
0000851E:	POP AF
0000851F:	RET Z
00008520:	LD DE,A5E4h		; ZFAC1
00008523:	EX DE,HL
00008524:	CALL 9A09h		; CLRFAC: Set FP accumulator to 0
00008527:	LD (HL),91h
00008529:	EX DE,HL
0000852A:	JP 9A44h		; ADD:

; 'CHR$'
0000852D:	CALL 8BFDh		; INC HL and check for '('
00008530:	SCF
00008531:	PUSH AF
00008532:	PUSH DE
00008533:	CALL 7F9Fh		; DEEXP:
00008536:	CP 29h	; ')'
00008538:	JR Z,+0Ch
0000853A:	CP 2Ch	; ','
0000853C:	JP NZ,2066h		; ERROR: Syntax error
0000853F:	INC HL
00008540:	CALL 7F98h		; Check byte overflow for value in DE and put in A
00008543:	POP DE
00008544:	JR -15h

00008546:	INC HL
00008547:	CALL 7F98h		; Check byte overflow for value in DE and put in A
0000854A:	POP DE
0000854B:	PUSH AF
0000854C:	EXX
0000854D:	LD DE,A73Fh			; KEYBM1 (aka KEYBUF)
00008550:	LD B,00h
00008552:	POP AF
00008553:	JR C,+05h
00008555:	LD (DE),A
00008556:	INC DE
00008557:	INC B
00008558:	JR -08h
0000855A:	LD C,B
0000855B:	LD HL,(3621h)		; TMPEND
0000855E:	PUSH HL
0000855F:	DEC DE
00008560:	LD A,(DE)
00008561:	LD (HL),A
00008562:	INC HL
00008563:	DJNZ -06h
00008565:	POP DE
00008566:	CALL 856Ch
00008569:	JP 8262h		; skip SPACEs in (HL), A=next char


0000856C:	EX DE,HL
0000856D:	CALL 8D3Ch			; MEMECK: (SBC SP,DE)
; string value
00008570:	LD (3621h),DE		; TMPEND
00008574:	LD DE,(A62Bh)		; STRST
00008578:	OR A
00008579:	SBC HL,DE
0000857B:	PUSH HL
0000857C:	PUSH BC
0000857D:	EXX
0000857E:	POP BC
0000857F:	EX DE,HL
00008580:	LD (HL),C
00008581:	INC HL
00008582:	POP BC
00008583:	LD (HL),C
00008584:	INC HL
00008585:	LD (HL),B
00008586:	LD BC,0006h
00008589:	ADD HL,BC
0000858A:	EX DE,HL
0000858B:	LD A,03h			; string type
0000858D:	LD (A5DBh),A		; data type, aka PRCSON
00008590:	RET

; 'OCT$'
00008591:	PUSH HL
00008592:	CALL 85CAh		; get string parameter and convert to integer value
00008595:	CALL 85E5h
00008598:	LD B,06h
0000859A:	JR +14h

; 'BIN$'
0000859C:	PUSH HL
0000859D:	CALL 85CAh		; get string parameter and convert to integer value
000085A0:	CALL 85D5h
000085A3:	LD B,10h
000085A5:	JR +09h

; 'HEX$'
000085A7:	PUSH HL
000085A8:	CALL 85CAh		; get string parameter and convert to integer value
000085AB:	CALL 85FFh
000085AE:	LD B,04h
000085B0:	LD A,(DE)
000085B1:	CP 30h
000085B3:	JR NZ,+05h
000085B5:	INC DE
000085B6:	DJNZ -08h
000085B8:	DEC DE
000085B9:	INC B
; set a B bytes long value
000085BA:	LD C,B
000085BB:	LD HL,(3621h)		; TMPEND
000085BE:	PUSH HL
000085BF:	CALL 8D2Dh			; STRENT:
000085C2:	EX DE,HL
000085C3:	POP HL
000085C4:	EXX
000085C5:	POP DE
000085C6:	EXX
000085C7:	JP 8570h

; get string parameter and convert to integer value
000085CA:	CALL 5A90h		; 'CINT'
000085CD:	LD A,(HL)
000085CE:	INC HL
000085CF:	LD H,(HL)
000085D0:	LD L,A
000085D1:	LD DE,A73Fh		; KEYBM1 (aka KEYBUF)
000085D4:	RET

; called from BIN$
000085D5:	LD B,10h
000085D7:	PUSH DE
000085D8:	XOR A
000085D9:	RL L
000085DB:	RL H
000085DD:	ADC 30h	; '0'
000085DF:	LD (DE),A
000085E0:	INC DE
000085E1:	DJNZ -0Bh
000085E3:	POP DE
000085E4:	RET

; called from OCT$
000085E5:	LD BC,0105h
000085E8:	CALL 85D7h
000085EB:	PUSH DE
000085EC:	INC DE
000085ED:	XOR A
000085EE:	LD B,03h
000085F0:	RL L
000085F2:	RL H
000085F4:	RLA
000085F5:	DJNZ -07h
000085F7:	ADD 30h
000085F9:	LD (DE),A
000085FA:	DEC C
000085FB:	JR NZ,-11h
000085FD:	POP DE
000085FE:	RET

; called from HEX$
000085FF:	PUSH DE
00008600:	LD A,H
00008601:	CALL 8612h	; left hex digit in a byte
00008604:	LD A,H
00008605:	CALL 8616h
00008608:	LD A,L
00008609:	CALL 8612h	; left hex digit in a byte
0000860C:	LD A,L
0000860D:	CALL 8616h
00008610:	POP DE
00008611:	RET

; left hex digit in a byte
00008612:	RLCA
00008613:	RLCA
00008614:	RLCA
00008615:	RLCA
; right hex digit in a byte
00008616:	AND 0Fh
00008618:	ADD 30h
0000861A:	CP 3Ah	; '9'+1
0000861C:	JR C,+02h
0000861E:	ADD 07h
00008620:	LD (DE),A
00008621:	INC DE
00008622:	RET

; 'MKI$'
00008623:	CALL 5A90h		; 'CINT'
00008626:	JR +08h

; 'MKS$'
00008628:	CALL 5436h		; 'CSNG'
0000862B:	JR +03h

; 'MKD$'
0000862D:	CALL 5419h		; 'CDBL'
00008630:	EX DE,HL
00008631:	PUSH DE
00008632:	LD A,(A5DBh)		; data type, aka PRCSON
00008635:	LD B,A
00008636:	JP 85BAh		; set a B bytes long value

;'SPACE$'
00008639:	PUSH HL
0000863A:	CALL 8655h
0000863D:	LD B,A
0000863E:	LD C,A
0000863F:	OR A
00008640:	JR Z,+0Ch
00008642:	LD A,20h	; ' '
00008644:	PUSH DE
00008645:	LD (DE),A
00008646:	INC DE
00008647:	DJNZ -04h
00008649:	POP DE
0000864A:	LD B,C
0000864B:	JP 85BAh		; set a B bytes long value

0000864E:	POP HL
0000864F:	CALL 9A09h		; CLRFAC: Set FP accumulator to 0
00008652:	JP 858Ah

00008655:	CALL 85CAh		; get string parameter and convert to integer value
00008658:	LD A,H
00008659:	OR A
0000865A:	JP NZ,206Fh		; ERROR: Illegal function call
0000865D:	LD A,L
0000865E:	RET

; 'GCPAT$'
0000865F:	PUSH HL
00008660:	CALL 8655h
00008663:	EX DE,HL
00008664:	LD D,A
00008665:	LD HL,A73Fh		; KEYBM1 (aka KEYBUF)
00008668:	PUSH HL
00008669:	LD E,14h
0000866B:	CALL 0033h
0000866E:	LD E,15h
00008670:	CALL 0033h
00008673:	LD E,16h
00008675:	CALL 0033h
00008678:	LD E,17h
0000867A:	CALL 0033h
0000867D:	POP DE
0000867E:	LD B,20h
00008680:	JP 85BAh		; set a B bytes long value

; 'KANJI$'
00008683:	PUSH HL
00008684:	CALL 85CAh		; get string parameter and convert to integer value
00008687:	EX DE,HL
00008688:	PUSH HL
00008689:	LD BC,0064h
0000868C:	LD HL,0000h
0000868F:	CALL 9F1Fh
00008692:	EX DE,HL
00008693:	LD A,E
00008694:	CP 60h
00008696:	JR NC,+0Ah
00008698:	LD A,H
00008699:	OR A
0000869A:	JR NZ,+06h
0000869C:	LD A,L
0000869D:	DEC A
0000869E:	CP 2Fh	; '/'
000086A0:	JR C,+06h
000086A2:	LD DE,0000h
000086A5:	LD HL,0008h
000086A8:	LD BC,0E80h		; 3712
000086AB:	LD A,L
000086AC:	ADD 20h
000086AE:	OUT (C),A
000086B0:	INC C
000086B1:	XOR A
000086B2:	OUT (C),A
000086B4:	INC C
000086B5:	INC A
000086B6:	OUT (C),A
000086B8:	DEC C
000086B9:	DEC C
000086BA:	IN D,(C)
000086BC:	INC C
000086BD:	IN A,(C)
000086BF:	XOR A
000086C0:	INC C
000086C1:	OUT (C),A
000086C3:	DEC C
000086C4:	DEC C
000086C5:	LD L,E
000086C6:	ADD HL,HL
000086C7:	ADD HL,HL
000086C8:	ADD HL,HL
000086C9:	ADD HL,HL
000086CA:	LD E,A
000086CB:	ADD HL,DE
000086CC:	OUT (C),L
000086CE:	INC C
000086CF:	OUT (C),H
000086D1:	POP IX
000086D3:	INC C
000086D4:	LD D,10h
000086D6:	LD A,01h
000086D8:	OUT (C),A
000086DA:	DEC C
000086DB:	DEC C
000086DC:	IN A,(C)
000086DE:	LD (IX+00h),A
000086E1:	INC C
000086E2:	IN A,(C)
000086E4:	LD (IX+10h),A
000086E7:	INC C
000086E8:	XOR A
000086E9:	OUT (C),A
000086EB:	INC IX
000086ED:	DEC D
000086EE:	JR NZ,-1Ah
000086F0:	LD DE,A73Fh		; KEYBM1 (aka KEYBUF)
000086F3:	LD B,20h
000086F5:	JP 85BAh		; set a B bytes long value

; 'STR$'
000086F8:	PUSH HL
000086F9:	CALL 5693h
000086FC:	LD HL,(3621h)		; TMPEND
000086FF:	LD B,00h
00008701:	LD A,(DE)
00008702:	OR A
00008703:	JR Z,+06h
00008705:	LD (HL),A
00008706:	INC DE
00008707:	INC HL
00008708:	INC B
00008709:	JR -0Ah
0000870B:	LD A,B
0000870C:	OR A
0000870D:	JP Z,864Eh
00008710:	LD DE,(3621h)		; TMPEND
00008714:	EXX
00008715:	POP DE
00008716:	EXX
00008717:	LD C,B
00008718:	JP 856Ch

; 'ASC'
0000871B:	PUSH HL
0000871C:	CALL 7FC3h		; Load a string parameter
0000871F:	OR A
00008720:	JR Z,+01h
00008722:	LD A,(DE)
00008723:	POP HL
00008724:	JP 849Ah		; Put byte in 'A' as an integer result value

; 'LEN'
00008727:	PUSH HL
00008728:	CALL 7FC3h		; Load a string parameter
0000872B:	POP HL
0000872C:	JP 849Ah		; Put byte in 'A' as an integer result value

; 'VAL'
0000872F:	PUSH HL
00008730:	CALL 7FC3h		; Load a string parameter
00008733:	LD HL,(3621h)		; TMPEND
00008736:	PUSH HL
00008737:	LD B,A
00008738:	CALL 8D2Dh			; STRENT:
0000873B:	LD (HL),23h
0000873D:	INC HL
0000873E:	LD (HL),00h
00008740:	POP DE
00008741:	POP HL
00008742:	JP 54F6h		; ....get number

; 'CVI'
00008745:	LD C,02h
00008747:	JR +06h

; 'CVS'
00008749:	LD C,05h
0000874B:	JR +02h

; 'CVD'
0000874D:	LD C,08h
0000874F:	PUSH HL
00008750:	CALL 7FC3h		; Load a string parameter
00008753:	CP C
00008754:	JP NZ,206Fh		; ERROR: Illegal function call
00008757:	POP HL
00008758:	LD B,C
00008759:	LD A,(DE)
0000875A:	LD (HL),A
0000875B:	INC DE
0000875C:	INC HL
0000875D:	DJNZ -06h
0000875F:	LD A,C
00008760:	LD (A5DBh),A		; data type, aka PRCSON
00008763:	RET

; 'VARPTR'
00008764:	CALL 8BFEh		; Check for '('
00008767:	CALL 8262h		; skip SPACEs in (HL), A=next char
0000876A:	CP 23h	; '#'
0000876C:	JR Z,+0Fh
0000876E:	CALL 8C31h		; GETVAR:
00008771:	CALL 8262h		; skip SPACEs in (HL), A=next char
00008774:	CALL 8C08h		; Check for ')'
00008777:	EX DE,HL
00008778:	LD (HL),C
00008779:	INC HL
0000877A:	LD (HL),B
0000877B:	JR +2Ah

0000877D:	INC HL
0000877E:	PUSH DE
0000877F:	CALL 7F9Fh		; DEEXP:
00008782:	CALL 7F98h		; Check byte overflow for value in DE and put in A
00008785:	CALL 6636h		; check stream/file number in A, out: DE=offset
00008788:	EX DE,HL
00008789:	LD BC,0010h
0000878C:	ADD HL,BC
0000878D:	LD BC,(A62Bh)		; STRST
00008791:	ADD HL,BC
00008792:	LD C,L
00008793:	LD B,H
00008794:	EX DE,HL
00008795:	POP DE
00008796:	JR -27h

; 'CMT'
00008798:	CALL 8262h		; skip SPACEs in (HL), A=next char
0000879B:	CP 28h	; '('
0000879D:	JR Z,+15h
0000879F:	LD A,EAh		; SUBCPU_TAPE_STATUS
000087A1:	CALL 0023h		; subcpu (A=command, DE=result ptr?)
000087A4:	EX DE,HL
000087A5:	LD (HL),00h
000087A7:	LD BC,0007h
000087AA:	LD A,02h			; integer type
000087AC:	ADD HL,BC
000087AD:	EX DE,HL
000087AE:	LD (A5DBh),A		; data type, aka PRCSON
000087B1:	JP 8262h		; skip SPACEs in (HL), A=next char

000087B4:	INC HL
000087B5:	PUSH DE
000087B6:	CALL 7F9Fh		; DEEXP:
000087B9:	CALL 8C08h		; Check for ')'
000087BC:	CALL 7F98h		; Check byte overflow for value in DE and put in A
000087BF:	CP 03h
000087C1:	JP NC,206Fh		; ERROR: Illegal function call
000087C4:	INC A
000087C5:	LD B,A
000087C6:	POP DE
000087C7:	LD A,EBh		; SUBCPU_TAPE_SENSOR
000087C9:	PUSH BC
000087CA:	CALL 0023h		; subcpu (A=command, DE=result ptr?)
000087CD:	DEC DE
000087CE:	LD A,(DE)
000087CF:	POP BC
000087D0:	RRCA
000087D1:	DJNZ -03h
000087D3:	PUSH HL
000087D4:	LD HL,0000h
000087D7:	SBC HL,HL
000087D9:	EX DE,HL
000087DA:	LD (HL),E
000087DB:	INC HL
000087DC:	LD (HL),D
000087DD:	POP DE
000087DE:	JR -39h

; 'LEFT$'
000087E0:	CALL 8B25h
000087E3:	CALL 8C08h		; Check for ')'
000087E6:	CALL 8B1Eh
000087E9:	EX DE,HL
000087EA:	LD A,(HL)
000087EB:	CP C
000087EC:	JR NC,+01h
000087EE:	LD C,A
000087EF:	LD (HL),C
000087F0:	LD BC,0008h
000087F3:	LD A,03h
000087F5:	JP 87ACh

; 'RIGHT$'
000087F8:	CALL 8B25h
000087FB:	CALL 8C08h		; Check for ')'
000087FE:	CALL 8B1Eh
00008801:	EX DE,HL
00008802:	LD A,(HL)
00008803:	SUB C
00008804:	JR NC,+02h
00008806:	XOR A
00008807:	LD C,(HL)
00008808:	LD (HL),C
00008809:	INC HL
0000880A:	ADD (HL)
0000880B:	LD (HL),A
0000880C:	INC HL
0000880D:	LD A,00h
0000880F:	ADC (HL)
00008810:	LD (HL),A
00008811:	LD BC,0006h
00008814:	JR -23h

; 'MID$'
00008816:	CALL 8B25h
00008819:	CALL 8B1Eh
0000881C:	OR A
0000881D:	JP Z,206Fh		; ERROR: Illegal function call
00008820:	PUSH AF
00008821:	LD A,(HL)
00008822:	CP 29h	; ')'
00008824:	JR Z,+24h
00008826:	CALL 2E76h		; CH2CH: Check for comma ','
00008829:	PUSH DE
0000882A:	EX DE,HL
0000882B:	LD BC,0008h
0000882E:	ADD HL,BC
0000882F:	EX DE,HL
00008830:	CALL 7F9Fh		; DEEXP:
00008833:	CALL 8C08h		; Check for ')'
00008836:	CALL 7F98h		; Check byte overflow for value in DE and put in A
00008839:	POP DE
0000883A:	POP BC
0000883B:	LD C,A
0000883C:	EX DE,HL
0000883D:	LD A,(HL)
0000883E:	SUB B
0000883F:	JR C,+0Eh
00008841:	INC A
00008842:	CP C
00008843:	JR NC,+01h
00008845:	LD C,A
00008846:	LD A,B
00008847:	DEC A
00008848:	JR -42h
0000884A:	INC HL
0000884B:	LD A,FFh
0000884D:	JR -15h
0000884F:	XOR A
00008850:	LD C,A
00008851:	JR -4Bh

; get time or date from subcpu
00008853:	LD HL,(3621h)		; TMPEND
00008856:	PUSH HL
00008857:	EX DE,HL
00008858:	ADD HL,DE
00008859:	EX DE,HL
0000885A:	CALL 8D3Ch			; MEMECK: (SBC SP,DE)
0000885D:	LD (3621h),DE		; TMPEND
00008861:	LD DE,A59Ch		; DGBF00
00008864:	PUSH DE
00008865:	CALL 0023h		; subcpu (A=command, DE=result ptr?)
00008868:	POP HL
00008869:	POP DE
0000886A:	RET

; 'DAY$'
0000886B:	PUSH HL
0000886C:	PUSH DE
0000886D:	LD A,EDh		; SUBCPU_GET_CALENDAR
0000886F:	LD DE,0004h
00008872:	CALL 8853h		; get time or date from subcpu
00008875:	CALL 6E9Dh		; format date (DAY$)
00008878:	LD A,03h
0000887A:	JR +25h

; 'DATE$'
0000887C:	PUSH HL
0000887D:	PUSH DE
0000887E:	LD A,EDh		; SUBCPU_GET_CALENDAR
00008880:	LD DE,0008h
00008883:	CALL 8853h		; get time or date from subcpu
00008886:	CALL 6E65h		; format date (full DATE$)
00008889:	JR +14h

; 'TIME'
0000888B:	LD A,(HL)
0000888C:	CP 24h	; '$'
0000888E:	JP NZ,88A5h
00008891:	INC HL
00008892:	PUSH HL
00008893:	PUSH DE
00008894:	LD A,EFh		; SUBCPU_GET_CLOCK
00008896:	LD DE,0008h
00008899:	CALL 8853h		; get time or date from subcpu

0000889C:	CALL 6EB8h
0000889F:	LD A,08h
000088A1:	EX DE,HL
000088A2:	POP DE
000088A3:	JR +43h
000088A5:	PUSH HL
000088A6:	CALL 2656h
000088A9:	EX DE,HL
000088AA:	LD DE,290Dh
000088AD:	CALL 9A3Bh		; SUB:
000088B0:	CALL 26A3h
000088B3:	LD DE,0008h
000088B6:	ADD HL,DE		; {LDIR5:} move on the next 8 bytes in the number queue (HL ptr)
000088B7:	EX DE,HL
000088B8:	POP HL
000088B9:	JP 8262h		; skip SPACEs in (HL), A=next char

; 'INKEY$'
000088BC:	CALL 8262h		; skip SPACEs in (HL), A=next char
000088BF:	CP 28h	; '('
000088C1:	LD A,FFh
000088C3:	JR NZ,+11h
000088C5:	INC HL
000088C6:	PUSH DE
000088C7:	CALL 7F9Fh		; DEEXP:
000088CA:	CALL 8C08h		; Check for ')'
000088CD:	CALL 7F98h		; Check byte overflow for value in DE and put in A
000088D0:	CP 03h
000088D2:	JP NC,206Fh		; ERROR: Illegal function call
000088D5:	POP DE
000088D6:	CALL 001Bh
000088D9:	OR A
000088DA:	PUSH HL
000088DB:	JR Z,+12h
000088DD:	LD HL,(3621h)		; TMPEND
000088E0:	LD (HL),A
000088E1:	INC HL
000088E2:	LD (3621h),HL		; TMPEND
000088E5:	DEC HL
000088E6:	LD A,01h
000088E8:	LD BC,(A62Bh)		; STRST
000088EC:	OR A
000088ED:	SBC HL,BC
000088EF:	EX DE,HL
000088F0:	LD (HL),A
000088F1:	INC HL
000088F2:	LD (HL),E
000088F3:	INC HL
000088F4:	LD (HL),D
000088F5:	POP DE
000088F6:	LD BC,0006h
000088F9:	JP 87F3h

; 'MEM$'
000088FC:	PUSH DE
000088FD:	CALL 8BFEh		; Check for '('
00008900:	CALL 7F9Fh		; DEEXP:
00008903:	CALL 2E76h		; CH2CH: Check for comma ','
00008906:	LD C,E
00008907:	LD B,D
00008908:	POP DE
00008909:	PUSH DE
0000890A:	PUSH BC
0000890B:	CALL 7F9Fh		; DEEXP:
0000890E:	CALL 8C08h		; Check for ')'
00008911:	CALL 7F98h		; Check byte overflow for value in DE and put in A
00008914:	LD C,A
00008915:	LD B,A
00008916:	POP DE
00008917:	EX HL,(SP)
00008918:	PUSH HL
00008919:	LD HL,(3621h)		; TMPEND
0000891C:	PUSH HL
0000891D:	CALL 8D2Dh			; STRENT:
00008920:	LD A,C
00008921:	LD (3621h),HL		; TMPEND
00008924:	POP HL
00008925:	POP DE
00008926:	JR -40h

; 'CHARACTER$'
00008928:	PUSH DE
00008929:	CALL 8966h
0000892C:	CALL 8C08h		; Check for ')'
0000892F:	LD A,01h
00008931:	JR +14h

; 'SCRN$'
00008933:	PUSH DE
00008934:	CALL 8966h
00008937:	CALL 2E76h		; CH2CH: Check for comma ','
0000893A:	POP DE
0000893B:	PUSH DE
0000893C:	PUSH BC
0000893D:	CALL 7F9Fh		; DEEXP:
00008940:	CALL 8C08h		; Check for ')'
00008943:	CALL 7F98h		; Check byte overflow for value in DE and put in A
00008946:	POP BC
00008947:	EX HL,(SP)
00008948:	PUSH HL
00008949:	LD L,B
0000894A:	LD H,C
0000894B:	LD D,A
0000894C:	CALL 054Dh		; Entry: H,L = current X,Y position.  Exit: HL=VRAM
0000894F:	LD C,L
00008950:	LD B,H
00008951:	LD HL,(3621h)		; TMPEND
00008954:	PUSH HL
00008955:	LD E,D
00008956:	IN A,(C)
00008958:	LD (HL),A
00008959:	INC HL
0000895A:	INC BC
0000895B:	DEC D
0000895C:	JR NZ,-08h
0000895E:	EX DE,HL
0000895F:	CALL 8D3Ch			; MEMECK: (SBC SP,DE)
00008962:	EX DE,HL
00008963:	LD A,E
00008964:	JR -45h

00008966:	PUSH DE
00008967:	CALL 8BFEh		; Check for '('
0000896A:	CALL 7F9Fh		; DEEXP:
0000896D:	CALL 2E76h		; CH2CH: Check for comma ','
00008970:	CALL 7F98h		; Check byte overflow for value in DE and put in A
00008973:	LD DE,(0007h)	; WIDTH0
00008977:	CP E
00008978:	JP NC,206Fh		; ERROR: Illegal function call
0000897B:	POP DE
0000897C:	PUSH AF
0000897D:	CALL 7F9Fh		; DEEXP:
00008980:	EX AF,AF'
00008981:	CALL 7F98h		; Check byte overflow for value in DE and put in A
00008984:	CP 19h
00008986:	JP NC,206Fh		; ERROR: Illegal function call
00008989:	POP BC
0000898A:	LD C,A
0000898B:	EX AF,AF'
0000898C:	RET

; 'POINT'
0000898D:	PUSH DE
0000898E:	CALL 8BFEh		; Check for '('
00008991:	CALL 7F9Fh		; DEEXP:
00008994:	CALL 2E76h		; CH2CH: Check for comma ','
00008997:	LD C,E
00008998:	LD B,D
00008999:	POP DE
0000899A:	PUSH DE
0000899B:	PUSH BC
0000899C:	CALL 7F9Fh		; DEEXP:
0000899F:	CALL 8C08h		; Check for ')'
000089A2:	EX HL,(SP)
000089A3:	EX DE,HL
000089A4:	CALL 49BFh
000089A7:	POP HL
000089A8:	POP DE
000089A9:	LD C,A
000089AA:	LD B,00h
000089AC:	JR NC,+03h
000089AE:	LD BC,FFFFh
000089B1:	JP 8A89h

; 'STRING$'
000089B4:	PUSH DE
000089B5:	CALL 8BFEh		; Check for '('
000089B8:	CALL 7F9Fh		; DEEXP:
000089BB:	CALL 2E76h		; CH2CH: Check for comma ','
000089BE:	CALL 7F98h		; Check byte overflow for value in DE and put in A
000089C1:	LD C,A
000089C2:	POP DE
000089C3:	PUSH DE
000089C4:	PUSH BC
000089C5:	CALL 7FDEh
000089C8:	CALL 8C08h		; Check for ')'
000089CB:	POP BC
000089CC:	EX HL,(SP)
000089CD:	PUSH HL
000089CE:	LD A,(A5DBh)		; data type, aka PRCSON
000089D1:	CP 03h			; string type?
000089D3:	JR Z,+18h
000089D5:	CALL 5A90h		; 'CINT'
000089D8:	LD E,(HL)
000089D9:	INC HL
000089DA:	LD A,(HL)
000089DB:	OR A
000089DC:	JP NZ,206Fh		; ERROR: Illegal function call
000089DF:	LD HL,(3621h)		; TMPEND
000089E2:	LD (HL),E
000089E3:	INC HL
000089E4:	LD (3621h),HL		; TMPEND
000089E7:	DEC HL
000089E8:	LD B,01h
000089EA:	EX DE,HL
000089EB:	JR +04h
000089ED:	CALL 7FC3h		; Load a string parameter
000089F0:	LD B,A
000089F1:	PUSH BC
000089F2:	XOR A
000089F3:	ADD C
000089F4:	JP C,206Fh		; ERROR: Illegal function call
000089F7:	DJNZ -06h
000089F9:	POP BC
000089FA:	LD HL,(3621h)		; TMPEND
000089FD:	PUSH HL
000089FE:	PUSH AF
000089FF:	PUSH DE
00008A00:	PUSH BC
00008A01:	CALL 8D2Dh			; STRENT:
00008A04:	POP BC
00008A05:	POP DE
00008A06:	DEC C
00008A07:	JR NZ,-0Ah
00008A09:	POP AF
00008A0A:	JP 8921h

; 'INSTR'
00008A0D:	PUSH DE
00008A0E:	CALL 8BFEh		; Check for '('
00008A11:	CALL 7FDEh
00008A14:	CALL 2E76h		; CH2CH: Check for comma ','
00008A17:	EX HL,(SP)
00008A18:	PUSH HL
00008A19:	LD A,(A5DBh)		; data type, aka PRCSON
00008A1C:	CP 03h			; string type?
00008A1E:	LD C,01h
00008A20:	JR Z,+1Fh
00008A22:	CALL 5A90h		; 'CINT'
00008A25:	LD A,(HL)
00008A26:	OR A
00008A27:	JP Z,206Fh		; ERROR: Illegal function call
00008A2A:	LD C,A
00008A2B:	INC HL
00008A2C:	LD A,(HL)
00008A2D:	OR A
00008A2E:	JP NZ,206Fh		; ERROR: Illegal function call
00008A31:	POP DE
00008A32:	POP HL
00008A33:	PUSH DE
00008A34:	PUSH BC
00008A35:	CALL 7FDEh
00008A38:	CALL 2E76h		; CH2CH: Check for comma ','
00008A3B:	POP BC
00008A3C:	EX HL,(SP)
00008A3D:	PUSH HL
00008A3E:	CALL 917Fh		; Verify we have a string in the accumulator
00008A41:	LD B,(HL)
00008A42:	INC HL
00008A43:	LD E,(HL)
00008A44:	INC HL
00008A45:	LD D,(HL)
00008A46:	EXX
00008A47:	POP DE
00008A48:	POP HL
00008A49:	PUSH DE
00008A4A:	EXX
00008A4B:	PUSH BC
00008A4C:	PUSH DE
00008A4D:	EXX
00008A4E:	PUSH DE
00008A4F:	CALL 7FDEh
00008A52:	CALL 8C08h		; Check for ')'
00008A55:	CALL 917Fh		; Verify we have a string in the accumulator
00008A58:	EX HL,(SP)
00008A59:	CALL 7FC3h		; Load a string parameter
00008A5C:	EXX
00008A5D:	POP HL
00008A5E:	EXX
00008A5F:	POP BC
00008A60:	LD HL,(A62Bh)		; STRST
00008A63:	ADD HL,BC
00008A64:	POP BC
00008A65:	PUSH BC
00008A66:	EXX
00008A67:	POP BC
00008A68:	EXX
00008A69:	EX AF,AF'
00008A6A:	LD A,B
00008A6B:	SUB C
00008A6C:	JR C,+13h
00008A6E:	INC A
00008A6F:	LD B,00h
00008A71:	ADD HL,BC
00008A72:	DEC HL
00008A73:	LD B,A
00008A74:	EX AF,AF'
00008A75:	LD C,A
00008A76:	CALL 1292h
00008A79:	JR Z,+0Ah
00008A7B:	INC HL
00008A7C:	EXX
00008A7D:	INC C
00008A7E:	EXX
00008A7F:	DJNZ -0Bh
00008A81:	EXX
00008A82:	LD C,00h
00008A84:	EXX
00008A85:	EXX
00008A86:	LD B,00h
00008A88:	POP DE
00008A89:	EX DE,HL
00008A8A:	LD (HL),C
00008A8B:	INC HL
00008A8C:	LD (HL),B
00008A8D:	LD BC,0007h
00008A90:	ADD HL,BC
00008A91:	LD A,02h			; integer type
00008A93:	LD (A5DBh),A		; data type, aka PRCSON
00008A96:	EX DE,HL
00008A97:	JP 8262h		; skip SPACEs in (HL), A=next char

; 'HEXCHR$'
00008A9A:	PUSH DE
00008A9B:	CALL 8BFEh		; Check for '('
00008A9E:	CALL 7FDEh
00008AA1:	CALL 8C08h		; Check for ')'
00008AA4:	CALL 917Fh		; Verify we have a string in the accumulator
00008AA7:	POP DE
00008AA8:	PUSH HL
00008AA9:	PUSH DE
00008AAA:	EX DE,HL
00008AAB:	CALL 7FC3h		; Load a string parameter
00008AAE:	LD B,A
00008AAF:	LD HL,(3621h)		; TMPEND
00008AB2:	PUSH HL
00008AB3:	LD C,00h
00008AB5:	CALL 8B15h
00008AB8:	JR Z,+08h
00008ABA:	CALL 8AD8h
00008ABD:	LD (HL),A
00008ABE:	INC HL
00008ABF:	INC C
00008AC0:	DJNZ -08h
00008AC2:	EX DE,HL
00008AC3:	CALL 8D3Ch			; MEMECK: (SBC SP,DE)
00008AC6:	LD (3621h),DE		; TMPEND
00008ACA:	POP HL
00008ACB:	LD DE,(A62Bh)		; STRST
00008ACF:	OR A
00008AD0:	SBC HL,DE
00008AD2:	EX DE,HL
00008AD3:	POP HL
00008AD4:	LD (HL),C
00008AD5:	JP 88F1h

00008AD8:	PUSH HL
00008AD9:	CALL 8AFAh
00008ADC:	LD L,A
00008ADD:	JR Z,+17h
00008ADF:	LD A,(DE)
00008AE0:	CP 20h	; ' '
00008AE2:	JR Z,+0Fh
00008AE4:	CALL 8AFAh
00008AE7:	PUSH AF
00008AE8:	LD H,A
00008AE9:	LD A,L
00008AEA:	RLCA
00008AEB:	RLCA
00008AEC:	RLCA
00008AED:	RLCA
00008AEE:	OR H
00008AEF:	LD L,A
00008AF0:	POP AF
00008AF1:	JR Z,+03h
00008AF3:	CALL 8B15h
00008AF6:	LD A,L
00008AF7:	INC B
00008AF8:	POP HL
00008AF9:	RET

00008AFA:	CALL 53F7h		; TOUPPER (DE)
00008AFD:	SUB 30h
00008AFF:	JR C,+0Eh
00008B01:	CP 0Ah
00008B03:	JR C,+0Dh
00008B05:	CP 11h
00008B07:	JR C,+06h
00008B09:	SUB 07h
00008B0B:	CP 10h
00008B0D:	JR C,+03h
00008B0F:	JP 206Fh		; ERROR: Illegal function call

00008B12:	INC DE
00008B13:	DEC B
00008B14:	RET

00008B15:	LD A,(DE)
00008B16:	CP 20h	; ' '
00008B18:	RET NZ
00008B19:	INC DE
00008B1A:	DJNZ -07h
00008B1C:	XOR A
00008B1D:	RET

00008B1E:	LD A,B
00008B1F:	OR A
00008B20:	JP NZ,206Fh		; ERROR: Illegal function call
00008B23:	LD A,C
00008B24:	RET

00008B25:	CALL 8BFEh		; Check for '('
00008B28:	PUSH DE
00008B29:	CALL 7FDEh
00008B2C:	CALL 2E76h		; CH2CH: Check for comma ','
00008B2F:	CALL 917Fh		; Verify we have a string in the accumulator
00008B32:	CALL 7F9Fh		; DEEXP:
00008B35:	LD C,E
00008B36:	LD B,D
00008B37:	POP DE
00008B38:	RET

; 'MIRROR$'
00008B39:	PUSH DE
00008B3A:	CALL 8BFEh		; Check for '('
00008B3D:	CALL 7FDEh
00008B40:	CALL 8C08h		; Check for ')'
00008B43:	CALL 917Fh		; Verify we have a string in the accumulator
00008B46:	EX DE,HL
00008B47:	EX HL,(SP)
00008B48:	PUSH DE
00008B49:	CALL 7FC3h		; Load a string parameter
00008B4C:	LD C,A
00008B4D:	EX DE,HL
00008B4E:	XOR A
00008B4F:	LD B,08h
00008B51:	RR (HL)
00008B53:	RLA
00008B54:	DJNZ -05h
00008B56:	LD (HL),A
00008B57:	INC HL
00008B58:	DEC C
00008B59:	JR NZ,-0Dh
00008B5B:	POP HL
00008B5C:	POP DE
00008B5D:	JP 8262h		; skip SPACEs in (HL), A=next char

; 'USR'
00008B60:	LD C,28h
00008B62:	PUSH DE
00008B63:	CALL 8B9Ah
00008B66:	LD C,(HL)
00008B67:	INC HL
00008B68:	LD B,(HL)
00008B69:	EX DE,HL
00008B6A:	LD (8B93h),BC
00008B6E:	CALL 8BFEh		; Check for '('
00008B71:	POP DE
00008B72:	PUSH DE
00008B73:	CALL 7FDEh
00008B76:	CALL 8C08h		; Check for ')'
00008B79:	EX HL,(SP)
00008B7A:	LD A,(A5DBh)		; data type, aka PRCSON
00008B7D:	CP 03h			; string type?
00008B7F:	JR NZ,+0Ch
00008B81:	PUSH HL
00008B82:	LD B,(HL)
00008B83:	INC HL
00008B84:	LD E,(HL)
00008B85:	INC HL
00008B86:	LD D,(HL)
00008B87:	LD HL,(A62Bh)		; STRST
00008B8A:	ADD HL,DE
00008B8B:	EX DE,HL
00008B8C:	POP HL
00008B8D:	LD IX,2076h		; (Generate error message, error code in 'A')
00008B91:	PUSH HL
00008B92:	CALL 0000h
00008B95:	POP DE
00008B96:	POP HL
00008B97:	JP 8262h		; skip SPACEs in (HL), A=next char

; 
00008B9A:	CALL 8BA7h
00008B9D:	LD E,A
00008B9E:	LD D,00h
00008BA0:	EX DE,HL
00008BA1:	ADD HL,HL
00008BA2:	LD BC,A615h		; table for USR
00008BA5:	ADD HL,BC
00008BA6:	RET

00008BA7:	CALL 8262h		; skip SPACEs in (HL), A=next char
00008BAA:	SUB C
00008BAB:	RET Z
00008BAC:	ADD C
00008BAD:	DEC A
00008BAE:	CP 0Ah			; 10
00008BB0:	INC HL
00008BB1:	RET C
00008BB2:	JP 206Fh		; ERROR: Illegal function call

; 'CALC'
00008BB5:	EXX
00008BB6:	LD HL,(3634h)	; current program line
00008BB9:	INC HL
00008BBA:	LD A,L
00008BBB:	OR H			; was CALC used as an immediate command ?
00008BBC:	LD A,0Ch		; error code for 'Illegal direct'
00008BBE:	JP Z,2076h		; Generate error message, error code in 'A'

00008BC1:	LD A,(91CCh)
00008BC4:	OR A
00008BC5:	JP NZ,205Dh		; ERROR: Too complex
00008BC8:	DEC A
00008BC9:	LD (91CCh),A
00008BCC:	EXX
00008BCD:	CALL 8BFEh		; Check for '('
00008BD0:	PUSH DE
00008BD1:	CALL 7FDEh
00008BD4:	CALL 8C08h		; Check for ')'
00008BD7:	EX HL,(SP)
00008BD8:	PUSH HL
00008BD9:	CALL 7FC3h		; Load a string parameter
00008BDC:	OR A
00008BDD:	JP Z,2069h			; ERROR: Missing operand
00008BE0:	LD C,A
00008BE1:	LD B,00h
00008BE3:	LD HL,A73Fh		; KEYBM1 (aka KEYBUF)
00008BE6:	PUSH HL
00008BE7:	EX DE,HL
00008BE8:	LDIR
00008BEA:	XOR A
00008BEB:	LD (DE),A
00008BEC:	POP DE
00008BED:	LD HL,A637h		; IMDBUF - Immediate command buffer
00008BF0:	PUSH HL
00008BF1:	CALL 7733h		; CVIMTX: convert immediate buffer for direct execution
00008BF4:	POP HL
00008BF5:	POP DE
00008BF6:	CALL 7FDEh
00008BF9:	POP HL
00008BFA:	JP 8262h		; skip SPACEs in (HL), A=next char


; INC HL and check for '('
00008BFD:	INC HL

; Check for '('
00008BFE:	CALL 8262h		; skip SPACEs in (HL), A=next char
00008C01:	CP 28h	; '('
00008C03:	INC HL
00008C04:	RET Z
00008C05:	JP 2066h		; ERROR: Syntax error

; Check for ')'
00008C08:	CP 29h	; ')'
00008C0A:	INC HL
00008C0B:	RET Z
00008C0C:	JP 2066h		; ERROR: Syntax error

00008C0F:	CALL 8DEAh			; INTGTV_SUB:
00008C12:	PUSH DE
00008C13:	CALL 8C8Bh			; VSRTST:
00008C16:	LD A,(HL)
00008C17:	CP 28h	; '('
00008C19:	JP Z,8E08h
00008C1C:	PUSH HL
00008C1D:	SET 7,C
00008C1F:	CALL 8E99h
00008C22:	JP NC,2033h		; ERROR: Subscript out of range
00008C25:	LD E,(HL)
00008C26:	LD D,00h
00008C28:	INC HL
00008C29:	EX DE,HL
00008C2A:	ADD HL,HL
00008C2B:	ADD HL,DE
00008C2C:	JR +13h

; INTGTV:  get variable
00008C2E:	CALL 8DEAh			; INTGTV_SUB:
; GETVAR:
00008C31:	PUSH DE
00008C32:	CALL 8C8Bh			; VSRTST:
00008C35:	LD A,(HL)
00008C36:	CP 28h	; '('
00008C38:	JP Z,8E08h
00008C3B:	PUSH HL
00008C3C:	CALL 8E99h
00008C3F:	JR NC,+06h
00008C41:	LD A,C
00008C42:	LD C,L
00008C43:	LD B,H
00008C44:	POP HL
00008C45:	POP DE
00008C46:	RET

00008C47:	LD A,(DE)
00008C48:	ADD C
00008C49:	ADD 02h
00008C4B:	PUSH BC
00008C4C:	EX DE,HL
00008C4D:	LD HL,(3621h)		; TMPEND
00008C50:	PUSH HL
00008C51:	OR A
00008C52:	SBC HL,DE
00008C54:	INC HL
00008C55:	LD C,L
00008C56:	LD B,H
00008C57:	POP HL
00008C58:	PUSH DE
00008C59:	EX DE,HL
00008C5A:	LD L,A
00008C5B:	LD H,00h
00008C5D:	ADD HL,DE
00008C5E:	EX DE,HL
00008C5F:	CALL 8D3Ch			; MEMECK: (SBC SP,DE)
00008C62:	LD (3621h),DE		; TMPEND
00008C66:	LDDR
00008C68:	LD E,A
00008C69:	LD D,00h
00008C6B:	CALL 9054h
00008C6E:	POP HL
00008C6F:	POP BC
00008C70:	LD DE,A73Fh			; KEYBM1 (aka KEYBUF)
00008C73:	LD (HL),C
00008C74:	INC HL
00008C75:	SCF
00008C76:	SBC C
00008C77:	LD B,A
00008C78:	LD A,(DE)
00008C79:	LD (HL),A
00008C7A:	INC DE
00008C7B:	INC HL
00008C7C:	DJNZ -06h
00008C7E:	PUSH HL
00008C7F:	LD B,C
00008C80:	XOR A
00008C81:	LD (HL),A
00008C82:	INC HL
00008C83:	DJNZ -04h
00008C85:	LD (HL),A
00008C86:	LD A,C
00008C87:	POP BC
00008C88:	POP HL
00008C89:	POP DE
00008C8A:	RET

; VSRTST:
00008C8B:	CALL 8262h		; skip SPACEs in (HL), A=next char
00008C8E:	CALL 53F8h
00008C91:	CP 41h
00008C93:	JP C,2066h		; ERROR: Syntax error
00008C96:	CP 5Bh			; '['  (some BASIC subtracts "A" and checks for 26)
00008C98:	JP NC,2066h		; ERROR: Syntax error
00008C9B:	LD DE,A73Fh		; KEYBM1 (aka KEYBUF)
00008C9E:	LD B,00h
00008CA0:	INC DE
00008CA1:	LD A,(HL)
00008CA2:	CALL 53F8h
00008CA5:	CALL 5401h		; TSTVAR:
00008CA8:	JR C,+05h
00008CAA:	LD (DE),A
00008CAB:	INC B
00008CAC:	INC HL
00008CAD:	JR -0Fh
00008CAF:	LD DE,A73Fh		; KEYBM1 (aka KEYBUF)
00008CB2:	LD A,B
00008CB3:	CP F0h
00008CB5:	JR C,+02h
00008CB7:	LD A,F0h
00008CB9:	LD B,A
00008CBA:	LD (DE),A
00008CBB:	LD A,(HL)
00008CBC:	LD C,02h
00008CBE:	INC HL
00008CBF:	CP 25h
00008CC1:	RET Z
00008CC2:	LD C,03h
00008CC4:	CP 24h	; '$'
00008CC6:	RET Z
00008CC7:	LD C,05h
00008CC9:	CP 21h	; '!'
00008CCB:	RET Z
00008CCC:	LD C,08h
00008CCE:	CP 23h	; '#'
00008CD0:	RET Z
00008CD1:	DEC HL
00008CD2:	PUSH HL
00008CD3:	INC DE
00008CD4:	LD A,(DE)
00008CD5:	AND 1Fh
00008CD7:	DEC A
00008CD8:	LD E,A
00008CD9:	LD D,00h
00008CDB:	LD HL,A5FBh
00008CDE:	ADD HL,DE
00008CDF:	LD C,(HL)
00008CE0:	POP HL
00008CE1:	RET

; ADJUST:
00008CE2:	LD HL,FFF8h			; -8 (normal precision BASICs would have '-5')
00008CE5:	ADD HL,DE
00008CE6:	EX DE,HL
00008CE7:	PUSH DE
00008CE8:	LD HL,FFF8h			; -8 (normal precision BASICs would have '-5')
00008CEB:	ADD HL,DE
00008CEC:	POP DE
00008CED:	LD A,(A5DBh)		; data type, aka PRCSON
00008CF0:	CP B
00008CF1:	RET Z
00008CF2:	CP 03h			; string type?
00008CF4:	JR Z,+04h
00008CF6:	LD C,A
00008CF7:	LD A,B
00008CF8:	CP 03h
00008CFA:	JP Z,2060h		; ERROR: Type mismatch
00008CFD:	LD A,02h
00008CFF:	CP B
00008D00:	JR Z,+10h
00008D02:	CP C
00008D03:	JR Z,+06h
00008D05:	LD A,08h		; double precision type
00008D07:	LD (A5DBh),A		; data type, aka PRCSON
00008D0A:	RET

00008D0B:	EX DE,HL
00008D0C:	LD C,B
00008D0D:	CALL 8D12h
00008D10:	EX DE,HL
00008D11:	RET

00008D12:	PUSH BC
00008D13:	LD A,02h			; integer type
00008D15:	LD (A5DBh),A		; data type, aka PRCSON
00008D18:	CALL 5436h		; 'CSNG'
00008D1B:	POP BC
00008D1C:	LD A,C
00008D1D:	LD (A5DBh),A		; data type, aka PRCSON
00008D20:	RET

; STRLCK:   ..B=len(HL str.)
00008D21:	LD B,FFh
00008D23:	INC B
00008D24:	LD A,(HL)
00008D25:	OR A
00008D26:	RET Z
00008D27:	INC HL
00008D28:	CP 22h	; '"'
00008D2A:	RET Z
00008D2B:	JR -0Ah

; STRENT:
00008D2D:	LD A,B
00008D2E:	OR A
00008D2F:	RET Z
00008D30:	LD A,(DE)
00008D31:	LD (HL),A
00008D32:	INC DE
00008D33:	INC HL
00008D34:	DJNZ -06h
00008D36:	EX DE,HL
00008D37:	CALL 8D3Ch			; MEMECK: (SBC SP,DE)
00008D3A:	EX DE,HL
00008D3B:	RET

; MEMECK: (SBC SP,DE)
00008D3C:	PUSH HL
00008D3D:	LD HL,0000h
00008D40:	ADD HL,SP
00008D41:	DEC H
00008D42:	DEC H
00008D43:	SBC HL,DE
00008D45:	POP HL
00008D46:	RET NC
00008D47:	JP 201Fh		; ERROR: 'Out of memory'

00008D4A:	INC HL
00008D4B:	LD A,(HL)
00008D4C:	CP 24h	; '$'
00008D4E:	JP NZ,2066h		; ERROR: Syntax error
00008D51:	CALL 8BFDh		; INC HL and check for '('
00008D54:	PUSH DE
00008D55:	CALL 7F9Fh		; DEEXP:
00008D58:	PUSH AF
00008D59:	CALL 7F98h		; Check byte overflow for value in DE and put in A
00008D5C:	LD B,A
00008D5D:	POP AF
00008D5E:	CP 29h	; ')'
00008D60:	JR NZ,+03h
00008D62:	PUSH BC
00008D63:	JR +17h
00008D65:	CALL 2E76h		; CH2CH: Check for comma ','
00008D68:	POP DE
00008D69:	PUSH DE
00008D6A:	PUSH BC
00008D6B:	CALL 8262h		; skip SPACEs in (HL), A=next char
00008D6E:	CP 23h	; '#'
00008D70:	JR NZ,+01h
00008D72:	INC HL
00008D73:	CALL 7F9Fh		; DEEXP:
00008D76:	CALL 7F98h		; Check byte overflow for value in DE and put in A
00008D79:	OR A
00008D7A:	JR NZ,+1Eh
00008D7C:	EX HL,(SP)
00008D7D:	LD B,H
00008D7E:	PUSH BC
00008D7F:	LD DE,(3621h)		; TMPEND
00008D83:	PUSH DE
00008D84:	INC B
00008D85:	JR +0Fh
00008D87:	LD A,01h
00008D89:	CALL 001Bh
00008D8C:	CP 03h
00008D8E:	JP Z,1FCAh
00008D91:	LD (DE),A
00008D92:	INC DE
00008D93:	CALL 8D3Ch			; MEMECK: (SBC SP,DE)
00008D96:	DJNZ -11h
00008D98:	JR +27h

00008D9A:	CALL 6627h		; get file defined by stream number in A, out: IY=ptr
00008D9D:	LD IY,(A62Bh)		; STRST
00008DA1:	ADD IY,DE
00008DA3:	LD A,(IY+00h)
00008DA6:	OR A
00008DA7:	JP Z,6886h			; ERROR: File not open
00008DAA:	EX HL,(SP)
00008DAB:	LD B,H
00008DAC:	PUSH BC
00008DAD:	LD DE,(3621h)		; TMPEND
00008DB1:	PUSH DE
00008DB2:	INC B
00008DB3:	JR +0Ah
00008DB5:	LD A,05h
00008DB7:	CALL 6822h
00008DBA:	LD (DE),A
00008DBB:	INC DE
00008DBC:	CALL 8D3Ch			; MEMECK: (SBC SP,DE)
00008DBF:	DJNZ -0Ch
00008DC1:	LD (3621h),DE		; TMPEND
00008DC5:	POP HL
00008DC6:	POP AF
00008DC7:	LD DE,(A62Bh)		; STRST
00008DCB:	OR A
00008DCC:	SBC HL,DE
00008DCE:	LD C,L
00008DCF:	LD B,H
00008DD0:	POP DE
00008DD1:	POP HL
00008DD2:	LD (HL),A
00008DD3:	INC HL
00008DD4:	LD (HL),C
00008DD5:	INC HL
00008DD6:	LD (HL),B
00008DD7:	LD BC,0006h
00008DDA:	ADD HL,BC
00008DDB:	EX DE,HL
00008DDC:	CALL 8262h		; skip SPACEs in (HL), A=next char
00008DDF:	CALL 8C08h		; Check for ')'
00008DE2:	LD A,03h			; string type
00008DE4:	LD (A5DBh),A		; data type, aka PRCSON
00008DE7:	JP 8262h		; skip SPACEs in (HL), A=next char

; INTGTV_SUB:
00008DEA:	LD DE,(A62Dh)		; VARED
00008DEE:	LD (3621h),DE		; TMPEND
00008DF2:	LD DE,0000h
00008DF5:	LD (91CEh),DE		; FNVRBF
00008DF9:	LD (91CCh),DE
00008DFD:	LD DE,(A62Fh)
00008E01:	RET

00008E02:	CALL 8DEAh			; INTGTV_SUB:
00008E05:	PUSH DE
00008E06:	JR +08h
00008E08:	XOR A
00008E09:	LD (91BAh),A		; AUTDIM
00008E0C:	INC HL
00008E0D:	LD (91B6h),HL		; ARYTXT
00008E10:	LD B,00h
00008E12:	EXX
00008E13:	POP HL
00008E14:	PUSH HL
00008E15:	PUSH HL
00008E16:	LD HL,(3621h)		; TMPEND
00008E19:	LD DE,A73Fh			; KEYBM1 (aka KEYBUF)
00008E1C:	PUSH HL
00008E1D:	LD A,(DE)
00008E1E:	LD (HL),A
00008E1F:	INC DE
00008E20:	INC HL
00008E21:	LD B,A
00008E22:	CALL 8D2Dh			; STRENT:
00008E25:	POP DE
00008E26:	LD (3621h),HL		; TMPEND
00008E29:	LD HL,(A62Bh)		; STRST
00008E2C:	EX DE,HL
00008E2D:	OR A
00008E2E:	SBC HL,DE
00008E30:	EX HL,(SP)
00008E31:	PUSH HL
00008E32:	EXX
00008E33:	POP DE
00008E34:	PUSH DE
00008E35:	PUSH BC
00008E36:	LD BC,(91B6h)		; ARYTXT
00008E3A:	LD A,(91BAh)		; AUTDIM
00008E3D:	PUSH BC
00008E3E:	PUSH AF
00008E3F:	LD BC,(A59Ch)	; DGBF00
00008E43:	PUSH BC
00008E44:	CALL 7F9Fh		; DEEXP:	;¯¯DE=EXP(INT)
00008E47:	EX AF,AF'
00008E48:	BIT 7,D
00008E4A:	JP NZ,2033h		; ERROR: Subscript out of range
00008E4D:	POP BC
00008E4E:	LD (A59Ch),BC		; DGBF00
00008E52:	POP AF
00008E53:	LD (91BAh),A		; AUTDIM
00008E56:	POP BC
00008E57:	LD (91B6h),BC		; ARYTXT
00008E5B:	EX AF,AF'
00008E5C:	INC HL
00008E5D:	CP 29h	; ')'
00008E5F:	JR Z,+12h
00008E61:	CP 2Ch	; ','
00008E63:	JP NZ,2066h		; ERROR: Syntax error
00008E66:	POP BC
00008E67:	INC B
00008E68:	EXX
00008E69:	POP HL
00008E6A:	POP DE
00008E6B:	EXX
00008E6C:	PUSH DE
00008E6D:	EXX
00008E6E:	PUSH DE
00008E6F:	PUSH HL
00008E70:	EXX
00008E71:	JR -40h
00008E73:	POP BC
00008E74:	EXX
00008E75:	POP HL
00008E76:	POP DE
00008E77:	EXX
00008E78:	INC B
00008E79:	PUSH DE
00008E7A:	PUSH HL
00008E7B:	EXX
00008E7C:	LD HL,(A62Bh)		; STRST
00008E7F:	ADD HL,DE
00008E80:	LD B,(HL)
00008E81:	INC B
00008E82:	LD DE,A73Fh			; KEYBM1 (aka KEYBUF)
00008E85:	LD A,(HL)
00008E86:	LD (DE),A
00008E87:	INC DE
00008E88:	INC HL
00008E89:	DJNZ -06h
00008E8B:	EXX
00008E8C:	SET 7,C
00008E8E:	CALL 8E99h
00008E91:	RES 7,C
00008E93:	JP NC,8F7Ah
00008E96:	JP 8F11h
00008E99:	LD HL,(A629h)		; VARST
00008E9C:	LD DE,A73Fh			; KEYBM1 (aka KEYBUF)
00008E9F:	LD A,(HL)
00008EA0:	OR A
00008EA1:	RET Z
00008EA2:	CP 40h
00008EA4:	JR NC,+27h
00008EA6:	CP C
00008EA7:	JR NZ,+19h
00008EA9:	INC HL
00008EAA:	LD A,(DE)
00008EAB:	CP (HL)
00008EAC:	JR NZ,+12h
00008EAE:	LD B,A
00008EAF:	INC DE
00008EB0:	INC HL
00008EB1:	LD A,(DE)
00008EB2:	CP (HL)
00008EB3:	JR NZ,+05h
00008EB5:	DJNZ -08h
00008EB7:	INC HL
00008EB8:	SCF
00008EB9:	RET

00008EBA:	INC HL
00008EBB:	DJNZ -03h
00008EBD:	LD A,C
00008EBE:	JR +07h
00008EC0:	LD A,C
00008EC1:	DEC HL
00008EC2:	AND 0Fh
00008EC4:	INC HL
00008EC5:	ADD (HL)
00008EC6:	INC HL
00008EC7:	LD E,A
00008EC8:	LD D,00h
00008ECA:	ADD HL,DE
00008ECB:	JR -31h
00008ECD:	CP C
00008ECE:	JR Z,+15h
00008ED0:	INC HL
00008ED1:	LD E,(HL)
00008ED2:	INC HL
00008ED3:	LD D,(HL)
00008ED4:	DEC HL
00008ED5:	ADD HL,DE
00008ED6:	JP 8E9Ch
00008ED9:	LD A,C
00008EDA:	SUB B
00008EDB:	CPL
00008EDC:	LD C,A
00008EDD:	LD B,FFh
00008EDF:	ADD HL,BC
00008EE0:	POP BC
00008EE1:	DEC HL
00008EE2:	DEC HL
00008EE3:	JR -14h
00008EE5:	LD A,(HL)
00008EE6:	EXX
00008EE7:	LD C,A
00008EE8:	LD B,00h
00008EEA:	EXX
00008EEB:	INC HL
00008EEC:	PUSH DE
00008EED:	LD E,(HL)
00008EEE:	INC HL
00008EEF:	LD D,(HL)
00008EF0:	INC HL
00008EF1:	EX DE,HL
00008EF2:	ADD HL,DE
00008EF3:	DEC HL
00008EF4:	DEC HL
00008EF5:	DEC HL
00008EF6:	DEC HL
00008EF7:	LD (4CE9h),HL
00008EFA:	EX DE,HL
00008EFB:	POP DE
00008EFC:	LD A,(DE)
00008EFD:	CP (HL)
00008EFE:	JP NZ,8EE1h
00008F01:	PUSH BC
00008F02:	LD B,A
00008F03:	LD C,A
00008F04:	INC HL
00008F05:	INC DE
00008F06:	LD A,(DE)
00008F07:	CP (HL)
00008F08:	JP NZ,8ED9h
00008F0B:	DJNZ -09h
00008F0D:	INC HL
00008F0E:	POP BC
00008F0F:	SCF
00008F10:	RET

00008F11:	LD A,B
00008F12:	CP (HL)
00008F13:	JP NZ,2030h		; ERROR: Duplicate definition
00008F16:	LD A,(91BAh)		; AUTDIM
00008F19:	OR A
00008F1A:	JP NZ,2030h		; ERROR: Duplicate definition
00008F1D:	INC HL
00008F1E:	EX DE,HL
00008F1F:	POP HL
00008F20:	LD (A59Ch),HL		; DGBF00
00008F23:	EXX
00008F24:	LD HL,0000h
00008F27:	EXX
00008F28:	EX DE,HL
; ADRCL:
00008F29:	LD E,(HL)
00008F2A:	INC HL
00008F2B:	LD D,(HL)
00008F2C:	INC HL
00008F2D:	EX HL,(SP)
00008F2E:	PUSH DE
00008F2F:	EXX
00008F30:	POP DE
00008F31:	CALL 918Ch		; DIMMUL:
00008F34:	EXX
00008F35:	EX DE,HL
00008F36:	CALL 8F6Eh
00008F39:	EX DE,HL
00008F3A:	PUSH HL
00008F3B:	OR A
00008F3C:	SBC HL,DE
00008F3E:	JP NC,2033h		; ERROR: Subscript out of range
00008F41:	EXX
00008F42:	POP DE
00008F43:	CALL 9188h	; DIMADD:
00008F46:	EXX
00008F47:	POP HL
00008F48:	DJNZ -21h	; ADRCL:
00008F4A:	PUSH HL
00008F4B:	EXX
00008F4C:	LD A,C
00008F4D:	LD D,B
00008F4E:	BIT 6,A
00008F50:	JR NZ,+14h	; VARDIM:
00008F52:	AND 0Fh
00008F54:	LD E,A
00008F55:	PUSH AF
00008F56:	CALL 918Ch		; DIMMUL:
00008F59:	PUSH HL
00008F5A:	EXX
00008F5B:	POP BC
00008F5C:	POP AF
00008F5D:	POP HL
00008F5E:	ADD HL,BC
00008F5F:	LD C,L
00008F60:	LD B,H
; VARDME:
00008F61:	LD HL,(A59Ch)		; DGBF00
00008F64:	POP DE
00008F65:	RET

00008F66:	JP 206Ch	; ERROR: Reserved feature

00008F69:	NOP
00008F6A:	NOP
00008F6B:	NOP
00008F6C:	NOP
00008F6D:	NOP

00008F6E:	LD A,(91BBh)
00008F71:	OR A
00008F72:	RET Z
00008F73:	LD A,D
00008F74:	OR E
00008F75:	JP Z,2033h		; ERROR: Subscript out of range
00008F78:	DEC DE
00008F79:	RET

00008F7A:	EXX
00008F7B:	POP HL
00008F7C:	LD (A59Ch),HL		; DGBF00
00008F7F:	EXX
00008F80:	LD DE,(3621h)		; TMPEND
00008F84:	LD L,B
00008F85:	LD H,00h
00008F87:	ADD HL,HL
00008F88:	ADD HL,DE
00008F89:	EX DE,HL
00008F8A:	INC DE
00008F8B:	CALL 8D3Ch			; MEMECK: (SBC SP,DE)
00008F8E:	LD (HL),B
00008F8F:	INC HL
00008F90:	EXX
00008F91:	LD HL,0001h
00008F94:	EXX
00008F95:	POP DE
00008F96:	LD A,(91BAh)		; AUTDIM
00008F99:	OR A
00008F9A:	JR NZ,+0Ch
00008F9C:	PUSH HL
00008F9D:	EX DE,HL
00008F9E:	LD DE,000Ah
00008FA1:	SCF
00008FA2:	SBC HL,DE
00008FA4:	JP NC,2033h		; ERROR: Subscript out of range
00008FA7:	POP HL
00008FA8:	CALL 8F6Eh
00008FAB:	INC DE
00008FAC:	LD (HL),E
00008FAD:	INC HL
00008FAE:	LD (HL),D
00008FAF:	INC HL
00008FB0:	PUSH DE
00008FB1:	EXX
00008FB2:	POP DE
00008FB3:	CALL 918Ch		; DIMMUL:
00008FB6:	EXX
00008FB7:	DJNZ -24h
00008FB9:	LD E,C
00008FBA:	LD D,00h
00008FBC:	PUSH BC
00008FBD:	PUSH DE
00008FBE:	EXX
00008FBF:	POP DE
00008FC0:	CALL 918Ch		; DIMMUL:
00008FC3:	PUSH HL
00008FC4:	EXX
00008FC5:	POP BC
00008FC6:	PUSH BC
00008FC7:	EX DE,HL
00008FC8:	LD HL,(3621h)		; TMPEND
00008FCB:	LD L,(HL)
00008FCC:	LD H,00h
00008FCE:	ADD HL,HL
00008FCF:	LD A,(A73Fh)		; KEYBM1 (aka KEYBUF)
00008FD2:	ADD 05h
00008FD4:	ADD L
00008FD5:	LD L,A
00008FD6:	LD A,00h
00008FD8:	ADC H
00008FD9:	LD H,A
00008FDA:	JR C,+05h
00008FDC:	ADD HL,BC
00008FDD:	JR C,+02h
00008FDF:	PUSH HL
00008FE0:	ADD HL,DE
00008FE1:	JP C,201Fh		; ERROR: 'Out of memory'
00008FE4:	EX DE,HL
00008FE5:	CALL 8D3Ch			; MEMECK: (SBC SP,DE)
00008FE8:	PUSH HL
00008FE9:	EXX
00008FEA:	POP HL
00008FEB:	LD BC,(A62Bh)		; STRST
00008FEF:	DEC BC
00008FF0:	OR A
00008FF1:	SBC HL,BC
00008FF3:	PUSH HL
00008FF4:	EXX
00008FF5:	POP BC
00008FF6:	LDDR
00008FF8:	POP DE
00008FF9:	CALL 904Dh
00008FFC:	POP BC
00008FFD:	PUSH DE
00008FFE:	EXX
00008FFF:	POP DE
00009000:	LD H,B
00009001:	LD L,C
00009002:	POP BC
00009003:	LD A,C
00009004:	OR 80h
00009006:	LD (HL),A
00009007:	INC HL
00009008:	DEC DE
00009009:	LD (HL),E
0000900A:	INC HL
0000900B:	LD (HL),D
0000900C:	INC HL
0000900D:	LD DE,A73Fh			; KEYBM1 (aka KEYBUF)
00009010:	LD A,(DE)
00009011:	INC A
00009012:	CALL 9045h
00009015:	LD DE,(3621h)		; TMPEND
00009019:	LD A,(DE)
0000901A:	LD (HL),A
0000901B:	INC HL
0000901C:	INC DE
0000901D:	ADD A
0000901E:	CALL 9045h
00009021:	PUSH HL
00009022:	EXX
00009023:	POP HL
00009024:	XOR A
00009025:	LD (HL),A
00009026:	INC HL
00009027:	DEC BC
00009028:	LD A,B
00009029:	OR C
0000902A:	JR NZ,-08h
0000902C:	LD (HL),A
0000902D:	LD A,01h
0000902F:	LD (364Fh),A
00009032:	EXX
00009033:	POP DE
00009034:	LD A,(91BAh)		; AUTDIM
00009037:	OR A
00009038:	JR Z,+04h
0000903A:	LD HL,(A59Ch)		; DGBF00
0000903D:	RET

0000903E:	LD HL,(91B6h)		; ARYTXT
00009041:	PUSH DE
00009042:	JP 8E10h
00009045:	LD B,A
00009046:	LD A,(DE)
00009047:	LD (HL),A
00009048:	INC DE
00009049:	INC HL
0000904A:	DJNZ -06h
0000904C:	RET

0000904D:	LD HL,(3621h)		; TMPEND
00009050:	ADD HL,DE
00009051:	LD (3621h),HL		; TMPEND
00009054:	LD HL,(A62Bh)		; STRST
00009057:	ADD HL,DE
00009058:	LD (A62Bh),HL		; STRST
0000905B:	LD HL,(A62Dh)		; VARED
0000905E:	ADD HL,DE
0000905F:	LD (A62Dh),HL		; VARED
00009062:	LD HL,(3628h)
00009065:	ADD HL,DE
00009066:	LD (3628h),HL
00009069:	RET

'DIM'
0000906A:	LD A,FFh
0000906C:	LD (91BAh),A		; AUTDIM
0000906F:	CALL 8C8Bh			; VSRTST:
00009072:	LD A,(HL)
00009073:	CALL 8C01h
00009076:	CALL 8E02h
00009079:	CALL 8262h		; skip SPACEs in (HL), A=next char
0000907C:	CP 2Ch	; ','
0000907E:	RET NZ
0000907F:	INC HL
00009080:	JR -13h

; ' DEF FN'
00009082:	LD A,(HL)
00009083:	CALL 8C8Eh
00009086:	SET 6,C
00009088:	PUSH HL
00009089:	CALL 8E99h
0000908C:	JP C,2030h		; ERROR: Duplicate definition
0000908F:	LD (HL),C
00009090:	EX HL,(SP)
00009091:	PUSH HL
00009092:	DEC HL
00009093:	CALL 3552h			; Parse the content of a 'DATA' line
00009096:	OR A
00009097:	JR Z,+04h
00009099:	CP 3Ah	; ':'
0000909B:	JR NZ,-0Ah
0000909D:	POP DE
0000909E:	PUSH HL
0000909F:	INC HL
000090A0:	SBC HL,DE
000090A2:	LD A,(A73Fh)		; KEYBM1 (aka KEYBUF)
000090A5:	ADD 04h
000090A7:	LD C,A
000090A8:	LD B,00h
000090AA:	LD A,L
000090AB:	ADD HL,BC
000090AC:	LD B,A
000090AD:	PUSH HL
000090AE:	EXX
000090AF:	POP BC
000090B0:	PUSH BC
000090B1:	LD HL,(3621h)		; TMPEND
000090B4:	PUSH HL
000090B5:	ADD HL,BC
000090B6:	EX HL,(SP)
000090B7:	PUSH HL
000090B8:	LD DE,(A62Bh)		; STRST
000090BC:	OR A
000090BD:	SBC HL,DE
000090BF:	LD C,L
000090C0:	LD B,H
000090C1:	POP HL
000090C2:	POP DE
000090C3:	LDDR
000090C5:	POP DE
000090C6:	CALL 904Dh
000090C9:	DEC DE
000090CA:	POP HL
000090CB:	EX HL,(SP)
000090CC:	INC HL
000090CD:	LD (HL),E
000090CE:	INC HL
000090CF:	LD (HL),D
000090D0:	INC HL
000090D1:	LD DE,A73Fh			; KEYBM1 (aka KEYBUF)
000090D4:	LD A,(DE)
000090D5:	LD (HL),A
000090D6:	LD B,A
000090D7:	INC DE
000090D8:	INC HL
000090D9:	LD A,(DE)
000090DA:	LD (HL),A
000090DB:	DJNZ -06h
000090DD:	INC HL
000090DE:	PUSH HL
000090DF:	EXX
000090E0:	POP HL
000090E1:	LD A,(DE)
000090E2:	LD (HL),A
000090E3:	INC DE
000090E4:	INC HL
000090E5:	DJNZ -06h
000090E7:	LD (HL),00h
000090E9:	POP HL
000090EA:	RET

; 'FN'
000090EB:	PUSH DE
000090EC:	LD A,(HL)
000090ED:	CALL 8C8Eh
000090F0:	POP IX
000090F2:	PUSH BC
000090F3:	SET 6,C
000090F5:	LD DE,(91D0h)
000090F9:	LD (91D0h),HL
000090FC:	PUSH DE
000090FD:	CALL 8E99h
00009100:	LD A,12h		; error code for 'Undefined function'
00009102:	JP NC,2076h		; Generate error message, error code in 'A'
00009105:	LD DE,(91CEh)	; FNVRBF
00009109:	LD (91CEh),HL	; FNVRBF
0000910C:	PUSH DE
0000910D:	PUSH IX
0000910F:	DEC HL
00009110:	CALL 3552h			; Parse the content of a 'DATA' line
00009113:	CALL 17A8h		; END2C: look for next parameter, Z if none
00009116:	JP Z,2066h		; ERROR: Syntax error
00009119:	CP F4h			; Token for '='
0000911B:	JR NZ,-0Dh
0000911D:	INC HL
0000911E:	LD DE,(3621h)		; TMPEND
00009122:	CALL 8D3Ch			; MEMECK: (SBC SP,DE)
00009125:	POP DE
00009126:	PUSH DE
00009127:	CALL 7FDEh
0000912A:	POP DE
0000912B:	LD HL,(91D0h)
0000912E:	POP BC
0000912F:	LD (91CEh),BC		; FNVRBF
00009133:	POP BC
00009134:	LD (91D0h),BC
00009138:	EX DE,HL
00009139:	POP BC
0000913A:	LD A,C
0000913B:	CALL 916Bh
0000913E:	LD BC,0008h
00009141:	ADD HL,BC
00009142:	EX DE,HL
00009143:	CALL 8262h		; skip SPACEs in (HL), A=next char
00009146:	CP 28h	; '('
00009148:	RET NZ
00009149:	PUSH DE
0000914A:	LD B,01h
0000914C:	PUSH BC
0000914D:	CALL 3552h			; Parse the content of a 'DATA' line
00009150:	POP BC
00009151:	OR A
00009152:	JP Z,2066h		; ERROR: Syntax error
00009155:	CP 3Ah	; ':'
00009157:	JP Z,2066h		; ERROR: Syntax error
0000915A:	CP 28h	; '('
0000915C:	JR NZ,+01h
0000915E:	INC B
0000915F:	CP 29h	; ')'
00009161:	JR NZ,-17h
00009163:	DJNZ -19h
00009165:	INC HL
00009166:	CALL 8262h		; skip SPACEs in (HL), A=next char
00009169:	POP DE
0000916A:	RET

0000916B:	CP 02h			; integer type ?
0000916D:	JP Z,5A90h		; 'CINT'
00009170:	CP 05h			; Single precision type ?
00009172:	JP Z,5436h		; 'CSNG'
00009175:	CP 08h			; double precision type ?
00009177:	JP Z,5419h		; 'CDBL'
0000917A:	CP 03h			; string type?
0000917C:	JP NZ,2066h		; ERROR: Syntax error

; Verify we have a string in the accumulator
0000917F:	LD A,(A5DBh)		; data type, aka PRCSON
00009182:	CP 03h			; string type?
00009184:	RET Z
00009185:	JP 2060h		; ERROR: Type mismatch

; DIMADD:
00009188:	ADD HL,DE
00009189:	RET NC
0000918A:	JR +27h			; SORDIM:, Subscript out of range

; DIMMUL:
0000918C:	PUSH BC
0000918D:	EX DE,HL
0000918E:	LD C,L
0000918F:	LD A,H
00009190:	LD HL,0000h
00009193:	CALL 919Ch
00009196:	LD A,C
00009197:	CALL 919Ch
0000919A:	POP BC
0000919B:	RET

; DMMULS:
0000919C:	OR A
0000919D:	JR Z,+0Eh		; SKPMUL:
0000919F:	LD B,08h
000091A1:	ADD HL,HL

000091A2:	JR C,+0Fh		; SORDIM:, Subscript out of range
000091A4:	RLCA
000091A5:	JR NC,+03h		; DMMULE:
000091A7:	ADD HL,DE
000091A8:	JR C,+09h
; DMMULE:
000091AA:	DJNZ -0Bh
000091AC:	RET
; SKPMUL:
000091AD:	LD A,H
000091AE:	LD H,L
000091AF:	LD L,00h
000091B1:	OR A
000091B2:	RET Z

; SORDIM:
000091B3:	JP 2033h		; ERROR: Subscript out of range

; ARYTXT
000091B6:	LD D,D
000091B7:	OR L
000091B8:	NOP
000091B9:	NOP
; AUTDIM
000091BA:	NOP
000091BB:	NOP

142E:91B0                                      00 08 02 00               ....
142E:91C0  04 07 01 00 06 09 03 00-00 00 00 00 00 00 00 00   ................

000091BC:	NOP
000091BD:	EX AF,AF'
000091BE:	LD (BC),A
000091BF:	NOP
000091C0:	INC B
000091C1:	RLCA
000091C2:	LD BC,0600h
000091C5:	ADD HL,BC
000091C6:	INC BC
000091C7:	NOP
000091C8:	NOP
000091C9:	NOP
000091CA:	NOP
000091CB:	NOP

000091CC:	NOP
000091CD:	NOP

; FNVRBF
000091CE:	NOP
000091CF:	NOP

000091D0:	NOP
000091D1:	NOP

; TSTSGN:
000091D2:	INC HL
000091D3:	BIT 7,(HL)
000091D5:	DEC HL
000091D6:	RET

; MULTWO:
000091D7:	INC (HL)
000091D8:	RET NZ
000091D9:	JP 205Ah		; ERROR: Overflow

; DIVTWO:
000091DC:	LD A,(HL)
000091DD:	OR A
000091DE:	RET Z
000091DF:	DEC (HL)
000091E0:	RET NZ
000091E1:	JP 9A09h		; CLRFAC: Set FP accumulator to 0

; ADDHL5:	pick 8 more bytes from the number queue (HL ptr)
000091E4:	PUSH HL
000091E5:	LD DE,0008h		; {LDIR5:} move on the next 8 bytes in the number queue (HL ptr)
000091E8:	ADD HL,DE
000091E9:	EX DE,HL
000091EA:	LD HL,(A633h)	; MEMMAX
000091ED:	DEC HL
000091EE:	SBC HL,DE
000091F0:	JP C,205Dh		; ERROR: Too complex
000091F3:	POP HL
000091F4:	RET

; FACSET:
000091F5:	PUSH HL
000091F6:	LD (A588h),HL	; SNFAC0
000091F9:	CALL 91E4h		; ADDHL5:	pick 8 more bytes from the number queue (HL ptr)
000091FC:	EX DE,HL
000091FD:	LD (A58Ah),HL	; SNFAC1
00009200:	CALL 91E4h		; ADDHL5:	pick 8 more bytes from the number queue (HL ptr)
00009203:	EX DE,HL
00009204:	LD (A58Ch),HL	; SNFAC2
00009207:	CALL 91E4h		; ADDHL5:	pick 8 more bytes from the number queue (HL ptr)
0000920A:	LD (A58Eh),DE	; SNFAC3
0000920E:	POP HL
0000920F:	RET

; Force 2 arguments to single precision
00009210:	LD A,(A5DBh)		; data type, aka PRCSON
00009213:	CP 02h			; integer type ?
00009215:	RET NZ
00009216:	EX DE,HL
00009217:	CALL 5436h		; 'CSNG'
0000921A:	EX DE,HL
0000921B:	LD A,02h			; integer type
0000921D:	LD (A5DBh),A		; data type, aka PRCSON
00009220:	JP 5436h		; 'CSNG'

00009223:	NOP
00009224:	NOP
00009225:	POP IX
00009227:	LD SP,(A62Fh)
0000922B:	LD IY,FFFFh
0000922F:	PUSH IY
00009231:	PUSH IX
00009233:	RET

; POWERS:	(HL)^(DE)
00009234:	CALL 9210h		; Force 2 arguments to single precision
00009237:	CALL 91D2h		; TSTSGN:
0000923A:	JR Z,+2Ch		; POWER1:
0000923C:	CALL 9A13h		; TOGLE:  toggle number sign
0000923F:	EX DE,HL
00009240:	PUSH DE
00009241:	PUSH HL
00009242:	LD DE,A5DCh		; ZFAC1
00009245:	CALL 53EAh		; LDIR5: (DE) = (HL), 8 bytes
00009248:	LD HL,A5DCh		; ZFAC1
0000924B:	CALL 931Fh		; [FRACT:] 'FRAC'
0000924E:	LD A,(HL)
0000924F:	OR A
00009250:	JP NZ,206Fh		; ERROR: Illegal function call
00009253:	POP HL
00009254:	PUSH HL
00009255:	CALL 5BAFh		; HLFLT
00009258:	XOR A
00009259:	RR L
0000925B:	RRA
0000925C:	POP DE
0000925D:	POP HL
0000925E:	PUSH AF
0000925F:	CALL 9268h		; POWER1:
00009262:	POP AF
00009263:	INC HL
00009264:	OR (HL)
00009265:	LD (HL),A
00009266:	DEC HL
00009267:	RET

; POWER1:
00009268:	EX DE,HL
00009269:	LD A,(HL)
0000926A:	OR A
0000926B:	JR Z,+26h		; POWR1
0000926D:	EX DE,HL
0000926E:	LD A,(HL)
0000926F:	OR A
00009270:	RET Z
00009271:	EX DE,HL
00009272:	CALL 91D2h		; TSTSGN:
00009275:	JR Z,+22h		; POWER2:
00009277:	CALL 9A13h		; TOGLE:  toggle number sign
0000927A:	CALL 9299h		; POWER2:
0000927D:	PUSH DE
0000927E:	PUSH HL
0000927F:	LD DE,A5E4h		; ZFAC1
00009282:	CALL 53E7h		; LDIR1: (DE) = (FLONE), 8 bytes
00009285:	LD HL,A5E4h		; ZFAC1
00009288:	POP DE
00009289:	CALL A0EAh		; DIV:
0000928C:	PUSH DE
0000928D:	CALL 53EAh		; LDIR5: (DE) = (HL), 8 bytes
00009290:	POP HL
00009291:	POP DE
00009292:	RET

; POWR1
00009293:	PUSH DE
00009294:	CALL 53E7h		; LDIR1: (DE) = (FLONE), 8 bytes
00009297:	POP HL
00009298:	RET

;POWER2:
00009299:	PUSH DE
0000929A:	PUSH HL
0000929B:	PUSH DE
0000929C:	LD A,(9A08h)
0000929F:	CP 02h
000092A1:	JR NZ,+26h
000092A3:	CALL 5BAFh		; HLFLT
000092A6:	LD DE,0020h
000092A9:	EX DE,HL
000092AA:	SBC HL,DE
000092AC:	JR C,+1Bh
000092AE:	POP HL
000092AF:	LD B,E
000092B0:	PUSH HL
000092B1:	PUSH BC
000092B2:	LD DE,A5E4h		; ZFAC1
000092B5:	CALL 53EAh		; LDIR5: (DE) = (HL), 8 bytes
000092B8:	POP BC
000092B9:	POP HL
000092BA:	LD DE,A5E4h		; ZFAC1
000092BD:	JR +05h
000092BF:	PUSH BC
000092C0:	CALL 9FF5h		; MUL:
000092C3:	POP BC
000092C4:	DJNZ -07h
000092C6:	POP DE
000092C7:	POP HL
000092C8:	RET

000092C9:	POP DE
000092CA:	POP HL
000092CB:	LD DE,A5E4h		; ZFAC1
000092CE:	CALL 53EAh		; LDIR5: (DE) = (HL), 8 bytes
000092D1:	POP HL
000092D2:	CALL 9867h		; 'LOG'
000092D5:	LD DE,A5E4h		; ZFAC1
000092D8:	CALL 9FF5h		; MUL:
000092DB:	JP 974Fh		; 'EXP'

; 'ABS'
000092DE:	CALL 994Dh		; Get a single precision parameter
000092E1:	INC HL
000092E2:	RES 7,(HL)
000092E4:	DEC HL
000092E5:	RET

; 'INT'   [INTOPR:]
000092E6:	LD A,(A5DBh)		; data type, aka PRCSON
000092E9:	CP 02h			; integer type ?
000092EB:	RET Z
000092EC:	CALL 91D2h		; TSTSGN:
000092EF:	JP Z,5ACEh
000092F2:	PUSH HL
000092F3:	LD DE,A5E4h		; ZFAC1
000092F6:	CALL 53EAh		; LDIR5: (DE) = (HL), 8 bytes
000092F9:	POP HL
000092FA:	CALL 5ACEh
000092FD:	LD DE,A5E4h		; ZFAC1
00009300:	CALL 9C39h		; CMP:
00009303:	RET Z

00009304:	LD DE,5C5Dh		; FLONE
; ONESUB:
00009307:	JP 9A3Bh		; SUB:

; ONEADD:
0000930A:	LD DE,5C5Dh		; FLONE
0000930D:	JP 9A44h		; ADD:

; ONECMP:
00009310:	LD DE,5C5Dh		; FLONE
00009313:	JP 9C39h		; CMP:

; 'FIX'
00009316:	LD A,(A5DBh)		; data type, aka PRCSON
00009319:	CP 02h			; integer type ?
0000931B:	RET Z
0000931C:	JP 5ACEh

; 'FRAC'   [FRACT:]
0000931F:	LD A,(A5DBh)		; data type, aka PRCSON
00009322:	CP 02h			; integer type ?
00009324:	JR Z,+12h

00009326:	PUSH HL
00009327:	LD DE,A5E4h		; ZFAC1
0000932A:	CALL 53EAh		; LDIR5: (DE) = (HL), 8 bytes
0000932D:	LD HL,A5E4h		; ZFAC1
00009330:	CALL 5ACEh
00009333:	EX DE,HL
00009334:	POP HL
00009335:	JP 9A3Bh		; SUB:

00009338:	LD (HL),00h
0000933A:	INC HL
0000933B:	LD (HL),00h
0000933D:	DEC HL
0000933E:	RET

; 'SQR'
0000933F:	CALL 994Dh		; Get a single precision parameter
00009342:	LD A,(HL)
00009343:	OR A
00009344:	RET Z
00009345:	CALL 91D2h		; TSTSGN:
00009348:	JP NZ,206Fh		; ERROR: Illegal function call
0000934B:	CALL 9867h		; 'LOG'
0000934E:	CALL 91DCh		; DIVTWO:
00009351:	JP 974Fh		; 'EXP'

; 'SUM'
00009354:	CALL 994Dh		; Get a single precision parameter
00009357:	CALL 5ACEh
0000935A:	LD A,(HL)
0000935B:	OR A
0000935C:	RET Z
0000935D:	CALL 91D2h		; TSTSGN:
00009360:	JP NZ,206Fh		; ERROR: Illegal function call
00009363:	PUSH BC
00009364:	CALL 91E4h		; ADDHL5:	pick 8 more bytes from the number queue (HL ptr)
00009367:	PUSH HL
00009368:	PUSH DE
00009369:	CALL 53EAh		; LDIR5: (DE) = (HL), 8 bytes
0000936C:	POP HL
0000936D:	CALL 930Ah		; ONEADD:
00009370:	EX DE,HL
00009371:	POP HL
00009372:	CALL 9FF5h		; MUL:
00009375:	POP BC
00009376:	JP 91DCh		; DIVTWO:

; 'FAC'
00009379:	CALL 994Dh		; Get a single precision parameter
0000937C:	PUSH BC
0000937D:	INC HL
0000937E:	LD A,(HL)
0000937F:	DEC HL
00009380:	RLCA
00009381:	JP C,206Fh		; ERROR: Illegal function call
00009384:	CALL 5ACEh
00009387:	LD A,(HL)
00009388:	OR A
00009389:	JR Z,+04h
0000938B:	CP 82h
0000938D:	JR NC,+08h

; RETONE:
0000938F:	PUSH HL
00009390:	EX DE,HL
00009391:	CALL 53E7h		; LDIR1: (DE) = (FLONE), 8 bytes
00009394:	POP HL
00009395:	POP BC
00009396:	RET

00009397:	PUSH HL
00009398:	CALL 5BA5h
0000939B:	XOR A
0000939C:	CP H
0000939D:	JP NZ,205Ah		; ERROR: Overflow
000093A0:	LD A,L
000093A1:	CP 22h	; '"'
000093A3:	JP NC,205Ah		; ERROR: Overflow
000093A6:	LD B,L
000093A7:	POP HL
000093A8:	CALL 91E4h		; ADDHL5:	pick 8 more bytes from the number queue (HL ptr)
000093AB:	PUSH DE
000093AC:	PUSH HL
000093AD:	PUSH BC
000093AE:	CALL 53E7h		; LDIR1: (DE) = (FLONE), 8 bytes
000093B1:	POP BC
000093B2:	POP DE
000093B3:	POP HL
000093B4:	PUSH BC
000093B5:	CALL 9FF5h		; MUL:
000093B8:	PUSH HL
000093B9:	EX DE,HL
000093BA:	CALL 9304h		; ONESUB:
000093BD:	EX DE,HL
000093BE:	POP HL
000093BF:	POP BC
000093C0:	DJNZ -0Eh
000093C2:	PUSH DE
000093C3:	CALL 53EAh		; LDIR5: (DE) = (HL), 8 bytes
000093C6:	POP HL
000093C7:	POP BC
000093C8:	RET

; ATNLM1
000093C9:	LD A,(HL)
000093CA:	LD C,H

; ATNLM2
000093CB:	ADD B
000093CC:	DEC HL

; 'ATN'
000093CD:	CALL 994Dh		; Get a single precision parameter
000093D0:	PUSH BC
000093D1:	INC HL
000093D2:	LD A,(HL)
000093D3:	RES 7,(HL)
000093D5:	DEC HL
000093D6:	PUSH AF
000093D7:	CALL 93E1h		; ATN2:
000093DA:	POP AF
000093DB:	POP BC
000093DC:	RLCA
000093DD:	RET NC
000093DE:	JP 9A13h		; TOGLE:  toggle number sign

; ATN2:
000093E1:	CALL 9310h		; ONECMP:
000093E4:	JR C,+24h
000093E6:	CALL 91E4h		; ADDHL5:	pick 8 more bytes from the number queue (HL ptr)
000093E9:	PUSH DE
000093EA:	PUSH HL
000093EB:	CALL 53EAh		; LDIR5: (DE) = (HL), 8 bytes
000093EE:	POP DE
000093EF:	PUSH DE
000093F0:	CALL 53E7h		; LDIR1: (DE) = (FLONE), 8 bytes
000093F3:	POP HL
000093F4:	POP DE
000093F5:	CALL A0EAh		; DIV:
000093F8:	CALL 940Ah		; ATN1:
000093FB:	LD DE,96F7h		; FLTPAI  (Greek PI)
000093FE:	CALL 91D7h		; MULTWO:
00009401:	CALL 9A3Bh		; SUB:
00009404:	CALL 91DCh		; DIVTWO:
00009407:	JP 9AF2h		; ABS:

; ATN1:
0000940A:	LD A,FFh
0000940C:	LD (A594h),A	; SINSGN
0000940F:	LD DE,93C9h		; ATNLM1
00009412:	CALL 9C39h		; CMP:
00009415:	JR C,+52h
00009417:	LD DE,93CBh		; ATNLM2
0000941A:	CALL 9C39h		; CMP:
0000941D:	PUSH AF
0000941E:	CALL 91E4h		; ADDHL5:	pick 8 more bytes from the number queue (HL ptr)
00009421:	POP AF
00009422:	PUSH HL
00009423:	PUSH DE
00009424:	CALL 53EAh		; LDIR5: (DE) = (HL), 8 bytes
00009427:	POP HL
00009428:	JR C,+14h		; ATNMID:
0000942A:	CALL 930Ah		; ONEADD:
0000942D:	EX HL,(SP)
0000942E:	CALL 9A3Bh		; SUB:
00009431:	POP DE
00009432:	CALL A0EAh		; DIV:
00009435:	CALL 9469h		; ATNCUL:
00009438:	LD DE,96B2h		; FLTQPI (PI/4)
0000943B:	JP 9A44h		; ADD:
; ATNMID:
0000943E:	LD DE,9461h		; SQRTMO
00009441:	CALL 9FF5h		; MUL:
00009444:	CALL 930Ah		; ONEADD:
00009447:	EX HL,(SP)
00009448:	LD DE,9461h		; SQRTMO
0000944B:	CALL 9A3Bh		; SUB:
0000944E:	POP DE
0000944F:	CALL A0EAh		; DIV:
00009452:	CALL 9469h		; ATNCUL:
00009455:	CALL 91D7h		; MULTWO:
00009458:	LD DE,96B2h		; FLTQPI (PI/4)
0000945B:	CALL 9A44h		; ADD:
0000945E:	JP 91DCh		; DIVTWO:

; SQRTMO
00009461:	LD A,A
00009462:	LD D,H
00009463:	INC DE
00009464:	CALL Z,E7CFh
00009467:	LD A,C
00009468:	SUB B

; ATNCUL:
00009469:	PUSH BC
0000946A:	PUSH HL
0000946B:	CALL 91F5h		; FACSET:
0000946E:	POP HL
0000946F:	PUSH HL
00009470:	PUSH DE
00009471:	CALL 53EAh		; LDIR5: (DE) = (HL), 8 bytes
00009474:	POP HL
00009475:	LD E,L
00009476:	LD D,H
00009477:	CALL 9FF5h		; MUL:
0000947A:	LD DE,(A58Ch)	; SNFAC2
0000947E:	POP HL
0000947F:	PUSH HL
00009480:	CALL 53EAh		; LDIR5: (DE) = (HL), 8 bytes
00009483:	LD A,(A5DBh)		; data type, aka PRCSON
00009486:	DEC A
00009487:	CP 04h
00009489:	LD B,A
0000948A:	LD HL,9662h
0000948D:	JP Z,9530h
00009490:	LD B,0Ah
00009492:	JP 9530h

; 'COS'
00009495:	CALL 994Dh		; Get a single precision parameter
00009498:	PUSH BC
00009499:	LD A,(HL)
0000949A:	OR A
0000949B:	JP Z,938Fh		; RETONE:
0000949E:	LD DE,96B2h		; FLTQPI (PI/4)
000094A1:	CALL 91DCh		; DIVTWO:		(PI/2)
000094A4:	CALL 9A3Bh		; SUB:
000094A7:	CALL 91D7h		; MULTWO:
000094AA:	CALL 9A13h		; TOGLE:  toggle number sign
000094AD:	JR +04h

; 'SIN'
000094AF:	CALL 994Dh		; Get a single precision parameter
000094B2:	PUSH BC
000094B3:	PUSH HL
000094B4:	INC HL
000094B5:	LD A,(HL)
000094B6:	RES 7,(HL)
000094B8:	AND 80h
000094BA:	CPL
000094BB:	LD (A594h),A	; SINSGN
000094BE:	DEC HL
000094BF:	CALL 91E4h		; ADDHL5:	pick 8 more bytes from the number queue (HL ptr)
000094C2:	LD HL,96B2h		; FLTQPI (PI/4)
000094C5:	PUSH DE
000094C6:	CALL 53EAh		; LDIR5: (DE) = (HL), 8 bytes
000094C9:	POP HL
000094CA:	CALL 91D7h		; MULTWO:
000094CD:	CALL 91D7h		; MULTWO:
000094D0:	CALL 91D7h		; MULTWO:
000094D3:	EX DE,HL
000094D4:	POP HL
000094D5:	PUSH HL
000094D6:	CALL 9C39h		; CMP:
000094D9:	CALL NC,9942h
000094DC:	EX DE,HL
000094DD:	CALL 91DCh		; DIVTWO:
000094E0:	EX DE,HL
000094E1:	CALL 9C39h		; CMP:
000094E4:	JR C,+0Bh		; SIN2:
000094E6:	CALL 9A3Bh		; SUB:
000094E9:	LD A,(A594h)	; SINSGN
000094EC:	XOR 80h
000094EE:	LD (A594h),A	; SINSGN
; SIN2:
000094F1:	EX DE,HL
000094F2:	CALL 91DCh		; DIVTWO:		..= PI/2
000094F5:	EX DE,HL
000094F6:	CALL 9C39h		; CMP:
000094F9:	JR C,+0Ch
000094FB:	CALL 91DCh		; DIVTWO:
000094FE:	CALL 9A3Bh		; SUB:
00009501:	CALL 91D7h		; MULTWO:
00009504:	CALL 9AF2h		; ABS:
00009507:	CALL 91F5h		; FACSET:
0000950A:	POP HL
0000950B:	PUSH DE
0000950C:	LD DE,96B2h		; FLTQPI (PI/4)
0000950F:	CALL 9C39h		; CMP:
00009512:	JR NC,+65h
00009514:	POP DE
00009515:	PUSH HL
00009516:	PUSH DE
00009517:	CALL 53EAh		; LDIR5: (DE) = (HL), 8 bytes
0000951A:	POP HL
0000951B:	LD E,L
0000951C:	LD D,H
0000951D:	CALL 9FF5h		; MUL:
00009520:	LD DE,(A58Ch)	; SNFAC2
00009524:	POP HL
00009525:	PUSH HL
00009526:	CALL 53EAh		; LDIR5: (DE) = (HL), 8 bytes
00009529:	LD A,(A5DBh)		; data type, aka PRCSON
0000952C:	LD B,A
0000952D:	LD HL,95E2h		; SINTBL
; SIN6:
00009530:	PUSH BC
00009531:	PUSH HL
00009532:	LD HL,(A58Ch)	; SNFAC2
00009535:	LD DE,(A58Eh)	; SNFAC3
00009539:	CALL 9FF5h		; MUL:
0000953C:	POP HL
0000953D:	PUSH HL
0000953E:	LD DE,(A58Ah)	; SNFAC1
00009542:	PUSH DE
00009543:	CALL 53EAh		; LDIR5: (DE) = (HL), 8 bytes
00009546:	POP HL
00009547:	LD DE,(A58Ch)	; SNFAC2
0000954B:	CALL 9FF5h		; MUL:
0000954E:	EX DE,HL
0000954F:	LD HL,(A588h)	; SNFAC0
00009552:	CALL 9A44h		; ADD:
00009555:	POP HL
00009556:	LD DE,0008h
00009559:	ADD HL,DE		; {LDIR5:} move on the next 8 bytes in the number queue (HL ptr)
0000955A:	POP BC
0000955B:	DJNZ -2Dh
0000955D:	POP HL
0000955E:	POP BC
0000955F:	LD A,(A594h)	; SINSGN
00009562:	INC HL
00009563:	XOR (HL)
00009564:	CPL
00009565:	LD (HL),A
00009566:	DEC HL
00009567:	LD A,(A5DBh)		; data type, aka PRCSON
0000956A:	CP 08h		; double precision type ?
0000956C:	LD A,(HL)
0000956D:	JR Z,+06h
0000956F:	CP 5Ch		; ADJUST
00009571:	RET NC
00009572:	JP 9A09h		; CLRFAC: Set FP accumulator to 0
; SIN8:
00009575:	CP 4Dh		; ADJUST
00009577:	JR -08h
00009579:	CALL 91DCh		; DIVTWO:
0000957C:	LD DE,96B2h		; FLTQPI (PI/4)
0000957F:	CALL 9A3Bh		; SUB:
00009582:	CALL 91D7h		; MULTWO:
00009585:	CALL 9AF2h		; ABS:
00009588:	POP DE
00009589:	PUSH HL
0000958A:	PUSH DE
0000958B:	CALL 53EAh		; LDIR5: (DE) = (HL), 8 bytes
0000958E:	POP HL
0000958F:	LD E,L
00009590:	LD D,H
00009591:	CALL 9FF5h		; MUL:
00009594:	LD DE,(A58Ch)	; SNFAC2
00009598:	CALL 53E7h		; LDIR1: (DE) = (FLONE), 8 bytes
0000959B:	POP DE
0000959C:	PUSH DE
0000959D:	CALL 53E7h		; LDIR1: (DE) = (FLONE), 8 bytes
000095A0:	LD A,(A5DBh)		; data type, aka PRCSON
000095A3:	LD B,A
000095A4:	LD HL,9622h		; COSTBL
000095A7:	JR -79h			; SIN6:

; 'TAN'
000095A9:	CALL 994Dh		; Get a single precision parameter
000095AC:	PUSH BC
000095AD:	PUSH HL
000095AE:	CALL 91E4h		; ADDHL5:	pick 8 more bytes from the number queue (HL ptr)
000095B1:	EX DE,HL
000095B2:	LD (A590h),HL	; SNFAC4
000095B5:	CALL 91E4h		; ADDHL5:	pick 8 more bytes from the number queue (HL ptr)
000095B8:	LD (A592h),DE	; SNFAC5
000095BC:	POP HL
000095BD:	PUSH HL
000095BE:	CALL 53EAh		; LDIR5: (DE) = (HL), 8 bytes
000095C1:	LD HL,(A590h)	; SNFAC4
000095C4:	EX DE,HL
000095C5:	POP HL
000095C6:	PUSH HL
000095C7:	CALL 53EAh		; LDIR5: (DE) = (HL), 8 bytes
000095CA:	LD HL,(A592h)	; SNFAC5
000095CD:	CALL 94AFh		; 'SIN'
000095D0:	POP DE
000095D1:	PUSH DE
000095D2:	CALL 53EAh		; LDIR5: (DE) = (HL), 8 bytes
000095D5:	LD HL,(A590h)	; SNFAC4
000095D8:	CALL 9495h		; 'COS'
000095DB:	EX DE,HL
000095DC:	POP HL
000095DD:	CALL A0EAh		; DIV:
000095E0:	POP BC
000095E1:	RET

; SINTBL
000095E2:	LD A,(HL)
000095E3:	XOR D
000095E4:	XOR D
000095E5:	XOR D
000095E6:	XOR D
000095E7:	XOR D
000095E8:	XOR D
000095E9:	XOR E
000095EA:	LD A,D
000095EB:	EX AF,AF'
000095EC:	ADC B
000095ED:	ADC B
000095EE:	ADC B
000095EF:	ADC B
000095F0:	ADC B
000095F1:	ADC C
000095F2:	LD (HL),H
000095F3:	RET NC
000095F4:	DEC C
000095F5:	NOP
000095F6:	RET NC
000095F7:	DEC C
000095F8:	NOP
000095F9:	RET NC
000095FA:	LD L,(HL)
000095FB:	JR C,-11h
000095FD:	DEC E
000095FE:	LD HL,(39B6h)
00009601:	SBC H
00009602:	LD H,A
00009603:	RST 10h
00009604:	LD (3F2Bh),A
00009607:	XOR D
00009608:	DAA
00009609:	INC E
0000960A:	LD H,B
0000960B:	JR NC,-6Eh
0000960D:	JR NC,-63h
0000960F:	LD B,E
00009610:	LD L,B
00009611:	LD C,H
00009612:	LD E,B
00009613:	RST 10h
00009614:	CCF
00009615:	SBC A
00009616:	ADD HL,SP
00009617:	SBC L
00009618:	RET NZ
00009619:	LD SP,HL
0000961A:	LD D,B
0000961B:	LD C,D
0000961C:	SUB (HL)
0000961D:	DEC SP
0000961E:	ADD C
0000961F:	ADD L
00009620:	LD L,D
00009621:	LD D,E

;COSTBL
00009622:	ADD B
00009623:	ADD B
00009624:	NOP
00009625:	NOP
00009626:	NOP
00009627:	NOP
00009628:	NOP
00009629:	NOP
0000962A:	LD A,H
0000962B:	LD HL,(AAAAh)
0000962E:	XOR D
0000962F:	XOR D
00009630:	XOR D
00009631:	XOR E
00009632:	LD (HL),A
00009633:	OR (HL)
00009634:	DEC BC
00009635:	LD H,B
00009636:	OR (HL)
00009637:	DEC BC
00009638:	LD H,B
00009639:	OR A
0000963A:	LD (HL),C
0000963B:	LD D,B
0000963C:	DEC C
0000963D:	NOP
0000963E:	RET NC
0000963F:	DEC C
00009640:	NOP
00009641:	POP DE
00009642:	LD L,E
00009643:	SUB E
00009644:	JP P,BB7Dh
00009647:	CALL NZ,E4FAh
0000964A:	LD H,H
0000964B:	RRCA
0000964C:	HALT
0000964D:	RST 00h
0000964E:	LD A,A
0000964F:	ADD C4h
00009651:	CP (HL)
00009652:	LD E,H
00009653:	RET

00009654:	RES 4,L
00009656:	LD B,(HL)
00009657:	INC BC
00009658:	CALL PO,54EAh
0000965B:	LD D,A
0000965C:	CCF
0000965D:	SBC A
0000965E:	ADD HL,SP
0000965F:	SBC L
00009660:	RET NZ
00009661:	LD SP,HL
00009662:	LD A,A
00009663:	XOR D
00009664:	XOR D
00009665:	XOR D
00009666:	XOR D
00009667:	XOR D
00009668:	XOR D
00009669:	XOR E
0000966A:	LD A,(HL)
0000966B:	LD C,H
0000966C:	CALL Z,CCCCh
0000966F:	CALL Z,CDCCh
00009672:	LD A,(HL)

00009673:	SUB D
00009674:	LD C,C
00009675:	INC H
00009676:	SUB D
00009677:	LD C,C
00009678:	INC H
00009679:	SUB E
0000967A:	LD A,L
0000967B:	LD H,E
0000967C:	ADC (HL)
0000967D:	JR C,-1Dh
0000967F:	ADC (HL)
00009680:	JR C,-1Ch
00009682:	LD A,L
00009683:	CP D
00009684:	LD L,8Bh
00009686:	AND D
00009687:	RET PE
00009688:	CP D
00009689:	CPL
0000968A:	LD A,L
0000968B:	DEC E
0000968C:	ADC C
0000968D:	RET C
0000968E:	SBC L
0000968F:	ADC C
00009690:	RET C
00009691:	SBC (HL)
00009692:	LD A,L
00009693:	ADC B
00009694:	ADC B
00009695:	ADC B
00009696:	ADC B
00009697:	ADC B
00009698:	ADC B
00009699:	ADC C
0000969A:	LD A,H
0000969B:	LD (HL),B
0000969C:	RET P
0000969D:	RET P
0000969E:	RET P
0000969F:	RET P
000096A0:	RET P
000096A1:	POP AF
000096A2:	LD A,H
000096A3:	RST 10h
000096A4:	SUB H
000096A5:	DEC (HL)
000096A6:	PUSH HL
000096A7:	DEC C
000096A8:	LD A,C
000096A9:	LD B,H
000096AA:	LD A,H
000096AB:	LD B,E
000096AC:	INC C
000096AD:	JR NC,-3Dh
000096AF:	INC C
000096B0:	JR NC,-3Ch

; FLTQPI (PI/4)
000096B2:	ADD B
000096B3:	LD C,C
000096B4:	RRCA
000096B5:	JP C,21A2h
000096B8:	LD L,B
000096B9:	defb $C2

; 'SGN'
000096BA:	LD DE,0000h
000096BD:	CALL 96D4h
000096C0:	JR Z,+08h
000096C2:	CALL 91D2h		; TSTSGN:
000096C5:	INC DE
000096C6:	JR Z,+02h
000096C8:	DEC DE
000096C9:	DEC DE
000096CA:	LD (HL),E
000096CB:	INC HL
000096CC:	LD (HL),D
000096CD:	DEC HL
000096CE:	LD A,02h			; integer type
000096D0:	LD (A5DBh),A		; data type, aka PRCSON
000096D3:	RET

000096D4:	LD A,(A5DBh)		; data type, aka PRCSON
000096D7:	CP 02h			; integer type ?
000096D9:	JR Z,+03h
000096DB:	LD A,(HL)
000096DC:	OR A
000096DD:	RET

000096DE:	LD A,(HL)
000096DF:	INC HL
000096E0:	OR (HL)
000096E1:	DEC HL
000096E2:	RET

; 'RAD'
000096E3:	CALL 994Dh		; Get a single precision parameter
000096E6:	LD DE,96FFh
000096E9:	JR +06h

; 'PAI'
000096EB:	CALL 994Dh		; Get a single precision parameter
000096EE:	LD DE,96F7h		; FLTPAI  (Greek PI)
000096F1:	PUSH BC
000096F2:	CALL 9FF5h		; MUL:
000096F5:	POP BC
000096F6:	RET

; FLTPAI  (Greek PI)
000096F7:	ADD D
000096F8:	LD C,C
000096F9:	RRCA
000096FA:	JP C,21A2h
000096FD:	LD L,B
000096FE:	JP NZ,0E7Bh
00009701:	JP M,1235h
00009704:	SUB H
00009705:	JP (HL)

00009706:	RET

; 'INP'
00009707:	CALL 5A90h		; 'CINT'
0000970A:	LD C,(HL)
0000970B:	INC HL
0000970C:	LD B,(HL)
0000970D:	IN A,(C)
0000970F:	LD (HL),00h
00009711:	DEC HL
00009712:	LD (HL),A
00009713:	RET

; 'PEEK'
00009714:	CALL 5A90h		; 'CINT'
00009717:	LD C,(HL)
00009718:	INC HL
00009719:	LD B,(HL)
0000971A:	LD A,(BC)
0000971B:	JR -0Eh

; 'RND'
0000971D:	CALL 994Dh		; Get a single precision parameter
00009720:	PUSH BC
00009721:	LD DE,(A595h)		; SEED
00009725:	LD A,R
00009727:	XOR D
00009728:	RRC A
0000972A:	RRC A
0000972C:	RRC A
0000972E:	LD D,A
0000972F:	LD A,R
00009731:	XOR E
00009732:	RLC A
00009734:	RLC A
00009736:	LD E,D
00009737:	LD D,A
00009738:	LD (A595h),DE		; SEED
0000973C:	PUSH HL
0000973D:	INC HL
0000973E:	RES 7,D
00009740:	LD (HL),D
00009741:	INC HL
00009742:	LD (HL),E
00009743:	INC HL
00009744:	LD A,R
00009746:	LD (HL),A
00009747:	POP HL
00009748:	LD (HL),81h
0000974A:	CALL 9304h		; ONESUB:
0000974D:	POP BC
0000974E:	RET

; 'EXP'
0000974F:	CALL 994Dh		; Get a single precision parameter
00009752:	PUSH BC
00009753:	LD A,(HL)
00009754:	OR A
00009755:	JP Z,938Fh		; RETONE:
00009758:	INC HL
00009759:	LD A,(HL)
0000975A:	LD (A598h),A
0000975D:	RES 7,(HL)
0000975F:	DEC HL
00009760:	LD DE,99FBh
00009763:	CALL 9FF5h		; MUL:
00009766:	PUSH HL
00009767:	CALL 91E4h		; ADDHL5:	pick 8 more bytes from the number queue (HL ptr)
0000976A:	PUSH DE
0000976B:	CALL 53EAh		; LDIR5: (DE) = (HL), 8 bytes
0000976E:	POP HL
0000976F:	CALL 5ACEh
00009772:	PUSH HL
00009773:	CALL 5BAFh		; HLFLT
00009776:	XOR A
00009777:	CP H
00009778:	JP NZ,205Ah		; ERROR: Overflow
0000977B:	LD A,L
0000977C:	LD (A597h),A
0000977F:	POP DE
00009780:	POP HL
00009781:	PUSH HL
00009782:	CALL 9A3Bh		; SUB:
00009785:	PUSH DE
00009786:	PUSH HL
00009787:	CALL 53E7h		; LDIR1: (DE) = (FLONE), 8 bytes
0000978A:	POP DE
0000978B:	POP HL
0000978C:	CALL 91DCh		; DIVTWO:
0000978F:	EX DE,HL
00009790:	XOR A
00009791:	LD B,08h
00009793:	PUSH BC
00009794:	PUSH AF
00009795:	CALL 9C39h		; CMP:
00009798:	JR C,+07h
0000979A:	CALL 9A3Bh		; SUB:
0000979D:	POP AF
0000979E:	SET 7,A
000097A0:	PUSH AF
000097A1:	POP AF
000097A2:	RLC A
000097A4:	EX DE,HL
000097A5:	PUSH AF
000097A6:	CALL 91DCh		; DIVTWO:
000097A9:	POP AF
000097AA:	EX DE,HL
000097AB:	POP BC
000097AC:	DJNZ -1Bh
000097AE:	LD (A599h),A
000097B1:	PUSH DE
000097B2:	LD DE,99EEh
000097B5:	LD A,(A5DBh)		; data type, aka PRCSON
000097B8:	BIT 3,A
000097BA:	JR NZ,+03h
000097BC:	LD DE,99F6h
000097BF:	CALL 9FF5h		; MUL:
000097C2:	POP DE
000097C3:	PUSH DE
000097C4:	CALL 53EAh		; LDIR5: (DE) = (HL), 8 bytes
000097C7:	POP HL
000097C8:	LD A,(A5DBh)		; data type, aka PRCSON
000097CB:	BIT 3,A
000097CD:	JP Z,9855h
000097D0:	CALL 91D7h		; MULTWO:
000097D3:	LD DE,5C55h		; FLTEN
000097D6:	CALL 9A44h		; ADD:
000097D9:	CALL 91DCh		; DIVTWO:
000097DC:	POP DE
000097DD:	PUSH DE
000097DE:	CALL 9FF5h		; MUL:
000097E1:	LD DE,5C55h		; FLTEN
000097E4:	CALL 91DCh		; DIVTWO:
000097E7:	CALL 9A44h		; ADD:
000097EA:	CALL 91D7h		; MULTWO:
000097ED:	POP DE
000097EE:	PUSH DE
000097EF:	CALL 9FF5h		; MUL:
000097F2:	LD DE,99E6h
000097F5:	CALL 9FF5h		; MUL:
000097F8:	CALL 91D7h		; MULTWO:
000097FB:	CALL 930Ah		; ONEADD:
000097FE:	CALL 91DCh		; DIVTWO:
00009801:	POP DE
00009802:	PUSH DE
00009803:	CALL 9FF5h		; MUL:
00009806:	CALL 930Ah		; ONEADD:
00009809:	POP DE
0000980A:	PUSH DE
0000980B:	CALL 9FF5h		; MUL:
0000980E:	CALL 930Ah		; ONEADD:
00009811:	EX HL,(SP)
00009812:	EX DE,HL
00009813:	PUSH DE
00009814:	CALL 53E7h		; LDIR1: (DE) = (FLONE), 8 bytes
00009817:	POP HL
00009818:	LD DE,9966h		; EXDTBL
0000981B:	LD A,(A599h)
0000981E:	LD B,08h
00009820:	RLC A
00009822:	JR NC,+07h
00009824:	PUSH AF
00009825:	PUSH BC
00009826:	CALL 9FF5h		; MUL:
00009829:	POP BC
0000982A:	POP AF
0000982B:	CALL 53DFh
0000982E:	DJNZ -10h
00009830:	LD A,(A597h)
00009833:	ADD (HL)
00009834:	JP C,205Ah		; ERROR: Overflow
00009837:	LD (HL),A
00009838:	POP DE
00009839:	CALL 9FF5h		; MUL:
0000983C:	POP BC
0000983D:	LD A,(A598h)
00009840:	RLC A
00009842:	RET NC
00009843:	PUSH BC
00009844:	PUSH DE
00009845:	PUSH HL
00009846:	CALL 53EAh		; LDIR5: (DE) = (HL), 8 bytes
00009849:	POP DE
0000984A:	PUSH DE
0000984B:	CALL 53E7h		; LDIR1: (DE) = (FLONE), 8 bytes
0000984E:	POP HL
0000984F:	POP DE
00009850:	CALL A0EAh		; DIV:
00009853:	POP BC
00009854:	RET

00009855:	POP DE
00009856:	PUSH DE
00009857:	CALL 9FF5h		; MUL:
0000985A:	LD A,(HL)
0000985B:	OR A
0000985C:	JR Z,+03h
0000985E:	CALL 91DCh		; DIVTWO:
00009861:	CALL 9A44h		; ADD:
00009864:	JP 980Eh

; 'LOG'
00009867:	CALL 994Dh		; Get a single precision parameter
0000986A:	PUSH BC
0000986B:	INC HL
0000986C:	LD A,(HL)
0000986D:	RLC A
0000986F:	JP C,206Fh		; ERROR: Illegal function call
00009872:	DEC HL
00009873:	LD A,(HL)
00009874:	OR A
00009875:	JP Z,206Fh		; ERROR: Illegal function call
00009878:	SUB 81h
0000987A:	LD (A59Ah),A	; LOGEXP
0000987D:	LD (HL),81h
0000987F:	XOR A
00009880:	LD B,08h
00009882:	LD DE,9966h		; EXDTBL
00009885:	PUSH BC
00009886:	PUSH AF
00009887:	CALL 9C39h		; CMP:
0000988A:	JR C,+0Fh
0000988C:	PUSH HL
0000988D:	LD HL,0040h
00009890:	ADD HL,DE
00009891:	EX DE,HL
00009892:	EX HL,(SP)
00009893:	CALL 9FF5h		; MUL:
00009896:	POP DE
00009897:	POP AF
00009898:	SET 7,A
0000989A:	PUSH AF
0000989B:	POP AF
0000989C:	RLC A
0000989E:	CALL 53DFh
000098A1:	POP BC
000098A2:	DJNZ -1Fh
000098A4:	LD (A588h),HL	; SNFAC0
000098A7:	CALL 91E4h		; ADDHL5:	pick 8 more bytes from the number queue (HL ptr)
000098AA:	EX DE,HL
000098AB:	LD E,A
000098AC:	LD D,00h
000098AE:	CALL 53B4h		; FLTHEX:  (HL)=DE
000098B1:	LD A,(HL)
000098B2:	OR A
000098B3:	JR Z,+03h
000098B5:	SUB 08h
000098B7:	LD (HL),A
000098B8:	LD A,(A59Ah)
000098BB:	CP 80h
000098BD:	JR C,+02h
000098BF:	NEG
000098C1:	PUSH HL
000098C2:	CALL 91E4h		; ADDHL5:	pick 8 more bytes from the number queue (HL ptr)
000098C5:	EX DE,HL
000098C6:	LD (A58Ah),HL	; SNFAC1
000098C9:	LD E,A
000098CA:	LD D,00h
000098CC:	CALL 53B4h		; FLTHEX:  (HL)=DE
000098CF:	LD A,(A59Ah)	; LOGEXP
000098D2:	AND 80h
000098D4:	INC HL
000098D5:	OR (HL)
000098D6:	LD (HL),A
000098D7:	DEC HL
000098D8:	EX DE,HL
000098D9:	POP HL
000098DA:	CALL 9A44h		; ADD:
000098DD:	LD A,(A5DBh)		; data type, aka PRCSON
000098E0:	LD DE,9A03h
000098E3:	CP 05h			; Single precision type ?
000098E5:	JR Z,+03h
000098E7:	LD DE,99EEh
000098EA:	CALL 9FF5h		; MUL:
000098ED:	PUSH HL
000098EE:	LD DE,(A58Ah)	; SNFAC1
000098F2:	LD HL,(A588h)	; SNFAC0
000098F5:	PUSH HL
000098F6:	PUSH DE
000098F7:	CALL 53EAh		; LDIR5: (DE) = (HL), 8 bytes
000098FA:	POP HL
000098FB:	CALL 930Ah		; ONEADD:
000098FE:	EX HL,(SP)
000098FF:	CALL 9A3Bh		; SUB:
00009902:	POP DE
00009903:	CALL A0EAh		; DIV:
00009906:	PUSH DE
00009907:	CALL 53EAh		; LDIR5: (DE) = (HL), 8 bytes
0000990A:	POP HL
0000990B:	PUSH DE
0000990C:	LD E,L
0000990D:	LD D,H
0000990E:	CALL 9FF5h		; MUL:
00009911:	POP DE
00009912:	PUSH HL
00009913:	PUSH DE
00009914:	CALL 53EAh		; LDIR5: (DE) = (HL), 8 bytes
00009917:	POP HL
00009918:	LD DE,995Eh
0000991B:	CALL 9A44h		; ADD:
0000991E:	EX DE,HL
0000991F:	POP HL
00009920:	CALL 9FF5h		; MUL:
00009923:	LD DE,5C55h		; FLTEN
00009926:	CALL 91D7h		; MULTWO:
00009929:	CALL 9A44h		; ADD:
0000992C:	CALL 91DCh		; DIVTWO:
0000992F:	EX DE,HL
00009930:	LD HL,(A588h)	; SNFAC0
00009933:	CALL 9FF5h		; MUL:
00009936:	LD DE,9956h
00009939:	CALL 9FF5h		; MUL:
0000993C:	POP DE
0000993D:	CALL 9A44h		; ADD:
00009940:	POP BC
00009941:	RET

00009942:	CALL A0EAh		; DIV:
00009945:	PUSH DE
00009946:	CALL 5B60h		; ATN:
00009949:	POP DE
0000994A:	JP 9FF5h		; MUL:

; Get a single precision parameter
0000994D:	LD A,(A5DBh)		; data type, aka PRCSON
00009950:	CP 02h			; integer type ?
00009952:	RET NZ
00009953:	JP 5436h		; 'CSNG'

00009956:	LD A,A
00009957:	LD C,H
00009958:	CALL Z,CCCCh
0000995B:	CALL Z,CDCCh
0000995E:	ADD C
0000995F:	LD D,L
00009960:	LD D,L
00009961:	LD D,L
00009962:	LD D,L
00009963:	LD D,L
00009964:	LD D,L
00009965:	LD D,L

; EXDTBL
00009966:	ADD C
00009967:	DEC (HL)
00009968:	INC B
00009969:	DI
0000996A:	INC SP
0000996B:	LD SP,HL
0000996C:	SBC 65h
0000996E:	ADD C
0000996F:	JR +37h
00009971:	RET P
00009972:	LD D,C
00009973:	ADC L
00009974:	CP B
00009975:	XOR D
00009976:	ADD C
00009977:	DEC BC
00009978:	SUB L
00009979:	POP BC
0000997A:	EX HL,(SP)
0000997B:	JP PE,D78Bh
0000997E:	ADD C
0000997F:	DEC B
00009980:	XOR D
00009981:	JP CC67h
00009984:	LD C,B
00009985:	LD A,E
00009986:	ADD C
00009987:	LD (BC),A
00009988:	CALL 9886h
0000998B:	XOR H
0000998C:	DEC HL
0000998D:	AND D
0000998E:	ADD C
0000998F:	LD BC,D164h
00009992:	DI
00009993:	CP H
00009994:	INC BC
00009995:	EX AF,AF'
00009996:	ADD C
00009997:	NOP
00009998:	OR C
00009999:	LD R,A
0000999B:	EXX
0000999C:	SBC C
0000999D:	XOR H
0000999E:	ADD C
0000999F:	NOP
000099A0:	LD E,B
000099A1:	RST 10h
000099A2:	JP NC,E5D5h
000099A5:	RST 30h
000099A6:	ADD B
000099A7:	DEC (HL)
000099A8:	INC B
000099A9:	DI
000099AA:	INC SP
000099AB:	LD SP,HL
000099AC:	SBC 65h
000099AE:	ADD B
000099AF:	LD D,A
000099B0:	LD B,H
000099B1:	CALL M,D6CAh
000099B4:	SBC L
000099B5:	LD L,E
000099B6:	ADD B
000099B7:	LD L,D
000099B8:	RET NZ
000099B9:	ADD E7h
000099BB:	INC IXh
000099BD:	LD A,(7580h)
000099C0:	DEC H
000099C1:	LD A,L
000099C2:	DEC D
000099C3:	INC H
000099C4:	ADD (HL)
000099C5:	CALL 7A80h
000099C8:	ADD E
000099C9:	OR D
000099CA:	INA (72h)
000099CC:	LD HL,(8003h)
000099CF:	LD A,L
000099D0:	LD A,0Ch
000099D2:	INC C
000099D3:	CALL P,C186h
000099D6:	ADD B
000099D7:	LD A,(HL)
000099D8:	SBC (HL)
000099D9:	LD DE,7B5Ch
000099DC:	ADC A
000099DD:	ADC B
000099DE:	ADD B
000099DF:	LD A,A
000099E0:	LD C,(HL)
000099E1:	BIT 3,C
000099E3:	LD D,C
000099E4:	LD E,C9h
000099E6:	LD A,D
000099E7:	EX AF,AF'
000099E8:	ADC B
000099E9:	ADC B
000099EA:	ADC B
000099EB:	ADC B
000099EC:	ADC B
000099ED:	ADC C
000099EE:	ADD B
000099EF:	LD SP,1772h
000099F2:	RST 30h
000099F3:	POP DE
000099F4:	RST 08h
000099F5:	LD A,D
000099F6:	ADD B
000099F7:	LD SP,1772h
000099FA:	RET M
000099FB:	ADD C
000099FC:	JR C,-56h
000099FE:	DEC SP
000099FF:	ADD HL,HL
00009A00:	LD E,H
00009A01:	RLA
00009A02:	POP AF
00009A03:	ADD B
00009A04:	LD SP,1772h
00009A07:	RET M
00009A08:	DEC B

; CLRFAC: Set FP accumulator to 0
00009A09:	PUSH HL
00009A0A:	LD B,08h
00009A0C:	XOR A
00009A0D:	LD (HL),A
00009A0E:	INC HL
00009A0F:	DJNZ -04h
00009A11:	POP HL
00009A12:	RET

TOGLE:
00009A13:	LD A,(A5DBh)		; data type, aka PRCSON
00009A16:	CP 02h			; integer type ?
00009A18:	JR Z,+0Ah

; toggle FP sign
00009A1A:	LD A,(HL)
00009A1B:	OR A
00009A1C:	RET Z
00009A1D:	INC HL
00009A1E:	LD A,(HL)
00009A1F:	XOR 80h
00009A21:	LD (HL),A
00009A22:	DEC HL
00009A23:	RET

; toggle integer sign
00009A24:	LD A,(HL)
00009A25:	PUSH DE
00009A26:	CPL
00009A27:	LD E,A
00009A28:	INC HL
00009A29:	LD A,(HL)
00009A2A:	CPL
00009A2B:	LD D,A
00009A2C:	INC DE
00009A2D:	LD (HL),D
00009A2E:	DEC HL
00009A2F:	LD (HL),E
00009A30:	POP DE
00009A31:	RET

; STROMT:  Get argument, on exit: A=data type
00009A32:	LD A,(A5DBh)		; data type, aka PRCSON
00009A35:	CP 03h			; string type?
00009A37:	RET NZ
00009A38:	JP 2060h		; ERROR: Type mismatch

; SUB:
00009A3B:	CALL 9A32h		; STROMT:  Get argument, on exit: A=data type
00009A3E:	LD C,A
00009A3F:	LD A,80h
00009A41:	JP 9A4Eh		; ADDSUB:

; ADD:
00009A44:	LD A,(A5DBh)		; data type, aka PRCSON
00009A47:	CP 03h			; string type?
00009A49:	JP Z,9BF6h		; STRADD:
00009A4C:	LD C,A
00009A4D:	XOR A

; ADDSUB:
00009A4E:	BIT 1,C
00009A50:	JP NZ,9B4Dh
00009A53:	LD (A5CFh),HL		; HLBUF
00009A56:	PUSH DE
00009A57:	PUSH HL
00009A58:	LD (A5D2h),SP		; SPBUF
00009A5C:	INC HL
00009A5D:	INC DE
00009A5E:	LD B,(HL)
00009A5F:	XOR (HL)
00009A60:	EX DE,HL
00009A61:	XOR (HL)
00009A62:	DEC HL
00009A63:	DEC DE
00009A64:	EX DE,HL
00009A65:	RLCA
00009A66:	LD A,B
00009A67:	LD (A5D1h),A	; SIGN
00009A6A:	JP C,9CD1h		; FSUB: HL - DE   (float PTR) 

; FADD: HL + DE   (float PTR) 
00009A6D:	XOR A
00009A6E:	CP (HL)
00009A6F:	JP Z,9AF7h		; TRANS: (HL) __ (DE)
00009A72:	LD A,(DE)
00009A73:	OR A
00009A74:	JP Z,9ADBh		; FLEXIT: set sign and return
00009A77:	SUB (HL)
00009A78:	BIT 3,C
00009A7A:	JP Z,9D80h
00009A7D:	JR NC,+0Bh
00009A7F:	NEG
00009A81:	CP 38h
00009A83:	JP NC,9ADBh		; FLEXIT: set sign and return
00009A86:	EX DE,HL
00009A87:	JP 9A8Fh	; SFADD:

00009A8A:	CP 38h
00009A8C:	JP NC,9AF7h		; TRANS: (HL) __ (DE)

; SFADD:
00009A8F:	CALL 9B03h
00009A92:	PUSH AF
00009A93:	PUSH IX
00009A95:	EX HL,(SP)
00009A96:	LD A,D
00009A97:	ADC H
00009A98:	LD D,A
00009A99:	LD A,L
00009A9A:	ADC E
00009A9B:	LD E,A
00009A9C:	POP HL
00009A9D:	LD A,B
00009A9E:	EXX
00009A9F:	ADC B
00009AA0:	EXX
00009AA1:	LD B,A
00009AA2:	LD A,C
00009AA3:	EXX
00009AA4:	ADC C
00009AA5:	EXX
00009AA6:	LD C,A
00009AA7:	LD A,H
00009AA8:	EXX
00009AA9:	ADC H
00009AAA:	EXX
00009AAB:	LD H,A
00009AAC:	LD A,L
00009AAD:	EXX
00009AAE:	ADC L
00009AAF:	EXX
00009AB0:	LD L,A
00009AB1:	EXX
00009AB2:	POP BC
00009AB3:	LD A,B
00009AB4:	ADC D
00009AB5:	JP NC,9ACBh
00009AB8:	INC E
00009AB9:	JP Z,9D71h		; OVERF:  (handle numeric overflow condition)
00009ABC:	EXX
00009ABD:	RRA
00009ABE:	RR L
00009AC0:	RR H
00009AC2:	RR C
00009AC4:	RR B
00009AC6:	RR E
00009AC8:	RR D
00009ACA:	EXX
00009ACB:	LD D,A
00009ACC:	LD BC,0008h
00009ACF:	LD HL,(A5CFh)		; HLBUF
00009AD2:	ADD HL,BC
00009AD3:	DI
00009AD4:	LD SP,HL
00009AD5:	EXX
00009AD6:	PUSH DE
00009AD7:	PUSH BC
00009AD8:	PUSH HL
00009AD9:	EXX
00009ADA:	PUSH DE

; FLEXIT: set sign and return
00009ADB:	LD SP,(A5D2h)		; SPBUF
00009ADF:	POP HL
00009AE0:	POP DE
00009AE1:	EI
00009AE2:	LD A,(HL)
00009AE3:	OR A
00009AE4:	JR Z,+05h
00009AE6:	LD A,(A5D1h)	; SIGN
00009AE9:	AND 80h
00009AEB:	INC HL
00009AEC:	RES 7,(HL)
00009AEE:	OR (HL)
00009AEF:	LD (HL),A
00009AF0:	DEC HL
00009AF1:	RET

; ABS:
00009AF2:	INC HL
00009AF3:	RES 7,(HL)
00009AF5:	DEC HL
00009AF6:	RET

; TRANS: (HL) __ (DE)
00009AF7:	LD B,00h
00009AF9:	LD A,(A5DBh)		; data type, aka PRCSON
00009AFC:	LD C,A
00009AFD:	EX DE,HL
00009AFE:	LDIR
00009B00:	JP 9ADBh		; FLEXIT: set sign and return

00009B03:	DI
00009B04:	LD (A5D4h),SP	; SPBF
00009B08:	LD SP,HL
00009B09:	EX AF,AF'
00009B0A:	EXX
00009B0B:	POP AF
00009B0C:	OR 80h
00009B0E:	POP HL
00009B0F:	POP BC
00009B10:	POP DE
00009B11:	EX AF,AF'
00009B12:	CP 08h
00009B14:	JR C,+0Fh
00009B16:	SUB 08h
00009B18:	EX AF,AF'
00009B19:	RL D
00009B1B:	LD D,E
00009B1C:	LD E,B
00009B1D:	LD B,C
00009B1E:	LD C,H
00009B1F:	LD H,L
00009B20:	LD L,A
00009B21:	LD A,00h
00009B23:	JR -14h
00009B25:	OR A
00009B26:	JR Z,+13h
00009B28:	EX AF,AF'
00009B29:	OR A
00009B2A:	RRA
00009B2B:	RR L
00009B2D:	RR H
00009B2F:	RR C
00009B31:	RR B
00009B33:	RR E
00009B35:	RR D
00009B37:	EX AF,AF'
00009B38:	DEC A
00009B39:	JR NZ,-13h
00009B3B:	EXX
00009B3C:	EX DE,HL
00009B3D:	LD SP,HL
00009B3E:	POP DE
00009B3F:	SET 7,D
00009B41:	POP HL
00009B42:	POP BC
00009B43:	POP IX
00009B45:	LD SP,(A5D4h)	; SPBF
00009B49:	EI
00009B4A:	EXX
00009B4B:	EX AF,AF'
00009B4C:	RET


00009B4D:	PUSH DE
00009B4E:	PUSH HL
00009B4F:	EX DE,HL
00009B50:	LD C,(HL)
00009B51:	INC HL
00009B52:	LD B,(HL)
00009B53:	EX DE,HL
00009B54:	LD E,(HL)
00009B55:	INC HL
00009B56:	LD D,(HL)
00009B57:	OR A
00009B58:	JR Z,+0Fh
00009B5A:	LD HL,0000h
00009B5D:	SBC HL,BC
00009B5F:	LD C,L
00009B60:	LD B,H
00009B61:	LD HL,8000h
00009B64:	OR A
00009B65:	ADC HL,BC
00009B67:	JR Z,+3Ah
00009B69:	LD A,B
00009B6A:	XOR D
00009B6B:	RLCA
00009B6C:	JR C,+30h
00009B6E:	LD A,B
00009B6F:	RLCA
00009B70:	JR NC,+26h
00009B72:	LD HL,0001h
00009B75:	SBC HL,BC
00009B77:	LD B,H
00009B78:	LD C,L
00009B79:	LD HL,0001h
00009B7C:	SBC HL,DE
00009B7E:	ADD HL,BC
00009B7F:	LD A,80h
00009B81:	JR C,+4Eh
00009B83:	BIT 7,H
00009B85:	JR NZ,+52h
00009B87:	EX DE,HL
00009B88:	RLCA
00009B89:	JR NC,+06h
00009B8B:	LD HL,0001h
00009B8E:	SBC HL,DE
00009B90:	EX DE,HL
00009B91:	POP HL
00009B92:	LD (HL),E
00009B93:	INC HL
00009B94:	LD (HL),D
00009B95:	DEC HL
00009B96:	POP DE
00009B97:	RET

00009B98:	EX DE,HL
00009B99:	ADD HL,BC
00009B9A:	XOR A
00009B9B:	JP 9B83h
00009B9E:	EX DE,HL
00009B9F:	ADD HL,BC
00009BA0:	JP 9B90h
00009BA3:	BIT 7,D
00009BA5:	JR NZ,-09h
00009BA7:	EX DE,HL
00009BA8:	ADD HL,BC
00009BA9:	XOR A
00009BAA:	JP 9BD9h
00009BAD:	EX DE,HL
00009BAE:	LD C,(HL)
00009BAF:	INC HL
00009BB0:	LD B,(HL)
00009BB1:	LD A,B
00009BB2:	EX DE,HL
00009BB3:	LD E,(HL)
00009BB4:	INC HL
00009BB5:	LD D,(HL)
00009BB6:	XOR D
00009BB7:	AND 80h
00009BB9:	EX AF,AF'
00009BBA:	BIT 7,B
00009BBC:	JR Z,+08h
00009BBE:	OR A
00009BBF:	LD HL,0000h
00009BC2:	SBC HL,BC
00009BC4:	LD C,L
00009BC5:	LD B,H
00009BC6:	BIT 7,D
00009BC8:	RET Z
00009BC9:	OR A
00009BCA:	LD HL,0000h
00009BCD:	SBC HL,DE
00009BCF:	EX DE,HL
00009BD0:	RET

00009BD1:	LD D,A
00009BD2:	LD E,00h
00009BD4:	LD A,91h
00009BD6:	JP 9BE1h
00009BD9:	EX DE,HL
00009BDA:	OR A
00009BDB:	JR NZ,+02h
00009BDD:	RES 7,D
00009BDF:	LD A,90h
00009BE1:	POP HL
00009BE2:	PUSH HL
00009BE3:	LD (HL),A
00009BE4:	INC HL
00009BE5:	LD (HL),D
00009BE6:	INC HL
00009BE7:	LD (HL),E
00009BE8:	INC HL
00009BE9:	LD (HL),00h
00009BEB:	INC HL
00009BEC:	LD (HL),00h
00009BEE:	POP HL
00009BEF:	POP DE
00009BF0:	LD A,05h
00009BF2:	LD (A5DBh),A		; data type, aka PRCSON
00009BF5:	RET

; STRADD:
00009BF6:	LD B,(HL)
00009BF7:	LD A,(DE)
00009BF8:	ADD B
00009BF9:	JP C,2048h		; ERROR: String too long
00009BFC:	LD C,A
00009BFD:	PUSH DE
00009BFE:	PUSH HL
00009BFF:	PUSH DE
00009C00:	INC HL
00009C01:	LD E,(HL)
00009C02:	INC HL
00009C03:	LD D,(HL)
00009C04:	LD HL,(A62Bh)		; STRST
00009C07:	ADD HL,DE
00009C08:	EX DE,HL
00009C09:	LD HL,(3621h)		; TMPEND
00009C0C:	CALL 8D2Dh			; STRENT:
00009C0F:	EX HL,(SP)
00009C10:	LD B,(HL)
00009C11:	INC HL
00009C12:	LD E,(HL)
00009C13:	INC HL
00009C14:	LD D,(HL)
00009C15:	LD HL,(A62Bh)		; STRST
00009C18:	ADD HL,DE
00009C19:	EX DE,HL
00009C1A:	POP HL
00009C1B:	CALL 8D2Dh			; STRENT:
00009C1E:	LD A,C
00009C1F:	LD DE,(3621h)		; TMPEND
00009C23:	LD BC,(A62Bh)		; STRST
00009C27:	EX DE,HL
00009C28:	OR A
00009C29:	SBC HL,BC
00009C2B:	EX DE,HL
00009C2C:	LD (3621h),HL		; TMPEND
00009C2F:	POP HL
00009C30:	LD (HL),A
00009C31:	INC HL
00009C32:	LD (HL),E
00009C33:	INC HL
00009C34:	LD (HL),D
00009C35:	DEC HL
00009C36:	DEC HL
00009C37:	POP DE
00009C38:	RET

; CMP:
00009C39:	LD A,(A5DBh)		; data type, aka PRCSON
00009C3C:	CP 02h			; integer type ?
00009C3E:	JR Z,+31h
00009C40:	CP 03h			; string type?
00009C42:	JR NZ,+44h		; FLTCP2:
00009C44:	PUSH DE
00009C45:	PUSH HL
00009C46:	LD A,(DE)
00009C47:	CP (HL)
00009C48:	JR C,+01h
00009C4A:	LD A,(HL)
00009C4B:	INC HL
00009C4C:	LD C,(HL)
00009C4D:	INC HL
00009C4E:	LD B,(HL)
00009C4F:	EX DE,HL
00009C50:	INC HL
00009C51:	LD E,(HL)
00009C52:	INC HL
00009C53:	LD D,(HL)
00009C54:	LD HL,(A62Bh)		; STRST
00009C57:	EX DE,HL
00009C58:	ADD HL,DE
00009C59:	EX DE,HL
00009C5A:	ADD HL,BC
00009C5B:	EX DE,HL
00009C5C:	LD B,A
00009C5D:	OR A
00009C5E:	JR Z,+08h	; STCMPE:
; STCMPL:
00009C60:	LD A,(DE)
00009C61:	CP (HL)
00009C62:	JR NZ,+0Ah	; STCMPE:
00009C64:	INC DE
00009C65:	INC HL
00009C66:	DJNZ -08h	; STCMPL:
; STCMPF:
00009C68:	POP DE
00009C69:	POP HL
00009C6A:	LD A,(DE)
00009C6B:	CP (HL)
00009C6C:	EX DE,HL
00009C6D:	RET
; STCMPE:
00009C6E:	POP HL
00009C6F:	POP DE
00009C70:	RET


00009C71:	INC DE
00009C72:	INC HL
00009C73:	LD A,(DE)
00009C74:	XOR (HL)
00009C75:	RLCA
00009C76:	JR NC,+05h
00009C78:	LD A,(HL)
00009C79:	DEC HL
00009C7A:	DEC DE
00009C7B:	RLCA
00009C7C:	RET


00009C7D:	LD A,(DE)
00009C7E:	SUB (HL)
00009C7F:	CCF
00009C80:	DEC DE
00009C81:	DEC HL
00009C82:	RET NZ
00009C83:	LD A,(DE)
00009C84:	SUB (HL)
00009C85:	RET Z
00009C86:	CCF
00009C87:	RET

; FLTCP2:
00009C88:	INC DE
00009C89:	INC HL
00009C8A:	LD A,(DE)
00009C8B:	DEC DE
00009C8C:	XOR (HL)
00009C8D:	RLCA
00009C8E:	JR NC,+04h	; FLTCP3:
00009C90:	LD A,(HL)
00009C91:	DEC HL
00009C92:	RLCA
00009C93:	RET

; FLTCP3:
00009C94:	LD A,(HL)
00009C95:	DEC HL
00009C96:	RLCA
00009C97:	JR NC,+06h
00009C99:	CALL 9C9Fh		; FLTCMP:
00009C9C:	RET Z
00009C9D:	CCF
00009C9E:	RET

; FLTCMP:
00009C9F:	PUSH DE
00009CA0:	PUSH HL
00009CA1:	EX DE,HL
00009CA2:	LD A,(DE)
00009CA3:	CP (HL)
00009CA4:	JR NZ,+1Ah		; SUBNZ:
00009CA6:	INC DE
00009CA7:	INC HL
00009CA8:	LD A,(HL)
00009CA9:	OR 80h
00009CAB:	LD B,A
00009CAC:	LD A,(DE)
00009CAD:	OR 80h
00009CAF:	CP B
00009CB0:	JR NZ,+0Eh		; SUBNZ:
00009CB2:	LD A,(A5DBh)		; data type, aka PRCSON
00009CB5:	LD B,A
00009CB6:	DEC B
00009CB7:	DEC B
; CMPL:
00009CB8:	INC DE
00009CB9:	INC HL
00009CBA:	LD A,(DE)
00009CBB:	CP (HL)
00009CBC:	JR NZ,+02h
00009CBE:	DJNZ -08h
; SUBNZ:
00009CC0:	POP HL
00009CC1:	POP DE
00009CC2:	RET

; ZERO:
00009CC3:	POP HL
00009CC4:	PUSH HL
00009CC5:	LD A,(A5DBh)		; data type, aka PRCSON
00009CC8:	LD B,A
00009CC9:	XOR A
00009CCA:	LD (HL),A
00009CCB:	INC HL
00009CCC:	DJNZ -04h
00009CCE:	JP 9ADBh		; FLEXIT: set sign and return

; FSUB: HL - DE   (float PTR)
00009CD1:	CALL 9C9Fh		; FLTCMP:
00009CD4:	JR Z,-13h		; ZERO:
00009CD6:	JR NC,+09h		; SUBOK:
00009CD8:	LD A,(A5D1h)	; SIGN
00009CDB:	XOR 80h
00009CDD:	LD (A5D1h),A	; SIGN
; SUBOK:
00009CE0:	SCF
00009CE1:	EX AF,AF'
00009CE2:	LD A,(HL)
00009CE3:	OR A
00009CE4:	JP Z,9AF7h		; TRANS: (HL) __ (DE)
00009CE7:	LD A,(DE)
00009CE8:	OR A
00009CE9:	JP Z,9ADBh		; FLEXIT: set sign and return
00009CEC:	SUB (HL)
00009CED:	JR C,+10h
00009CEF:	CP 20h	; ' '
00009CF1:	BIT 3,C
00009CF3:	JR NZ,+03h
00009CF5:	JP NC,9AF7h		; TRANS: (HL) __ (DE)
00009CF8:	CP 38h
00009CFA:	JP NC,9AF7h		; TRANS: (HL) __ (DE)
00009CFD:	JR +10h
00009CFF:	NEG
00009D01:	CP 20h
00009D03:	BIT 3,C
00009D05:	JR NZ,+03h
00009D07:	JP NC,9ADBh		; FLEXIT: set sign and return
00009D0A:	CP 38h
00009D0C:	JP NC,9ADBh		; FLEXIT: set sign and return
00009D0F:	EX AF,AF'
00009D10:	JR C,+01h
00009D12:	EX DE,HL
00009D13:	EX AF,AF'
00009D14:	BIT 3,C
00009D16:	JP Z,9E07h
00009D19:	CALL 9B03h
00009D1C:	PUSH AF
00009D1D:	PUSH IX
00009D1F:	EX HL,(SP)
00009D20:	LD A,H
00009D21:	SBC D
00009D22:	LD D,A
00009D23:	LD A,L
00009D24:	SBC E
00009D25:	LD E,A
00009D26:	POP HL
00009D27:	EXX
00009D28:	LD A,B
00009D29:	EXX
00009D2A:	SBC B
00009D2B:	LD B,A
00009D2C:	EXX
00009D2D:	LD A,C
00009D2E:	EXX
00009D2F:	SBC C
00009D30:	LD C,A
00009D31:	EXX
00009D32:	LD A,H
00009D33:	EXX
00009D34:	SBC H
00009D35:	LD H,A
00009D36:	EXX
00009D37:	LD A,L
00009D38:	EXX
00009D39:	SBC L
00009D3A:	LD L,A
00009D3B:	EXX
00009D3C:	POP BC
00009D3D:	LD A,D
00009D3E:	SBC B
00009D3F:	OR A
00009D40:	JR Z,+1Ah
00009D42:	BIT 7,A
00009D44:	JP NZ,9ACBh
00009D47:	EXX
00009D48:	RL D
00009D4A:	RL E
00009D4C:	RL B
00009D4E:	RL C
00009D50:	RL H
00009D52:	RL L
00009D54:	EXX
00009D55:	RLA
00009D56:	DEC E
00009D57:	JR NZ,-17h
00009D59:	JP 9CC3h		; ZERO:

00009D5C:	LD A,E
00009D5D:	SUB 08h
00009D5F:	LD E,A
00009D60:	EXX
00009D61:	LD A,L
00009D62:	LD L,H
00009D63:	LD H,C
00009D64:	LD C,B
00009D65:	LD B,E
00009D66:	LD E,D
00009D67:	LD D,00h
00009D69:	EXX
00009D6A:	JR Z,+02h
00009D6C:	JR NC,-2Fh
00009D6E:	JP 9CC3h		; ZERO:

; OVERF:  (handle numeric overflow condition)
00009D71:	LD SP,(A5D2h)		; SPBUF
00009D75:	EI
00009D76:	POP HL
00009D77:	POP DE
00009D78:	LD A,(A5D9h)
00009D7B:	OR A
00009D7C:	JP Z,205Ah		; ERROR: Overflow
00009D7F:	RET

00009D80:	JR NC,+0Ah
00009D82:	NEG
00009D84:	CP 20h	; ' '
00009D86:	JP NC,9ADBh		; FLEXIT: set sign and return
00009D89:	EX DE,HL
00009D8A:	JR +05h
00009D8C:	CP 20h	; ' '
00009D8E:	JP NC,9AF7h		; TRANS: (HL) __ (DE)

; SADD1:
00009D91:	CALL 9DC7h		; SSHIFT:
00009D94:	LD A,H
00009D95:	EXX
00009D96:	ADC H
00009D97:	EXX
00009D98:	LD H,A
00009D99:	LD A,L
00009D9A:	EXX
00009D9B:	ADC L
00009D9C:	EXX
00009D9D:	LD L,A
00009D9E:	LD A,D
00009D9F:	EXX
00009DA0:	ADC D
00009DA1:	EXX
00009DA2:	LD D,A
00009DA3:	LD A,E
00009DA4:	EXX
00009DA5:	ADC E
00009DA6:	EXX
00009DA7:	JR NC,+0Bh	; SSTORE
00009DA9:	RRA
00009DAA:	RR D
00009DAC:	RR L
00009DAE:	RR H
00009DB0:	INC C
00009DB1:	JP Z,9D71h		; OVERF:  (handle numeric overflow condition)
; SSTORE:
00009DB4:	LD E,A
00009DB5:	LD A,C
00009DB6:	EXX
00009DB7:	LD BC,0005h
00009DBA:	LD HL,(A5CFh)		; HLBUF
00009DBD:	LD (HL),A
00009DBE:	ADD HL,BC
00009DBF:	DI
00009DC0:	LD SP,HL
00009DC1:	EXX
00009DC2:	PUSH HL
00009DC3:	PUSH DE
00009DC4:	JP 9ADBh		; FLEXIT: set sign and return

; SSHIFT:
00009DC7:	DI
00009DC8:	LD (A5D4h),SP	; SPBF
00009DCC:	EX AF,AF'
00009DCD:	INC HL
00009DCE:	LD SP,HL
00009DCF:	EXX
00009DD0:	POP DE
00009DD1:	SET 7,E			;CY=0
00009DD3:	POP HL
00009DD4:	OR A
; SHFLP2:
00009DD5:	EX AF,AF'
00009DD6:	CP 08h
00009DD8:	JR C,+0Ch		; BITET2:
00009DDA:	SUB 08h
00009DDC:	EX AF,AF'
00009DDD:	RL H
00009DDF:	LD H,L
00009DE0:	LD L,D
00009DE1:	LD D,E
00009DE2:	LD E,00h
00009DE4:	JR -11h			; SHFLP2:
; BITET2:
00009DE6:	OR A
00009DE7:	JR Z,+0Eh		; BITSE2:
; BITST2:
00009DE9:	EX AF,AF'
00009DEA:	OR A
00009DEB:	RR E
00009DED:	RR D
00009DEF:	RR L
00009DF1:	RR H
00009DF3:	EX AF,AF'
00009DF4:	DEC A
00009DF5:	JR NZ,-0Eh		; BITST2:
; BITSE2:
00009DF7:	EXX
00009DF8:	EX DE,HL
00009DF9:	LD C,(HL)
00009DFA:	INC HL
00009DFB:	LD SP,HL
00009DFC:	POP DE
00009DFD:	SET 7,E
00009DFF:	POP HL
00009E00:	EX AF,AF'
00009E01:	LD SP,(A5D4h)	; SPBF
00009E05:	EI
00009E06:	RET

00009E07:	CALL 9DC7h		; SSHIFT:
00009E0A:	LD A,H
00009E0B:	EXX
00009E0C:	SBC H
00009E0D:	EXX
00009E0E:	LD H,A
00009E0F:	LD A,L
00009E10:	EXX
00009E11:	SBC L
00009E12:	EXX
00009E13:	LD L,A
00009E14:	LD A,D
00009E15:	EXX
00009E16:	SBC D
00009E17:	EXX
00009E18:	LD D,A
00009E19:	LD A,E
00009E1A:	EXX
00009E1B:	SBC E
00009E1C:	EXX
; SSFL2:
00009E1D:	OR A
00009E1E:	JR Z,+16h
; SSFL3:
00009E20:	BIT 7,A
00009E22:	JR NZ,+0Eh		;SSTOR2:
00009E24:	RL H
00009E26:	RL L
00009E28:	RL D
00009E2A:	RLA
00009E2B:	DEC C
00009E2C:	JP NZ,9E20h		; SSFL3:
00009E2F:	JP 9CC3h		; ZERO:

; SSTOR2:
00009E32:	LD E,A
00009E33:	JP 9DB4h		; SSTORE:

00009E36:	LD A,C
00009E37:	SUB 08h
00009E39:	LD C,A
00009E3A:	LD A,D
00009E3B:	LD D,L
00009E3C:	LD L,H
00009E3D:	LD H,00h
00009E3F:	JR Z,+02h
00009E41:	JR NC,-26h		; SSFL2:
00009E43:	JP 9CC3h		; ZERO:

; EXPCHK:
00009E46:	LD C,A
00009E47:	INC HL
00009E48:	INC DE
00009E49:	LD A,(DE)
00009E4A:	XOR (HL)
00009E4B:	LD (A5D1h),A	; SIGN
00009E4E:	DEC HL
00009E4F:	DEC DE
00009E50:	RET


00009E51:	PUSH DE
00009E52:	PUSH HL
00009E53:	CALL 9BADh
00009E56:	XOR A
00009E57:	LD L,A
00009E58:	LD H,A
00009E59:	LD A,B
00009E5A:	OR C
00009E5B:	JR Z,+2Dh
00009E5D:	LD A,D
00009E5E:	OR E
00009E5F:	JR Z,+29h
00009E61:	XOR A
00009E62:	EXX
00009E63:	LD E,A
00009E64:	LD D,A
00009E65:	LD L,A
00009E66:	LD H,A
00009E67:	EXX
00009E68:	LD A,B
00009E69:	OR A
00009E6A:	CALL Z,9EF3h
00009E6D:	CALL NZ,9EE1h
00009E70:	LD A,C
00009E71:	OR A
00009E72:	CALL Z,9EF3h
00009E75:	CALL NZ,9EE1h
00009E78:	BIT 7,H
00009E7A:	JR NZ,+11h
00009E7C:	EXX
00009E7D:	LD A,H
00009E7E:	OR L
00009E7F:	EXX
00009E80:	JR NZ,+0Bh
00009E82:	EX AF,AF'
00009E83:	EX DE,HL
00009E84:	JP 9B88h

00009E87:	LD L,00h
00009E89:	LD H,L
00009E8A:	JP 9B90h

00009E8D:	LD A,H
00009E8E:	OR L
00009E8F:	JR NZ,+0Bh
00009E91:	EXX
00009E92:	LD A,H
00009E93:	OR L
00009E94:	JR NZ,+07h
00009E96:	LD H,80h
00009E98:	LD B,A1h
00009E9A:	JR +28h
00009E9C:	EXX
00009E9D:	LD B,A0h
00009E9F:	LD A,H
00009EA0:	OR A
00009EA1:	JR Z,+10h
00009EA3:	JP M,9EC3h
00009EA6:	EXX
00009EA7:	RL L
00009EA9:	RL H
00009EAB:	EXX
00009EAC:	RL L
00009EAE:	RLA
00009EAF:	DEC B
00009EB0:	JP 9EA0h
00009EB3:	EXX
00009EB4:	LD A,H
00009EB5:	LD H,L
00009EB6:	LD L,00h
00009EB8:	EXX
00009EB9:	LD H,L
00009EBA:	LD L,A
00009EBB:	LD A,B
00009EBC:	SUB 08h
00009EBE:	LD B,A
00009EBF:	LD A,H
00009EC0:	JP 9EA0h
00009EC3:	LD H,A
00009EC4:	EX AF,AF'
00009EC5:	OR A
00009EC6:	JR NZ,+02h
00009EC8:	RES 7,H
00009ECA:	POP IX
00009ECC:	PUSH IX
00009ECE:	LD (IX+00h),B
00009ED1:	LD (IX+01h),H
00009ED4:	LD (IX+02h),L
00009ED7:	EXX
00009ED8:	LD (IX+03h),H
00009EDB:	LD (IX+04h),L
00009EDE:	JP 9BEEh

00009EE1:	LD B,08h
00009EE3:	ADD HL,HL
00009EE4:	EXX
00009EE5:	ADC HL,HL
00009EE7:	EXX
00009EE8:	RLCA
00009EE9:	JR NC,+05h
00009EEB:	ADD HL,DE
00009EEC:	EXX
00009EED:	ADC HL,DE
00009EEF:	EXX
00009EF0:	DJNZ -0Fh
00009EF2:	RET

00009EF3:	LD A,H
00009EF4:	LD H,L
00009EF5:	LD L,00h
00009EF7:	EXX
00009EF8:	LD H,L
00009EF9:	LD L,A
00009EFA:	EXX
00009EFB:	RET

00009EFC:	PUSH DE
00009EFD:	PUSH HL
00009EFE:	CALL 9BADh
00009F01:	LD A,B
00009F02:	OR C
00009F03:	JP Z,2057h			; ERROR: Division by zero
00009F06:	LD A,D
00009F07:	OR E
00009F08:	JP Z,9E87h
00009F0B:	LD H,D
00009F0C:	LD L,E
00009F0D:	XOR A
00009F0E:	SBC HL,BC
00009F10:	LD L,A
00009F11:	LD H,A
00009F12:	JR C,+5Fh
00009F14:	CALL 9F52h
00009F17:	LD A,H
00009F18:	OR L
00009F19:	JR NZ,+61h
00009F1B:	EX AF,AF'
00009F1C:	JP 9B88h

00009F1F:	LD A,D
00009F20:	PUSH AF
00009F21:	XOR B
00009F22:	PUSH AF
00009F23:	LD A,D
00009F24:	RLCA
00009F25:	JR NC,+07h
00009F27:	LD A,D
00009F28:	CPL
00009F29:	LD D,A
00009F2A:	LD A,E
00009F2B:	CPL
00009F2C:	LD E,A
00009F2D:	INC DE
00009F2E:	LD A,B
00009F2F:	RLCA
00009F30:	JR NC,+07h
00009F32:	LD A,B
00009F33:	CPL
00009F34:	LD B,A
00009F35:	LD A,C
00009F36:	CPL
00009F37:	LD C,A
00009F38:	INC BC
00009F39:	CALL 9F52h
00009F3C:	POP AF
00009F3D:	RLCA
00009F3E:	JR NC,+07h
00009F40:	LD A,D
00009F41:	CPL
00009F42:	LD D,A
00009F43:	LD A,E
00009F44:	CPL
00009F45:	LD E,A
00009F46:	INC DE
00009F47:	POP AF
00009F48:	RLCA
00009F49:	RET NC
00009F4A:	LD A,H
00009F4B:	CPL
00009F4C:	LD H,A
00009F4D:	LD A,L
00009F4E:	CPL
00009F4F:	LD L,A
00009F50:	INC HL
00009F51:	RET

00009F52:	LD A,10h
00009F54:	OR A
00009F55:	RL E
00009F57:	RL D
00009F59:	RL L
00009F5B:	RL H
00009F5D:	JR C,+0Ah
00009F5F:	SBC HL,BC
00009F61:	JR C,+0Bh
00009F63:	SET 0,E
00009F65:	DEC A
00009F66:	JR NZ,-14h
00009F68:	RET

00009F69:	OR A
00009F6A:	SBC HL,BC
00009F6C:	JR -0Bh
00009F6E:	ADD HL,BC
00009F6F:	DEC A
00009F70:	JR NZ,-1Eh
00009F72:	RET

00009F73:	EX DE,HL
00009F74:	LD A,70h
00009F76:	PUSH AF
00009F77:	CALL 9F52h
00009F7A:	JR +03h
00009F7C:	LD A,80h
00009F7E:	PUSH AF
00009F7F:	PUSH DE
00009F80:	XOR A
00009F81:	LD E,A
00009F82:	LD D,A
00009F83:	CALL 9F52h
00009F86:	LD A,H
00009F87:	OR L
00009F88:	PUSH DE
00009F89:	JR Z,+13h
00009F8B:	XOR A
00009F8C:	LD E,A
00009F8D:	LD D,A
00009F8E:	CALL 9F52h
00009F91:	LD A,H
00009F92:	OR L
00009F93:	PUSH DE
00009F94:	JR Z,+09h
00009F96:	ADD HL,HL
00009F97:	JR C,+06h
00009F99:	SBC HL,BC
00009F9B:	CCF
00009F9C:	JR +01h
00009F9E:	PUSH HL
00009F9F:	POP BC
00009FA0:	POP DE
00009FA1:	POP HL
00009FA2:	EXX
00009FA3:	POP HL
00009FA4:	EXX
00009FA5:	PUSH AF
00009FA6:	LD A,H
00009FA7:	OR A
00009FA8:	JR Z,+0Bh
00009FAA:	LD C,B
00009FAB:	LD B,E
00009FAC:	LD E,D
00009FAD:	LD D,L
00009FAE:	LD L,H
00009FAF:	EXX
00009FB0:	LD A,H
00009FB1:	ADD 08h
00009FB3:	LD H,A
00009FB4:	EXX
00009FB5:	EXX
00009FB6:	LD A,H
00009FB7:	EXX
00009FB8:	LD H,A
00009FB9:	POP AF
00009FBA:	LD A,L
00009FBB:	PUSH AF
00009FBC:	OR A
00009FBD:	JR Z,+0Fh
00009FBF:	POP AF
00009FC0:	OR A
00009FC1:	RRA
00009FC2:	RR D
00009FC4:	RR E
00009FC6:	RR B
00009FC8:	RR C
00009FCA:	PUSH AF
00009FCB:	INC H
00009FCC:	JR -12h
00009FCE:	POP AF
00009FCF:	LD A,H
00009FD0:	LD HL,0000h
00009FD3:	ADC HL,BC
00009FD5:	LD C,L
00009FD6:	LD B,H
00009FD7:	LD HL,0000h
00009FDA:	ADC HL,DE
00009FDC:	LD E,L
00009FDD:	LD D,H
00009FDE:	JR NC,+03h
00009FE0:	INC A
00009FE1:	LD H,80h
00009FE3:	POP HL
00009FE4:	PUSH HL
00009FE5:	LD (HL),A
00009FE6:	EX AF,AF'
00009FE7:	RES 7,D
00009FE9:	OR D
00009FEA:	INC HL
00009FEB:	LD (HL),A
00009FEC:	INC HL
00009FED:	LD (HL),E
00009FEE:	INC HL
00009FEF:	LD (HL),B
00009FF0:	INC HL
00009FF1:	LD (HL),C
00009FF2:	JP 9BEEh

; MUL:
00009FF5:	CALL 9A32h		; STROMT:  Get argument, on exit: A=data type
00009FF8:	BIT 1,A
00009FFA:	JP NZ,9E51h
00009FFD:	CALL 9E46h		; EXPCHK:
0000A000:	PUSH DE
0000A001:	PUSH HL
0000A002:	LD (A5D2h),SP		; SPBUF
0000A006:	LD A,(HL)
0000A007:	OR A
0000A008:	JP Z,9CC3h		; ZERO:
0000A00B:	LD A,(DE)
0000A00C:	OR A
0000A00D:	JP Z,9CC3h		; ZERO:
0000A010:	INC DE
0000A011:	PUSH DE
0000A012:	POP IX
0000A014:	ADD (HL)
0000A015:	LD E,A
0000A016:	LD A,00h
0000A018:	ADC A
0000A019:	LD D,A
0000A01A:	LD (A5D7h),DE	; EXPSGN
0000A01E:	INC HL
0000A01F:	XOR A
0000A020:	LD (A5D6h),A	; CYFLG
0000A023:	BIT 3,C
0000A025:	JP NZ,A1DFh
0000A028:	LD D,(HL)
0000A029:	SET 7,D
0000A02B:	INC HL
0000A02C:	LD E,(HL)
0000A02D:	INC HL
0000A02E:	PUSH HL
0000A02F:	LD H,A
0000A030:	LD L,A
0000A031:	EXX
0000A032:	POP HL
0000A033:	LD D,(HL)
0000A034:	INC HL
0000A035:	LD E,(HL)
0000A036:	LD B,A
0000A037:	LD C,A
0000A038:	LD H,A
0000A039:	LD L,A
0000A03A:	EXX
0000A03B:	LD A,(IX+00h)
0000A03E:	OR 80h
0000A040:	LD C,04h		; BYTES COUNTER
; SMULL1:
0000A042:	LD B,08h		; BIT COUNTER
0000A044:	OR A
0000A045:	JP Z,A0D7h		; SMULL5:
0000A048:	RLCA
0000A049:	JR NC,+12h
0000A04B:	EX AF,AF'
0000A04C:	EXX
0000A04D:	LD A,C
0000A04E:	ADD B
0000A04F:	LD C,A
0000A050:	ADC HL,DE
0000A052:	EXX
0000A053:	ADC HL,DE
0000A055:	JR NC,+05h
0000A057:	LD A,01h
0000A059:	LD (A5D6h),A	; CYFLG
0000A05C:	EX AF,AF'
0000A05D:	SRL D
0000A05F:	RR E
0000A061:	EXX
0000A062:	RR D
0000A064:	RR E
0000A066:	RR B
0000A068:	EXX
0000A069:	DJNZ -23h

; SMULL6:
0000A06B:	INC IX
0000A06D:	LD A,(IX+00h)
0000A070:	DEC C
0000A071:	JR NZ,-31h		; SMULL1:
0000A073:	EXX
0000A074:	LD A,(A5D6h)	; CYFLG
0000A077:	OR A
0000A078:	JR Z,+16h
0000A07A:	LD DE,(A5D7h)	; EXPSGN
0000A07E:	INC DE
0000A07F:	LD (A5D7h),DE	; EXPSGN
0000A083:	EXX
0000A084:	SCF
0000A085:	RR H
0000A087:	RR L
0000A089:	EXX
0000A08A:	RR H
0000A08C:	RR L
0000A08E:	RR C
0000A090:	BIT 7,C
0000A092:	JR Z,+1Ah
0000A094:	LD DE,0001h
0000A097:	ADD HL,DE
0000A098:	EXX
0000A099:	LD DE,0000h
0000A09C:	ADC HL,DE
0000A09E:	EXX
0000A09F:	JR NC,+0Dh
0000A0A1:	LD DE,(A5D7h)	; EXPSGN
0000A0A5:	INC DE
0000A0A6:	LD (A5D7h),DE	; EXPSGN
0000A0AA:	EXX
0000A0AB:	LD H,80h
0000A0AD:	EXX
0000A0AE:	POP IX
0000A0B0:	PUSH IX
0000A0B2:	LD (IX+04h),L
0000A0B5:	LD (IX+03h),H
0000A0B8:	EXX
0000A0B9:	LD (IX+02h),L
0000A0BC:	LD (IX+01h),H
0000A0BF:	LD HL,(A5D7h)	; EXPSGN
0000A0C2:	OR A
0000A0C3:	LD DE,0081h
0000A0C6:	SBC HL,DE
0000A0C8:	LD A,H
0000A0C9:	ADD 00h
0000A0CB:	JP M,A0E3h		; UNDRFL: (handle numeric underflow condition)
0000A0CE:	JP NZ,9D71h		; OVERF:  (handle numeric overflow condition)
0000A0D1:	LD (IX+00h),L
0000A0D4:	JP 9ADBh		; FLEXIT: set sign and return

; SMULL5:
0000A0D7:	LD A,E
0000A0D8:	EXX
0000A0D9:	LD B,E
0000A0DA:	LD E,D
0000A0DB:	LD D,A
0000A0DC:	EXX
0000A0DD:	LD E,D
0000A0DE:	LD D,00h
0000A0E0:	JP A06Bh		; SMULL6:

; UNDRFL: (handle numeric underflow condition)
0000A0E3:	LD SP,(A5D2h)		; SPBUF
0000A0E7:	JP 9CC3h		; ZERO:

; DIV:
0000A0EA:	CALL 9A32h		; STROMT:  Get argument, on exit: A=data type
0000A0ED:	BIT 1,A
0000A0EF:	JP NZ,9EFCh
0000A0F2:	CALL 9E46h		; EXPCHK:
0000A0F5:	PUSH DE
0000A0F6:	PUSH HL
0000A0F7:	LD (A5D2h),SP		; SPBUF
0000A0FB:	LD A,(DE)
0000A0FC:	OR A
0000A0FD:	JP Z,2057h			; ERROR: Division by zero
0000A100:	EX AF,AF'
0000A101:	LD A,(HL)
0000A102:	OR A
0000A103:	JP Z,9CC3h		; ZERO:
0000A106:	EXX
0000A107:	ADD 81h
0000A109:	LD B,A
0000A10A:	LD A,00h
0000A10C:	ADC A
0000A10D:	EX AF,AF'
0000A10E:	LD C,A
0000A10F:	LD A,B
0000A110:	SUB C
0000A111:	LD C,A
0000A112:	EX AF,AF'
0000A113:	LD B,A
0000A114:	EX AF,AF'
0000A115:	LD A,B
0000A116:	SBC 00h
0000A118:	JP C,A0E3h		; UNDRFL: (handle numeric underflow condition)

0000A11B:	JP NZ,9D71h		; OVERF:  (handle numeric overflow condition)
0000A11E:	LD A,C
0000A11F:	PUSH AF			;PUSH A(EXP)
0000A120:	EXX
0000A121:	INC DE
0000A122:	INC HL
0000A123:	BIT 3,C
0000A125:	JP NZ,A2CCh
0000A128:	LD B,(HL)
0000A129:	SET 7,B
0000A12B:	INC HL
0000A12C:	LD C,(HL)
0000A12D:	INC HL
0000A12E:	PUSH HL
0000A12F:	EX DE,HL
0000A130:	LD D,(HL)
0000A131:	SET 7,D
0000A133:	INC HL
0000A134:	LD E,(HL)
0000A135:	INC HL
0000A136:	PUSH HL
0000A137:	LD H,B
0000A138:	LD L,C
0000A139:	EXX
0000A13A:	POP HL
0000A13B:	LD D,(HL)
0000A13C:	INC HL
0000A13D:	LD E,(HL)
0000A13E:	POP HL
0000A13F:	LD A,(HL)
0000A140:	INC HL
0000A141:	LD L,(HL)
0000A142:	LD H,A
0000A143:	EXX				;HLH'L'/DED'E'
0000A144:	LD C,05h
; SDIVL1:
0000A146:	LD B,08h
0000A148:	XOR A
; SDIVL2:
0000A149:	BIT 7,H
0000A14B:	JR NZ,+10h
0000A14D:	OR A
0000A14E:	RLA
0000A14F:	EXX
0000A150:	ADD HL,HL
0000A151:	EXX
0000A152:	ADC HL,HL
0000A154:	DJNZ -0Dh		; SDIVL2:
0000A156:	PUSH AF
0000A157:	DEC C
0000A158:	JR NZ,-14h		; SDIVL1:
0000A15A:	JP A197h		; SDIVED:

0000A15D:	OR A
0000A15E:	EXX
0000A15F:	SBC HL,DE
0000A161:	EXX
0000A162:	SBC HL,DE
0000A164:	CCF
0000A165:	JR C,-19h
0000A167:	EXX
0000A168:	ADD HL,DE
0000A169:	EXX
0000A16A:	ADC HL,DE
0000A16C:	OR A
0000A16D:	RLA
0000A16E:	EXX
0000A16F:	ADD HL,HL
0000A170:	EXX
0000A171:	ADC HL,HL
0000A173:	DJNZ +07h
0000A175:	PUSH AF
0000A176:	LD B,08h
0000A178:	DEC C
0000A179:	JP Z,A197h		; SDIVED:
0000A17C:	EXX
0000A17D:	OR A
0000A17E:	SBC HL,DE
0000A180:	EXX
0000A181:	SBC HL,DE
0000A183:	SCF
0000A184:	RLA
0000A185:	DJNZ +06h
0000A187:	PUSH AF
0000A188:	LD B,08h
0000A18A:	DEC C
0000A18B:	JR Z,+0Ah		; SDIVED:
0000A18D:	EXX
0000A18E:	ADD HL,HL
0000A18F:	EXX
0000A190:	ADC HL,HL
0000A192:	JR C,-18h
0000A194:	JP A149h		; SDIVL2:

; SDIVED:
0000A197:	POP AF
0000A198:	LD H,A
0000A199:	EXX
0000A19A:	POP AF
0000A19B:	LD E,A
0000A19C:	POP AF
0000A19D:	LD D,A
0000A19E:	POP AF
0000A19F:	LD C,A
0000A1A0:	POP AF
0000A1A1:	LD B,A
0000A1A2:	POP AF
; SDIVL9:
0000A1A3:	BIT 7,B
0000A1A5:	JR NZ,+13h		; SDIVE2:
0000A1A7:	EXX
0000A1A8:	SLA H
0000A1AA:	EXX
0000A1AB:	RL E
0000A1AD:	RL D
0000A1AF:	RL C
0000A1B1:	RL B
0000A1B3:	DEC A
0000A1B4:	JP NZ,A1A3h	; SDIVL9:
0000A1B7:	JP 9CC3h		; ZERO:

; SDIVE2:
0000A1BA:	EXX
0000A1BB:	RL H
0000A1BD:	EXX
0000A1BE:	JR NC,+11h
0000A1C0:	LD HL,0001h
0000A1C3:	ADD HL,DE
0000A1C4:	EX DE,HL
0000A1C5:	LD HL,0000h
0000A1C8:	ADC HL,BC
0000A1CA:	LD B,H
0000A1CB:	LD C,L
0000A1CC:	JR NC,+03h
0000A1CE:	LD B,80h
0000A1D0:	INC A
0000A1D1:	POP HL
0000A1D2:	PUSH HL
0000A1D3:	LD (HL),A
0000A1D4:	INC HL
0000A1D5:	LD (HL),B
0000A1D6:	INC HL
0000A1D7:	LD (HL),C
0000A1D8:	INC HL
0000A1D9:	LD (HL),D
0000A1DA:	INC HL
0000A1DB:	LD (HL),E
0000A1DC:	JP 9ADBh		; FLEXIT: set sign and return

0000A1DF:	LD D,(HL)
0000A1E0:	SET 7,D
0000A1E2:	INC HL
0000A1E3:	LD E,(HL)
0000A1E4:	INC HL
0000A1E5:	LD B,(HL)
0000A1E6:	INC HL
0000A1E7:	LD C,(HL)
0000A1E8:	INC HL
0000A1E9:	PUSH HL
0000A1EA:	LD H,A
0000A1EB:	LD L,A
0000A1EC:	EXX
0000A1ED:	POP HL
0000A1EE:	LD D,(HL)
0000A1EF:	INC HL
0000A1F0:	LD E,(HL)
0000A1F1:	INC HL
0000A1F2:	LD B,(HL)
0000A1F3:	LD C,A
0000A1F4:	LD H,A
0000A1F5:	LD L,A
0000A1F6:	PUSH HL
0000A1F7:	POP IY
0000A1F9:	PUSH HL
0000A1FA:	EXX
0000A1FB:	LD A,07h
0000A1FD:	LD (A5DAh),A
0000A200:	LD A,(IX+00h)
0000A203:	OR 80h
0000A205:	EX AF,AF'
0000A206:	LD A,08h
0000A208:	EX AF,AF'
0000A209:	OR A
0000A20A:	JP Z,A2BDh
0000A20D:	EX AF,AF'
0000A20E:	EX AF,AF'
0000A20F:	RLCA
0000A210:	JR NC,+11h
0000A212:	EXX
0000A213:	ADD IY,BC
0000A215:	ADC HL,DE
0000A217:	EXX
0000A218:	ADC HL,BC
0000A21A:	EX HL,(SP)
0000A21B:	ADC HL,DE
0000A21D:	EX HL,(SP)
0000A21E:	JR NC,+03h
0000A220:	LD (A5D6h),A	; CYFLG
0000A223:	SRL D
0000A225:	RR E
0000A227:	RR B
0000A229:	RR C
0000A22B:	EXX
0000A22C:	RR D
0000A22E:	RR E
0000A230:	RR B
0000A232:	RR C
0000A234:	EXX
0000A235:	EX AF,AF'
0000A236:	DEC A
0000A237:	JR NZ,-2Bh
0000A239:	INC IX
0000A23B:	LD A,(IX+00h)
0000A23E:	EX AF,AF'
0000A23F:	LD A,(A5DAh)
0000A242:	DEC A
0000A243:	LD (A5DAh),A
0000A246:	JR NZ,-42h
0000A248:	EX HL,(SP)
0000A249:	PUSH IY
0000A24B:	EXX
0000A24C:	POP DE
0000A24D:	POP BC
0000A24E:	EXX
0000A24F:	EX DE,HL
0000A250:	LD A,(A5D6h)	; CYFLG
0000A253:	OR A
0000A254:	JR Z,+1Ah
0000A256:	LD HL,(A5D7h)	; EXPSGN
0000A259:	INC HL
0000A25A:	LD (A5D7h),HL	; EXPSGN
0000A25D:	SCF
0000A25E:	RR D
0000A260:	RR E
0000A262:	EXX
0000A263:	RR B
0000A265:	RR C
0000A267:	RR H
0000A269:	RR L
0000A26B:	RR D
0000A26D:	RR E
0000A26F:	EXX
0000A270:	EXX
0000A271:	BIT 7,E
0000A273:	JR Z,+2Bh
0000A275:	LD A,01h
0000A277:	ADD D
0000A278:	LD D,A
0000A279:	LD A,00h
0000A27B:	ADC L
0000A27C:	LD L,A
0000A27D:	LD A,00h
0000A27F:	ADC H
0000A280:	LD H,A
0000A281:	LD A,00h
0000A283:	ADC C
0000A284:	LD C,A
0000A285:	LD A,00h
0000A287:	ADC B
0000A288:	LD B,A
0000A289:	EXX
0000A28A:	LD A,00h
0000A28C:	ADC E
0000A28D:	LD E,A
0000A28E:	LD A,00h
0000A290:	ADC D
0000A291:	LD D,A
0000A292:	EXX
0000A293:	JR NC,+0Bh
0000A295:	EXX
0000A296:	LD HL,(A5D7h)	; EXPSGN
0000A299:	INC HL
0000A29A:	LD (A5D7h),HL	; EXPSGN
0000A29D:	LD D,80h
0000A29F:	EXX
0000A2A0:	POP IX
0000A2A2:	PUSH IX
0000A2A4:	LD (IX+07h),D
0000A2A7:	LD (IX+06h),L
0000A2AA:	LD (IX+05h),H
0000A2AD:	LD (IX+04h),C
0000A2B0:	LD (IX+03h),B
0000A2B3:	EXX
0000A2B4:	LD (IX+02h),E
0000A2B7:	LD (IX+01h),D
0000A2BA:	JP A0BFh
0000A2BD:	LD A,C
0000A2BE:	LD C,B
0000A2BF:	LD B,E
0000A2C0:	LD E,D
0000A2C1:	LD D,00h
0000A2C3:	EXX
0000A2C4:	LD C,B
0000A2C5:	LD B,E
0000A2C6:	LD E,D
0000A2C7:	LD D,A
0000A2C8:	EXX
0000A2C9:	JP A239h
0000A2CC:	PUSH DE
0000A2CD:	LD A,(HL)
0000A2CE:	OR 80h
0000A2D0:	EX AF,AF'
0000A2D1:	INC HL
0000A2D2:	LD D,(HL)
0000A2D3:	INC HL
0000A2D4:	LD E,(HL)
0000A2D5:	INC HL
0000A2D6:	PUSH DE
0000A2D7:	LD D,(HL)
0000A2D8:	INC HL
0000A2D9:	LD E,(HL)
0000A2DA:	INC HL
0000A2DB:	PUSH DE
0000A2DC:	LD D,(HL)
0000A2DD:	INC HL
0000A2DE:	LD E,(HL)
0000A2DF:	EXX
0000A2E0:	POP DE
0000A2E1:	POP HL
0000A2E2:	EXX
0000A2E3:	POP HL
0000A2E4:	LD A,(HL)
0000A2E5:	OR 80h
0000A2E7:	LD BC,0006h
0000A2EA:	ADD HL,BC
0000A2EB:	LD C,A
0000A2EC:	EX AF,AF'
0000A2ED:	LD B,A
0000A2EE:	EXX
0000A2EF:	LD C,08h
0000A2F1:	LD B,08h
0000A2F3:	XOR A
0000A2F4:	EXX
0000A2F5:	BIT 7,B
0000A2F7:	JR NZ,+19h
0000A2F9:	OR A
0000A2FA:	RLA
0000A2FB:	EX DE,HL
0000A2FC:	ADD HL,HL
0000A2FD:	EX DE,HL
0000A2FE:	EXX
0000A2FF:	EX DE,HL
0000A300:	ADC HL,HL
0000A302:	EX DE,HL
0000A303:	ADC HL,HL
0000A305:	EXX
0000A306:	RL B
0000A308:	EXX
0000A309:	DJNZ -17h
0000A30B:	PUSH AF
0000A30C:	DEC C
0000A30D:	JR NZ,-1Eh
0000A30F:	JP A37Ah
0000A312:	CALL A3E1h
0000A315:	CCF
0000A316:	JR C,-1Eh
0000A318:	EX AF,AF'
0000A319:	PUSH HL
0000A31A:	LD A,E
0000A31B:	ADD (HL)
0000A31C:	LD E,A
0000A31D:	DEC HL
0000A31E:	LD A,D
0000A31F:	ADC (HL)
0000A320:	LD D,A
0000A321:	DEC HL
0000A322:	EXX
0000A323:	LD A,E
0000A324:	EXX
0000A325:	ADC (HL)
0000A326:	DEC HL
0000A327:	EXX
0000A328:	LD E,A
0000A329:	LD A,D
0000A32A:	EXX
0000A32B:	ADC (HL)
0000A32C:	DEC HL
0000A32D:	EXX
0000A32E:	LD D,A
0000A32F:	LD A,L
0000A330:	EXX
0000A331:	ADC (HL)
0000A332:	DEC HL
0000A333:	EXX
0000A334:	LD L,A
0000A335:	LD A,H
0000A336:	EXX
0000A337:	ADC (HL)
0000A338:	EXX
0000A339:	LD H,A
0000A33A:	EXX
0000A33B:	LD A,B
0000A33C:	ADC C
0000A33D:	LD B,A
0000A33E:	POP HL
0000A33F:	EX AF,AF'
0000A340:	RLA
0000A341:	EX DE,HL
0000A342:	ADD HL,HL
0000A343:	EX DE,HL
0000A344:	EXX
0000A345:	EX DE,HL
0000A346:	ADC HL,HL
0000A348:	EX DE,HL
0000A349:	ADC HL,HL
0000A34B:	EXX
0000A34C:	RL B
0000A34E:	EXX
0000A34F:	DJNZ +06h
0000A351:	PUSH AF
0000A352:	LD B,08h
0000A354:	DEC C
0000A355:	JR Z,+23h
0000A357:	EXX
0000A358:	CALL A3E1h
0000A35B:	SCF
0000A35C:	RLA
0000A35D:	EXX
0000A35E:	DJNZ +06h
0000A360:	PUSH AF
0000A361:	LD B,08h
0000A363:	DEC C
0000A364:	JR Z,+14h
0000A366:	EXX
0000A367:	EX DE,HL
0000A368:	ADD HL,HL
0000A369:	EX DE,HL
0000A36A:	EXX
0000A36B:	EX DE,HL
0000A36C:	ADC HL,HL
0000A36E:	EX DE,HL
0000A36F:	ADC HL,HL
0000A371:	EXX
0000A372:	RL B
0000A374:	EXX
0000A375:	JR C,-20h
0000A377:	JP A2F4h
0000A37A:	POP AF
0000A37B:	LD L,A
0000A37C:	POP AF
0000A37D:	LD B,A
0000A37E:	POP AF
0000A37F:	LD C,A
0000A380:	POP AF
0000A381:	LD D,A
0000A382:	POP AF
0000A383:	LD E,A
0000A384:	EXX
0000A385:	POP AF
0000A386:	LD B,A
0000A387:	POP AF
0000A388:	LD C,A
0000A389:	POP AF
0000A38A:	LD D,A
0000A38B:	POP AF
0000A38C:	LD E,A
0000A38D:	BIT 7,D
0000A38F:	JR NZ,+18h
0000A391:	EXX
0000A392:	SLA L
0000A394:	RL B
0000A396:	RL C
0000A398:	RL D
0000A39A:	RL E
0000A39C:	EXX
0000A39D:	RL B
0000A39F:	RL C
0000A3A1:	RL D
0000A3A3:	DEC E
0000A3A4:	JR NZ,-19h
0000A3A6:	JP 9CC3h		; ZERO:

0000A3A9:	EXX
0000A3AA:	RL L
0000A3AC:	EXX
0000A3AD:	JR NC,+1Fh
0000A3AF:	EXX
0000A3B0:	LD L,00h
0000A3B2:	LD A,L
0000A3B3:	ADC B
0000A3B4:	LD B,A
0000A3B5:	LD A,L
0000A3B6:	ADC C
0000A3B7:	LD C,A
0000A3B8:	LD A,L
0000A3B9:	ADC D
0000A3BA:	LD D,A
0000A3BB:	LD A,L
0000A3BC:	ADC E
0000A3BD:	LD E,A
0000A3BE:	LD A,L
0000A3BF:	EXX
0000A3C0:	LD L,A
0000A3C1:	ADC B
0000A3C2:	LD B,A
0000A3C3:	LD A,L
0000A3C4:	ADC C
0000A3C5:	LD C,A
0000A3C6:	LD A,L
0000A3C7:	ADC D
0000A3C8:	LD D,A
0000A3C9:	JR NC,+03h
0000A3CB:	LD D,80h
0000A3CD:	INC E
0000A3CE:	DI
0000A3CF:	POP HL
0000A3D0:	PUSH HL
0000A3D1:	PUSH BC
0000A3D2:	LD BC,0008h
0000A3D5:	ADD HL,BC
0000A3D6:	POP BC
0000A3D7:	LD SP,HL
0000A3D8:	EXX
0000A3D9:	PUSH BC
0000A3DA:	PUSH DE
0000A3DB:	EXX
0000A3DC:	PUSH BC
0000A3DD:	PUSH DE
0000A3DE:	JP 9ADBh		; FLEXIT: set sign and return

0000A3E1:	PUSH HL
0000A3E2:	PUSH AF
0000A3E3:	LD A,E
0000A3E4:	SUB (HL)
0000A3E5:	LD E,A
0000A3E6:	DEC HL
0000A3E7:	LD A,D
0000A3E8:	SBC (HL)
0000A3E9:	LD D,A
0000A3EA:	DEC HL
0000A3EB:	EXX
0000A3EC:	LD A,E
0000A3ED:	EXX
0000A3EE:	SBC (HL)
0000A3EF:	DEC HL
0000A3F0:	EXX
0000A3F1:	LD E,A
0000A3F2:	LD A,D
0000A3F3:	EXX
0000A3F4:	SBC (HL)
0000A3F5:	DEC HL
0000A3F6:	EXX
0000A3F7:	LD D,A
0000A3F8:	LD A,L
0000A3F9:	EXX
0000A3FA:	SBC (HL)
0000A3FB:	DEC HL
0000A3FC:	EXX
0000A3FD:	LD L,A
0000A3FE:	LD A,H
0000A3FF:	EXX
0000A400:	SBC (HL)
0000A401:	EXX
0000A402:	LD H,A
0000A403:	EXX
0000A404:	LD A,B
0000A405:	SBC C
0000A406:	LD B,A
0000A407:	POP HL
0000A408:	LD A,H
0000A409:	POP HL
0000A40A:	RET

; EDITOR:
0000A40B:	CALL 17F1h		; init flags
0000A40E:	XOR A
0000A40F:	LD (3627h),A	; CONTFG
0000A412:	LD (3626h),A	; ERRORF  ..current error condition
0000A415:	CALL 2FEFh		; REFLNO: ... Line ref = Number
0000A418:	CALL 7B8Eh		; CVBCAS:	Convert ASCII to BC
0000A41B:	LD (3630h),BC	; EDLINE
0000A41F:	LD A,B
0000A420:	OR C
0000A421:	JP Z,1519h		; INPAGN:
0000A424:	INC BC
0000A425:	LD A,B
0000A426:	OR C
0000A427:	JR Z,-08h
0000A429:	CALL 9225h
0000A42C:	LD A,(DE)
0000A42D:	CP 20h	; ' '
0000A42F:	JR NZ,+01h
0000A431:	INC DE
0000A432:	PUSH AF
0000A433:	LD HL,A637h		; IMDBUF - Immediate command buffer
0000A436:	CALL 7733h		; CVIMTX: convert immediate buffer for direct execution
0000A439:	PUSH HL
0000A43A:	LD HL,(3630h)	; EDLINE
0000A43D:	LD E,L
0000A43E:	LD D,H
0000A43F:	CALL A4EEh			; DELSUB:
0000A442:	POP HL
0000A443:	POP AF
0000A444:	OR A
0000A445:	JP Z,A4D6h
0000A448:	LD DE,A637h		; IMDBUF - Immediate command buffer
0000A44B:	OR A
0000A44C:	SBC HL,DE
0000A44E:	LD DE,0005h
0000A451:	ADD HL,DE
0000A452:	PUSH HL
0000A453:	LD BC,(3630h)	; EDLINE
0000A457:	LD HL,(A635h)		; TEXTST,  address of BASIC  program
0000A45A:	JR +05h
; INSL2:
0000A45C:	LD E,(HL)
0000A45D:	INC HL
0000A45E:	LD D,(HL)
0000A45F:	DEC HL
0000A460:	ADD HL,DE
0000A461:	LD E,(HL)
0000A462:	INC HL
0000A463:	LD D,(HL)
0000A464:	DEC HL
0000A465:	LD A,D
0000A466:	OR E
0000A467:	JR Z,+0Eh

0000A469:	INC HL
0000A46A:	INC HL

0000A46B:	LD E,(HL)
0000A46C:	INC HL
0000A46D:	LD D,(HL)

0000A46E:	EX DE,HL
0000A46F:	SBC HL,BC
0000A471:	DEC DE
0000A472:	DEC DE
0000A473:	DEC DE
0000A474:	EX DE,HL
0000A475:	JR C,-1Bh		; INSL2:

0000A477:	POP DE
0000A478:	CALL A47Dh
0000A47B:	JR +42h
0000A47D:	PUSH HL
0000A47E:	LD HL,(A62Dh)		; VARED
0000A481:	LD C,L
0000A482:	LD B,H
0000A483:	ADD HL,DE
0000A484:	JP C,201Fh		; ERROR: 'Out of memory'
0000A487:	EX DE,HL
0000A488:	CALL 8D3Ch			; MEMECK: (SBC SP,DE)
0000A48B:	EX DE,HL
0000A48C:	LD (A62Dh),HL		; VARED
0000A48F:	LD (3621h),HL		; TMPEND
0000A492:	LD HL,(3628h)
0000A495:	ADD HL,DE
0000A496:	LD (3628h),HL
0000A499:	LD HL,(A629h)		; VARST
0000A49C:	ADD HL,DE
0000A49D:	LD (A629h),HL		; VARST
0000A4A0:	LD HL,(A62Bh)		; STRST
0000A4A3:	ADD HL,DE
0000A4A4:	LD (A62Bh),HL		; STRST
0000A4A7:	POP HL
0000A4A8:	PUSH DE
0000A4A9:	EX DE,HL
0000A4AA:	LD L,C
0000A4AB:	LD H,B
0000A4AC:	LD BC,(A62Dh)		; VARED
0000A4B0:	LD A,(HL)
0000A4B1:	LD (BC),A
0000A4B2:	PUSH HL
0000A4B3:	OR A
0000A4B4:	SBC HL,DE
0000A4B6:	POP HL
0000A4B7:	JR Z,+04h
0000A4B9:	DEC HL
0000A4BA:	DEC BC
0000A4BB:	JR -0Dh
0000A4BD:	POP BC
0000A4BE:	RET

0000A4BF:	EX DE,HL
0000A4C0:	LD (HL),C
0000A4C1:	INC HL
0000A4C2:	LD (HL),B
0000A4C3:	INC HL
0000A4C4:	LD DE,(3630h)	; EDLINE
0000A4C8:	LD (HL),E
0000A4C9:	INC HL
0000A4CA:	LD (HL),D
0000A4CB:	INC HL
0000A4CC:	EX DE,HL
0000A4CD:	LD HL,A637h		; IMDBUF - Immediate command buffer
0000A4D0:	DEC BC
0000A4D1:	DEC BC
0000A4D2:	DEC BC
0000A4D3:	DEC BC
0000A4D4:	LDIR
0000A4D6:	LD A,(362Dh)
0000A4D9:	OR A
0000A4DA:	JP Z,1519h		; INPAGN:
0000A4DD:	LD DE,(3632h)
0000A4E1:	LD HL,(3630h)	; EDLINE
0000A4E4:	ADD HL,DE
0000A4E5:	LD (3630h),HL	; EDLINE
0000A4E8:	JP NC,1519h		; INPAGN:
0000A4EB:	JP 1537h

; DELSUB:
0000A4EE:	PUSH AF
0000A4EF:	PUSH BC
0000A4F0:	PUSH HL
0000A4F1:	PUSH DE
0000A4F2:	LD C,L
0000A4F3:	LD B,H
0000A4F4:	LD HL,(A635h)		; TEXTST,  address of BASIC  program
0000A4F7:	CALL 1773h		; LDDEMI:
0000A4FA:	JR NZ,+08h
; RTDLTE:	pop DE,HL,BC,AF and RET
0000A4FC:	POP DE
0000A4FD:	POP HL
0000A4FE:	POP BC
0000A4FF:	POP AF
0000A500:	RET

0000A501:	POP DE
0000A502:	JR -08h
0000A504:	PUSH DE
0000A505:	LD E,(HL)
0000A506:	INC HL
0000A507:	LD D,(HL)
0000A508:	EX DE,HL
0000A509:	LD (A519h),HL
0000A50C:	SBC HL,BC
0000A50E:	POP HL
0000A50F:	JR C,-1Ah
0000A511:	DEC DE
0000A512:	DEC DE
0000A513:	DEC DE
0000A514:	POP BC
0000A515:	PUSH BC
0000A516:	PUSH DE
0000A517:	PUSH HL
0000A518:	LD HL,0028h
0000A51B:	SBC HL,BC
0000A51D:	POP HL
0000A51E:	JR Z,+17h
0000A520:	JR NC,-21h
0000A522:	CALL 1773h		; LDDEMI:
0000A525:	JR Z,+0Eh
0000A527:	PUSH DE
0000A528:	LD E,(HL)
0000A529:	INC HL
0000A52A:	LD D,(HL)
0000A52B:	EX DE,HL
0000A52C:	SBC HL,BC
0000A52E:	POP HL
0000A52F:	JR C,-0Fh
0000A531:	JR Z,+04h
0000A533:	EX DE,HL
0000A534:	DEC HL
0000A535:	DEC HL
0000A536:	DEC HL
0000A537:	POP DE
0000A538:	PUSH DE
0000A539:	PUSH HL
0000A53A:	OR A
0000A53B:	SBC HL,DE
0000A53D:	LD C,L
0000A53E:	LD B,H
0000A53F:	LD HL,(A629h)		; VARST
0000A542:	OR A
0000A543:	SBC HL,BC
0000A545:	LD (A629h),HL		; VARST
0000A548:	LD HL,(3628h)
0000A54B:	OR A
0000A54C:	SBC HL,BC
0000A54E:	LD (3628h),HL
0000A551:	LD HL,(A62Bh)		; STRST
0000A554:	OR A
0000A555:	SBC HL,BC
0000A557:	LD (A62Bh),HL		; STRST
0000A55A:	POP HL
0000A55B:	POP DE

0000A55C:	PUSH DE
0000A55D:	PUSH HL
0000A55E:	EX DE,HL
0000A55F:	LD HL,(A62Dh)		; VARED
0000A562:	OR A
0000A563:	SBC HL,DE
0000A565:	LD C,L
0000A566:	LD B,H
0000A567:	POP HL
0000A568:	POP DE
0000A569:	LDIR
0000A56B:	EX DE,HL
0000A56C:	LD (A62Dh),HL		; VARED

0000A56F:	XOR A
0000A570:	LD (3627h),A		; CONTFG
0000A573:	JP A4FCh			; RTDLTE:	pop DE,HL,BC,AF and RET


; Page in the IPL ROM and call (HL)
0000A576:	LD A,1Dh
0000A578:	OUTA (00h)
0000A57A:	CALL A587h
0000A57D:	LD A,1Eh
0000A57F:	OUTA (00h)
0000A581:	RET

0000A582:	LD A,12h		; error code for 'Undefined function'
0000A584:	JP 2076h		; Generate error message, error code in 'A'

0000A587:	JP (HL)

; SNFAC0
0000A588:	NOP
0000A589:	NOP
; SNFAC1
0000A58A:	NOP
0000A58B:	NOP
; SNFAC2
0000A58C:	NOP
0000A58D:	NOP
; SNFAC3
0000A58E:	NOP
0000A58F:	NOP
; SNFAC4
0000A590:	NOP
0000A591:	NOP
; SNFAC5
0000A592:	NOP
0000A593:	NOP

; SINSGN
0000A594:	NOP

; SEED
0000A595:	SUB E
0000A596:	LD B,C

0000A597:	NOP
0000A598:	NOP
0000A599:	NOP
0000A59A:	NOP
0000A59B:	RST 38h
		
; DGBF00
0000A59C:	JR NC,+30h
0000A59E:	JR NC,+34h
0000A5A0:	JR NC,+00h
0000A5A2:	JR NC,-01h
; DGBF08
0000A5A4:	JR NC,+30h
0000A5A6:	JR NZ,+30h
0000A5A8:	JR NC,+30h
0000A5AA:	LD SP,0036h
0000A5AD:	JR NC,+30h
0000A5AF:	JR NC,+30h
0000A5B1:	JR NC,+30h
0000A5B3:	JR NC,+30h
; DGBF25
0000A5B5:	JR NC,+30h
0000A5B7:	JR NC,+30h
0000A5B9:	JR NC,+30h
0000A5BB:	JR NC,+30h
; like DGBF25, for double precision
0000A5BD:	JR NC,+30h
0000A5BF:	JR NC,+30h
0000A5C1:	JR NC,+30h
0000A5C3:	JR NC,+30h
0000A5C5:	JR NC,+30h
0000A5C7:	JR NC,+30h
0000A5C9:	JR NC,+30h
0000A5CB:	JR NC,+30h
0000A5CD:	NOP
0000A5CE:	RRCA

; HLBUF
0000A5CF:	ADD HL,SP
0000A5D0:	AND (HL)
; SIGN
0000A5D1:	NOP
; SPBUF
0000A5D2:	CALL PO,E2FDh
0000A5D5:	NOP
; EXPSGN
0000A5D7:	DEC B
0000A5D8:	LD BC,0000h

; PRCSON  (data type)
0000A5DB:	LD (BC),A
; ZFAC1
0000A5DC:	ADD E
0000A5DD:	LD B,B
0000A5DE:	NOP
0000A5DF:	NOP
0000A5E0:	NOP
0000A5E1:	NOP
0000A5E2:	NOP
0000A5E3:	NOP

; ZFAC1
0000A5E4:	NOP
0000A5E5:	NOP
0000A5E6:	NOP
0000A5E7:	NOP
0000A5E8:	NOP
0000A5E9:	NOP
0000A5EA:	NOP
0000A5EB:	NOP
0000A5EC:	NOP
0000A5ED:	NOP
0000A5EE:	NOP
0000A5EF:	NOP
0000A5F0:	NOP
0000A5F1:	NOP
0000A5F2:	NOP
0000A5F3:	NOP
; HLBUF2
0000A5F4:	NOP
0000A5F5:	CP 00h
; DGITCO
0000A5F7:	NOP
; DGITFG
0000A5F8:	NOP
; EXPFLG
0000A5F9:	NOP
	; PRODFL+1 ?
0000A5FA:	NOP

0000A5FB:	DEC B
0000A5FC:	DEC B
0000A5FD:	DEC B
0000A5FE:	DEC B
0000A5FF:	DEC B
0000A600:	DEC B
0000A601:	DEC B
0000A602:	DEC B
0000A603:	DEC B
0000A604:	DEC B
0000A605:	DEC B
0000A606:	DEC B
0000A607:	DEC B
0000A608:	DEC B
0000A609:	DEC B
0000A60A:	DEC B
0000A60B:	DEC B
0000A60C:	DEC B
0000A60D:	DEC B
0000A60E:	DEC B
0000A60F:	DEC B
0000A610:	DEC B
0000A611:	DEC B
0000A612:	DEC B
0000A613:	DEC B
0000A614:	DEC B
; table for USR
0000A615:	NOP
0000A616:	CALL Z,CC05h
0000A619:	LD A,(BC)
0000A61A:	CALL Z,A582h		; ERROR: 'Undefined function'
0000A61D:	ADD D
0000A61E:	AND L
0000A61F:	ADD D
0000A620:	AND L
0000A621:	ADD D
0000A622:	AND L
0000A623:	ADD D
0000A624:	AND L
0000A625:	ADD D
0000A626:	AND L
0000A627:	ADD D
0000A628:	AND L
0000A629:	SUB (HL)		; VARST
0000A62A:	XOR D
; STRST
0000A62B:	SBC L
0000A62C:	XOR D
; VARED
0000A62D:	ADD L
0000A62E:	XOR (HL)

0000A62F:	NOP
0000A630:	CP 00h

0000A632:	RST 38h
; MEMMAX
0000A633:	NOP
0000A634:	RST 38h
; TEXTST,  address of BASIC  program
0000A635:	XOR B
0000A636:	XOR B
; IMDBUF - Immediate command buffer
0000A637:	INC C
0000A638:	DEC C
0000A639:	JR NZ,+20h
0000A63B:	ADD D
0000A63C:	ADD D
0000A63D:	ADD D
0000A63E:	ADD D
0000A63F:	ADD D
0000A640:	ADD D
0000A641:	ADD D
0000A642:	ADD D
0000A643:	ADD D
0000A644:	ADD D
0000A645:	ADD D
0000A646:	ADD D
0000A647:	ADD D
0000A648:	ADD D
0000A649:	ADD D
0000A64A:	ADD D
0000A64B:	ADD D
0000A64C:	ADD D
0000A64D:	ADD D
0000A64E:	ADD D
0000A64F:	ADD D
0000A650:	ADD D
0000A651:	ADD D
0000A652:	ADD D
0000A653:	ADD D
0000A654:	ADD D
0000A655:	ADD D
0000A656:	ADD D
0000A657:	ADD D
0000A658:	ADD D
0000A659:	ADD D
0000A65A:	ADD D
0000A65B:	ADD D
0000A65C:	ADD D
0000A65D:	ADD D
0000A65E:	ADD D
0000A65F:	JR NZ,+20h
0000A661:	DEC C
0000A662:	DEC C
0000A663:	JR NZ,+20h
0000A665:	JR NZ,+20h
0000A667:	JR NZ,+20h
0000A669:	LD D,E
0000A66A:	LD C,B
0000A66B:	LD B,C
0000A66C:	LD D,D
0000A66D:	LD D,B
0000A66E:	DEC L
0000A66F:	LD C,B
0000A670:	LD (HL),L
0000A671:	LD B,D
0000A672:	LD B,C
0000A673:	LD D,E
0000A674:	LD C,C
0000A675:	LD B,E
0000A676:	JR NZ,+43h
0000A678:	LD E,D
0000A679:	DEC L
0000A67A:	JR C,+46h
0000A67C:	LD B,D
0000A67D:	JR NC,+31h
0000A67F:	JR NZ,+56h
0000A681:	LD SP,302Eh
0000A684:	DEC C
0000A685:	DEC C
0000A686:	JR NZ,+20h
0000A688:	JR NZ,+43h
0000A68A:	LD L,A
0000A68B:	LD (HL),B
0000A68C:	LD A,C
0000A68D:	LD (HL),D
0000A68E:	LD L,C
0000A68F:	LD H,A
0000A690:	LD L,B
0000A691:	LD (HL),H
0000A692:	JR NZ,+28h
0000A694:	LD B,E
0000A695:	ADD HL,HL
0000A696:	JR NZ,+31h
0000A698:	ADD HL,SP
0000A699:	JR C,+32h
0000A69B:	JR NZ,+62h
0000A69D:	LD A,C
0000A69E:	JR NZ,+53h
0000A6A0:	LD C,B
0000A6A1:	LD B,C
0000A6A2:	LD D,D
0000A6A3:	LD D,B
0000A6A4:	CPL
0000A6A5:	LD C,B
0000A6A6:	LD (HL),L
0000A6A7:	LD H,H
0000A6A8:	LD (HL),E
0000A6A9:	LD L,A
0000A6AA:	LD L,(HL)
0000A6AB:	DEC C
0000A6AC:	DEC C
0000A6AD:	DEC C
0000A6AE:	JR NZ,+20h
0000A6B0:	ADD D
0000A6B1:	ADD D
0000A6B2:	ADD D
0000A6B3:	ADD D
0000A6B4:	ADD D
0000A6B5:	ADD D
0000A6B6:	ADD D
0000A6B7:	ADD D
0000A6B8:	ADD D
0000A6B9:	ADD D
0000A6BA:	ADD D
0000A6BB:	ADD D
0000A6BC:	ADD D
0000A6BD:	ADD D
0000A6BE:	ADD D
0000A6BF:	ADD D
0000A6C0:	ADD D
0000A6C1:	ADD D
0000A6C2:	ADD D
0000A6C3:	ADD D
0000A6C4:	ADD D
0000A6C5:	ADD D
0000A6C6:	ADD D
0000A6C7:	ADD D
0000A6C8:	ADD D
0000A6C9:	ADD D
0000A6CA:	ADD D
0000A6CB:	ADD D
0000A6CC:	ADD D
0000A6CD:	ADD D
0000A6CE:	ADD D
0000A6CF:	ADD D
0000A6D0:	ADD D
0000A6D1:	ADD D
0000A6D2:	ADD D
0000A6D3:	ADD D
0000A6D4:	JR NZ,+20h
0000A6D6:	DEC C
0000A6D7:	JR NZ,+32h
0000A6D9:	JR NC,+39h
0000A6DB:	JR C,+39h
0000A6DD:	JR NZ,+42h
0000A6DF:	LD A,C
0000A6E0:	LD (HL),H
0000A6E1:	LD H,L
0000A6E2:	LD (HL),E
0000A6E3:	JR NZ,+66h
0000A6E5:	LD (HL),D
0000A6E6:	LD H,L
0000A6E7:	LD H,L
0000A6E8:	DEC C
0000A6E9:	DEC C
0000A6EA:	NOP
0000A6EB:	LD H,L
0000A6EC:	DEC C
0000A6ED:	DEC C
0000A6EE:	LD (FFF7h),HL
0000A6F1:	AND B
0000A6F2:	JR Z,+01h
0000A6F4:	ADD HL,HL
0000A6F5:	NOP
0000A6F6:	NOP
0000A6F7:	NOP
0000A6F8:	NOP
0000A6F9:	NOP
0000A6FA:	NOP
0000A6FB:	NOP
0000A6FC:	NOP
0000A6FD:	NOP
0000A6FE:	NOP
0000A6FF:	NOP
0000A700:	NOP
0000A701:	NOP
0000A702:	NOP
0000A703:	NOP
0000A704:	NOP
0000A705:	NOP
0000A706:	NOP
0000A707:	NOP
0000A708:	NOP
0000A709:	NOP
0000A70A:	NOP
0000A70B:	NOP
0000A70C:	NOP
0000A70D:	NOP
0000A70E:	NOP
0000A70F:	NOP
0000A710:	NOP
0000A711:	NOP
0000A712:	NOP
0000A713:	NOP
0000A714:	NOP
0000A715:	NOP
0000A716:	NOP
0000A717:	NOP
0000A718:	NOP
0000A719:	NOP
0000A71A:	NOP
0000A71B:	NOP
0000A71C:	NOP
0000A71D:	NOP
0000A71E:	NOP
0000A71F:	NOP
0000A720:	NOP
0000A721:	NOP
0000A722:	NOP
0000A723:	NOP
0000A724:	NOP
0000A725:	NOP
0000A726:	NOP
0000A727:	NOP
0000A728:	NOP
0000A729:	NOP
0000A72A:	NOP
0000A72B:	NOP
0000A72C:	NOP
0000A72D:	NOP
0000A72E:	NOP
0000A72F:	NOP
0000A730:	NOP
0000A731:	NOP
0000A732:	NOP
0000A733:	NOP
0000A734:	NOP
0000A735:	NOP
0000A736:	NOP
0000A737:	NOP
0000A738:	NOP
0000A739:	NOP
0000A73A:	NOP
0000A73B:	NOP
0000A73C:	NOP
0000A73D:	NOP
0000A73E:	NOP

; KEYBM1 (aka KEYBUF)
0000A73F:	LD BC,4142h
0000A742:	LD D,E
0000A743:	LD C,C
0000A744:	LD B,E
0000A745:	JR NZ,+43h
0000A747:	LD E,D
0000A748:	JR C,+46h
0000A74A:	LD B,D
0000A74B:	JR NC,+31h
0000A74D:	LD D,E
0000A74E:	LD A,C
0000A74F:	LD (HL),E
0000A750:	JR NZ,+00h
0000A752:	XOR B
0000A753:	NOP
0000A754:	NOP
0000A755:	NOP
0000A756:	NOP
0000A757:	ADD D
0000A758:	POP BC
0000A759:	DAA
0000A75A:	RLA
0000A75B:	LD E,B
0000A75C:	NOP
0000A75D:	LD (BC),A
0000A75E:	NOP
0000A75F:	RST 38h
0000A760:	RST 38h
0000A761:	RST 38h
0000A762:	RST 38h
0000A763:	RST 38h
0000A764:	RST 38h
0000A765:	RST 38h
0000A766:	RST 38h
0000A767:	RST 38h
0000A768:	RST 38h
0000A769:	RST 38h
0000A76A:	RST 38h
0000A76B:	RST 38h
0000A76C:	RST 38h
0000A76D:	RST 38h
0000A76E:	RST 38h
0000A76F:	RST 38h
0000A770:	RST 38h
0000A771:	RST 38h
0000A772:	RST 38h
0000A773:	RST 38h
0000A774:	RST 38h
0000A775:	RST 38h
0000A776:	RST 38h
0000A777:	RST 38h
0000A778:	RST 38h
0000A779:	RST 38h
0000A77A:	RST 38h
0000A77B:	RST 38h
0000A77C:	RST 38h
0000A77D:	RST 38h
0000A77E:	RST 38h
0000A77F:	RST 38h
0000A780:	RST 38h
0000A781:	RST 38h
0000A782:	RST 38h
0000A783:	RST 38h
0000A784:	RST 38h
0000A785:	RST 38h
0000A786:	RST 38h
0000A787:	RST 38h
0000A788:	RST 38h
0000A789:	RST 38h
0000A78A:	RST 38h
0000A78B:	RST 38h
0000A78C:	RST 38h
0000A78D:	RST 38h
0000A78E:	RST 38h
0000A78F:	RST 38h
0000A790:	RST 38h
0000A791:	RST 38h
0000A792:	RST 38h
0000A793:	RST 38h
0000A794:	RST 38h
0000A795:	RST 38h
0000A796:	RST 38h
0000A797:	RST 38h
0000A798:	RST 38h
0000A799:	RST 38h
0000A79A:	RST 38h
0000A79B:	RST 38h
0000A79C:	RST 38h
0000A79D:	RST 38h
0000A79E:	RST 38h
0000A79F:	RST 38h
0000A7A0:	RST 38h
0000A7A1:	RST 38h
0000A7A2:	RST 38h
0000A7A3:	RST 38h
0000A7A4:	RST 38h
0000A7A5:	RST 38h
0000A7A6:	RST 38h
0000A7A7:	RST 38h
0000A7A8:	RST 38h
0000A7A9:	RST 38h
0000A7AA:	RST 38h
0000A7AB:	RST 38h
0000A7AC:	RST 38h
0000A7AD:	RST 38h
0000A7AE:	RST 38h
0000A7AF:	RST 38h
0000A7B0:	RST 38h
0000A7B1:	RST 38h
0000A7B2:	RST 38h
0000A7B3:	RST 38h
0000A7B4:	RST 38h
0000A7B5:	RST 38h
0000A7B6:	RST 38h
0000A7B7:	RST 38h
0000A7B8:	RST 38h
0000A7B9:	RST 38h
0000A7BA:	RST 38h
0000A7BB:	RST 38h
0000A7BC:	RST 38h
0000A7BD:	RST 38h
0000A7BE:	RST 38h
0000A7BF:	RST 38h
0000A7C0:	RST 38h
0000A7C1:	RST 38h
0000A7C2:	RST 38h
0000A7C3:	RST 38h
0000A7C4:	RST 38h
0000A7C5:	RST 38h
0000A7C6:	RST 38h
0000A7C7:	RST 38h
0000A7C8:	RST 38h
0000A7C9:	RST 38h
0000A7CA:	RST 38h
0000A7CB:	RST 38h
0000A7CC:	RST 38h
0000A7CD:	RST 38h
0000A7CE:	RST 38h
0000A7CF:	RST 38h
0000A7D0:	RST 38h
0000A7D1:	RST 38h
0000A7D2:	RST 38h
0000A7D3:	RST 38h
0000A7D4:	RST 38h
0000A7D5:	RST 38h
0000A7D6:	RST 38h
0000A7D7:	RST 38h
0000A7D8:	RST 38h
0000A7D9:	RST 38h
0000A7DA:	RST 38h
0000A7DB:	RST 38h
0000A7DC:	RST 38h
0000A7DD:	RST 38h
0000A7DE:	RST 38h
0000A7DF:	RST 38h
0000A7E0:	RST 38h
0000A7E1:	RST 38h
0000A7E2:	RST 38h
0000A7E3:	RST 38h
0000A7E4:	RST 38h
0000A7E5:	RST 38h
0000A7E6:	RST 38h
0000A7E7:	RST 38h
0000A7E8:	RST 38h
0000A7E9:	RST 38h
0000A7EA:	RST 38h
0000A7EB:	RST 38h
0000A7EC:	RST 38h
0000A7ED:	RST 38h
0000A7EE:	RST 38h
0000A7EF:	RST 38h
0000A7F0:	RST 38h
0000A7F1:	RST 38h
0000A7F2:	RST 38h
0000A7F3:	RST 38h
0000A7F4:	RST 38h
0000A7F5:	RST 38h
0000A7F6:	RST 38h
0000A7F7:	RST 38h
0000A7F8:	RST 38h
0000A7F9:	RST 38h
0000A7FA:	RST 38h
0000A7FB:	RST 38h
0000A7FC:	RST 38h
0000A7FD:	RST 38h
0000A7FE:	RST 38h
0000A7FF:	RST 38h
