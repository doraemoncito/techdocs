
# Microsoft 8080/Z80 BASIC found
#  Extended BASIC detected
#  Double precision maths detected
#  Microsoft signature found


BASTXT 	= $E658   ; BASIC program start ptr (aka TXTTAB)

SYNCHR 	= $0008   ; Check syntax, 1 byte follows to be compared

SEED 	= $E612   ; Seed for RND numbers
LSTRND2 	= $E633   ; Last RND number
BUFFER 	= $E879   ; Start of input buffer
TMSTPT 	= $EACE   ; Temporary string pool pointer
TMPSTR 	= $EAEE   ; Temporary string
NXTOPR 	= $EB10   ; Address ptr to next operator
PROGND 	= $EB16   ; BASIC program end ptr (aka VARTAB)
VAREND 	= $EB1D   ; End of variables
ARREND 	= $EB1F   ; End of arrays (lowest free mem)
SGNRES 	= $EC45   ; Sign of result
TEMPST 	= $EAD0   ; (word), temporary descriptors
TEMPPT 	= $EACE   ; (word), start of free area of temporary descriptor
PRMLEN 	= $EB3F   ; (word), number of bytes of obj table
NOFUNS 	= $EC10   ; (byte), 0 if no function active
PRMLN2 	= $EBA7   ; (word), size of parameter block
FUNACT 	= $EC13   ; (word), active functions counter
PRMSTK 	= $EB3D   ; (word), previous block definition on stack
SUBFLG 	= $EAFB   ; (byte), flag for USR fn. array
TEMP 	= $EAFD   ; (word) temp. reservation for st.code
VALTYP 	= $EABD   ; (word) type indicator
PRITAB 	= $008A   ; Arithmetic precedence table
TEMP2 	= $EB10   ; (word) temp. storage used by EVAL
TEMP3 	= $EAF3   ; (word) used for garbage collection or by USR function
SAVTXT 	= $EB05   ; (word), prg pointer for resume
TEMPST 	= $EAD0   ; (word), temporary descriptors
TEMPPT 	= $EACE   ; (word), start of free area of temporary descriptor
CURLIN 	= $E656   ; (word), line number being interpreted
OLDLIN 	= $EB12   ; (word), old line number set up ^C ...
SAVTXT 	= $EB05   ; (word), prg pointer for resume
OLDTXT 	= $EB14   ; (word), prg pointer for CONT


FPREG 	= $EC41   ; Floating Point Register (FACCU, FACLOW on Ext. BASIC)
LAST_FPREG 	= $EC43   ; Last byte in Single Precision FP Register (+sign bit)
FPEXP 	= $EC44   ; Floating Point Exponent
DBL_FPREG 	= $EC41   ; Double Precision Floating Point Register (aka FACLOW)
DBL_LAST_FPREG 	= $EC50   ; Last byte in Double Precision FP register (+sign bit)

CPDEHL 	= $0020   ; compare DE and HL (aka DCOMPR)
FNDNUM 	= $18A2   ; Load 'A' with the next number in BASIC program
GETINT 	= $18A3   ; Get a number to 'A'
DEPINT 	= $1899   ; Get integer variable to DE, error if negative
FPSINT 	= $1895   ; Get subscript
POSINT 	= $1896   ; Get positive integer
DIM 	= $5AC5   ; DIM command
CHKSTK 	= $4EC1   ; Check for C levels of stack
OPRND 	= $1350   ; Get next expression value
LFRGNM 	= $57CF   ; number in program listing and check for ending ')'
HLPASS 	= $2235   ; Get back from function passing an INT value HL
MIDNUM 	= $57D2   ; Get number in program listing
INT_RESULT_A 	= $20B6   ; Get back from function, result in A (signed)

GETYPR 	= $0030   ; Test number FAC type (Precision mode, etc..)
_TSTSGN 	= $20BD   ; Test sign in number
INVSGN2 	= $20A4   ; Invert number sign
INVSGN 	= $20AB   ; Invert number sign
NEGAFT 	= $2E00   ; Negate number
STAKFP 	= $20CD   ; Put FP value on stack
LOG 	= $1F10   ; LOG
EXP 	= $2E6B   ; EXP
TAN 	= $302C   ; TAN
ABS 	= $20A0   ; ATN
DBL_ABS 	= $23F7   ; ABS (double precision BASIC variant)
RND 	= $2F1A   ; RND
SUBCDE 	= $1DE6   ; Subtract BCDE from FP reg
FPADD 	= $1DE9   ; Add BCDE to FP reg
SCALE 	= $1EBB   ; Scale number in BCDE for A exponent (bits)
PLUCDE 	= $1E9B   ; Add number pointed by HL to CDE
COMPL 	= $1EA7   ; Convert a negative number to positive
PHLTFP 	= $20DA   ; Number at HL to BCDE
FPBCDE 	= $20DD   ; Move BCDE to FPREG
MLSP10 	= $206C   ; Multiply number in FPREG by 10
FPMULT 	= $1F53   ; Multiply BCDE to FP reg
DIV 	= $1FB5   ; Divide FP by number on stack
DCBCDE 	= $227F   ; Decrement FP value in BCDE
BCDEFP 	= $20E8   ; Load FP reg to BCDE
LOADFP 	= $20EB   ; Load FP value pointed by HL to BCDE
CMPNUM 	= $2134   ; Compare FP reg to BCDE
FPINT 	= $225B   ; Floating Point to Integer
FLGREL 	= $208D   ; CY and A to FP, & normalise
INT 	= $229F   ; INT
DBL_SUB 	= $241D   ; Double precision SUB (formerly SUBCDE)
DBL_ADD 	= $2424   ; Double precision ADD (formerly FPADD)
FIX 	= $2286   ; Double Precision to Integer conversion
INT_MUL 	= $235A   ; Integer MULTIPLY
MLDEBC 	= $2312   ; Multiply DE by BC
_ASCTFP 	= $26D8   ; ASCII to FP number
H_ASCTFP 	= $26D3   ; ASCII to FP number (also '&' prefixes)
STR 	= $54CB   ; STR BASIC function entry
SAVSTR 	= $54D4   ; Save string in string area
MKTMST 	= $54EE   ; Make temporary string
CRTMST 	= $54F1   ; Create temporary string entry
SSTSA 	= $56B8   ; Move string on stack to string area
TOSTRA 	= $56C0   ; Move string in BC, (len in L) to string area
TSALP 	= $56C1   ; TOSTRA loop
MAKINT 	= $18A6   ; Convert tmp string to int in A register
CONCAT 	= $5680   ; String concatenation
TESTR 	= $5572   ; Test if enough room for string
TOPOOL 	= $571E   ; Save in string pool
TSTOPL 	= $552C   ; Temporary string to pool
EVAL 	= $11D4   ; (a.k.a. GETNUM, evaluate expression (GETNUM)
EVAL1 	= $11D7   ; Save precedence and eval until precedence break
EVAL3 	= $11EC   ; Evaluate expression until precedence break
CRTST 	= $54FC   ; Create String
QTSTR 	= $54FD   ; Create quote terminated String
DTSTR 	= $5500   ; Create String, termination char in D
GETSTR 	= $56C9   ; Get string pointed by FPREG 'Type Error' if it is not
GSTRCU 	= $56CC   ; Get string pointed by FPREG
GSTRHL 	= $56CF   ; Get string pointed by HL
GSTRDE 	= $56D0   ; Get string pointed by DE
TSTSTR 	= $2256   ; Test a string, 'Type Error' if it is not

LNUM_RANGE 	= $05E9   ; Read numeric range function parameters
LNUM_PARM 	= $0B0B   ; Read numeric function parameter
_CHRGTB 	= $0A0D   ; Pick next char from program
UCASE_HL 	= $1414   ; Get char from (HL) and make upper case
UCASE 	= $1415   ; Make char in 'A' upper case
RINPUT 	= $5FC8   ; Line input

DATSNR 	= $038D   ; 'SN err' entry for Input STMT
SNERR 	= $0393   ; entry for '?SN ERROR'
ULERR 	= $0C3C   ; entry for '?UL ERROR'



# JP table for statements = $69FE


# TOKEN table position = $6B8A, word list in 'extended BASIC' mode.
#	Token range: 89

# -- STATEMENTS --

#	USING		[231]	- $6642
#	TAB(		[222]	- $0F1B
#	SPC(		[226]	- same as TAB(
#	= assignment		[241]	
#	+ operand		[243]	- $135E
#	- operand		[244]	- $13F8
#	" string		[34]	- $54FD
#	NOT		[227]	- $1512
#	& specifier		[38]	- $1423
#	ERR		[229]	- $1394
#	ERL		[228]	- $13A2
#	VARPTR		[234]	- $13B0
#	USR		[224]	- $158F
#	INSTR		[232]	- $57D7
#	TOKEN_?		[239]	- $5AA3
#	TOKEN_?		[230]	- $5722
#	TOKEN_?		[133]	- $4BAC
#	TOKEN_?		[225]	- $1600

#	ELSE		[159]

#	AUTO      	[168]	- $0DD5
#	AND      	[248]
#	ABS      	[6]	- $20A0
#	ATN      	[14]	- $EEC8
#	ASC      	[21]	- $5704
#	ATTR$      	[235]
#	BSAVE      	[213]	- $EEC2
#	BLOAD      	[212]	- $EEBF
#	BEEP      	[215]	- $3EB4
#	CONSOLE      	[157]	- $7071
#	COPY      	[205]	- $6EA6		(**)
#	CLOSE      	[192]	- $4B04
#	CONT      	[153]	- $5140
#	CLEAR      	[146]	- $522E
#	CSRLIN      	[84]	- $6B8A (*)
#	CINT      	[28]	- $21A0
#	CSNG      	[29]	- $2214
#	CDBL      	[30]	- $223E
#	CVI      	[32]	- $4ABA
#	CVS      	[33]	- $4ABD
#	CVD      	[34]	- $4AC0
#	COS      	[12]	- $2F8B
#	CHR$      	[22]	- $5714
#	CALL      	[177]	- $EE89
#	COMMON      	[182]	- $EEC5
#	CHAIN      	[183]	- $EE7A
#	COM      	[90]	- $6C89 (*)
#	CIRCLE      	[204]	- $6ECE (**)
#	COLOR      	[203]	- $6EC6 (**)
#	CLS      	[206]	- $71B5
#	CMD      	[100]	- $6D97 (*)
#	DELETE      	[167]	- $1B40
#	DATA      	[132]	- $0C77
#	DIM      	[134]	- $5AC5
#	DEFSTR      	[170]	- $0AC4
#	DEFINT      	[171]	- $0AC7
#	DEFSNG      	[172]	- $0ACA
#	DEFDBL      	[173]	- $0ACD
#	DSKO$      	[186]	- $EE98
#	DEF      	[151]	- $15D7
#	DSKI$      	[236]
#	DSKF      	[80]	- $EEB3
#	DATE$      	[89]	- $6C6F (*)
#	ELSE      	[159]	- $0C79
#	END      	[129]	- $50E5
#	ERASE      	[163]	- $519C (*)
#	EDIT      	[164]	- $657B
#	ERROR      	[165]	- $0DCA
#	ERL      	[228]
#	ERR      	[229]
#	EXP      	[11]	- $2E6E
#	EOF      	[35]	- $4C51
#	EQV      	[251]
#	FOR      	[130]	- $08BF
#	FIELD      	[188]	- $4A5C
#	FILES      	[195]	- $EE9B
#	FN      	[225]
#	FRE      	[15]	- $58E4
#	FIX      	[31]	- $2286
#	FPOS      	[38]	- $4C62
#	GOTO      	[137]	- $0BF9
#	GO TO      	[137]	- $0BF9
#	GOSUB      	[141]	- $0BBF
#	GET      	[189]	- $7198
#	HEX$      	[26]	- $54C6
#	HELP      	[217]	- $72AB
#	INPUT      	[133]	- $102D
#	ISET      	[96]	- $6D1C (*)
#	IEEE      	[97]	- $6D40 (*)
#	IRESET      	[98]	- $6D4F (*)
#	IF      	[139]	- $0E05
#	INSTR      	[232]
#	INT      	[5]	- $2295
#	INP      	[16]	- $17E5
#	IMP      	[252]
#	INKEY$      	[239]
#	KEY      	[91]	- $6C9B (*)
#	KILL      	[197]	- $EE92
#	KANJI      	[219]
#	LOCATE      	[214]	- $714E
#	LPRINT      	[155]	- $0E4C
#	LLIST      	[156]	- $18D4
#	LPOS      	[27]	- $1581
#	LET      	[136]	- $0C9C
#	LINE      	[174]	- $0FAA
#	LOAD      	[193]	- $4854
#	LSET      	[198]	- $49AB
#	LIST      	[147]	- $18D9
#	LFILES      	[201]	- $EE9E
#	LOG      	[10]	- $1F10
#	LOC      	[36]	- $4C2F
#	LEN      	[18]	- $56F8
#	LEFT$      	[1]	- $575A
#	LOF      	[37]	- $4C40
#	MOTOR      	[87]	- $6C0E (*)
#	MERGE      	[194]	- $4855
#	MOD      	[253]
#	MKI$      	[39]	- $4AA1
#	MKS$      	[40]	- $4AA4
#	MKD$      	[41]	- $4AA7
#	MID$      	[3]	- $5793
#	MON      	[202]	- $E826
#	MAP      	[85]	- $6BA0 (*)
#	NEXT      	[131]	- $52BD
#	NAME      	[196]	- $EE8F
#	NEW      	[148]	- $77DD
#	NOT      	[227]
#	OPEN      	[187]	- $4798
#	OUT      	[154]	- $17FA
#	ON      	[149]	- $0D01
#	OR      	[249]
#	OCT$      	[25]	- $54C1
#	OPTION      	[184]	- $1C89
#	OFF      	[238]
#	PRINT      	[145]	- $0E54
#	PUT      	[190]	- $71A6
#	POKE      	[152]	- $1B84
#	POLL      	[95]	- $6CDC (*)
#	POS      	[17]	- $1586
#	PEEK      	[23]	- $1B7A
#	PSET      	[207]	- $6E9A  (**)
#	PRESET      	[208]	- $6E96  (**)
#	POINT      	[83]	- $EEB6
#	PAINT      	[209]	- $6EDA  (**)
#	PEN      	[88]	- $6C4A (*)
#	RETURN      	[142]	- $0C41
#	READ      	[135]	- $10F9
#	RUN      	[138]	- $0B7C
#	RESTORE      	[140]	- $50A5
#	RBYTE      	[94]	- $6CCF (*)
#	REM      	[143]	- $0C79
#	RESUME      	[166]	- $0D8D
#	RSET      	[199]	- $49AA
#	RIGHT$      	[2]	- $578A
#	RND      	[8]	- $2F1A
#	RENUM      	[169]	- $6F0E
#	RANDOMIZE      	[185]	- $1CD1
#	ROLL      	[216]	- $6ECA (**)
#	SCREEN      	[211]	- $6EDE (**)
#	SEARCH      	[86]	- $6BAF (*)
#	STOP      	[144]	- $50CA
#	SWAP      	[162]	- $515E
#	SET      	[191]	- $EE8C
#	SRQ      	[237]
#	STATUS      	[99]	- $6D68
#	SAVE      	[200]	- $48A3
#	SPC(      	[226]
#	STEP      	[223]
#	SGN      	[4]	- $20B3
#	SQR      	[7]	- $2E05
#	SIN      	[9]	- $2F91
#	STR$      	[19]	- $54CB
#	STRING$      	[230]
#	SPACE$      	[24]	- $5741
#	THEN      	[221]
#	TRON      	[160]	- $5158
#	TROFF      	[161]	- $5159
#	TAB(      	[222]
#	TO      	[220]
#	TAN      	[13]	- $302C
#	TERM      	[210]	- $7367
#	TIME$      	[92]	- $6CA4 (*)
#	USING      	[231]
#	USR      	[224]
#	VAL      	[20]	- $57B4
#	VIEW      	[81]	- $EEB0
#	VARPTR      	[234]
#	WIDTH      	[158]	- $181A
#	WINDOW      	[82]	- $0000
#	WAIT      	[150]	- $1800
#	WHILE      	[175]	- $EE80
#	WEND      	[176]	- $EE83
#	WRITE      	[181]	- $EE86
#	WBYTE      	[93]	- $6CCE (*)
#	XOR      	[250]
#	Z
#	[+      	[243]
#	[-      	[244]
#	[*      	[245]
#	[/      	[246]
#	[^      	[247]
#	[\      	[254]
#	['      	[233]
#	[>      	[240]
#	[=      	[241]
#	[<      	[242]
