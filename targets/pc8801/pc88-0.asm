
; PC8801 N88-BASIC
; ROM0 bank, 8K

; this ROM includes graphics commands, etc.

00006000:	LD HL,(EC41h)		; FPREG - Floating Point Register (FACCU, FACLOW on Ext. BASIC)
00006003:	EX DE,HL
00006004:	CALL 56E7h		; BAKTMP - Back to last tmp-str entry
00006007:	PUSH HL
00006008:	JP 7D00h

0000600B:	NOP
0000600C:	NOP

; JUMP TABLE FOR -EXEC_ROM0-

; 0
0000600D:	DEFW 7DFBh	; _PRESET - unplot pixel
; 1
0000600F:	DEFW 7E00h	; _PSET - plot pixel
; 2
00006011:	DEFW 6D29h
; 3
00006013:	DEFW 7C33h
; 4
00006015:	DEFW 7053h	; _COPY
; 5
00006017:	DEFW 7064h
; 6
00006019:	DEFW 7E8Bh	; _LINE
; 7
0000601B:	DEFW 6E25h
; 8
0000601D:	DEFW 6700h
; 9
0000601F:	DEFW 6AC6h
; 10
00006021:	DEFW 7E19h
; 11
00006023:	DEFW 6DC0h	; _CSRLIN
; 12
00006025:	DEFW 6878h	; _COLOR
; 13
00006027:	DEFW EEBCh	; _ROLL
; 14
00006029:	DEFW 79D6h	; _CIRCLE
; 15
0000602B:	DEFW 6CD5h
; 16
0000602D:	DEFW 6C55h
; 17
0000602F:	DEFW 7674h	; _PAINT
; 18
00006031:	DEFW 698Fh	; _SCREEN
; 19
00006033:	DEFW 6CA8h
; 20
00006035:	DEFW 6A94h	; clear graphics page 1
; 21
00006037:	DEFW 6D0Ah	; clear graphics page 2
; 22
00006039:	DEFW 72D0h
; 23
0000603B:	DEFW 72EDh
; 24
0000603D:	DEFW 7324h
; 25
0000603F:	DEFW 742Eh	; _KEY
; 26
00006041:	DEFW 752Ah	; ? _TIME$ ?
; 27
00006043:	DEFW 74EEh	; ? _SEARCH ?
; 28
00006045:	DEFW 75A1h
; 29
00006047:	DEFW 754Fh
; 30
00006049:	DEFW 75DDh		; _RENUM



0000604B:	LD HL,0001h
0000604E:	LD DE,0001h
00006051:	LD A,(E6A6h)
00006054:	OR A
00006055:	RET NZ
00006056:	LD HL,0080h
00006059:	LD DE,0200h
0000605C:	RET

0000605D:	LD (F03Bh),HL
00006060:	PUSH AF
00006061:	XOR A
00006062:	LD (F03Dh),A
00006065:	LD (F03Eh),A
00006068:	LD A,(F035h)
0000606B:	LD H,00h
0000606D:	RLCA
0000606E:	JP C,6074h
00006071:	INC H
00006072:	JR -07h
00006074:	LD A,H
00006075:	LD (F03Fh),A
00006078:	LD HL,306Ah
0000607B:	ADD L
0000607C:	LD L,A
0000607D:	LD A,00h
0000607F:	ADC H
00006080:	LD H,A
00006081:	LD A,(HL)
00006082:	LD (F040h),A
00006085:	LD A,(F03Fh)
00006088:	LD H,A
00006089:	LD A,08h
0000608B:	SUB H
0000608C:	LD H,A
0000608D:	LD A,C
0000608E:	SUB H
0000608F:	LD C,A
00006090:	LD A,B
00006091:	SBC 00h
00006093:	LD B,A
00006094:	JP NC,60B3h
00006097:	LD A,C
00006098:	CPL
00006099:	INC A
0000609A:	LD H,A
0000609B:	LD A,08h
0000609D:	SUB H
0000609E:	LD HL,306Ah
000060A1:	ADD L
000060A2:	LD L,A
000060A3:	LD A,00h
000060A5:	ADC H
000060A6:	LD H,A
000060A7:	LD A,(HL)
000060A8:	CPL
000060A9:	LD C,A
000060AA:	LD A,(F040h)
000060AD:	AND C
000060AE:	LD (F040h),A
000060B1:	JR +23h
000060B3:	LD A,07h
000060B5:	AND C
000060B6:	LD (F03Eh),A
000060B9:	DEC A
000060BA:	LD HL,3072h
000060BD:	ADD L
000060BE:	LD L,A
000060BF:	LD A,00h
000060C1:	ADC H
000060C2:	LD H,A
000060C3:	LD A,(HL)
000060C4:	LD (F041h),A
000060C7:	LD A,B
000060C8:	RRCA
000060C9:	RRCA
000060CA:	RRCA
000060CB:	LD B,A
000060CC:	LD A,C
000060CD:	AND F8h
000060CF:	RRCA
000060D0:	RRCA
000060D1:	RRCA
000060D2:	OR B
000060D3:	LD (F03Dh),A
000060D6:	POP AF
000060D7:	RET NC
000060D8:	ADD A
000060D9:	LD HL,60EAh
000060DC:	ADD L
000060DD:	LD L,A
000060DE:	LD A,00h
000060E0:	ADC H
000060E1:	LD H,A
000060E2:	LD A,(HL)
000060E3:	INC HL
000060E4:	LD H,(HL)
000060E5:	LD L,A
000060E6:	LD (F042h),HL
000060E9:	RET

000060EA:	LD C,A
000060EB:	LD H,D
000060EC:	LD B,H
000060ED:	LD H,D
000060EE:	INC A
000060EF:	LD H,D
000060F0:	DEC A
000060F1:	LD H,D
000060F2:	LD D,L
000060F3:	LD H,D
000060F4:	XOR A
000060F5:	JR +01h
000060F7:	SCF
000060F8:	PUSH AF
000060F9:	LD HL,(F014h)
000060FC:	LD (F018h),HL
000060FF:	LD HL,(F03Bh)
00006102:	LD (F04Ch),HL	; CSAVEA (SAVESP)
00006105:	LD HL,(F089h)
00006108:	LD B,H
00006109:	LD C,L
0000610A:	POP AF
0000610B:	PUSH AF
0000610C:	PUSH BC
0000610D:	LD A,C
0000610E:	LD (F04Bh),A		; Current GVRAM bank to work on
00006111:	PUSH AF
00006112:	CALL C,6183h
00006115:	POP AF
00006116:	CALL NC,611Fh
00006119:	POP BC
0000611A:	INC C
0000611B:	DJNZ -13h
0000611D:	POP AF
0000611E:	RET

0000611F:	LD HL,(F03Bh)
00006122:	EX DE,HL
00006123:	LD HL,(F033h)			; pointer on paint address
00006126:	LD A,(F03Fh)
00006129:	LD B,A
0000612A:	PUSH HL
0000612B:	CALL 616Ch
0000612E:	LD C,L
0000612F:	LD A,(F03Dh)
00006132:	OR A
00006133:	JP Z,6147h
00006136:	LD C,L
00006137:	POP HL
00006138:	INC HL
00006139:	PUSH HL
0000613A:	PUSH AF
0000613B:	CALL 616Ch
0000613E:	LD A,C
0000613F:	OR H
00006140:	LD C,L
00006141:	LD (DE),A
00006142:	INC DE
00006143:	POP AF
00006144:	DEC A
00006145:	JR NZ,-11h
00006147:	LD A,(F03Eh)
0000614A:	OR A
0000614B:	JR Z,+06h
0000614D:	POP HL
0000614E:	INC HL
0000614F:	PUSH HL
00006150:	CALL 616Ch
00006153:	LD A,C
00006154:	OR H
00006155:	LD (DE),A
00006156:	INC DE
00006157:	LD A,(F03Eh)
0000615A:	LD B,A
0000615B:	LD A,(F03Fh)
0000615E:	SUB B
0000615F:	JP NC,6165h
00006162:	LD A,L
00006163:	LD (DE),A
00006164:	INC DE
00006165:	POP HL
00006166:	EX DE,HL
00006167:	LD (F03Bh),HL
0000616A:	EX DE,HL
0000616B:	RET

0000616C:	PUSH BC
0000616D:	LD A,(F04Bh)		; Current GVRAM bank to work on
00006170:	LD C,A
00006171:	DI
00006172:	OUT (C),A
00006174:	LD L,(HL)
00006175:	OUTA (5Fh)			; GVRAM independent access mode bank selection - Main RAM
00006177:	EI
00006178:	LD H,00h
0000617A:	LD A,B
0000617B:	OR A
0000617C:	JR Z,+03h
0000617E:	ADD HL,HL
0000617F:	DJNZ -03h
00006181:	POP BC
00006182:	RET

00006183:	LD A,(F013h)
00006186:	OR A
00006187:	CALL NZ,6211h
0000618A:	LD HL,(F033h)			; pointer on paint address
0000618D:	EX DE,HL
0000618E:	LD HL,(F03Bh)
00006191:	LD A,(F03Fh)
00006194:	LD B,A
00006195:	LD A,08h
00006197:	SUB B
00006198:	PUSH HL
00006199:	LD B,A
0000619A:	CALL 61F0h
0000619D:	LD C,L
0000619E:	PUSH DE
0000619F:	LD A,(F040h)
000061A2:	CALL 622Eh
000061A5:	POP DE
000061A6:	INC DE
000061A7:	POP HL
000061A8:	INC HL
000061A9:	LD A,(F03Dh)
000061AC:	OR A
000061AD:	JP Z,61C7h
000061B0:	PUSH AF
000061B1:	PUSH HL
000061B2:	CALL 61F0h
000061B5:	LD A,C
000061B6:	OR H
000061B7:	LD H,A
000061B8:	LD C,L
000061B9:	LD A,FFh
000061BB:	PUSH DE
000061BC:	CALL 622Eh
000061BF:	POP DE
000061C0:	INC DE
000061C1:	POP HL
000061C2:	INC HL
000061C3:	POP AF
000061C4:	DEC A
000061C5:	JR NZ,-17h
000061C7:	LD A,(F03Eh)
000061CA:	OR A
000061CB:	JP Z,61ECh
000061CE:	PUSH BC
000061CF:	LD B,A
000061D0:	LD A,(F03Fh)
000061D3:	SUB B
000061D4:	POP BC
000061D5:	JP NC,61E1h
000061D8:	PUSH HL
000061D9:	CALL 61F0h
000061DC:	LD A,C
000061DD:	OR H
000061DE:	LD C,A
000061DF:	POP HL
000061E0:	INC HL
000061E1:	PUSH HL
000061E2:	LD H,C
000061E3:	LD A,(F041h)
000061E6:	PUSH DE
000061E7:	CALL 622Eh
000061EA:	POP DE
000061EB:	POP HL
000061EC:	LD (F03Bh),HL
000061EF:	RET
000061F0:	PUSH BC
000061F1:	LD L,(HL)
000061F2:	LD A,(F013h)
000061F5:	OR A
000061F6:	JR Z,+0Eh
000061F8:	LD A,(F016h)
000061FB:	AND L
000061FC:	LD H,A
000061FD:	LD A,L
000061FE:	CPL
000061FF:	LD L,A
00006200:	LD A,(F017h)
00006203:	AND L
00006204:	OR H
00006205:	LD L,A
00006206:	LD H,00h
00006208:	LD A,B
00006209:	OR A
0000620A:	JR Z,+03h
0000620C:	ADD HL,HL
0000620D:	DJNZ -03h
0000620F:	POP BC
00006210:	RET

00006211:	LD HL,(F04Ch)	; CSAVEA (SAVESP)
00006214:	LD (F03Bh),HL
00006217:	LD A,(F018h)
0000621A:	RRCA
0000621B:	LD (F018h),A
0000621E:	SBC A
0000621F:	LD (F016h),A
00006222:	LD A,(F019h)
00006225:	RRCA
00006226:	LD (F019h),A
00006229:	SBC A
0000622A:	LD (F017h),A
0000622D:	RET

0000622E:	PUSH BC
0000622F:	LD B,A
00006230:	LD A,(F04Bh)		; Current GVRAM bank to work on
00006233:	LD C,A
00006234:	LD A,H
00006235:	LD HL,(F042h)
00006238:	DI
00006239:	OUT (C),A
0000623B:	LD PC,HL
0000623C:	CPL
0000623D:	EX DE,HL
0000623E:	XOR (HL)
0000623F:	AND B
00006240:	XOR (HL)
00006241:	LD (HL),A
00006242:	JR +17h
00006244:	EX DE,HL
00006245:	LD C,A
00006246:	LD A,B
00006247:	CPL
00006248:	LD B,A
00006249:	LD A,C
0000624A:	OR B
0000624B:	AND (HL)
0000624C:	LD (HL),A
0000624D:	JR +0Ch
0000624F:	AND B
00006250:	EX DE,HL
00006251:	OR (HL)
00006252:	LD (HL),A
00006253:	JR +06h
00006255:	EX DE,HL
00006256:	AND B
00006257:	XOR (HL)
00006258:	LD (HL),A
00006259:	JR +00h
0000625B:	OUTA (5Fh)			; GVRAM independent access mode bank selection - Main RAM
0000625D:	EI
0000625E:	POP BC
0000625F:	RET

00006260:	LD A,(F087h)		; SCREEN - screen mode
00006263:	OR A
00006264:	LD A,03h
00006266:	RET Z
00006267:	LD A,01h
00006269:	RET

0000626A:	LD A,E
0000626B:	RLCA
0000626C:	LD E,A
0000626D:	JP NC,6277h
00006270:	CALL 62C3h
00006273:	DEC HL
00006274:	CALL 62E9h
00006277:	CALL 63A6h
0000627A:	RET
0000627B:	LD A,E
0000627C:	RRCA
0000627D:	LD E,A
0000627E:	JR NC,+07h
00006280:	CALL 62C3h
00006283:	INC HL
00006284:	CALL 62E9h
00006287:	CALL 63B6h
0000628A:	RET
0000628B:	CALL 6383h
0000628E:	CALL EDF0h
00006291:	CALL 626Ah
00006294:	PUSH HL
00006295:	LD HL,0000h
00006298:	EX HL,(SP)
00006299:	JP C,62B0h
0000629C:	LD A,E
0000629D:	AND C
0000629E:	JP NZ,62B0h
000062A1:	EX HL,(SP)
000062A2:	INC HL
000062A3:	EX HL,(SP)
000062A4:	LD A,E
000062A5:	AND B
000062A6:	OR D
000062A7:	LD D,A
000062A8:	CALL 626Ah
000062AB:	JP C,62B0h
000062AE:	JR -14h
000062B0:	CALL 627Bh
000062B3:	LD A,E
000062B4:	LD (F033h),HL			; pointer on paint address
000062B7:	LD (F035h),A
000062BA:	CALL 62C3h
000062BD:	POP HL
000062BE:	LD A,(F049h)
000062C1:	LD C,A
000062C2:	RET

000062C3:	PUSH DE
000062C4:	LD B,D
000062C5:	LD A,(F049h)
000062C8:	OR B
000062C9:	LD (F049h),A
000062CC:	LD DE,F036h
000062CF:	PUSH HL
000062D0:	LD HL,(F089h)
000062D3:	LD C,L
000062D4:	DI
000062D5:	EX HL,(SP)
000062D6:	LD A,(DE)
000062D7:	OUT (C),A
000062D9:	XOR (HL)
000062DA:	AND B
000062DB:	XOR (HL)
000062DC:	LD (HL),A
000062DD:	OUTA (5Fh)			; GVRAM independent access mode bank selection - Main RAM
000062DF:	INC C
000062E0:	INC DE
000062E1:	EX HL,(SP)
000062E2:	DEC H
000062E3:	JR NZ,-10h
000062E5:	EI
000062E6:	POP HL
000062E7:	POP DE
000062E8:	RET
000062E9:	PUSH DE
000062EA:	LD DE,F036h
000062ED:	CALL 62FFh
000062F0:	PUSH AF
000062F1:	LD DE,F046h		; BORDER
000062F4:	CALL 62FFh
000062F7:	CPL
000062F8:	LD C,A
000062F9:	POP AF
000062FA:	LD B,A
000062FB:	POP DE
000062FC:	LD D,00h
000062FE:	RET
000062FF:	PUSH HL
00006300:	LD HL,(F089h)
00006303:	LD B,H
00006304:	LD C,L
00006305:	LD HL,0000h
00006308:	DI
00006309:	EX HL,(SP)
0000630A:	LD A,(DE)
0000630B:	OUT (C),A
0000630D:	XOR (HL)
0000630E:	INC DE
0000630F:	INC C
00006310:	OUTA (5Fh)			; GVRAM independent access mode bank selection - Main RAM
00006312:	EX HL,(SP)
00006313:	OR H
00006314:	LD H,A
00006315:	DJNZ -0Eh
00006317:	EI
00006318:	POP HL
00006319:	RET
0000631A:	PUSH DE
0000631B:	CALL EDEDh
0000631E:	CALL 6383h
00006321:	LD A,C
00006322:	AND E
00006323:	JR Z,+1Eh
00006325:	EX HL,(SP)
00006326:	DEC HL
00006327:	LD A,H
00006328:	OR L
00006329:	EX HL,(SP)
0000632A:	JR Z,+06h
0000632C:	CALL 627Bh
0000632F:	JP NC,6321h
00006332:	LD (F033h),HL			; pointer on paint address
00006335:	LD A,E
00006336:	LD (F035h),A
00006339:	POP HL
0000633A:	LD HL,0000h
0000633D:	LD DE,0000h
00006340:	LD C,00h
00006342:	RET

00006343:	PUSH HL
00006344:	LD A,H
00006345:	AND 3Fh
00006347:	LD H,A
00006348:	LD A,(F089h)
0000634B:	SUB 5Ch
0000634D:	RRCA
0000634E:	RRCA
0000634F:	OR H
00006350:	LD H,A
00006351:	LD (F04Ch),HL	; CSAVEA (SAVESP)
00006354:	LD A,E
00006355:	LD (F04Eh),A	; CSAVEM
00006358:	LD HL,0000h
0000635B:	EX HL,(SP)
0000635C:	JR +04h
0000635E:	LD A,C
0000635F:	AND E
00006360:	JR NZ,+10h
00006362:	LD A,B
00006363:	AND E
00006364:	OR D
00006365:	LD D,A
00006366:	EX HL,(SP)
00006367:	INC HL
00006368:	EX HL,(SP)
00006369:	CALL 627Bh
0000636C:	JP NC,635Eh
0000636F:	CALL 626Ah
00006372:	CALL 62C3h
00006375:	LD (F033h),HL			; pointer on paint address
00006378:	LD A,E
00006379:	LD (F035h),A
0000637C:	POP HL
0000637D:	POP DE
0000637E:	LD A,(F049h)
00006381:	LD C,A
00006382:	RET

00006383:	LD HL,(F033h)			; pointer on paint address
00006386:	XOR A
00006387:	LD (F049h),A
0000638A:	LD A,(F035h)
0000638D:	LD E,A
0000638E:	CALL 62E9h
00006391:	RET

00006392:	CALL 66C5h
00006395:	RET C
00006396:	LD (F045h),A		; PALETN - single color (0=blue; 1=red; 2=green)
00006399:	PUSH HL
0000639A:	CALL 66B8h
0000639D:	LD (F046h),HL		; BORDER
000063A0:	LD (F048h),A
000063A3:	OR A
000063A4:	POP HL
000063A5:	RET

000063A6:	PUSH DE
000063A7:	EX DE,HL
000063A8:	LD HL,(F0CCh)	; LFVIEW
000063AB:	RST 20h			; CPDEHL - compare DE and HL (aka DCOMPR)
000063AC:	CCF
000063AD:	EX DE,HL
000063AE:	POP DE
000063AF:	RET NC
000063B0:	RET NZ
000063B1:	LD A,(F0CAh)	; VIEW2 - view position bit limit
000063B4:	CP E
000063B5:	RET

000063B6:	PUSH DE
000063B7:	EX DE,HL
000063B8:	LD HL,(F0CEh)	; RTVIEW
000063BB:	EX DE,HL
000063BC:	RST 20h			; CPDEHL - compare DE and HL (aka DCOMPR)
000063BD:	CCF
000063BE:	POP DE
000063BF:	RET NC
000063C0:	RET NZ
000063C1:	LD A,(F0CBh)
000063C4:	CP E
000063C5:	RET Z
000063C6:	CCF
000063C7:	RET

000063C8:	PUSH BC
000063C9:	PUSH DE
000063CA:	PUSH HL
000063CB:	LD HL,(F033h)			; pointer on paint address
000063CE:	LD A,L
000063CF:	AND F0h
000063D1:	RRCA
000063D2:	RRCA
000063D3:	RRCA
000063D4:	RRCA
000063D5:	LD L,A
000063D6:	LD A,H
000063D7:	AND 3Fh
000063D9:	RRCA
000063DA:	RRCA
000063DB:	RRCA
000063DC:	RRCA
000063DD:	LD H,A
000063DE:	AND F0h
000063E0:	OR L
000063E1:	LD L,A
000063E2:	LD A,H
000063E3:	AND 0Fh
000063E5:	LD H,A
000063E6:	LD BC,0000h
000063E9:	PUSH BC
000063EA:	LD A,07h
000063EC:	LD DE,0640h
000063EF:	LD BC,0140h
000063F2:	PUSH AF
000063F3:	RST 20h			; CPDEHL - compare DE and HL (aka DCOMPR)
000063F4:	JP C,63FFh
000063F7:	OR A
000063F8:	SBC HL,DE
000063FA:	POP AF
000063FB:	EX HL,(SP)
000063FC:	ADD HL,BC
000063FD:	EX HL,(SP)
000063FE:	PUSH AF
000063FF:	LD A,D
00006400:	OR A
00006401:	RRA
00006402:	LD D,A
00006403:	LD A,E
00006404:	RRA
00006405:	LD E,A
00006406:	OR A
00006407:	LD A,B
00006408:	RRA
00006409:	LD B,A
0000640A:	LD A,C
0000640B:	RRA
0000640C:	LD C,A
0000640D:	POP AF
0000640E:	DEC A
0000640F:	JR NZ,-1Fh
00006411:	POP DE
00006412:	LD A,L
00006413:	SUB 05h
00006415:	JP C,641Bh
00006418:	INC DE
00006419:	JR -08h
0000641B:	EX DE,HL
0000641C:	ADD HL,HL
0000641D:	ADD HL,HL
0000641E:	ADD HL,HL
0000641F:	ADD HL,HL
00006420:	PUSH HL
00006421:	POP DE
00006422:	ADD HL,DE
00006423:	ADD HL,DE
00006424:	ADD HL,DE
00006425:	ADD HL,DE
00006426:	PUSH HL
00006427:	EX DE,HL
00006428:	LD HL,(F0C6h)
0000642B:	ADD HL,DE
0000642C:	LD (F0CCh),HL	; LFVIEW
0000642F:	POP DE
00006430:	LD HL,(F0C8h)	; RTVWPS - view (Rx,0) address
00006433:	ADD HL,DE
00006434:	LD (F0CEh),HL	; RTVIEW
00006437:	POP HL
00006438:	POP DE
00006439:	POP BC
0000643A:	RET

0000643B:	LD B,03h
0000643D:	LD A,(F087h)		; SCREEN - screen mode
00006440:	OR A
00006441:	RET Z
00006442:	LD B,01h
00006444:	RET

00006445:	LD DE,F036h
00006448:	LD B,03h
0000644A:	LD A,(HL)
0000644B:	LD (DE),A
0000644C:	INC DE
0000644D:	INC HL
0000644E:	DJNZ -06h
00006450:	RET

00006451:	LD A,(F044h)	; ATRBYT (aka PPALET)
00006454:	PUSH AF
00006455:	LD A,(F01Fh)	; BAKCLR - background color
00006458:	CALL 66A0h		; set pen color
0000645B:	LD DE,F036h
0000645E:	LD A,(DE)
0000645F:	LD (HL),A
00006460:	INC DE
00006461:	INC HL
00006462:	DJNZ -06h
00006464:	POP AF
00006465:	LD (F044h),A	; ATRBYT (aka PPALET)
00006468:	CALL 66A0h		; restore pen color
0000646B:	RET

0000646C:	LD HL,(F0C0h)	; LFUPVW - view (x1,y1) address +50h
0000646F:	EX DE,HL
00006470:	LD HL,(F033h)			; pointer on paint address
00006473:	RST 20h			; CPDEHL - compare DE and HL (aka DCOMPR)
00006474:	JP NC,647Dh
00006477:	LD A,(F0C2h)
0000647A:	CALL 64B0h
0000647D:	CALL 65A0h
00006480:	LD A,(F056h)		; TILFLG - tile string flag
00006483:	OR A
00006484:	PUSH AF
00006485:	CALL NZ,78DCh
00006488:	POP AF
00006489:	CALL NZ,78AFh
0000648C:	OR A
0000648D:	RET

0000648E:	LD HL,(F0C3h)	; RTDWVW - view (x2,y2) address -4Fh
00006491:	EX DE,HL
00006492:	LD HL,(F033h)			; pointer on paint address
00006495:	RST 20h			; CPDEHL - compare DE and HL (aka DCOMPR)
00006496:	JP C,649Fh
00006499:	LD A,(F0C5h)	; LFVWPS - view (Lx,0) address
0000649C:	CALL 64B0h
0000649F:	CALL 65C6h		; DOWNC
000064A2:	LD A,(F056h)		; TILFLG - tile string flag
000064A5:	OR A
000064A6:	PUSH AF
000064A7:	CALL NZ,78EBh
000064AA:	POP AF
000064AB:	CALL NZ,78AFh
000064AE:	OR A
000064AF:	RET

000064B0:	LD H,A
000064B1:	LD A,(E6A6h)
000064B4:	OR A
000064B5:	JP Z,64BDh
000064B8:	LD A,(F089h)
000064BB:	SUB H
000064BC:	RET NZ
000064BD:	POP AF
000064BE:	SCF
000064BF:	RET

; SCALXY - Scales X and Y coordinates
000064C0:	PUSH HL
000064C1:	PUSH DE
000064C2:	LD D,B
000064C3:	LD E,C
000064C4:	LD B,01h
000064C6:	LD HL,F02Bh
000064C9:	CALL 64DAh
000064CC:	EX DE,HL
000064CD:	EX HL,(SP)
000064CE:	EX DE,HL
000064CF:	LD HL,F02Fh
000064D2:	CALL 64DAh
000064D5:	LD A,B
000064D6:	RRCA
000064D7:	POP BC
000064D8:	POP HL
000064D9:	RET

000064DA:	PUSH BC
000064DB:	LD C,(HL)
000064DC:	INC HL
000064DD:	LD B,(HL)
000064DE:	INC HL
000064DF:	PUSH BC
000064E0:	EX HL,(SP)
000064E1:	PUSH HL
000064E2:	CALL 215Fh
000064E5:	OR A
000064E6:	JP M,64F1h
000064E9:	JR Z,+06h
000064EB:	POP DE
000064EC:	POP HL
000064ED:	POP BC
000064EE:	LD B,00h
000064F0:	RET
000064F1:	POP BC
000064F2:	POP HL
000064F3:	LD C,(HL)
000064F4:	INC HL
000064F5:	LD B,(HL)
000064F6:	INC HL
000064F7:	PUSH BC
000064F8:	POP HL
000064F9:	PUSH HL
000064FA:	CALL 215Fh
000064FD:	OR A
000064FE:	JP P,6506h
00006501:	POP DE
00006502:	POP BC
00006503:	LD B,00h
00006505:	RET
00006506:	POP HL
00006507:	POP BC
00006508:	RET
00006509:	LD A,(F08Fh)
0000650C:	OR A
0000650D:	RET Z
0000650E:	LD HL,F09Ch
00006511:	CALL 20EBh			; LOADFP - Load FP value pointed by HL to BCDE
00006514:	CALL 1F53h		; FPMULT - Multiply BCDE to FP reg
00006517:	RET

; MAPXY
00006518:	PUSH BC
00006519:	PUSH DE
0000651A:	LD A,(F08Bh)
0000651D:	LD (F089h),A
00006520:	LD A,(E6A6h)
00006523:	OR A
00006524:	JR Z,+05h
00006526:	LD A,5Ch
00006528:	LD (F089h),A
0000652B:	LD A,07h
0000652D:	AND C
0000652E:	LD HL,6574h
00006531:	ADD L
00006532:	LD L,A
00006533:	LD A,00h
00006535:	ADC H
00006536:	LD H,A
00006537:	LD A,(HL)
00006538:	LD (F035h),A
0000653B:	LD A,B
0000653C:	RRCA
0000653D:	RRCA
0000653E:	RRCA
0000653F:	LD B,A
00006540:	LD A,C
00006541:	AND F8h
00006543:	RRCA
00006544:	RRCA
00006545:	RRCA
00006546:	OR B
00006547:	LD B,00h
00006549:	LD C,A
0000654A:	LD HL,(F039h)
0000654D:	RST 20h			; CPDEHL - compare DE and HL (aka DCOMPR)
0000654E:	JP NC,655Eh
00006551:	LD A,E
00006552:	SUB C8h
00006554:	LD E,A
00006555:	LD A,D
00006556:	SBC 00h
00006558:	LD D,A
00006559:	LD A,5Dh
0000655B:	LD (F089h),A
0000655E:	LD H,D
0000655F:	LD L,E
00006560:	ADD HL,HL
00006561:	ADD HL,HL
00006562:	ADD HL,HL
00006563:	ADD HL,HL
00006564:	LD D,H
00006565:	LD E,L
00006566:	ADD HL,HL
00006567:	ADD HL,HL
00006568:	ADD HL,DE
00006569:	ADD HL,BC
0000656A:	LD A,H
0000656B:	OR C0h
0000656D:	LD H,A
0000656E:	LD (F033h),HL			; pointer on paint address
00006571:	POP DE
00006572:	POP BC
00006573:	RET


00006574:	ADD B
00006575:	LD B,B
00006576:	JR NZ,+10h
00006578:	EX AF,AF'
00006579:	INC B
0000657A:	LD (BC),A
0000657B:	LD BC,353Ah
0000657E:	RET P
0000657F:	RRCA
00006580:	LD (F035h),A
00006583:	RET NC
00006584:	PUSH HL
00006585:	LD HL,(F033h)			; pointer on paint address
00006588:	INC HL
00006589:	LD (F033h),HL			; pointer on paint address
0000658C:	POP HL
0000658D:	RET

; LEFTC
0000658E:	LD A,(F035h)
00006591:	RLCA
00006592:	LD (F035h),A
00006595:	RET NC
00006596:	PUSH HL
00006597:	LD HL,(F033h)			; pointer on paint address
0000659A:	DEC HL
0000659B:	LD (F033h),HL			; pointer on paint address
0000659E:	POP HL
0000659F:	RET

000065A0:	PUSH DE
000065A1:	LD HL,(F033h)			; pointer on paint address
000065A4:	LD DE,C050h
000065A7:	RST 20h			; CPDEHL - compare DE and HL (aka DCOMPR)
000065A8:	JP C,65B4h
000065AB:	LD DE,FFB0h
000065AE:	ADD HL,DE
000065AF:	LD (F033h),HL			; pointer on paint address
000065B2:	POP DE
000065B3:	RET

000065B4:	LD A,H
000065B5:	OR FEh
000065B7:	LD H,A
000065B8:	LD A,L
000065B9:	ADD 30h
000065BB:	LD L,A
000065BC:	LD (F033h),HL			; pointer on paint address
000065BF:	LD A,5Ch
000065C1:	LD (F089h),A
000065C4:	POP DE
000065C5:	RET

; DOWNC
000065C6:	PUSH DE
000065C7:	LD HL,(F033h)			; pointer on paint address
000065CA:	LD DE,FE30h
000065CD:	RST 20h			; CPDEHL - compare DE and HL (aka DCOMPR)
000065CE:	JP C,65E9h
000065D1:	LD A,H
000065D2:	AND C1h
000065D4:	LD H,A
000065D5:	LD A,L
000065D6:	SUB 30h
000065D8:	LD L,A
000065D9:	LD (F033h),HL			; pointer on paint address
000065DC:	LD A,(E6A6h)
000065DF:	OR A
000065E0:	JR Z,+05h
000065E2:	LD A,5Dh
000065E4:	LD (F089h),A
000065E7:	POP DE
000065E8:	RET
000065E9:	LD DE,0050h
000065EC:	ADD HL,DE
000065ED:	LD (F033h),HL			; pointer on paint address
000065F0:	POP DE
000065F1:	RET

; FETCHC
000065F2:	LD HL,(F033h)			; pointer on paint address
000065F5:	LD A,H
000065F6:	AND 3Fh
000065F8:	LD H,A
000065F9:	LD A,(F089h)
000065FC:	SUB 5Ch
000065FE:	RRCA
000065FF:	RRCA
00006600:	OR H
00006601:	LD H,A
00006602:	LD A,(F035h)
00006605:	RET

; STOREC
00006606:	LD (F035h),A
00006609:	LD A,H
0000660A:	AND C0h
0000660C:	RLCA
0000660D:	RLCA
0000660E:	ADD 5Ch
00006610:	LD (F089h),A
00006613:	LD A,H
00006614:	OR C0h
00006616:	LD H,A
00006617:	LD (F033h),HL			; pointer on paint address
0000661A:	RET

0000661B:	PUSH DE
0000661C:	LD HL,(F089h)
0000661F:	LD B,H
00006620:	LD C,L
00006621:	LD HL,(F033h)			; pointer on paint address
00006624:	LD A,(F035h)
00006627:	LD E,A
00006628:	LD D,01h
0000662A:	XOR A
0000662B:	CALL 6638h
0000662E:	PUSH AF
0000662F:	LD A,D
00006630:	RLCA
00006631:	LD D,A
00006632:	INC C
00006633:	POP AF
00006634:	DJNZ -0Bh
00006636:	POP DE
00006637:	RET

00006638:	DI
00006639:	PUSH BC
0000663A:	LD B,A
0000663B:	OUT (C),A
0000663D:	LD A,(HL)
0000663E:	OUTA (5Fh)			; GVRAM independent access mode bank selection - Main RAM
00006640:	EI
00006641:	AND E
00006642:	LD A,B
00006643:	POP BC
00006644:	RET Z
00006645:	ADD D
00006646:	RET

; NSETCX
00006647:	PUSH DE
00006648:	EX DE,HL
00006649:	LD A,(F035h)
0000664C:	RLCA
0000664D:	JR C,+0Dh
0000664F:	CALL 66D7h		; SETC - Returns current screenpixel of specified attribute byte
00006652:	CALL 657Ch		; RIGHTC
00006655:	DEC DE
00006656:	LD A,D
00006657:	OR E
00006658:	JR NZ,-11h
0000665A:	JR +28h

0000665C:	LD HL,(F033h)			; pointer on paint address
0000665F:	PUSH HL
00006660:	EX DE,HL
00006661:	LD DE,0008h
00006664:	OR A
00006665:	SBC HL,DE
00006667:	EX DE,HL
00006668:	POP HL
00006669:	JR C,+09h
0000666B:	CALL 6686h
0000666E:	LD A,D
0000666F:	OR E
00006670:	JR NZ,-13h
00006672:	JR Z,+10h
00006674:	LD A,80h
00006676:	LD (F035h),A
00006679:	LD (F033h),HL			; pointer on paint address
0000667C:	LD A,E
0000667D:	ADD 08h
0000667F:	LD E,A
00006680:	LD D,00h
00006682:	JR -35h
00006684:	POP DE
00006685:	RET

00006686:	PUSH DE
00006687:	LD DE,F036h
0000668A:	PUSH HL
0000668B:	LD HL,(F089h)
0000668E:	LD B,H
0000668F:	LD C,L
00006690:	POP HL
00006691:	DI
00006692:	LD A,(DE)
00006693:	OUT (C),A
00006695:	LD (HL),A
00006696:	INC DE
00006697:	INC C
00006698:	OUTA (5Fh)			; GVRAM independent access mode bank selection - Main RAM
0000669A:	DJNZ -0Ah
0000669C:	EI
0000669D:	POP DE
0000669E:	INC HL
0000669F:	RET

; set pen color
000066A0:	PUSH BC
000066A1:	PUSH HL
000066A2:	CALL 66C5h
000066A5:	JP C,66B5h
000066A8:	LD (F044h),A	; ATRBYT (aka PPALET)
000066AB:	CALL 66B8h
000066AE:	LD (F036h),HL
000066B1:	LD (F038h),A
000066B4:	OR A
000066B5:	POP HL
000066B6:	POP BC
000066B7:	RET

; =code @ 62C7 in bank 1
000066B8:	RRCA
000066B9:	PUSH AF
000066BA:	SBC A
000066BB:	LD L,A
000066BC:	POP AF
000066BD:	RRCA
000066BE:	PUSH AF
000066BF:	SBC A
000066C0:	LD H,A
000066C1:	POP AF
000066C2:	RRCA
000066C3:	SBC A
000066C4:	RET

; =code @ 62D4 in bank 1
000066C5:	CP 08h
000066C7:	CCF
000066C8:	RET C
000066C9:	PUSH BC
000066CA:	LD B,A
000066CB:	LD A,(F087h)		; SCREEN - screen mode
000066CE:	OR A
000066CF:	LD A,B
000066D0:	POP BC
000066D1:	RET Z
000066D2:	OR A
000066D3:	RET Z
000066D4:	LD A,01h
000066D6:	RET

; SETC - Returns current screenpixel of specified attribute byte
000066D7:	PUSH DE
000066D8:	PUSH BC
000066D9:	LD DE,F036h
000066DC:	LD HL,(F089h)
000066DF:	LD B,H
000066E0:	LD C,L
000066E1:	LD HL,(F033h)			; pointer on paint address
000066E4:	CALL 66EEh
000066E7:	INC C
000066E8:	INC DE
000066E9:	DJNZ -07h
000066EB:	POP BC
000066EC:	POP DE
000066ED:	RET

000066EE:	PUSH BC
000066EF:	LD A,(F035h)
000066F2:	LD B,A
000066F3:	LD A,(DE)
000066F4:	DI
000066F5:	OUT (C),A
000066F7:	XOR (HL)
000066F8:	AND B
000066F9:	XOR (HL)
000066FA:	LD (HL),A
000066FB:	OUTA (5Fh)			; GVRAM independent access mode bank selection - Main RAM
000066FD:	EI
000066FE:	POP BC
000066FF:	RET

00006700:	NOP
00006701:	LD A,(E6C2h)	; Value being sent to port 31h (bank switching)
00006704:	OR 19h
00006706:	LD (E6C2h),A	; Value being sent to port 31h (bank switching)
00006709:	XOR A
0000670A:	LD C,54h
0000670C:	LD B,08h
0000670E:	PUSH BC
0000670F:	LD B,00h
00006711:	OUT (C),A
00006713:	INC A
00006714:	POP BC
00006715:	INC C
00006716:	DJNZ -0Ah
00006718:	XOR A
00006719:	OUTA (52h)
0000671B:	OUTA (53h)
0000671D:	LD C,5Ch		; GVRAM independent access mode bank selection - BLUE plane
0000671F:	CALL 6734h
00006722:	LD C,5Dh		; GVRAM independent access mode bank selection - RED plane
00006724:	CALL 6734h
00006727:	LD C,5Eh		; GVRAM independent access mode bank selection - GREEN plane
00006729:	CALL 6734h
0000672C:	CALL 6775h
0000672F:	XOR A
00006730:	PUSH AF
00006731:	JP 69EAh


00006734:	DI
00006735:	LD B,00h
00006737:	OUT (C),A
00006739:	LD HL,C000h
0000673C:	LD (HL),00h
0000673E:	LD D,H
0000673F:	LD E,L
00006740:	INC DE
00006741:	LD BC,3FF8h
00006744:	LDIR
00006746:	OUTA (5Fh)			; GVRAM independent access mode bank selection - Main RAM
00006748:	EI
00006749:	RET

0000674A:	LD HL,00C7h
0000674D:	JR NZ,+03h
0000674F:	LD HL,018Fh
00006752:	LD (F031h),HL
00006755:	INC HL
00006756:	LD (F08Dh),HL
00006759:	LD HL,027Fh
0000675C:	LD (F02Dh),HL
0000675F:	LD HL,0000h
00006762:	LD (F02Bh),HL
00006765:	LD (F02Fh),HL
00006768:	LD (F027h),HL		; GRPACX
0000676B:	LD (F029h),HL		; GRPACY
0000676E:	EX DE,HL
0000676F:	LD B,D
00006770:	LD C,E
00006771:	CALL 6518h		; MAPXY
00006774:	RET

00006775:	XOR A
00006776:	LD (F087h),A		; SCREEN - screen mode
00006779:	LD (F01Fh),A	; BAKCLR - background color
0000677C:	LD (F020h),A	; BDRCLR - border color
0000677F:	LD (F088h),A	; SCRMOD - current screen mode
00006782:	LD A,07h
00006784:	LD (F01Eh),A	; FORCLR - foreground color
00006787:	LD (F08Ch),A
0000678A:	LD HL,035Ch
0000678D:	LD (F089h),HL
00006790:	LD A,5Ch
00006792:	LD (F08Bh),A
00006795:	LD HL,00C7h
00006798:	LD (F039h),HL
0000679B:	LD A,01h
0000679D:	OR A
0000679E:	CALL 674Ah
000067A1:	CALL 681Fh
000067A4:	CALL 67A8h
000067A7:	RET

000067A8:	LD HL,(F02Bh)
000067AB:	LD B,H
000067AC:	LD C,L
000067AD:	LD HL,(F02Fh)
000067B0:	EX DE,HL
000067B1:	CALL 6518h		; MAPXY
000067B4:	LD HL,(F033h)			; pointer on paint address
000067B7:	PUSH HL
000067B8:	LD A,(F035h)
000067BB:	PUSH AF
000067BC:	LD DE,0050h
000067BF:	ADD HL,DE
000067C0:	LD (F0C0h),HL	; LFUPVW - view (x1,y1) address +50h
000067C3:	LD A,(F089h)
000067C6:	LD (F0C2h),A
000067C9:	LD HL,(F02Dh)
000067CC:	LD B,H
000067CD:	LD C,L
000067CE:	LD HL,(F031h)
000067D1:	EX DE,HL
000067D2:	CALL 6518h		; MAPXY
000067D5:	LD HL,(F033h)			; pointer on paint address
000067D8:	LD DE,0050h
000067DB:	OR A
000067DC:	SBC HL,DE
000067DE:	INC HL
000067DF:	LD (F0C3h),HL	; RTDWVW - view (x2,y2) address -4Fh
000067E2:	LD A,(F089h)
000067E5:	LD (F0C5h),A	; LFVWPS - view (Lx,0) address
000067E8:	LD HL,(F02Bh)
000067EB:	LD B,H
000067EC:	LD C,L
000067ED:	LD DE,0000h
000067F0:	CALL 6518h		; MAPXY
000067F3:	LD HL,(F033h)			; pointer on paint address
000067F6:	LD (F0C6h),HL
000067F9:	LD A,(F035h)
000067FC:	LD (F0CAh),A	; VIEW2 - view position bit limit
000067FF:	LD HL,(F02Dh)
00006802:	LD B,H
00006803:	LD C,L
00006804:	LD DE,0000h
00006807:	CALL 6518h		; MAPXY
0000680A:	LD HL,(F033h)			; pointer on paint address
0000680D:	LD (F0C8h),HL	; RTVWPS - view (Rx,0) address
00006810:	LD A,(F035h)
00006813:	LD (F0CBh),A
00006816:	POP AF
00006817:	LD (F035h),A
0000681A:	POP HL
0000681B:	LD (F033h),HL			; pointer on paint address
0000681E:	RET

0000681F:	XOR A
00006820:	LD (F08Fh),A
00006823:	LD HL,0000h
00006826:	LD (F0B0h),HL
00006829:	LD (F0B2h),HL
0000682C:	LD (F0B8h),HL
0000682F:	LD (F0BAh),HL
00006832:	LD HL,(F02Dh)
00006835:	LD (F090h),HL
00006838:	CALL 21FDh				; INT_RESULT_HL
0000683B:	CALL 2214h				; CSNG - Convert number to single precision
0000683E:	LD HL,F0B4h
00006841:	CALL 20F4h				; DEC_FACCU2HL - copy number value from FPREG (FP accumulator) to HL
00006844:	LD HL,F094h
00006847:	CALL 20F4h				; DEC_FACCU2HL - copy number value from FPREG (FP accumulator) to HL
0000684A:	LD HL,(F031h)
0000684D:	LD (F092h),HL
00006850:	CALL 21FDh				; INT_RESULT_HL
00006853:	CALL 2214h				; CSNG - Convert number to single precision
00006856:	LD HL,F0BCh
00006859:	CALL 20F4h				; DEC_FACCU2HL - copy number value from FPREG (FP accumulator) to HL
0000685C:	LD HL,F098h
0000685F:	CALL 20F4h				; DEC_FACCU2HL - copy number value from FPREG (FP accumulator) to HL
00006862:	LD HL,0001h
00006865:	CALL 21FDh				; INT_RESULT_HL
00006868:	CALL 2214h				; CSNG - Convert number to single precision
0000686B:	LD HL,F09Ch
0000686E:	CALL 20F4h				; DEC_FACCU2HL - copy number value from FPREG (FP accumulator) to HL
00006871:	LD HL,F0A0h
00006874:	CALL 20F4h				; DEC_FACCU2HL - copy number value from FPREG (FP accumulator) to HL
00006877:	RET

; _COLOR
00006878:	LD A,(HL)
00006879:	CP F1h
0000687B:	JR Z,+6Fh
0000687D:	CP 40h
0000687F:	JP Z,6927h
00006882:	CP 2Ch		; ','
00006884:	JR Z,+12h
00006886:	CALL 18A3h			; GETINT
00006889:	CP 08h			; 8 colors
0000688B:	JP NC,0B06h			; FCERR, Err $05 - "Illegal function call"
0000688E:	CALL 445Bh
00006891:	LD (E6B4h),A
00006894:	DEC HL
00006895:	RST 10h			; CHRGTB - Gets next character (or token) from BASIC text.
00006896:	JR Z,+43h
00006898:	RST 08h				; Check syntax, 1 byte follows to be compared
00006899:	DEFB ','
0000689A:	LD A,(HL)
0000689B:	CP 2Ch		; ','
0000689D:	JR Z,+0Fh
0000689F:	CALL 18A3h			; GETINT
000068A2:	CP 08h
000068A4:	JP NC,0B06h			; FCERR, Err $05 - "Illegal function call"
000068A7:	LD (F01Fh),A	; BAKCLR - background color
000068AA:	DEC HL
000068AB:	RST 10h			; CHRGTB - Gets next character (or token) from BASIC text.
000068AC:	JR Z,+2Dh
000068AE:	RST 08h				; Check syntax, 1 byte follows to be compared
000068AF:	DEFB ','
000068B0:	LD A,(HL)
000068B1:	CP 2Ch		; ','
000068B3:	JR Z,+19h
000068B5:	CALL 18A3h			; GETINT
000068B8:	CP 08h			; 8 colors
000068BA:	CALL 7FEDh
000068BD:	LD (F020h),A		; BDRCLR - border color
000068C0:	OR A
000068C1:	JR Z,+07h

000068C3:	NOP
000068C4:	NOP
000068C5:	NOP
000068C6:	NOP
000068C7:	NOP
000068C8:	NOP
000068C9:	NOP
000068CA:	DEC HL
000068CB:	RST 10h			; CHRGTB - Gets next character (or token) from BASIC text.
000068CC:	JR Z,+0Dh
000068CE:	RST 08h				; Check syntax, 1 byte follows to be compared
000068CF:	DEFB ','
000068D0:	CALL 18A3h			; GETINT
000068D3:	CP 08h
000068D5:	JP NC,0B06h			; FCERR, Err $05 - "Illegal function call"
000068D8:	LD (F01Eh),A	; FORCLR - foreground color

000068DB:	CALL 3AB4h		; call remote bank. follows address (word) and bank (byte)
000068DE:	OR C
000068DF:	LD H,B
000068E0:	LD BC,nn		; $01
000068E1:	RET

000068E2:	AND 70h
000068E4:	LD B,A
000068E5:	LD A,(F020h)		; BDRCLR - border color
000068E8:	OR B
000068E9:	OUTA (52h)
000068EB:	RET

000068EC:	CALL 3AB4h		; call remote bank. follows address (word) and bank (byte)
000068EF:	XOR E
000068F0:	LD H,B
000068F1:	DEFB 1			; LD BC,A3C9h
000068F2:	RET
000068F3:	AND E
000068F4:	JR -02h

000068F6:	EX AF,AF'
000068F7:	JP NC,0B06h			; FCERR, Err $05 - "Illegal function call"
000068FA:	POP BC
000068FB:	ADD C
000068FC:	LD C,A
000068FD:	PUSH BC
000068FE:	DEC HL
000068FF:	RST 10h			; CHRGTB - Gets next character (or token) from BASIC text.
00006900:	RST 08h				; Check syntax, 1 byte follows to be compared
00006901:	DEFB ','
00006902:	CALL 18A3h			; GETINT
00006905:	CP 08h
00006907:	JP NC,0B06h			; FCERR, Err $05 - "Illegal function call"
0000690A:	POP BC
0000690B:	OUT (C),A
0000690D:	DEC HL
0000690E:	RST 10h			; CHRGTB - Gets next character (or token) from BASIC text.
0000690F:	RST 08h				; Check syntax, 1 byte follows to be compared
00006910:	DEFB ')'
00006911:	RET Z
00006912:	RST 08h				; Check syntax, 1 byte follows to be compared
00006913:	DEFB ','
00006914:	JR -29h
00006916:	RST 08h				; Check syntax, 1 byte follows to be compared
00006917:	JR Z,-33h
00006919:	AND E
0000691A:	JR +47h
0000691C:	PUSH BC
0000691D:	RST 08h				; Check syntax, 1 byte follows to be compared
0000691E:	DEFB ','
0000691F:	CALL 18A3h			; GETINT
00006922:	POP BC
00006923:	LD C,A
00006924:	RST 08h				; Check syntax, 1 byte follows to be compared
00006925:	DEFB ')'
00006926:	RET

00006927:	RST 08h				; Check syntax, 1 byte follows to be compared
00006928:	LD B,B
00006929:	CALL 6916h
0000692C:	RST 08h				; Check syntax, 1 byte follows to be compared
0000692D:	CALL P,CDC5h
00006930:	LD D,69h
00006932:	PUSH BC
00006933:	DEC HL
00006934:	RST 10h			; CHRGTB - Gets next character (or token) from BASIC text.
00006935:	LD A,(E6B4h)
00006938:	JR Z,+0Dh
0000693A:	RST 08h				; Check syntax, 1 byte follows to be compared
0000693B:	DEFB ','
0000693C:	CALL 18A3h			; GETINT
0000693F:	CP 08h			; 8 colors
00006941:	JP NC,0B06h			; FCERR, Err $05 - "Illegal function call"
00006944:	CALL 445Bh
00006947:	POP BC
00006948:	EX HL,(SP)
00006949:	PUSH AF
0000694A:	CALL 6982h
0000694D:	INC B
0000694E:	INC C
0000694F:	INC H
00006950:	INC L
00006951:	LD A,(EF88h)		; HEIGHT (TextHeight)
00006954:	CP L
00006955:	JP C,0B06h			; FCERR, Err $05 - "Illegal function call"
00006958:	LD A,(EF89h)		; Text WIDTH
0000695B:	CP H
0000695C:	JP C,0B06h			; FCERR, Err $05 - "Illegal function call"
0000695F:	EX DE,HL
00006960:	LD H,B
00006961:	LD L,C
00006962:	POP AF
00006963:	LD C,A
00006964:	LD B,H
00006965:	PUSH BC
00006966:	PUSH HL
00006967:	PUSH DE
00006968:	CALL 429Dh
0000696B:	CALL 4351h
0000696E:	POP DE
0000696F:	POP HL
00006970:	POP BC
00006971:	INC H
00006972:	LD A,D
00006973:	CP H
00006974:	LD A,C
00006975:	JP NC,6965h
00006978:	INC L
00006979:	LD H,B
0000697A:	LD A,E
0000697B:	CP L
0000697C:	LD A,C
0000697D:	JP NC,6965h
00006980:	POP HL
00006981:	RET
00006982:	LD A,H
00006983:	CP B
00006984:	JP NC,6989h
00006987:	LD H,B
00006988:	LD B,A
00006989:	LD A,L
0000698A:	CP C
0000698B:	RET NC
0000698C:	LD L,C
0000698D:	LD C,A
0000698E:	RET

; _SCREEN
0000698F:	XOR A
00006990:	PUSH AF
00006991:	DEC HL
00006992:	RST 10h			; CHRGTB - Gets next character (or token) from BASIC text.
00006993:	LD A,(HL)
00006994:	CP 2Ch		; ','
00006996:	JR Z,+14h		; __SCREEN_0
00006998:	CALL 18A3h			; GETINT
0000699B:	CP 03h
0000699D:	JP NC,0B06h			; FCERR, Err $05 - "Illegal function call"
000069A0:	LD (F087h),A		; SCREEN - screen mode
000069A3:	POP AF
000069A4:	LD A,01h
000069A6:	OR A
000069A7:	PUSH AF
000069A8:	DEC HL
000069A9:	RST 10h			; CHRGTB - Gets next character (or token) from BASIC text.
000069AA:	JR Z,+3Eh
; __SCREEN_0
000069AC:	RST 08h				; Check syntax, 1 byte follows to be compared
000069AD:	DEFB ','
000069AE:	LD A,(HL)
000069AF:	CP 2Ch		; ','
000069B1:	JR Z,+0Fh
000069B3:	CALL 18A3h			; GETINT
000069B6:	CP 04h
000069B8:	JP NC,0B06h			; FCERR, Err $05 - "Illegal function call"
000069BB:	LD (F088h),A	; SCRMOD - current screen mode
000069BE:	DEC HL
000069BF:	RST 10h			; CHRGTB - Gets next character (or token) from BASIC text.
000069C0:	JR Z,+28h
000069C2:	RST 08h				; Check syntax, 1 byte follows to be compared
000069C3:	DEFB ','
000069C4:	LD A,(HL)
000069C5:	CP 2Ch		; ','
000069C7:	JR Z,+14h
000069C9:	CALL 18A3h			; GETINT
000069CC:	CP 03h
000069CE:	JP NC,0B06h			; FCERR, Err $05 - "Illegal function call"
000069D1:	ADD 5Ch
000069D3:	LD (F089h),A
000069D6:	LD (F08Bh),A
000069D9:	DEC HL
000069DA:	RST 10h			; CHRGTB - Gets next character (or token) from BASIC text.
000069DB:	JR Z,+0Dh
000069DD:	RST 08h				; Check syntax, 1 byte follows to be compared
000069DE:	DEFB ','
000069DF:	CALL 18A3h			; GETINT
000069E2:	CP 08h				; 8 colors
000069E4:	JP NC,0B06h			; FCERR, Err $05 - "Illegal function call"
000069E7:	LD (F08Ch),A
000069EA:	XOR A
000069EB:	LD (E6A6h),A
000069EE:	POP AF
000069EF:	PUSH HL
000069F0:	PUSH AF
000069F1:	LD HL,00C8h
000069F4:	LD (F08Dh),HL
000069F7:	LD A,(E6C2h)	; Value being sent to port 31h (bank switching)
000069FA:	LD B,A
000069FB:	LD A,(F087h)		; SCREEN - screen mode
000069FE:	DEC A
000069FF:	JP P,6A18h
00006A02:	LD HL,035Ch
00006A05:	LD (F089h),HL
00006A08:	LD A,5Ch
00006A0A:	LD (F08Bh),A
00006A0D:	LD A,07h
00006A0F:	LD (F08Ch),A
00006A12:	LD A,B
00006A13:	OR 11h
00006A15:	LD B,A
00006A16:	JR +2Ch
00006A18:	JP NZ,6A28h
00006A1B:	LD A,B
00006A1C:	AND EFh
00006A1E:	OR 01h
00006A20:	LD B,A
00006A21:	LD A,01h
00006A23:	LD (F08Ah),A
00006A26:	JR +1Ch
00006A28:	LD A,5Ch
00006A2A:	LD (F089h),A
00006A2D:	LD A,01h
00006A2F:	LD (E6A6h),A
00006A32:	LD (F08Ah),A
00006A35:	LD A,03h
00006A37:	LD (F08Ch),A
00006A3A:	LD HL,0190h
00006A3D:	LD (F08Dh),HL
00006A40:	LD A,B
00006A41:	AND EEh
00006A43:	LD B,A
00006A44:	LD A,B
00006A45:	LD (E6C2h),A	; Value being sent to port 31h (bank switching)
00006A48:	OUTA (31h)
00006A4A:	LD A,(F088h)	; SCRMOD - current screen mode
00006A4D:	AND 01h
00006A4F:	LD A,(E6C1h)
00006A52:	JR NZ,+04h
00006A54:	AND EFh
00006A56:	JR +02h
00006A58:	OR 10h
00006A5A:	LD (E6C1h),A
00006A5D:	OUTA (40h)
00006A5F:	LD A,(F088h)	; SCRMOD - current screen mode
00006A62:	CPL
00006A63:	AND 02h
00006A65:	RLCA
00006A66:	RLCA
00006A67:	LD B,A
00006A68:	LD A,(E6C2h)	; Value being sent to port 31h (bank switching)
00006A6B:	AND F7h
00006A6D:	OR B
00006A6E:	LD (E6C2h),A	; Value being sent to port 31h (bank switching)
00006A71:	OUTA (31h)
00006A73:	LD A,(F08Ch)
00006A76:	CPL
00006A77:	RLCA
00006A78:	AND FEh
00006A7A:	OUTA (53h)
00006A7C:	POP AF
00006A7D:	OR A
00006A7E:	JP Z,6A92h
00006A81:	LD A,(F087h)		; SCREEN - screen mode
00006A84:	CP 02h
00006A86:	CALL 674Ah
00006A89:	CALL 681Fh
00006A8C:	CALL 67A8h
00006A8F:	CALL 6D0Ah		; clear graphics page 2
00006A92:	POP HL
00006A93:	RET

; clear graphics page 1
00006A94:	LD A,(F01Fh)	; BAKCLR - background color
00006A97:	CALL 66A0h		; set pen color
00006A9A:	LD HL,(F02Dh)
00006A9D:	LD (F01Ah),HL		; GXPOS
00006AA0:	LD HL,(F031h)
00006AA3:	LD (F01Ch),HL		; GYPOS
00006AA6:	LD HL,(F02Bh)
00006AA9:	LD B,H
00006AAA:	LD C,L
00006AAB:	LD HL,(F02Fh)
00006AAE:	EX DE,HL
00006AAF:	CALL 7EB7h			; DOBOXF
00006AB2:	LD HL,(F02Bh)
00006AB5:	LD (F027h),HL		; GRPACX
00006AB8:	EX DE,HL
00006AB9:	LD HL,(F02Fh)
00006ABC:	LD (F029h),HL		; GRPACY
00006ABF:	EX DE,HL
00006AC0:	LD B,H
00006AC1:	LD C,L
00006AC2:	CALL 6518h		; MAPXY
00006AC5:	RET

00006AC6:	DEC HL
00006AC7:	RST 10h			; CHRGTB - Gets next character (or token) from BASIC text.
00006AC8:	XOR A
00006AC9:	CALL 6BDCh
00006ACC:	RST 08h				; Check syntax, 1 byte follows to be compared
00006ACD:	CALL P,013Eh
00006AD0:	CALL 6BDCh
00006AD3:	PUSH HL
00006AD4:	LD HL,(F02Bh)
00006AD7:	EX DE,HL
00006AD8:	LD HL,(F02Dh)
00006ADB:	OR A
00006ADC:	SBC HL,DE
00006ADE:	JP Z,0B06h			; FCERR, Err $05 - "Illegal function call"
00006AE1:	JP C,0B06h			; FCERR, Err $05 - "Illegal function call"
00006AE4:	LD (F090h),HL
00006AE7:	CALL 6BA0h
00006AEA:	LD HL,(F02Fh)
00006AED:	EX DE,HL
00006AEE:	LD HL,(F031h)
00006AF1:	OR A
00006AF2:	SBC HL,DE
00006AF4:	JP C,0B06h			; FCERR, Err $05 - "Illegal function call"
00006AF7:	JP Z,0B06h			; FCERR, Err $05 - "Illegal function call"
00006AFA:	LD (F092h),HL
00006AFD:	CALL 6BBEh
00006B00:	LD BC,0000h
00006B03:	POP HL
00006B04:	DEC HL
00006B05:	RST 10h			; CHRGTB - Gets next character (or token) from BASIC text.
00006B06:	JR Z,+24h
00006B08:	RST 08h				; Check syntax, 1 byte follows to be compared
00006B09:	DEFB ','
00006B0A:	CP 2Ch		; ','
00006B0C:	JR Z,+10h
00006B0E:	PUSH BC
00006B0F:	CALL 18A3h			; GETINT
00006B12:	POP BC
00006B13:	CP 08h
00006B15:	JP NC,0B06h			; FCERR, Err $05 - "Illegal function call"
00006B18:	INC A
00006B19:	LD B,A
00006B1A:	DEC HL
00006B1B:	RST 10h			; CHRGTB - Gets next character (or token) from BASIC text.
00006B1C:	JR Z,+0Eh
00006B1E:	RST 08h				; Check syntax, 1 byte follows to be compared
00006B1F:	DEFB ','
00006B20:	PUSH BC
00006B21:	CALL 18A3h			; GETINT
00006B24:	POP BC
00006B25:	CP 08h
00006B27:	JP NC,0B06h			; FCERR, Err $05 - "Illegal function call"
00006B2A:	INC A
00006B2B:	LD C,A
00006B2C:	PUSH HL
00006B2D:	PUSH BC
00006B2E:	LD A,B
00006B2F:	OR A
00006B30:	JR Z,+04h
00006B32:	DEC A
00006B33:	CALL 6A97h
00006B36:	CALL 6AB2h
00006B39:	CALL 67A8h
00006B3C:	CALL 6D0Ah		; clear graphics page 2
00006B3F:	POP BC
00006B40:	LD A,C
00006B41:	POP HL
00006B42:	OR A
00006B43:	RET Z
00006B44:	DEC A
00006B45:	PUSH HL
00006B46:	LD HL,FFFFh
00006B49:	LD (F025h),HL
00006B4C:	CALL 66A0h		; set pen color
00006B4F:	LD HL,(F02Dh)
00006B52:	PUSH HL
00006B53:	INC HL
00006B54:	LD (F027h),HL		; GRPACX
00006B57:	LD (F01Ah),HL		; GXPOS
00006B5A:	LD HL,(F031h)
00006B5D:	PUSH HL
00006B5E:	INC HL
00006B5F:	LD (F029h),HL		; GRPACY
00006B62:	LD (F01Ch),HL		; GYPOS
00006B65:	LD HL,(F02Bh)
00006B68:	PUSH HL
00006B69:	DEC HL
00006B6A:	LD B,H
00006B6B:	LD C,L
00006B6C:	LD HL,(F02Fh)
00006B6F:	PUSH HL
00006B70:	EX DE,HL
00006B71:	DEC DE
00006B72:	LD HL,0000h
00006B75:	LD (F02Bh),HL
00006B78:	LD (F02Fh),HL
00006B7B:	LD HL,027Fh
00006B7E:	LD (F02Dh),HL
00006B81:	LD HL,(F08Dh)
00006B84:	DEC HL
00006B85:	LD (F031h),HL
00006B88:	CALL 7F0Eh
00006B8B:	POP HL
00006B8C:	LD (F02Fh),HL
00006B8F:	POP HL
00006B90:	LD (F02Bh),HL
00006B93:	POP HL
00006B94:	LD (F031h),HL
00006B97:	POP HL
00006B98:	LD (F02Dh),HL
00006B9B:	CALL 6D0Ah		; clear graphics page 2
00006B9E:	POP HL
00006B9F:	RET

00006BA0:	LD HL,(F090h)
00006BA3:	CALL 21FDh				; INT_RESULT_HL
00006BA6:	CALL 2214h				; CSNG - Convert number to single precision
00006BA9:	CALL 20CDh
00006BAC:	LD HL,F094h
00006BAF:	CALL 20DAh				; PHLTFP - Number at HL to BCDE
00006BB2:	POP BC
00006BB3:	POP DE
00006BB4:	CALL 1FB7h				; FDIV
00006BB7:	LD HL,F09Ch
00006BBA:	CALL 20F4h				; DEC_FACCU2HL - copy number value from FPREG (FP accumulator) to HL
00006BBD:	RET

00006BBE:	LD HL,(F092h)
00006BC1:	CALL 21FDh				; INT_RESULT_HL
00006BC4:	CALL 2214h				; CSNG - Convert number to single precision
00006BC7:	CALL 20CDh
00006BCA:	LD HL,F098h
00006BCD:	CALL 20DAh				; PHLTFP - Number at HL to BCDE
00006BD0:	POP BC
00006BD1:	POP DE
00006BD2:	CALL 1FB7h				; FDIV
00006BD5:	LD HL,F0A0h
00006BD8:	CALL 20F4h				; DEC_FACCU2HL - copy number value from FPREG (FP accumulator) to HL
00006BDB:	RET

00006BDC:	PUSH AF
00006BDD:	DEC HL
00006BDE:	RST 10h			; CHRGTB - Gets next character (or token) from BASIC text.
00006BDF:	RST 08h				; Check syntax, 1 byte follows to be compared
00006BE0:	JR Z,-33h
00006BE2:	SUB (HL)
00006BE3:	JR +7Ah
00006BE5:	OR A
00006BE6:	JP M,0B06h			; FCERR, Err $05 - "Illegal function call"
00006BE9:	PUSH HL
00006BEA:	LD HL,0280h			; 640
00006BED:	RST 20h			; CPDEHL - compare DE and HL (aka DCOMPR)
00006BEE:	JP C,0B06h			; FCERR, Err $05 - "Illegal function call"
00006BF1:	JP Z,0B06h			; FCERR, Err $05 - "Illegal function call"
00006BF4:	EX DE,HL
00006BF5:	EX HL,(SP)
00006BF6:	DEC HL
00006BF7:	RST 10h			; CHRGTB - Gets next character (or token) from BASIC text.
00006BF8:	RST 08h				; Check syntax, 1 byte follows to be compared
00006BF9:	DEFB ','
00006BFA:	CALL 1896h				; POSINT - Get positive integer
00006BFD:	LD A,D
00006BFE:	OR A
00006BFF:	JP M,0B06h			; FCERR, Err $05 - "Illegal function call"
00006C02:	DEC HL
00006C03:	RST 10h			; CHRGTB - Gets next character (or token) from BASIC text.
00006C04:	RST 08h				; Check syntax, 1 byte follows to be compared
00006C05:	DEFB ')'
00006C06:	PUSH HL
00006C07:	LD HL,(F08Dh)
00006C0A:	RST 20h			; CPDEHL - compare DE and HL (aka DCOMPR)
00006C0B:	JP C,0B06h			; FCERR, Err $05 - "Illegal function call"
00006C0E:	JP Z,0B06h			; FCERR, Err $05 - "Illegal function call"
00006C11:	POP BC
00006C12:	POP HL
00006C13:	POP AF
00006C14:	PUSH BC
00006C15:	OR A
00006C16:	JP NZ,6C22h
00006C19:	LD (F02Bh),HL
00006C1C:	EX DE,HL
00006C1D:	LD (F02Fh),HL
00006C20:	POP HL
00006C21:	RET

00006C22:	LD (F02Dh),HL
00006C25:	EX DE,HL
00006C26:	LD (F031h),HL
00006C29:	POP HL
00006C2A:	RET

00006C2B:	RST 08h				; Check syntax, 1 byte follows to be compared
00006C2C:	JR Z,-2Bh
00006C2E:	CALL 11D3h			; EVAL - evaluate expression
00006C31:	PUSH HL
00006C32:	CALL 2214h				; CSNG - Convert number to single precision
00006C35:	POP HL
00006C36:	EX HL,(SP)
00006C37:	CALL 20F4h				; DEC_FACCU2HL - copy number value from FPREG (FP accumulator) to HL
00006C3A:	LD DE,0004h
00006C3D:	ADD HL,DE
00006C3E:	EX HL,(SP)
00006C3F:	DEC HL
00006C40:	RST 10h			; CHRGTB - Gets next character (or token) from BASIC text.
00006C41:	RST 08h				; Check syntax, 1 byte follows to be compared
00006C42:	DEFB ','
00006C43:	CALL 11D3h			; EVAL - evaluate expression
00006C46:	PUSH HL
00006C47:	CALL 2214h				; CSNG - Convert number to single precision
00006C4A:	POP HL
00006C4B:	EX HL,(SP)
00006C4C:	CALL 20F4h				; DEC_FACCU2HL - copy number value from FPREG (FP accumulator) to HL
00006C4F:	POP HL
00006C50:	DEC HL
00006C51:	RST 10h			; CHRGTB - Gets next character (or token) from BASIC text.
00006C52:	RST 08h				; Check syntax, 1 byte follows to be compared
00006C53:	DEFB ')'
00006C54:	RET

00006C55:	LD A,01h
00006C57:	LD (F08Fh),A
00006C5A:	LD DE,F0B0h
00006C5D:	DEC HL
00006C5E:	RST 10h			; CHRGTB - Gets next character (or token) from BASIC text.
00006C5F:	CALL 6C2Bh
00006C62:	RST 08h				; Check syntax, 1 byte follows to be compared
00006C63:	CALL P,B411h
00006C66:	RET P
00006C67:	CALL 6C2Bh
00006C6A:	PUSH HL
00006C6B:	LD HL,F0B0h
00006C6E:	CALL 20DAh				; PHLTFP - Number at HL to BCDE
00006C71:	LD HL,F0B4h
00006C74:	CALL 1DE3h
00006C77:	RST 28h					; SIGN - test FP number sign
00006C78:	JP Z,0B06h			; FCERR, Err $05 - "Illegal function call"
00006C7B:	JP C,0B06h			; FCERR, Err $05 - "Illegal function call"
00006C7E:	LD HL,F094h
00006C81:	CALL 20F4h				; DEC_FACCU2HL - copy number value from FPREG (FP accumulator) to HL
00006C84:	CALL 6BA0h
00006C87:	LD HL,F0B8h
00006C8A:	CALL 20DAh				; PHLTFP - Number at HL to BCDE
00006C8D:	LD HL,F0BCh
00006C90:	CALL 1DE3h
00006C93:	RST 28h					; SIGN - test FP number sign
00006C94:	JP Z,0B06h			; FCERR, Err $05 - "Illegal function call"
00006C97:	JP C,0B06h			; FCERR, Err $05 - "Illegal function call"
00006C9A:	LD HL,F098h
00006C9D:	CALL 20F4h				; DEC_FACCU2HL - copy number value from FPREG (FP accumulator) to HL
00006CA0:	CALL 6BBEh
00006CA3:	CALL 6D0Ah		; clear graphics page 2
00006CA6:	POP HL
00006CA7:	RET

00006CA8:	DEC HL
00006CA9:	RST 10h			; CHRGTB - Gets next character (or token) from BASIC text.
00006CAA:	RST 08h				; Check syntax, 1 byte follows to be compared
00006CAB:	JR Z,-33h
00006CAD:	AND E
00006CAE:	JR -0Bh
00006CB0:	DEC HL
00006CB1:	RST 10h			; CHRGTB - Gets next character (or token) from BASIC text.
00006CB2:	RST 08h				; Check syntax, 1 byte follows to be compared
00006CB3:	DEFB ')'
00006CB4:	POP AF
00006CB5:	CP 04h
00006CB7:	JP NC,0B06h			; FCERR, Err $05 - "Illegal function call"
00006CBA:	PUSH HL
00006CBB:	LD HL,F02Bh
00006CBE:	RRCA
00006CBF:	JP NC,6CC6h
00006CC2:	LD DE,0004h
00006CC5:	ADD HL,DE
00006CC6:	RRCA
00006CC7:	JP NC,6CCCh
00006CCA:	INC HL
00006CCB:	INC HL
00006CCC:	LD A,(HL)
00006CCD:	INC HL
00006CCE:	LD H,(HL)
00006CCF:	LD L,A
00006CD0:	CALL 21FDh				; INT_RESULT_HL
00006CD3:	POP HL
00006CD4:	RET

00006CD5:	LD A,(F08Fh)
00006CD8:	OR A
00006CD9:	JP Z,6CA8h
00006CDC:	DEC HL
00006CDD:	RST 10h			; CHRGTB - Gets next character (or token) from BASIC text.
00006CDE:	RST 08h				; Check syntax, 1 byte follows to be compared
00006CDF:	JR Z,-33h
00006CE1:	AND E
00006CE2:	JR -0Bh
00006CE4:	DEC HL
00006CE5:	RST 10h			; CHRGTB - Gets next character (or token) from BASIC text.
00006CE6:	RST 08h				; Check syntax, 1 byte follows to be compared
00006CE7:	DEFB ')'
00006CE8:	POP AF
00006CE9:	PUSH HL
00006CEA:	CP 04h
00006CEC:	JP NC,0B06h			; FCERR, Err $05 - "Illegal function call"
00006CEF:	LD DE,0004h
00006CF2:	LD HL,F0B0h
00006CF5:	RRCA
00006CF6:	JP NC,6CFBh
00006CF9:	ADD HL,DE
00006CFA:	ADD HL,DE
00006CFB:	RRCA
00006CFC:	JP NC,6D00h
00006CFF:	ADD HL,DE
00006D00:	CALL 20DAh				; PHLTFP - Number at HL to BCDE
00006D03:	LD A,04h
00006D05:	LD (EABDh),A
00006D08:	POP HL
00006D09:	RET

; clear graphics page 2
00006D0A:	LD HL,(F02Bh)
00006D0D:	LD (F027h),HL		; GRPACX
00006D10:	LD HL,(F02Fh)
00006D13:	LD (F029h),HL		; GRPACY
00006D16:	LD BC,0004h
00006D19:	PUSH BC
00006D1A:	LD DE,F0A4h
00006D1D:	LD HL,F0B0h
00006D20:	LDIR
00006D22:	POP BC
00006D23:	LD HL,F0B8h
00006D26:	LDIR
00006D28:	RET

00006D29:	DEC HL
00006D2A:	RST 10h			; CHRGTB - Gets next character (or token) from BASIC text.
00006D2B:	RST 08h				; Check syntax, 1 byte follows to be compared
00006D2C:	JR Z,-33h
00006D2E:	OUTA (11h)
00006D30:	PUSH HL
00006D31:	CALL 2214h				; CSNG - Convert number to single precision
00006D34:	LD HL,F0ACh
00006D37:	CALL 20F4h				; DEC_FACCU2HL - copy number value from FPREG (FP accumulator) to HL
00006D3A:	POP HL
00006D3B:	DEC HL
00006D3C:	RST 10h			; CHRGTB - Gets next character (or token) from BASIC text.
00006D3D:	RST 08h				; Check syntax, 1 byte follows to be compared
00006D3E:	DEFB ','
00006D3F:	CALL 7FD5h
00006D42:	PUSH AF
00006D43:	DEC HL
00006D44:	RST 10h			; CHRGTB - Gets next character (or token) from BASIC text.
00006D45:	RST 08h				; Check syntax, 1 byte follows to be compared
00006D46:	DEFB ')'
00006D47:	POP AF
00006D48:	PUSH HL
00006D49:	CP 04h
00006D4B:	JP NC,0B06h			; FCERR, Err $05 - "Illegal function call"
00006D4E:	PUSH AF
00006D4F:	LD HL,F0ACh
00006D52:	CALL 20DAh				; PHLTFP - Number at HL to BCDE
00006D55:	LD A,04h
00006D57:	LD (EABDh),A
00006D5A:	LD A,(F08Fh)
00006D5D:	OR A
00006D5E:	JR NZ,+06h
00006D60:	CALL 21A0h			; CINT
00006D63:	POP AF
00006D64:	POP HL
00006D65:	RET

00006D66:	POP AF
00006D67:	LD HL,F02Bh
00006D6A:	LD DE,F0B0h
00006D6D:	LD BC,F09Ch
00006D70:	RRCA
00006D71:	JP NC,6D7Dh
00006D74:	LD HL,F02Fh
00006D77:	LD DE,F0B8h
00006D7A:	LD BC,F0A0h
00006D7D:	RRCA
00006D7E:	JP C,6D86h
00006D81:	CALL 6D8Bh
00006D84:	POP HL
00006D85:	RET

00006D86:	CALL 6DA3h
00006D89:	POP HL
00006D8A:	RET

00006D8B:	PUSH HL
00006D8C:	PUSH BC
00006D8D:	EX DE,HL
00006D8E:	CALL 20DAh				; PHLTFP - Number at HL to BCDE
00006D91:	LD HL,F0ACh
00006D94:	CALL 1DE3h
00006D97:	POP HL
00006D98:	CALL 20EBh			; LOADFP - Load FP value pointed by HL to BCDE
00006D9B:	CALL 1F53h		; FPMULT - Multiply BCDE to FP reg
00006D9E:	CALL 21A0h			; CINT
00006DA1:	POP DE
00006DA2:	RET

00006DA3:	PUSH DE
00006DA4:	PUSH BC
00006DA5:	CALL 2214h				; CSNG - Convert number to single precision
00006DA8:	LD HL,F0ACh
00006DAB:	CALL 20F4h				; DEC_FACCU2HL - copy number value from FPREG (FP accumulator) to HL
00006DAE:	POP HL
00006DAF:	CALL 20DAh				; PHLTFP - Number at HL to BCDE
00006DB2:	LD HL,F0ACh
00006DB5:	CALL 20EBh			; LOADFP - Load FP value pointed by HL to BCDE
00006DB8:	CALL 1FB7h				; FDIV
00006DBB:	POP HL
00006DBC:	CALL 1DDEh
00006DBF:	RET

_CSRLIN:
00006DC0:	DEC HL
00006DC1:	PUSH HL
00006DC2:	RST 10h			; CHRGTB - Gets next character (or token) from BASIC text.
00006DC3:	RST 08h				; Check syntax, 1 byte follows to be compared
00006DC4:	JR Z,-33h
00006DC6:	OUTA (11h)
00006DC8:	PUSH HL
00006DC9:	CALL 2214h				; CSNG - Convert number to single precision
00006DCC:	POP HL
00006DCD:	DEC HL
00006DCE:	RST 10h			; CHRGTB - Gets next character (or token) from BASIC text.
00006DCF:	LD A,(HL)
00006DD0:	CP 29h
00006DD2:	EX DE,HL
00006DD3:	POP HL
00006DD4:	JP NZ,7E19h
00006DD7:	EX DE,HL
00006DD8:	RST 08h				; Check syntax, 1 byte follows to be compared
00006DD9:	DEFB ')'
00006DDA:	PUSH HL
00006DDB:	CALL 21A0h			; CINT
00006DDE:	LD A,H
00006DDF:	OR A
00006DE0:	JP NZ,0B06h			; FCERR, Err $05 - "Illegal function call"
00006DE3:	LD A,L
00006DE4:	CP 04h
00006DE6:	JP NC,0B06h			; FCERR, Err $05 - "Illegal function call"
00006DE9:	CP 02h
00006DEB:	JP NC,6E0Bh
00006DEE:	LD L,A
00006DEF:	LD A,(F08Fh)
00006DF2:	OR A
00006DF3:	LD A,L
00006DF4:	JP Z,6E0Bh
00006DF7:	LD HL,F0A4h
00006DFA:	RRCA
00006DFB:	JP NC,6E01h
00006DFE:	LD HL,F0A8h
00006E01:	CALL 20DAh				; PHLTFP - Number at HL to BCDE
00006E04:	LD A,04h
00006E06:	LD (EABDh),A
00006E09:	POP HL
00006E0A:	RET

00006E0B:	LD HL,(F027h)		; GRPACX
00006E0E:	LD DE,(F02Bh)
00006E12:	RRCA
00006E13:	JP NC,6E1Dh
00006E16:	LD HL,(F029h)		; GRPACY
00006E19:	LD DE,(F02Fh)
00006E1D:	OR A
00006E1E:	SBC HL,DE
00006E20:	CALL 21FDh				; INT_RESULT_HL
00006E23:	POP HL
00006E24:	RET

00006E25:	DEC HL
00006E26:	RST 10h			; CHRGTB - Gets next character (or token) from BASIC text.
00006E27:	CALL 6E3Dh		; COORD_PARMS_DST - pick destination coodinate parameters from BASIC program
00006E2A:	RET

; COORD_PARMS - pick coodinate parameters from BASIC program
00006E2B:	LD A,(F08Fh)
00006E2E:	OR A
00006E2F:	JP Z,7D98h
00006E32:	LD A,(HL)
00006E33:	CP 40h
00006E35:	CALL Z,0A0Dh
00006E38:	CP F4h
00006E3A:	JP Z,6EE6h

; COORD_PARMS_DST - pick destination coodinate parameters from BASIC program
00006E3D:	LD A,(F08Fh)
00006E40:	CALL EE08h
00006E43:	OR A
00006E44:	JP Z,7DA7h
00006E47:	LD A,(HL)
00006E48:	CP DFh
00006E4A:	PUSH AF
00006E4B:	CALL Z,0A0Dh
00006E4E:	RST 08h				; Check syntax, 1 byte follows to be compared
00006E4F:	JR Z,-33h
00006E51:	OUTA (11h)
00006E53:	PUSH HL
00006E54:	CALL 2214h				; CSNG - Convert number to single precision
00006E57:	POP HL
00006E58:	POP AF
00006E59:	CALL 20CDh
00006E5C:	PUSH AF
00006E5D:	RST 08h				; Check syntax, 1 byte follows to be compared
00006E5E:	DEFB ','
00006E5F:	CALL 11D3h			; EVAL - evaluate expression
00006E62:	PUSH HL
00006E63:	CALL 2214h				; CSNG - Convert number to single precision
00006E66:	POP HL
00006E67:	RST 08h				; Check syntax, 1 byte follows to be compared
00006E68:	DEFB ')'
00006E69:	POP AF
00006E6A:	PUSH HL
00006E6B:	JR NZ,+1Fh
00006E6D:	LD HL,F0A8h
00006E70:	PUSH HL
00006E71:	CALL 1DDEh
00006E74:	POP HL
00006E75:	CALL 20F4h				; DEC_FACCU2HL - copy number value from FPREG (FP accumulator) to HL
00006E78:	POP HL
00006E79:	POP BC
00006E7A:	POP DE
00006E7B:	PUSH HL
00006E7C:	CALL 20DDh			; FPBCDE - Move BCDE to FPREG
00006E7F:	LD HL,F0A4h
00006E82:	PUSH HL
00006E83:	CALL 1DDEh
00006E86:	POP HL
00006E87:	CALL 20F4h				; DEC_FACCU2HL - copy number value from FPREG (FP accumulator) to HL
00006E8A:	JR +13h


00006E8C:	LD HL,F0A8h
00006E8F:	CALL 20F4h				; DEC_FACCU2HL - copy number value from FPREG (FP accumulator) to HL
00006E92:	POP HL
00006E93:	POP BC
00006E94:	POP DE
00006E95:	PUSH HL

00006E96:	CALL 20DDh			; FPBCDE - Move BCDE to FPREG
00006E99:	LD HL,F0A4h

00006E9C:	CALL 20F4h				; DEC_FACCU2HL - copy number value from FPREG (FP accumulator) to HL
00006E9F:	LD HL,F0ACh

00006EA2:	CALL 20F4h				; DEC_FACCU2HL - copy number value from FPREG (FP accumulator) to HL
00006EA5:	LD HL,F02Bh
00006EA8:	LD DE,F0B0h
00006EAB:	LD BC,F09Ch
00006EAE:	CALL 6D8Bh
00006EB1:	LD DE,(F02Bh)
00006EB5:	ADD HL,DE
00006EB6:	LD (F01Ah),HL		; GXPOS
00006EB9:	LD (F027h),HL		; GRPACX
00006EBC:	LD HL,F0A8h
00006EBF:	CALL 20DAh				; PHLTFP - Number at HL to BCDE
00006EC2:	LD HL,F0ACh
00006EC5:	CALL 20F4h				; DEC_FACCU2HL - copy number value from FPREG (FP accumulator) to HL
00006EC8:	LD A,04h
00006ECA:	LD (EABDh),A
00006ECD:	LD HL,F02Fh
00006ED0:	LD DE,F0B8h
00006ED3:	LD BC,F0A0h
00006ED6:	CALL 6D8Bh
00006ED9:	LD DE,(F02Fh)
00006EDD:	ADD HL,DE
00006EDE:	LD (F01Ch),HL		; GYPOS
00006EE1:	LD (F029h),HL		; GRPACY
00006EE4:	EX DE,HL
00006EE5:	POP HL
00006EE6:	PUSH HL
00006EE7:	LD HL,(F027h)		; GRPACX
00006EEA:	LD (F01Ah),HL		; GXPOS
00006EED:	LD B,H
00006EEE:	LD C,L
00006EEF:	LD HL,(F029h)		; GRPACY
00006EF2:	LD (F01Ch),HL		; GYPOS
00006EF5:	EX DE,HL
00006EF6:	POP HL
00006EF7:	RET

00006EF8:	PUSH BC
00006EF9:	PUSH DE
00006EFA:	PUSH HL
00006EFB:	LD HL,(F027h)		; GRPACX
00006EFE:	CALL 21FDh				; INT_RESULT_HL
00006F01:	CALL 2214h				; CSNG - Convert number to single precision
00006F04:	LD HL,F0ACh
00006F07:	CALL 20F4h				; DEC_FACCU2HL - copy number value from FPREG (FP accumulator) to HL
00006F0A:	LD A,02h
00006F0C:	CALL 6D48h
00006F0F:	LD HL,F0A4h
00006F12:	CALL 20F4h				; DEC_FACCU2HL - copy number value from FPREG (FP accumulator) to HL
00006F15:	LD HL,(F029h)		; GRPACY
00006F18:	CALL 21FDh				; INT_RESULT_HL
00006F1B:	CALL 2214h				; CSNG - Convert number to single precision
00006F1E:	LD HL,F0ACh
00006F21:	CALL 20F4h				; DEC_FACCU2HL - copy number value from FPREG (FP accumulator) to HL
00006F24:	LD A,03h
00006F26:	CALL 6D48h
00006F29:	LD HL,F0A8h
00006F2C:	CALL 20F4h				; DEC_FACCU2HL - copy number value from FPREG (FP accumulator) to HL
00006F2F:	POP HL
00006F30:	POP DE
00006F31:	POP BC
00006F32:	RET

00006F33:	PUSH BC
00006F34:	LD C,(HL)
00006F35:	INC HL
00006F36:	LD B,(HL)
00006F37:	INC HL
00006F38:	PUSH BC
00006F39:	EX HL,(SP)
00006F3A:	CALL 215Fh
00006F3D:	OR A
00006F3E:	POP HL
00006F3F:	JP M,6F49h
00006F42:	JR Z,+05h
00006F44:	POP BC
00006F45:	LD A,C
00006F46:	ADD B
00006F47:	LD C,A
00006F48:	PUSH BC
00006F49:	LD C,(HL)
00006F4A:	INC HL
00006F4B:	LD B,(HL)
00006F4C:	INC HL
00006F4D:	PUSH BC
00006F4E:	EX HL,(SP)
00006F4F:	CALL 215Fh
00006F52:	OR A
00006F53:	POP HL
00006F54:	JP P,6F5Dh
00006F57:	POP BC
00006F58:	LD A,C
00006F59:	ADD B
00006F5A:	ADD B
00006F5B:	LD C,A
00006F5C:	PUSH BC
00006F5D:	POP BC
00006F5E:	RET
00006F5F:	PUSH HL
00006F60:	PUSH BC
00006F61:	PUSH DE
00006F62:	LD HL,F02Bh
00006F65:	LD D,B
00006F66:	LD E,C
00006F67:	LD B,01h
00006F69:	LD C,00h
00006F6B:	CALL 6F33h
00006F6E:	LD B,04h
00006F70:	POP DE
00006F71:	PUSH DE
00006F72:	CALL 6F33h
00006F75:	POP DE
00006F76:	LD A,C
00006F77:	POP BC
00006F78:	POP HL
00006F79:	RET
00006F7A:	PUSH BC
00006F7B:	PUSH DE
00006F7C:	CALL 6F5Fh
00006F7F:	PUSH AF
00006F80:	LD HL,(F01Ah)		; GXPOS
00006F83:	LD B,H
00006F84:	LD C,L
00006F85:	LD HL,(F01Ch)		; GYPOS
00006F88:	EX DE,HL
00006F89:	CALL 6F5Fh
00006F8C:	LD H,A
00006F8D:	POP AF
00006F8E:	LD L,A
00006F8F:	POP DE
00006F90:	POP BC
00006F91:	RET

00006F92:	CALL 6F7Ah
00006F95:	CALL EE02h
00006F98:	LD A,L
00006F99:	OR H
00006F9A:	RET Z
00006F9B:	LD A,L
00006F9C:	AND H
00006F9D:	RET NZ
00006F9E:	LD A,L
00006F9F:	OR A
00006FA0:	JR NZ,+06h
00006FA2:	CALL 7E7Ch
00006FA5:	LD A,H
00006FA6:	LD H,L
00006FA7:	LD L,A
00006FA8:	PUSH HL
00006FA9:	LD A,L
00006FAA:	RRCA
00006FAB:	LD HL,(F02Bh)
00006FAE:	CALL C,6FD6h
00006FB1:	JP C,6FCFh
00006FB4:	RRCA
00006FB5:	LD HL,(F02Dh)
00006FB8:	CALL C,6FD6h
00006FBB:	JP C,6FCFh
00006FBE:	RRCA
00006FBF:	LD HL,(F02Fh)
00006FC2:	CALL C,7030h
00006FC5:	JP C,6FCFh
00006FC8:	RRCA
00006FC9:	LD HL,(F031h)
00006FCC:	CALL C,7030h
00006FCF:	CALL 6F5Fh
00006FD2:	POP HL
00006FD3:	LD L,A
00006FD4:	JR -3Eh
00006FD6:	PUSH AF
00006FD7:	PUSH HL
00006FD8:	LD HL,(F01Ch)		; GYPOS
00006FDB:	OR A
00006FDC:	SBC HL,DE
00006FDE:	PUSH BC
00006FDF:	PUSH DE
00006FE0:	CALL 21FDh				; INT_RESULT_HL
00006FE3:	CALL 2214h				; CSNG - Convert number to single precision
00006FE6:	LD HL,F0ACh
00006FE9:	CALL 20F4h				; DEC_FACCU2HL - copy number value from FPREG (FP accumulator) to HL
00006FEC:	POP DE
00006FED:	POP BC
00006FEE:	PUSH DE
00006FEF:	LD D,B
00006FF0:	LD E,C
00006FF1:	LD HL,(F01Ah)		; GXPOS
00006FF4:	OR A
00006FF5:	SBC HL,DE
00006FF7:	PUSH BC
00006FF8:	CALL 21FDh				; INT_RESULT_HL
00006FFB:	CALL 2214h				; CSNG - Convert number to single precision
00006FFE:	LD HL,F0ACh
00007001:	PUSH HL
00007002:	CALL 20EBh			; LOADFP - Load FP value pointed by HL to BCDE
00007005:	CALL 1FB7h				; FDIV
00007008:	POP HL
00007009:	CALL 20F4h				; DEC_FACCU2HL - copy number value from FPREG (FP accumulator) to HL
0000700C:	POP BC
0000700D:	POP DE
0000700E:	POP HL
0000700F:	PUSH DE
00007010:	LD D,B
00007011:	LD E,C
00007012:	LD B,H
00007013:	LD C,L
00007014:	PUSH BC
00007015:	OR A
00007016:	SBC HL,DE
00007018:	CALL 21FDh				; INT_RESULT_HL
0000701B:	CALL 2214h				; CSNG - Convert number to single precision
0000701E:	LD HL,F0ACh
00007021:	CALL 20EBh			; LOADFP - Load FP value pointed by HL to BCDE
00007024:	CALL 1F53h		; FPMULT - Multiply BCDE to FP reg
00007027:	CALL 21A0h			; CINT
0000702A:	POP BC
0000702B:	POP DE
0000702C:	ADD HL,DE
0000702D:	EX DE,HL
0000702E:	POP AF
0000702F:	RET
00007030:	PUSH BC
00007031:	PUSH DE
00007032:	POP BC
00007033:	POP DE
00007034:	CALL 7042h
00007037:	CALL 6FD6h
0000703A:	PUSH BC
0000703B:	PUSH DE
0000703C:	POP BC
0000703D:	POP DE
0000703E:	CALL 7042h
00007041:	RET
00007042:	PUSH HL
00007043:	LD HL,(F01Ch)		; GYPOS
00007046:	PUSH HL
00007047:	LD HL,(F01Ah)		; GXPOS
0000704A:	LD (F01Ch),HL		; GYPOS
0000704D:	POP HL
0000704E:	LD (F01Ah),HL		; GXPOS
00007051:	POP HL
00007052:	RET

; _COPY
00007053:	LD A,01h
00007055:	JR Z,+03h
00007057:	CALL 18A3h			; GETINT
0000705A:	OR A
0000705B:	JP Z,0B06h			; FCERR, Err $05 - "Illegal function call"
0000705E:	CP 06h
00007060:	JP NC,0B06h			; FCERR, Err $05 - "Illegal function call"
00007063:	LD B,A

00007064:	LD A,(F08Ch)
00007067:	LD C,A
00007068:	XOR A
00007069:	LD (EF0Dh),A
0000706C:	LD A,B
0000706D:	CP 04h
0000706F:	JP C,7078h
00007072:	SUB 02h
00007074:	LD (EF0Dh),A
00007077:	LD B,A
00007078:	LD A,B
00007079:	DEC A
0000707A:	LD A,44h			; 'D'
0000707C:	CALL NZ,3F27h		; Output ESC + value in A to LPT
0000707F:	PUSH HL
00007080:	LD A,(E6A6h)
00007083:	OR A
00007084:	JR Z,+02h
00007086:	LD C,01h
00007088:	LD A,0Dh
0000708A:	CALL 3ED4h			; LPTOUT:
0000708D:	LD A,C
0000708E:	PUSH BC
0000708F:	LD (F04Bh),A		; Current GVRAM bank to work on
00007092:	LD D,01h
00007094:	LD A,(EF88h)		; HEIGHT (TextHeight)
00007097:	LD E,A
00007098:	LD A,4Eh		; 'N' - Select skip over perforation (n=1..127)
0000709A:	CALL 3F27h		; Output ESC + value in A to LPT
0000709D:	CALL 7222h		; set printer "skip over perforation" basing on text HEIGHT
000070A0:	LD HL,C000h
000070A3:	POP BC
000070A4:	PUSH BC
000070A5:	LD A,B
000070A6:	RRCA
000070A7:	PUSH AF
000070A8:	JP NC,70BFh
000070AB:	LD A,(EF89h)		; Text WIDTH
000070AE:	CP 29h				; 41
000070B0:	LD A,0Eh			; 14
000070B2:	CALL C,3ED4h			; LPTOUT:
000070B5:	PUSH AF
000070B6:	CALL 7143h				; copy text row to printer
000070B9:	POP AF
000070BA:	LD A,0Fh
000070BC:	CALL C,3ED4h			; LPTOUT:
000070BF:	POP AF
000070C0:	RRCA
000070C1:	JP NC,70FAh
000070C4:	LD BC,08FFh
000070C7:	CALL 71C1h
000070CA:	LD A,(EF0Dh)
000070CD:	OR A
000070CE:	JP Z,70D8h
000070D1:	LD A,(E6A6h)
000070D4:	OR A
000070D5:	JP Z,70DBh
000070D8:	CALL 71C1h
000070DB:	LD A,(EF88h)		; HEIGHT (TextHeight)
000070DE:	CP 14h
000070E0:	JR NZ,+20h
000070E2:	LD BC,040Fh
000070E5:	LD A,(E6A6h)
000070E8:	OR A
000070E9:	JP NZ,70F5h
000070EC:	LD A,(EF0Dh)
000070EF:	OR A
000070F0:	JR Z,+03h
000070F2:	LD BC,0203h
000070F5:	CALL 71C1h
000070F8:	JR +08h
000070FA:	LD A,0Ah
000070FC:	CALL 3ED4h			; LPTOUT:
000070FF:	CALL 3ED4h			; LPTOUT:
00007102:	INC D
00007103:	DEC E
00007104:	JP NZ,70A3h
00007107:	LD A,0Dh
00007109:	CALL 3ED4h			; LPTOUT:
0000710C:	LD A,4Eh			; 'N'
0000710E:	CALL 3F27h			; Output ESC + value in A to LPT
00007111:	LD A,41h			; 'A'
00007113:	CALL 3F27h			; Output ESC + value in A to LPT
00007116:	POP BC
00007117:	CALL 3EF3h
0000711A:	POP HL
0000711B:	RET

0000711C:	LD A,0Dh
0000711E:	CALL 3ED4h			; LPTOUT:
00007121:	PUSH HL
00007122:	LD A,54h
00007124:	CALL 3F27h			; Output ESC + value in A to LPT
00007127:	LD HL,7235h
0000712A:	LD A,B
0000712B:	SUB 02h
0000712D:	JR Z,+04h
0000712F:	INC HL
00007130:	INC HL
00007131:	JR -08h
00007133:	LD A,(HL)
00007134:	CALL 3ED4h			; LPTOUT:
00007137:	INC HL
00007138:	LD A,(HL)
00007139:	CALL 3ED4h			; LPTOUT:
0000713C:	LD A,0Ah
0000713E:	CALL 3ED4h			; LPTOUT:
00007141:	POP HL
00007142:	RET

; copy text row to printer
00007143:	PUSH HL
00007144:	PUSH DE
00007145:	PUSH AF
00007146:	LD L,D
00007147:	CALL 431Eh			; Find text row address
0000714A:	EX DE,HL
0000714B:	LD DE,0001h
0000714E:	LD B,50h			; 80
00007150:	POP AF
00007151:	JP NC,7157h
00007154:	INC DE
00007155:	LD B,28h
00007157:	LD A,(HL)
00007158:	CP 20h				; ' '
0000715A:	JR NC,+02h
0000715C:	LD A,20h			; ' ', mask out unprintable characters
0000715E:	ADD HL,DE
0000715F:	CALL 3ED4h			; LPTOUT:
00007162:	DJNZ -0Dh
00007164:	POP DE
00007165:	POP HL
00007166:	LD A,0Dh
00007168:	CALL 3ED4h			; LPTOUT:
0000716B:	RET

0000716C:	PUSH HL
0000716D:	PUSH DE
0000716E:	PUSH BC
0000716F:	LD DE,EF91h
00007172:	PUSH BC
00007173:	PUSH DE
00007174:	LD A,(F04Bh)		; Current GVRAM bank to work on
00007177:	LD B,03h
00007179:	LD C,5Ch
0000717B:	LD D,00h
0000717D:	RRCA
0000717E:	JP NC,718Ch
00007181:	LD E,A
00007182:	LD A,D
00007183:	DI
00007184:	OUT (C),A
00007186:	OR (HL)
00007187:	OUTA (5Fh)			; GVRAM independent access mode bank selection - Main RAM
00007189:	EI
0000718A:	LD D,A
0000718B:	LD A,E
0000718C:	INC C
0000718D:	DJNZ -12h
0000718F:	EX HL,(SP)
00007190:	LD (HL),D
00007191:	INC HL
00007192:	EX HL,(SP)
00007193:	LD DE,0050h
00007196:	ADD HL,DE
00007197:	POP DE
00007198:	POP BC
00007199:	LD A,(E6A6h)
0000719C:	OR A
0000719D:	JR NZ,+0Ch
0000719F:	LD A,(EF0Dh)
000071A2:	OR A
000071A3:	JR NZ,+06h
000071A5:	EX DE,HL
000071A6:	LD (HL),00h
000071A8:	INC HL
000071A9:	EX DE,HL
000071AA:	DEC B
000071AB:	DJNZ -3Bh
000071AD:	POP BC
000071AE:	POP DE
000071AF:	POP HL
000071B0:	RET
000071B1:	PUSH HL
000071B2:	PUSH BC
000071B3:	LD B,08h
000071B5:	LD HL,EF98h
000071B8:	RLC (HL)
000071BA:	RLA
000071BB:	DEC HL
000071BC:	DJNZ -06h
000071BE:	POP BC
000071BF:	POP HL
000071C0:	RET

000071C1:	CALL 35C2h
000071C4:	RET C
000071C5:	PUSH DE
000071C6:	PUSH HL
000071C7:	CALL 720Ah
000071CA:	CALL 716Ch
000071CD:	CALL 71B1h
000071D0:	AND C
000071D1:	CALL 3ED4h			; LPTOUT:
000071D4:	DEC DE
000071D5:	LD A,E
000071D6:	AND 07h
000071D8:	JR NZ,-0Dh
000071DA:	INC HL
000071DB:	LD A,D
000071DC:	OR E
000071DD:	JR NZ,-15h
000071DF:	LD DE,0050h
000071E2:	LD A,(E6A6h)
000071E5:	OR A
000071E6:	JR NZ,+0Ah
000071E8:	LD A,(EF0Dh)
000071EB:	OR A
000071EC:	JP NZ,71F2h
000071EF:	LD DE,0028h
000071F2:	LD A,B
000071F3:	POP HL
000071F4:	ADD HL,DE
000071F5:	DJNZ -03h
000071F7:	LD B,A
000071F8:	CALL 711Ch
000071FB:	LD DE,FE80h
000071FE:	RST 20h			; CPDEHL - compare DE and HL (aka DCOMPR)
000071FF:	POP DE
00007200:	RET C
00007201:	LD A,02h
00007203:	LD (F04Bh),A		; Current GVRAM bank to work on
00007206:	LD HL,C000h
00007209:	RET

0000720A:	PUSH BC
0000720B:	PUSH HL
0000720C:	LD HL,0280h			; 640
0000720F:	LD (E6E9h),HL
00007212:	EX DE,HL
00007213:	LD HL,722Fh
00007216:	LD B,06h
00007218:	LD A,(HL)
00007219:	INC HL
0000721A:	CALL 3ED4h			; LPTOUT:
0000721D:	DJNZ -07h
0000721F:	POP HL
00007220:	POP BC
00007221:	RET

; set printer "skip over perforation" basing on text HEIGHT
00007222:	LD A,(EF88h)	; HEIGHT (TextHeight)
00007225:	CP 14h
00007227:	LD A,41h		; 65
00007229:	JR Z,+01h
0000722B:	INC A			; 66
0000722C:	JP 3F27h		; Output ESC + value in A to LPT

0000722F:	DEC DE
00007230:	LD D,E
00007231:	JR NC,+36h
00007233:	INC (HL)
00007234:	JR NC,+30h
00007236:	INC (HL)
00007237:	JR NC,+38h
00007239:	LD SP,3132h
0000723C:	LD (HL),47h
0000723D:				; FONT DATA READ
0000723E:	LD A,L
0000723F:	OUTA (E8h)
00007241:	LD A,H
00007242:	OUTA (E9h)
00007244:	OUTA (EAh)
00007246:	NOP
00007247:	NOP
00007248:	NOP
00007249:	NOP
0000724A:	INA (E9h)
0000724C:	LD (DE),A
0000724D:	INC DE
0000724E:	INA (E8h)
00007250:	LD (DE),A
00007251:	INC DE
00007252:	OUTA (EBh)
00007254:	INC L
00007255:	DJNZ -19h
00007257:	RET

00007258:	RST 08h				; Check syntax, 1 byte follows to be compared
00007259:	INA (CFh)
0000725B:	JR Z,-33h
0000725D:	LD A,L
0000725E:	NOP
0000725F:	RST 08h				; Check syntax, 1 byte follows to be compared
00007260:	DEFB ')'
00007261:	PUSH HL
00007262:	EX DE,HL
00007263:	CALL 18CCh
00007266:	PUSH AF
00007267:	LD DE,E9B9h
0000726A:	EX DE,HL
0000726B:	LD (HL),B
0000726C:	INC HL
0000726D:	LD (HL),00h
0000726F:	INC HL
00007270:	LD (HL),C
00007271:	INC HL
00007272:	LD (HL),00h
00007274:	INC HL
00007275:	EX DE,HL
00007276:	POP AF
00007277:	CALL 723Dh		; FONT DATA READ
0000727A:	LD DE,E9B9h
0000727D:	LD A,01h
0000727F:	LD (F013h),A
00007282:	LD A,(F01Fh)	; BAKCLR - background color
00007285:	LD (F015h),A
00007288:	LD A,(F01Eh)	; FORCLR - foreground color
0000728B:	LD (F014h),A
0000728E:	POP HL
0000728F:	RET

; FONT PATTERN ADDRESS SEARCH
00007290:	LD A,H
00007291:	OR A
00007292:	JR Z,+25h
00007294:	CP 03h
00007296:	JR C,+2Ah
00007298:	CP 30h
0000729A:	JR C,+13h
0000729C:	AND 1Fh
0000729E:	LD H,A
0000729F:	LD A,L
000072A0:	AND 60h
000072A2:	OR H
000072A3:	LD H,A
000072A4:	LD A,L
000072A5:	ADD A
000072A6:	ADD A
000072A7:	ADD A
000072A8:	LD L,A
000072A9:	ADD HL,HL
000072AA:	LD A,10h
000072AC:	LD C,A
000072AD:	LD B,A
000072AE:	RET

000072AF:	AND 07h
000072B1:	LD H,A
000072B2:	LD A,L
000072B3:	AND 60h
000072B5:	RRCA
000072B6:	RRCA
000072B7:	JR -17h
000072B9:	ADD HL,HL
000072BA:	ADD HL,HL
000072BB:	ADD HL,HL
000072BC:	LD A,08h
000072BE:	LD B,A
000072BF:	LD C,10h
000072C1:	RET

000072C2:	LD H,00h
000072C4:	ADD HL,HL
000072C5:	ADD HL,HL
000072C6:	LD DE,0800h
000072C9:	ADD HL,DE
000072CA:	LD A,04h
000072CC:	LD B,08h
000072CE:	LD C,B
000072CF:	RET

000072D0:	PUSH HL
000072D1:	LD C,A
000072D2:	RLCA
000072D3:	ADD C
000072D4:	LD C,A
000072D5:	LD B,00h
000072D7:	LD HL,(E6EFh)
000072DA:	ADD HL,BC
000072DB:	INC HL
000072DC:	LD (HL),E
000072DD:	INC HL
000072DE:	LD (HL),D
000072DF:	POP HL
000072E0:	RET

000072E1:	LD A,60h
000072E3:	OUTA (51h)		; CRTC
000072E5:	INA (50h)		; CRTC
000072E7:	LD H,A
000072E8:	INA (50h)		; CRTC
000072EA:	LD L,A
000072EB:	OR A
000072EC:	RET

000072ED:	RST 08h				; Check syntax, 1 byte follows to be compared
000072EE:	JR Z,-33h
000072F0:	AND E
000072F1:	JR -02h
000072F3:	INC BC
000072F4:	JP NC,0B06h			; FCERR, Err $05 - "Illegal function call"
000072F7:	PUSH AF
000072F8:	RST 08h				; Check syntax, 1 byte follows to be compared
000072F9:	DEFB ')'
000072FA:	POP AF
000072FB:	PUSH HL
000072FC:	OR A
000072FD:	JR NZ,+10h
000072FF:	LD A,04h
00007301:	CALL 4015h
00007304:	AND 04h
00007306:	RRCA
00007307:	RRCA
00007308:	CPL
00007309:	INC A
0000730A:	CALL 20B6h					; INT_RESULT_A - Get back from function, result in A (signed)
0000730D:	POP HL
0000730E:	RET

0000730F:	DEC A
00007310:	LD A,(EF81h)
00007313:	JR NZ,-0Bh
00007315:	LD A,(EF89h)		; Text WIDTH
00007318:	CP 29h
0000731A:	LD A,(EF82h)
0000731D:	JR NC,-15h
0000731F:	RRCA
00007320:	AND 3Fh
00007322:	JR -1Ah

00007324:	CALL EDDBh
00007327:	CP D9h
00007329:	LD BC,0601h
0000732C:	RET Z
0000732D:	CP 90h
0000732F:	LD BC,0001h
00007332:	RET Z
00007333:	CP FFh
00007335:	SCF
00007336:	RET NZ
00007337:	PUSH HL
00007338:	RST 10h			; CHRGTB - Gets next character (or token) from BASIC text.
00007339:	CP DCh
0000733B:	JR Z,+1Bh
0000733D:	CP DBh
0000733F:	LD BC,070Ah
00007342:	JR Z,+0Eh
00007344:	CP DAh
00007346:	LD BC,0103h
00007349:	JR Z,+07h
0000734B:	CP D8h
0000734D:	JR NZ,+06h
0000734F:	LD BC,0401h
00007352:	POP DE
00007353:	OR A
00007354:	RET
00007355:	POP HL
00007356:	SCF
00007357:	RET
00007358:	RST 10h			; CHRGTB - Gets next character (or token) from BASIC text.
00007359:	CALL 40D0h
0000735C:	PUSH HL
0000735D:	CALL 739Fh
00007360:	CALL 73BAh
00007363:	PUSH HL
00007364:	CALL 4047h
00007367:	CALL 739Fh
0000736A:	CALL 73BAh
0000736D:	EX DE,HL
0000736E:	POP HL
0000736F:	OR A
00007370:	SBC HL,DE
00007372:	JR NC,+04h
00007374:	LD DE,A8C0h
00007377:	ADD HL,HL
00007378:	LD DE,012Ch
0000737B:	PUSH HL
0000737C:	OR A
0000737D:	SBC HL,DE
0000737F:	JR C,+05h
00007381:	EX HL,(SP)
00007382:	INC HL
00007383:	EX HL,(SP)
00007384:	JR -0Ah
00007386:	POP HL
00007387:	LD (EFCBh),HL
0000738A:	LD A,FFh
0000738C:	LD (E6C7h),A
0000738F:	LD HL,04AEh
00007392:	LD (EFC9h),HL
00007395:	CALL 4250h
00007398:	POP HL
00007399:	LD BC,0501h
0000739C:	DEC HL
0000739D:	JR -4Dh
0000739F:	LD HL,F00Dh
000073A2:	LD B,03h
000073A4:	LD A,(HL)
000073A5:	RLCA
000073A6:	RLCA
000073A7:	RLCA
000073A8:	RLCA
000073A9:	AND 0Fh
000073AB:	RLCA
000073AC:	LD C,A
000073AD:	RLCA
000073AE:	RLCA
000073AF:	ADD C
000073B0:	LD C,A
000073B1:	LD A,(HL)
000073B2:	AND 0Fh
000073B4:	ADD C
000073B5:	LD (HL),A
000073B6:	INC HL
000073B7:	DJNZ -15h
000073B9:	RET
000073BA:	LD HL,F00Fh
000073BD:	LD E,(HL)
000073BE:	LD D,00h
000073C0:	PUSH HL
000073C1:	LD HL,0384h
000073C4:	CALL 7FFBh
000073C7:	EX HL,(SP)
000073C8:	DEC HL
000073C9:	LD E,(HL)
000073CA:	LD D,00h
000073CC:	PUSH HL
000073CD:	LD HL,001Eh
000073D0:	CALL 235Ah
000073D3:	EX HL,(SP)
000073D4:	DEC HL
000073D5:	LD A,(HL)
000073D6:	RRA
000073D7:	POP HL
000073D8:	LD E,A
000073D9:	LD D,00h
000073DB:	ADD HL,DE
000073DC:	POP DE
000073DD:	ADD HL,DE
000073DE:	RET

; "KEY LIST" command
000073DF:	RST 10h			; CHRGTB - Gets next character (or token) from BASIC text.
000073E0:	PUSH HL
000073E1:	LD HL,E6F2h		; FNKSTR - FUNCTION KEY AREA
000073E4:	LD DE,0050h
000073E7:	LD A,06h
000073E9:	DEC A
000073EA:	JR Z,+26h

000073EC:	PUSH AF
000073ED:	PUSH DE
000073EE:	PUSH HL
000073EF:	LD HL,(EF86h)
000073F2:	LD A,0Dh
000073F4:	CALL 3E0Dh		; output character to console
000073F7:	LD A,0Ah
000073F9:	CALL 3E0Dh		; output character to console
000073FC:	POP HL
000073FD:	PUSH HL
000073FE:	CALL 741Ah
00007401:	POP HL
00007402:	POP DE
00007403:	PUSH DE
00007404:	PUSH HL
00007405:	ADD HL,DE
00007406:	CALL 741Ah
00007409:	POP HL
0000740A:	LD DE,0010h
0000740D:	ADD HL,DE
0000740E:	POP DE
0000740F:	POP AF
00007410:	JR -29h

00007412:	LD HL,(EF86h)
00007415:	CALL 5A69h	; OUTDO_CRLF
00007418:	POP HL
00007419:	RET

0000741A:	LD B,10h
0000741C:	LD A,(HL)
0000741D:	OR A
0000741E:	JR NZ,+03h
00007420:	LD A,20h
00007422:	DEC HL
00007423:	PUSH HL
00007424:	PUSH BC
00007425:	CALL 447Dh
00007428:	POP BC
00007429:	POP HL
0000742A:	INC HL
0000742B:	DJNZ -11h
0000742D:	RET

_KEY:
0000742E:	CP 93h			; TK_LIST
00007430:	JP Z,73DFh

; KEY_CONFIG
00007433:	CP 28h 	; '('
00007435:	JR Z,+6Ah
00007437:	CP 90h			; TK_ON	"KEY ON"
00007439:	JR Z,+61h
0000743B:	CP EEh			; TK_OFF
0000743D:	JR Z,+45h
0000743F:	CP 95h			; TK_OK
00007441:	JR Z,+4Ah
00007443:	CALL 18A3h			; GETINT
00007446:	AND A
00007447:	JP Z,0B06h			; FCERR, Err $05 - "Illegal function call"
0000744A:	DEC A
0000744B:	CP 0Ah
0000744D:	JP NC,0B06h			; FCERR, Err $05 - "Illegal function call"
00007450:	EX DE,HL
00007451:	LD H,00h
00007453:	LD L,A
00007454:	ADD HL,HL
00007455:	ADD HL,HL
00007456:	ADD HL,HL
00007457:	ADD HL,HL
00007458:	LD BC,E6F2h		; FNKSTR - FUNCTION KEY AREA
0000745B:	ADD HL,BC
0000745C:	PUSH HL
0000745D:	EX DE,HL
0000745E:	RST 08h				; Check syntax, 1 byte follows to be compared
0000745F:	DEFB ','
00007460:	CALL 11D3h			; EVAL - evaluate expression
00007463:	PUSH HL
00007464:	CALL 56C9h
00007467:	LD A,(HL)
00007468:	CP 0Fh
0000746A:	JR C,+02h
0000746C:	LD A,0Fh
0000746E:	INC HL
0000746F:	LD E,(HL)
00007470:	INC HL
00007471:	LD D,(HL)
00007472:	POP HL
00007473:	EX HL,(SP)
00007474:	LD C,A
00007475:	LD B,00h
00007477:	AND A
00007478:	JR Z,+04h
0000747A:	EX DE,HL
0000747B:	LDIR
0000747D:	EX DE,HL
0000747E:	LD (HL),B
0000747F:	CALL 3F79h
00007482:	POP HL
00007483:	RET

; KEY OFF
00007484:	LD BC,74E1h
00007487:	RST 10h			; CHRGTB - Gets next character (or token) from BASIC text.
00007488:	LD A,09h
0000748A:	JP 4AD7h

0000748D:	LD BC,74DAh
00007490:	CALL 7487h
00007493:	POP AF
00007494:	EX DE,HL
00007495:	LD HL,09ABh
00007498:	EX HL,(SP)
00007499:	EX DE,HL
0000749A:	PUSH AF
0000749B:	RET

; KEY ON
0000749C:	LD BC,74E8h
0000749F:	JR -1Ah

000074A1:	RST 08h				; Check syntax, 1 byte follows to be compared
000074A2:	JR Z,-33h
000074A4:	AND E
000074A5:	JR +1Dh
000074A7:	RST 08h				; Check syntax, 1 byte follows to be compared
000074A8:	DEFB ')'
000074A9:	LD A,E
000074AA:	CP 0Ah
000074AC:	JP NC,0B06h			; FCERR, Err $05 - "Illegal function call"
000074AF:	PUSH AF
000074B0:	LD A,(HL)
000074B1:	PUSH AF
000074B2:	RST 10h			; CHRGTB - Gets next character (or token) from BASIC text.
000074B3:	JP NZ,0393h
000074B6:	POP AF
000074B7:	POP DE
000074B8:	PUSH HL
000074B9:	CP EEh
000074BB:	JR Z,+10h
000074BD:	CP 90h
000074BF:	JR Z,+12h
000074C1:	CP 95h
000074C3:	JP NZ,0B06h			; FCERR, Err $05 - "Illegal function call"
000074C6:	LD A,D
000074C7:	CALL 74DAh
000074CA:	POP HL
000074CB:	JR -3Ah
000074CD:	LD A,D
000074CE:	CALL 74E1h
000074D1:	POP HL
000074D2:	RET

000074D3:	LD A,D
000074D4:	CALL 74E8h
000074D7:	POP HL
000074D8:	RET
000074D9:	DEC A
000074DA:	CALL 4013h
000074DD:	JP 4FE5h
000074E0:	DEC A
000074E1:	CALL 4013h
000074E4:	JP 4FF5h
000074E7:	DEC A
000074E8:	CALL 4013h
000074EB:	JP 4FFBh

000074EE:	PUSH HL
000074EF:	CALL 4047h
000074F2:	JR C,+59h
000074F4:	LD A,08h
000074F6:	CALL 54EEh			; MKTMST - Make temporary string
000074F9:	LD HL,(EAEFh)
000074FC:	LD DE,F012h
000074FF:	CALL 7514h
00007502:	LD (HL),2Fh
00007504:	INC HL
00007505:	LD DE,F011h
00007508:	CALL 7526h
0000750B:	LD (HL),2Fh
0000750D:	INC HL
0000750E:	CALL 7514h
00007511:	JP 552Ch			; TSTOPL - Temporary string to pool

00007514:	LD C,10h
00007516:	LD A,(DE)
00007517:	DEC DE
00007518:	LD B,2Fh
0000751A:	SUB C
0000751B:	INC B
0000751C:	JR NC,-04h
0000751E:	ADD 30h
00007520:	ADD C
00007521:	LD (HL),B
00007522:	INC HL
00007523:	LD (HL),A
00007524:	INC HL
00007525:	RET

00007526:	LD C,0Ah
00007528:	JR -14h

0000752A:	PUSH HL
0000752B:	CALL 4047h
0000752E:	JR C,+1Dh
00007530:	LD A,08h
00007532:	CALL 54EEh			; MKTMST - Make temporary string
00007535:	LD HL,(EAEFh)
00007538:	LD DE,F00Fh
0000753B:	CALL 7514h
0000753E:	LD (HL),3Ah
00007540:	INC HL
00007541:	CALL 7514h
00007544:	LD (HL),3Ah
00007546:	INC HL
00007547:	CALL 7514h
0000754A:	JP 552Ch			; TSTOPL - Temporary string to pool

0000754D:	POP HL
0000754E:	RET

0000754F:	CALL EDF9h
00007552:	LD HL,EF35h
00007555:	CALL 758Ah
00007558:	LD (EF60h),A
0000755B:	LD HL,EF2Dh
0000755E:	CALL 758Ah
00007561:	LD (EF61h),A
00007564:	LD C,00h
00007566:	LD E,C
00007567:	LD HL,EF64h
0000756A:	LD A,(EF60h)
0000756D:	CALL 759Ah
00007570:	INC C
00007571:	LD A,(EF61h)
00007574:	CALL 759Ah
00007577:	INC C
00007578:	LD A,(EF63h)
0000757B:	OR A
0000757C:	JR Z,+01h
0000757E:	INC C
0000757F:	LD A,(EF62h)
00007582:	CALL 759Ah
00007585:	LD A,E
00007586:	LD (EC7Dh),A
00007589:	RET
0000758A:	LD C,00h
0000758C:	LD B,04h
0000758E:	LD A,(HL)
0000758F:	INC HL
00007590:	INC HL
00007591:	AND 10h
00007593:	JR NZ,+03h
00007595:	INC C
00007596:	DJNZ -0Ah
00007598:	LD A,C
00007599:	RET
0000759A:	DEC A
0000759B:	RET M
0000759C:	LD (HL),C
0000759D:	INC HL
0000759E:	INC E
0000759F:	JR -07h

000075A1:	LD A,04h
000075A3:	LD (EF14h),A
000075A6:	XOR A
000075A7:	LD (EF10h),A
000075AA:	LD A,0Bh
000075AC:	CALL 37C9h
000075AF:	LD A,07h
000075B1:	CALL 37D2h
000075B4:	LD A,5Fh
000075B6:	CALL 37D2h
000075B9:	XOR A
000075BA:	CALL 37D2h
000075BD:	LD A,01h
000075BF:	CALL 37D2h
000075C2:	CALL 3847h
000075C5:	CPL
000075C6:	AND F0h
000075C8:	LD (EF63h),A
000075CB:	OR A
000075CC:	RET Z
000075CD:	LD A,04h
000075CF:	LD (EF14h),A
000075D2:	LD A,17h
000075D4:	CALL 37C9h
000075D7:	LD A,0Fh
000075D9:	CALL 37D2h
000075DC:	RET

_RENUM:
000075DD:	LD BC,000Ah
000075E0:	PUSH BC
000075E1:	LD D,B
000075E2:	LD E,B
000075E3:	JR Z,+26h
000075E5:	CP 2Ch		; ','
000075E7:	JR Z,+09h
000075E9:	PUSH DE
000075EA:	CALL 0B0Bh			; LNUM_PARM - Read numeric function parameter
000075ED:	LD B,D
000075EE:	LD C,E
000075EF:	POP DE
000075F0:	JR Z,+19h
000075F2:	RST 08h				; Check syntax, 1 byte follows to be compared
000075F3:	DEFB ','
000075F4:	CALL 0B0Bh			; LNUM_PARM - Read numeric function parameter
000075F7:	JR Z,+12h
000075F9:	POP AF
000075FA:	RST 08h				; Check syntax, 1 byte follows to be compared
000075FB:	DEFB ','
000075FC:	PUSH DE
000075FD:	CALL 0B0Bh			; LNUM_PARM - Read numeric function parameter
00007600:	JP NZ,0393h
00007603:	LD A,D
00007604:	OR E
00007605:	JP Z,0B06h			; FCERR, Err $05 - "Illegal function call"
00007608:	EX DE,HL
00007609:	EX HL,(SP)
0000760A:	EX DE,HL
0000760B:	PUSH BC
0000760C:	CALL 0605h		; FIRST_LNUM  -  Get first line number
0000760F:	POP DE
00007610:	PUSH DE
00007611:	CALL 44B3h		; use bank pivot (read)
00007614:	PUSH BC
00007615:	CALL 0605h		; FIRST_LNUM  -  Get first line number
00007618:	CALL 44B3h		; use bank pivot (read)
0000761B:	LD H,B
0000761C:	LD L,C
0000761D:	POP DE
0000761E:	RST 20h			; CPDEHL - compare DE and HL (aka DCOMPR)
0000761F:	EX DE,HL
00007620:	JP C,0B06h			; FCERR, Err $05 - "Illegal function call"
00007623:	POP DE
00007624:	POP BC
00007625:	POP AF
00007626:	PUSH HL
00007627:	PUSH DE
00007628:	CALL 44A4h			; bank switching pivot (write)
0000762B:	JR +0Eh
0000762D:	ADD HL,BC
0000762E:	JP C,0B06h			; FCERR, Err $05 - "Illegal function call"
00007631:	EX DE,HL
00007632:	PUSH HL
00007633:	LD HL,FFF9h
00007636:	RST 20h			; CPDEHL - compare DE and HL (aka DCOMPR)
00007637:	POP HL
00007638:	JP C,0B06h			; FCERR, Err $05 - "Illegal function call"
0000763B:	PUSH DE
0000763C:	LD E,(HL)
0000763D:	INC HL
0000763E:	LD D,(HL)
0000763F:	LD A,D
00007640:	OR E
00007641:	EX DE,HL
00007642:	POP DE
00007643:	JR Z,+0Ah
00007645:	CALL 44A4h			; bank switching pivot (write)
00007648:	LD A,(HL)
00007649:	INC HL
0000764A:	OR (HL)
0000764B:	DEC HL
0000764C:	EX DE,HL
0000764D:	JR NZ,-22h
0000764F:	PUSH BC
00007650:	CALL 1BBAh
00007653:	POP BC
00007654:	POP DE
00007655:	POP HL
00007656:	PUSH DE
00007657:	CALL 44A4h			; bank switching pivot (write)
0000765A:	LD E,(HL)
0000765B:	INC HL
0000765C:	LD D,(HL)
0000765D:	LD A,D
0000765E:	OR E
0000765F:	JR Z,+0Dh
00007661:	EX DE,HL
00007662:	EX HL,(SP)
00007663:	EX DE,HL
00007664:	INC HL
00007665:	LD (HL),E
00007666:	INC HL
00007667:	LD (HL),D
00007668:	EX DE,HL
00007669:	ADD HL,BC
0000766A:	EX DE,HL
0000766B:	POP HL
0000766C:	JR -18h
0000766E:	CALL 1BBBh
00007671:	JP 047Ah

_PAINT:
00007674:	CALL 7939h
00007677:	CALL 6E2Bh		; COORD_PARMS - pick coodinate parameters from BASIC program
0000767A:	PUSH BC
0000767B:	PUSH DE
0000767C:	XOR A
0000767D:	LD (F051h),A
00007680:	LD (F058h),A		; TILEVL - title string level when paint starts
00007683:	CALL 77E4h		; PAINT setup (params, etc..)
00007686:	LD A,(F044h)	; ATRBYT (aka PPALET)
00007689:	LD E,A
0000768A:	DEC HL
0000768B:	RST 10h			; CHRGTB - Gets next character (or token) from BASIC text.
0000768C:	JR Z,+0Dh
0000768E:	RST 08h				; Check syntax, 1 byte follows to be compared
0000768F:	DEFB ','
00007690:	CP 2Ch		; ','
00007692:	LD A,(F044h)	; ATRBYT (aka PPALET)
00007695:	LD E,A
00007696:	JR Z,+03h	; __PAINT_0
00007698:	CALL 18A3h			; GETINT
; __PAINT_0
0000769B:	LD A,E
0000769C:	CALL 6392h
0000769F:	JP C,0B06h			; FCERR, Err $05 - "Illegal function call"
000076A2:	CALL 78FEh
000076A5:	POP DE
000076A6:	PUSH DE
000076A7:	PUSH HL
000076A8:	CALL 7896h
000076AB:	CALL 78AFh
000076AE:	CALL 7846h
000076B1:	POP HL
000076B2:	POP DE
000076B3:	POP BC
000076B4:	PUSH HL
000076B5:	CALL 7D8Fh
000076B8:	CALL 6518h		; MAPXY
000076BB:	LD DE,0001h
000076BE:	CALL 63C8h
000076C1:	CALL 77AEh
000076C4:	JR Z,+14h
000076C6:	PUSH HL
000076C7:	CALL 77C0h
000076CA:	POP DE
000076CB:	ADD HL,DE
000076CC:	EX DE,HL
000076CD:	LD A,40h
000076CF:	CALL 77A1h
000076D2:	LD A,(F058h)		; TILEVL - title string level when paint starts
000076D5:	OR C0h
000076D7:	LD B,A
000076D8:	JR +0Ch
; __PAINT_1
000076DA:	POP HL
000076DB:	RET

000076DC:	CALL 368Ch			; CKCNTC
000076DF:	CALL 799Dh
000076E2:	LD A,C
000076E3:	CALL 6606h		; STOREC
000076E6:	LD A,B
000076E7:	LD (F06Ah),A	; PDIREC
000076EA:	AND 3Fh
000076EC:	LD (F058h),A		; TILEVL - title string level when paint starts
000076EF:	LD A,B
000076F0:	ADD A
000076F1:	JR Z,-19h
000076F3:	PUSH DE
000076F4:	JR NC,+05h
000076F6:	CALL 646Ch
000076F9:	JR +03h
000076FB:	CALL 648Eh
000076FE:	POP DE
000076FF:	JR C,-22h
00007701:	LD A,(F058h)		; TILEVL - title string level when paint starts
00007704:	LD C,A
00007705:	LD HL,F06Ah	; PDIREC
00007708:	LD A,(HL)
00007709:	AND C0h
0000770B:	OR C
0000770C:	LD (HL),A
0000770D:	CALL 63C8h
00007710:	CALL 77AEh
00007713:	JP Z,76DFh
00007716:	CALL 77C0h
00007719:	LD E,L
0000771A:	LD D,H
0000771B:	OR A
0000771C:	JR Z,+1Ah
0000771E:	DEC HL
0000771F:	DEC HL
00007720:	LD A,H
00007721:	ADD A
00007722:	JR C,+14h
00007724:	LD A,(F06Ah)	; PDIREC
00007727:	XOR 80h
00007729:	LD C,A
0000772A:	LD A,(F058h)		; TILEVL - title string level when paint starts
0000772D:	OR C
0000772E:	PUSH AF
0000772F:	CALL 65F2h		; FETCHC
00007732:	LD C,A
00007733:	POP AF
00007734:	LD B,A
00007735:	CALL 7971h
;
00007738:	LD HL,(F06Bh)	; MOVCNT
0000773B:	ADD HL,DE
0000773C:	EX DE,HL
0000773D:	CALL 7790h
;
00007740:	LD HL,(F04Ch)	; CSAVEA (SAVESP)
00007743:	LD A,(F04Eh)	; CSAVEM
00007746:	CALL 6606h		; STOREC
;
00007749:	LD HL,(F06Dh)	; SKPCNT  (VIEW1)
0000774C:	LD DE,(F06Bh)	; MOVCNT
00007750:	OR A
00007751:	SBC HL,DE
00007753:	JR Z,+38h
00007755:	JR C,+1Ah
00007757:	EX DE,HL
00007758:	CALL 77AEh
0000775B:	JR Z,+30h
0000775D:	OR A
0000775E:	JR Z,-17h
00007760:	EX DE,HL
00007761:	LD HL,(F04Ch)	; CSAVEA (SAVESP)
00007764:	LD A,(F04Eh)	; CSAVEM
00007767:	LD C,A
00007768:	LD A,(F06Ah)	; PDIREC
0000776B:	LD B,A
0000776C:	CALL 77A6h
0000776F:	JR -28h

00007771:	CALL 7E5Fh		; INVSGN_HL
00007774:	DEC HL
00007775:	DEC HL
00007776:	LD A,H
00007777:	ADD A
00007778:	JR C,+13h
0000777A:	INC HL
0000777B:	PUSH HL
0000777C:	CALL 658Eh		; LEFTC
0000777F:	DEC HL
00007780:	LD A,H
00007781:	OR L
00007782:	JR NZ,-08h
00007784:	POP DE
00007785:	LD A,(F06Ah)	; PDIREC
00007788:	XOR 80h
0000778A:	CALL 77A1h
0000778D:	JP 76DCh

00007790:	LD A,(F06Fh)	; LFPROG
00007793:	LD C,A
00007794:	LD A,(F070h)	; RTPROG
00007797:	OR C
00007798:	LD C,A
00007799:	LD A,(F051h)
0000779C:	OR C
0000779D:	RET Z
0000779E:	LD A,(F06Ah)	; PDIREC
000077A1:	LD B,A
000077A2:	CALL 65F2h		; FETCHC
000077A5:	LD C,A
000077A6:	LD A,(F058h)		; TILEVL - title string level when paint starts
000077A9:	OR B
000077AA:	LD B,A
000077AB:	JP 7971h

000077AE:	CALL 631Ah
000077B1:	EX DE,HL
000077B2:	LD (F06Dh),HL	; SKPCNT  (VIEW1)
000077B5:	EX DE,HL
000077B6:	LD (F06Bh),HL	; MOVCNT
000077B9:	LD A,H
000077BA:	OR L
000077BB:	LD A,C
000077BC:	LD (F070h),A
000077BF:	RET

000077C0:	CALL 65F2h		; FETCHC
000077C3:	PUSH HL
000077C4:	PUSH AF
000077C5:	LD HL,(F04Ch)	; CSAVEA (SAVESP)
000077C8:	LD A,(F04Eh)	; CSAVEM
000077CB:	CALL 6606h		; STOREC
000077CE:	POP AF
000077CF:	POP HL
000077D0:	LD (F04Ch),HL	; CSAVEA (SAVESP)
000077D3:	LD (F04Eh),A	; CSAVEM
000077D6:	CALL 628Bh
000077D9:	LD A,C
000077DA:	LD (F06Fh),A	; LFPROG
000077DD:	RET

; INVSGN_DE
000077DE:	EX DE,HL
000077DF:	CALL 7E5Fh		; INVSGN_HL
000077E2:	EX DE,HL
000077E3:	RET

; PAINT setup (params, etc..)
000077E4:	XOR A
000077E5:	LD (F056h),A		; TILFLG - tile string flag
000077E8:	LD A,(F01Eh)	; FORCLR - foreground color
000077EB:	LD E,A
000077EC:	DEC HL
000077ED:	RST 10h			; CHRGTB - Gets next character (or token) from BASIC text.
000077EE:	JP Z,7802h
000077F1:	RST 08h				; Check syntax, 1 byte follows to be compared
000077F2:	DEFB ','
000077F3:	CP 2Ch		; ','
000077F5:	JR Z,+0Bh
000077F7:	CALL 11D3h			; EVAL - evaluate expression
000077FA:	RST 30h				; GETYPR -  Test number FAC type (Precision mode, etc..)
000077FB:	PUSH HL
000077FC:	JR Z,+0Eh
000077FE:	CALL 18A6h
00007801:	POP HL
00007802:	LD A,E
00007803:	CALL 66A0h		; set pen color
00007806:	JP C,0B06h			; FCERR, Err $05 - "Illegal function call"
00007809:	JP 0A0Eh

0000780C:	LD A,01h
0000780E:	LD (F056h),A		; TILFLG - tile string flag
00007811:	CALL 6000h
00007814:	LD HL,(EC41h)			; FPREG - Floating Point Register (FACCU, FACLOW on Ext. BASIC)
00007817:	LD C,(HL)
00007818:	INC HL
00007819:	LD E,(HL)
0000781A:	INC HL
0000781B:	LD D,(HL)
0000781C:	EX DE,HL
0000781D:	LD (F04Fh),HL		; TILTOP - tile string top address
00007820:	CALL 643Bh
00007823:	LD A,C
00007824:	CP B
00007825:	JP C,0B06h			; FCERR, Err $05 - "Illegal function call"
00007828:	LD E,FFh
0000782A:	INC E
0000782B:	SUB B
0000782C:	JP NC,782Ah
0000782F:	DEC E
00007830:	ADD B
00007831:	LD B,A
00007832:	LD A,C
00007833:	SUB B
00007834:	LD C,A
00007835:	LD B,00h
00007837:	ADD HL,BC
00007838:	LD (F052h),HL
0000783B:	LD A,E
0000783C:	LD (F057h),A		; TILLEN - tile string length
0000783F:	CP 40h
00007841:	JP NC,0B06h			; FCERR, Err $05 - "Illegal function call"
00007844:	POP HL
00007845:	RET

00007846:	LD A,(F056h)		; TILFLG - tile string flag
00007849:	OR A
0000784A:	RET Z
0000784B:	LD HL,(F04Fh)		; TILTOP - tile string top address
0000784E:	EX DE,HL
0000784F:	LD HL,(F054h)		; UDVLIM - view limit
00007852:	CALL 643Bh
00007855:	LD C,03h
00007857:	PUSH DE
00007858:	PUSH BC
00007859:	PUSH HL
0000785A:	CALL 7887h
0000785D:	JP NZ,786Bh
00007860:	CALL 787Bh
00007863:	POP HL
00007864:	POP BC
00007865:	DEC C
00007866:	JR NZ,-10h
00007868:	JP 0B06h			; FCERR, Err $05 - "Illegal function call"

0000786B:	POP HL
0000786C:	POP BC
0000786D:	EX HL,(SP)
0000786E:	LD C,B
0000786F:	LD B,00h
00007871:	ADD HL,BC
00007872:	LD B,C
00007873:	EX DE,HL
00007874:	CALL 787Bh
00007877:	POP HL
00007878:	JR NZ,-25h
0000787A:	RET
0000787B:	PUSH HL
0000787C:	LD HL,(F052h)
0000787F:	RST 20h			; CPDEHL - compare DE and HL (aka DCOMPR)
00007880:	POP HL
00007881:	RET NZ
00007882:	LD DE,(F04Fh)		; TILTOP - tile string top address
00007886:	RET

00007887:	LD A,(DE)
00007888:	CP (HL)
00007889:	RET NZ
0000788A:	INC DE
0000788B:	INC HL
0000788C:	DJNZ -07h
0000788E:	RET
0000788F:	DEC B
00007890:	RET Z
00007891:	LD C,A
00007892:	ADD C
00007893:	DJNZ -03h
00007895:	RET

00007896:	LD A,(F056h)		; TILFLG - tile string flag
00007899:	OR A
0000789A:	RET Z
0000789B:	LD A,(F057h)		; TILLEN - tile string length
0000789E:	INC A
0000789F:	EX DE,HL
000078A0:	LD E,A
000078A1:	LD D,00h
000078A3:	OR A
000078A4:	SBC HL,DE
000078A6:	JP NC,78A3h
000078A9:	ADD HL,DE
000078AA:	LD A,L
000078AB:	LD (F058h),A		; TILEVL - title string level when paint starts
000078AE:	RET

000078AF:	LD A,(F056h)		; TILFLG - tile string flag
000078B2:	OR A
000078B3:	RET Z
000078B4:	LD HL,(F04Fh)		; TILTOP - tile string top address
000078B7:	CALL 643Bh
000078BA:	LD A,(F058h)		; TILEVL - title string level when paint starts
000078BD:	PUSH BC
000078BE:	CALL 788Fh
000078C1:	LD E,A
000078C2:	LD D,00h
000078C4:	ADD HL,DE
000078C5:	PUSH HL
000078C6:	CALL 6445h
000078C9:	XOR A
000078CA:	LD (F051h),A
000078CD:	POP DE
000078CE:	LD HL,(F054h)		; UDVLIM - view limit
000078D1:	POP BC
000078D2:	CALL 7887h
000078D5:	RET NZ
000078D6:	LD A,01h
000078D8:	LD (F051h),A
000078DB:	RET

000078DC:	LD A,(F058h)		; TILEVL - title string level when paint starts
000078DF:	DEC A
000078E0:	LD (F058h),A		; TILEVL - title string level when paint starts
000078E3:	RET P
000078E4:	LD A,(F057h)		; TILLEN - tile string length
000078E7:	LD (F058h),A
000078EA:	RET

000078EB:	LD A,(F058h)		; TILEVL - title string level when paint starts
000078EE:	INC A
000078EF:	LD (F058h),A		; TILEVL - title string level when paint starts
000078F2:	LD C,A
000078F3:	LD A,(F057h)		; TILLEN - tile string length
000078F6:	INC A
000078F7:	CP C
000078F8:	RET NZ
000078F9:	XOR A
000078FA:	LD (F058h),A		; TILEVL - title string level when paint starts
000078FD:	RET

000078FE:	LD A,(F056h)		; TILFLG - tile string flag
00007901:	OR A
00007902:	RET Z
00007903:	DEC HL
00007904:	RST 10h			; CHRGTB - Gets next character (or token) from BASIC text.
00007905:	JR Z,+23h
00007907:	RST 08h				; Check syntax, 1 byte follows to be compared
00007908:	DEFB ','
00007909:	CALL 11D3h			; EVAL - evaluate expression
0000790C:	RST 30h				; GETYPR -  Test number FAC type (Precision mode, etc..)
0000790D:	JP NZ,0B06h			; FCERR, Err $05 - "Illegal function call"
00007910:	PUSH HL
00007911:	CALL 56CCh
00007914:	LD HL,(EC41h)			; FPREG - Floating Point Register (FACCU, FACLOW on Ext. BASIC)
00007917:	LD C,(HL)
00007918:	INC HL
00007919:	LD E,(HL)
0000791A:	INC HL
0000791B:	LD D,(HL)
0000791C:	EX DE,HL
0000791D:	LD (F054h),HL		; UDVLIM - view limit
00007920:	CALL 643Bh
00007923:	LD A,C
00007924:	CP B
00007925:	JP C,0B06h			; FCERR, Err $05 - "Illegal function call"
00007928:	POP HL
00007929:	RET

0000792A:	PUSH HL
0000792B:	LD HL,F059h
0000792E:	LD (F054h),HL		; UDVLIM - view limit
00007931:	CALL 643Bh
00007934:	CALL 6451h
00007937:	POP HL
00007938:	RET

00007939:	PUSH HL
0000793A:	LD HL,(EB1Fh)
0000793D:	EX DE,HL
0000793E:	PUSH DE
0000793F:	LD HL,(EAF1h)
00007942:	OR A
00007943:	SBC HL,DE
00007945:	LD DE,03E8h
00007948:	RST 20h			; CPDEHL - compare DE and HL (aka DCOMPR)
00007949:	JP NC,794Fh
0000794C:	CALL 559Ah
0000794F:	POP DE
00007950:	LD HL,(EAF1h)
00007953:	OR A
00007954:	SBC HL,DE
00007956:	LD DE,000Ch
00007959:	RST 20h			; CPDEHL - compare DE and HL (aka DCOMPR)
0000795A:	JP C,4ED6h
0000795D:	LD (F062h),HL		; LIMIT - stack area limit address +10
00007960:	LD HL,0000h
00007963:	LD (F064h),HL
00007966:	LD HL,(EB1Fh)
00007969:	LD (F066h),HL
0000796C:	LD (F068h),HL
0000796F:	POP HL
00007970:	RET

00007971:	PUSH DE
00007972:	PUSH HL
00007973:	LD HL,(F064h)
00007976:	LD DE,0006h
00007979:	ADD HL,DE
0000797A:	LD (F064h),HL
0000797D:	LD DE,(F062h)		; LIMIT - stack area limit address +10
00007981:	RST 20h			; CPDEHL - compare DE and HL (aka DCOMPR)
00007982:	JP NC,4ED6h
00007985:	LD HL,(F066h)
00007988:	CALL 79C6h
0000798B:	POP DE
0000798C:	LD (HL),E
0000798D:	INC HL
0000798E:	LD (HL),D
0000798F:	INC HL
00007990:	LD (HL),C
00007991:	INC HL
00007992:	LD (HL),B
00007993:	INC HL
00007994:	POP DE
00007995:	LD (HL),E
00007996:	INC HL
00007997:	LD (HL),D
00007998:	INC HL
00007999:	LD (F066h),HL
0000799C:	RET
0000799D:	LD HL,(F064h)
000079A0:	LD A,H
000079A1:	OR L
000079A2:	LD B,00h
000079A4:	RET Z
000079A5:	LD DE,0006h
000079A8:	OR A
000079A9:	SBC HL,DE
000079AB:	LD (F064h),HL
000079AE:	LD HL,(F068h)
000079B1:	CALL 79C6h
000079B4:	LD E,(HL)
000079B5:	INC HL
000079B6:	LD D,(HL)
000079B7:	INC HL
000079B8:	PUSH DE
000079B9:	LD C,(HL)
000079BA:	INC HL
000079BB:	LD B,(HL)
000079BC:	INC HL
000079BD:	LD E,(HL)
000079BE:	INC HL
000079BF:	LD D,(HL)
000079C0:	INC HL
000079C1:	LD (F068h),HL
000079C4:	POP HL
000079C5:	RET

000079C6:	PUSH HL
000079C7:	LD DE,0006h
000079CA:	ADD HL,DE
000079CB:	LD DE,(EAF1h)
000079CF:	RST 20h			; CPDEHL - compare DE and HL (aka DCOMPR)
000079D0:	POP HL
000079D1:	RET C
000079D2:	LD HL,(EB1Fh)
000079D5:	RET

; _CIRCLE
000079D6:	CALL 6E2Bh			; COORD_PARMS - pick coodinate parameters from BASIC program
000079D9:	RST 08h				; Check syntax, 1 byte follows to be compared
000079DA:	DEFB ','
000079DB:	CALL 11D3h			; EVAL - evaluate expression
000079DE:	PUSH HL
000079DF:	CALL 2214h				; CSNG - Convert number to single precision
000079E2:	LD A,(EC43h)		; LAST_FPREG - Last byte in Single Precision FP Register (+sign bit)
000079E5:	OR A				; test FP number sign
000079E6:	JP M,0B06h			; FCERR, Err $05 - "Illegal function call"
000079E9:	CALL 6509h
000079EC:	CALL 21A0h			; CINT
000079EF:	EX DE,HL
000079F0:	POP HL
000079F1:	PUSH HL
000079F2:	EX DE,HL
000079F3:	LD (F01Ah),HL		; GXPOS
000079F6:	CALL 21FDh				; INT_RESULT_HL
000079F9:	CALL 2214h				; CSNG - Convert number to single precision
000079FC:	LD BC,8035h			; on MSX BCDE is set to 0.707107
000079FF:	LD DE,04F3h
00007A02:	CALL 1F53h			; FPMULT - Multiply BCDE to FP reg
00007A05:	CALL 21A0h			; CINT
00007A08:	LD (F07Ch),HL		; CNPNTS
00007A0B:	XOR A
00007A0C:	LD (F07Bh),A		; CLINEF
00007A0F:	LD (F084h),A		; CSCLXY
00007A12:	POP HL
00007A13:	CALL 7E34h			; PAINT_PARMS -  pick color/fill related parameters from BASIC program
00007A16:	LD C,01h
00007A18:	LD DE,0000h
00007A1B:	CALL 7BD7h			; CIRCLE_SUB
00007A1E:	PUSH DE
00007A1F:	LD C,80h
00007A21:	LD DE,FFFFh
00007A24:	CALL 7BD7h			; CIRCLE_SUB
00007A27:	EX HL,(SP)
00007A28:	XOR A
00007A29:	EX DE,HL
00007A2A:	RST 20h			; CPDEHL - compare DE and HL (aka DCOMPR)
00007A2B:	LD A,00h
00007A2D:	JR NC,+02h
00007A2F:	DEC A
00007A30:	EX DE,HL
00007A31:	LD (F07Ah),A		; CPLOTF
00007A34:	EX DE,HL
00007A35:	LD (F074h),HL	; CSTCNT
00007A38:	EX DE,HL
00007A39:	LD (F076h),HL	; CENCNT
00007A3C:	POP HL
00007A3D:	DEC HL
00007A3E:	RST 10h			; CHRGTB - Gets next character (or token) from BASIC text.
00007A3F:	JR NZ,+06h
00007A41:	PUSH HL
00007A42:	CALL 604Bh
00007A45:	JR +1Fh	; __CIRCLE_3
;__CIRCLE_1:
00007A47:	RST 08h				; Check syntax, 1 byte follows to be compared
00007A48:	DEFB ','
00007A49:	CALL 11D3h			; EVAL - evaluate expression
00007A4C:	PUSH HL
00007A4D:	CALL 2214h				; CSNG - Convert number to single precision
00007A50:	CALL 7C28h			; FCOMP_UNITY... == 1 ?
00007A53:	JR NZ,+07h
00007A55:	INC A
00007A56:	LD (F084h),A		; CSCLXY
00007A59:	CALL 1FB7h			; FDIV
; __CIRCLE_2:
00007A5C:	LD HL,EC44h			; FPEXP - Floating Point Exponent	
00007A5F:	LD A,(HL)
00007A60:	ADD 08h
00007A62:	LD (HL),A
00007A63:	CALL 21A0h			; CINT
;__CIRCLE_3:
00007A66:	LD (F072h),HL		; ASPECT
00007A69:	LD DE,0000h
00007A6C:	EX DE,HL
00007A6D:	LD (F078h),HL		; CRCSUM
00007A70:	EX DE,HL
00007A71:	LD HL,(F01Ah)		; GXPOS
00007A74:	ADD HL,HL
00007A75:	CALL 368Ch			; CKCNTC
;__CIRCLE_4:
00007A78:	LD A,E
00007A79:	RRA
00007A7A:	JR C,+16h		; __CIRCLE_5
00007A7C:	PUSH DE
00007A7D:	PUSH HL
00007A7E:	INC HL
00007A7F:	EX DE,HL
00007A80:	CALL 7FBDh		; "RR DE"
00007A83:	EX DE,HL
00007A84:	INC DE
00007A85:	CALL 7FBDh		; "RR DE"
00007A88:	CALL 7ABEh		; CIRCLE_SUB_0
00007A8B:	POP DE
00007A8C:	POP HL
00007A8D:	RST 20h			; CPDEHL - compare DE and HL (aka DCOMPR)
00007A8E:	JP NC,76DAh		; __PAINT_1
00007A91:	EX DE,HL
; __CIRCLE_5
00007A92:	LD B,H
00007A93:	LD C,L
00007A94:	LD HL,(F078h)		; CRCSUM
00007A97:	INC HL
00007A98:	ADD HL,DE
00007A99:	ADD HL,DE
00007A9A:	LD A,H
00007A9B:	ADD A
00007A9C:	JR C,+0Ch
00007A9E:	PUSH DE
00007A9F:	EX DE,HL
00007AA0:	LD H,B
00007AA1:	LD L,C
00007AA2:	ADD HL,HL
00007AA3:	DEC HL
00007AA4:	EX DE,HL
00007AA5:	OR A
00007AA6:	SBC HL,DE
00007AA8:	DEC BC
00007AA9:	POP DE
; __CIRCLE_6
00007AAA:	LD (F078h),HL		; CRCSUM
00007AAD:	LD H,B
00007AAE:	LD L,C
00007AAF:	INC DE
00007AB0:	JR -3Dh
00007AB2:	PUSH DE
00007AB3:	CALL 7BABh
00007AB6:	POP HL
00007AB7:	LD A,(F084h)		; CSCLXY
00007ABA:	OR A
00007ABB:	RET Z
00007ABC:	EX DE,HL
00007ABD:	RET

; CIRCLE_SUB_0 - Used by the routine at __CIRCLE.
00007ABE:	EX DE,HL
00007ABF:	LD (F085h),HL		; CPCNT
00007AC2:	EX DE,HL
00007AC3:	PUSH HL
00007AC4:	LD HL,0000h
00007AC7:	LD (F07Eh),HL		; CPCNT8
00007ACA:	CALL 7AB2h
00007ACD:	LD (F080h),HL		; CXOFF
00007AD0:	POP HL
00007AD1:	EX DE,HL
00007AD2:	PUSH HL
00007AD3:	CALL 7AB2h
00007AD6:	EX DE,HL
00007AD7:	LD (F082h),HL		; CYOFF
00007ADA:	EX DE,HL
00007ADB:	POP DE
00007ADC:	CALL 77DEh			; INVSGN_DE
00007ADF:	CALL 7B02h
00007AE2:	PUSH HL
00007AE3:	PUSH DE
00007AE4:	LD HL,(F07Ch)		; CNPNTS
00007AE7:	LD (F07Eh),HL		; CPCNT8
00007AEA:	LD DE,(F085h)		; CPCNT
00007AEE:	OR A
00007AEF:	SBC HL,DE
00007AF1:	LD (F085h),HL		; CPCNT
00007AF4:	LD HL,(F080h)		; CXOFF
00007AF7:	CALL 7E5Fh		; INVSGN_HL
00007AFA:	LD (F080h),HL		; CXOFF
00007AFD:	POP DE
00007AFE:	POP HL
00007AFF:	CALL 77DEh			; INVSGN_DE
00007B02:	LD A,04h
00007B04:	PUSH AF
00007B05:	PUSH HL
00007B06:	PUSH DE
00007B07:	PUSH HL
00007B08:	PUSH DE
00007B09:	LD DE,(F07Eh)		; CPCNT8
00007B0D:	LD HL,(F07Ch)		; CNPNTS
00007B10:	ADD HL,HL
00007B11:	ADD HL,DE
00007B12:	LD (F07Eh),HL		; CPCNT8
00007B15:	LD HL,(F085h)	; CPCNT
00007B18:	ADD HL,DE
00007B19:	EX DE,HL
00007B1A:	LD HL,(F074h)	; CSTCNT
00007B1D:	RST 20h			; CPDEHL - compare DE and HL (aka DCOMPR)
00007B1E:	JR Z,+1Ah
00007B20:	JR NC,+08h
00007B22:	LD HL,(F076h)	; CENCNT
00007B25:	RST 20h			; CPDEHL - compare DE and HL (aka DCOMPR)
00007B26:	JR Z,+0Ah
00007B28:	JR NC,+20h
00007B2A:	LD A,(F07Ah)		; CPLOTF
00007B2D:	OR A
00007B2E:	JR NZ,+24h
00007B30:	JR +1Eh
00007B32:	LD A,(F07Bh)		; CLINEF
00007B35:	ADD A
00007B36:	JR NC,+1Ch
00007B38:	JR +06h
00007B3A:	LD A,(F07Bh)		; CLINEF
00007B3D:	RRA
00007B3E:	JR NC,+14h
00007B40:	POP DE
00007B41:	POP HL
00007B42:	CALL 7B9Ch			; CALC_POSITION
00007B45:	CALL 7B87h			; DRAW_LINE_GRPAC
00007B48:	JR +1Ah

00007B4A:	LD A,(F07Ah)		; CPLOTF
00007B4D:	OR A
00007B4E:	JR Z,+04h
00007B50:	POP DE
00007B51:	POP HL
00007B52:	JR +10h
00007B54:	POP DE
00007B55:	POP HL
00007B56:	CALL 7B9Ch			; CALC_POSITION
00007B59:	CALL 64C0h			; SCALXY - Scales X and Y coordinates
00007B5C:	JR NC,+06h
00007B5E:	CALL 6518h		; MAPXY
00007B61:	CALL 66D7h		; SETC - Returns current screenpixel of specified attribute byte
00007B64:	POP DE
00007B65:	POP HL
00007B66:	POP AF
00007B67:	DEC A
00007B68:	RET Z
00007B69:	PUSH AF
00007B6A:	PUSH DE
00007B6B:	LD DE,(F080h)		; CXOFF
00007B6F:	CALL 77DEh			; INVSGN_DE
00007B72:	LD (F080h),HL		; CXOFF
00007B75:	EX DE,HL
00007B76:	POP DE
00007B77:	PUSH HL
00007B78:	LD HL,(F082h)		; CYOFF
00007B7B:	EX DE,HL
00007B7C:	LD (F082h),HL		; CYOFF
00007B7F:	CALL 77DEh			; INVSGN_DE
00007B82:	POP HL
00007B83:	POP AF
00007B84:	JP 7B04h

; DRAW_LINE_GRPAC
00007B87:	LD HL,(F027h)		; GRPACX
00007B8A:	LD (F01Ah),HL		; GXPOS
00007B8D:	LD HL,(F029h)		; GRPACY
00007B90:	LD (F01Ch),HL		; GYPOS
00007B93:	LD HL,FFFFh
00007B96:	LD (F025h),HL
00007B99:	JP 7F47h		; DRAW_LINE


; CALC_POSITION
00007B9C:	PUSH DE
00007B9D:	LD DE,(F027h)		; GRPACX
00007BA1:	ADD HL,DE
00007BA2:	LD B,H
00007BA3:	LD C,L
00007BA4:	POP DE
00007BA5:	LD HL,(F029h)		; GRPACY
00007BA8:	ADD HL,DE
00007BA9:	EX DE,HL
00007BAA:	RET
00007BAB:	LD HL,(F072h)		; ASPECT
00007BAE:	LD A,L
00007BAF:	OR A
00007BB0:	JR NZ,+04h
00007BB2:	OR H
00007BB3:	RET NZ
00007BB4:	EX DE,HL
00007BB5:	RET
00007BB6:	LD C,D
00007BB7:	LD D,00h
00007BB9:	PUSH AF
00007BBA:	CALL 7BCAh
00007BBD:	LD E,80h
00007BBF:	ADD HL,DE
00007BC0:	LD E,C
00007BC1:	LD C,H
00007BC2:	POP AF
00007BC3:	CALL 7BCAh
00007BC6:	LD E,C
00007BC7:	ADD HL,DE
00007BC8:	EX DE,HL
00007BC9:	RET
00007BCA:	LD B,08h
00007BCC:	LD HL,0000h
00007BCF:	ADD HL,HL
00007BD0:	ADD A
00007BD1:	JR NC,+01h
00007BD3:	ADD HL,DE
00007BD4:	DJNZ -07h
00007BD6:	RET

; CIRCLE_SUB
00007BD7:	DEC HL
00007BD8:	RST 10h			; CHRGTB - Gets next character (or token) from BASIC text.
00007BD9:	RET Z
00007BDA:	RST 08h				; Check syntax, 1 byte follows to be compared
00007BDB:	DEFB ','
00007BDC:	CP 2Ch		; ','
00007BDE:	RET Z
00007BDF:	PUSH BC
00007BE0:	CALL 11D3h			; EVAL - evaluate expression
00007BE3:	EX HL,(SP)
00007BE4:	PUSH HL
00007BE5:	CALL 2214h				; CSNG - Convert number to single precision
00007BE8:	POP BC
00007BE9:	LD HL,EC44h			; FPEXP - Floating Point Exponent	
00007BEC:	LD A,(HL)
00007BED:	OR A
00007BEE:	JR Z,+0Fh
00007BF0:	DEC HL
00007BF1:	LD A,(HL)
00007BF2:	OR A
00007BF3:	JP P,7BFFh		; CIRCLE_SUB_0
00007BF6:	AND 7Fh
00007BF8:	LD (HL),A
00007BF9:	LD HL,F07Bh		; CLINEF
00007BFC:	LD A,(HL)
00007BFD:	OR C
00007BFE:	LD (HL),A
; CIRCLE_SUB_0
00007BFF:	LD BC,7E22h		; on MSX BCDE was 0.159155
00007C02:	LD DE,F983h
00007C05:	CALL 1F53h		; FPMULT - Multiply BCDE to FP reg
00007C08:	CALL 7C28h		; FCOMP_UNITY... == 1 ?
00007C0B:	JP Z,0B06h			; FCERR, Err $05 - "Illegal function call"
00007C0E:	CALL 20CDh
00007C11:	LD HL,(F07Ch)		; CNPNTS
00007C14:	ADD HL,HL
00007C15:	ADD HL,HL
00007C16:	ADD HL,HL
00007C17:	CALL 21FDh				; INT_RESULT_HL
00007C1A:	CALL 2214h				; CSNG - Convert number to single precision
00007C1D:	POP BC
00007C1E:	POP DE
00007C1F:	CALL 1F53h		; FPMULT - Multiply BCDE to FP reg
00007C22:	CALL 21A0h			; CINT
00007C25:	POP DE
00007C26:	EX DE,HL
00007C27:	RET

; FCOMP_UNITY... == 1 ?
00007C28:	LD BC,8100h				; BCDE = 1 (float)   (BC= 1041h on MSX)
00007C2B:	LD DE,0000h
00007C2E:	CALL 2134h				; CMPNUM - Compare FP reg to BCDE
00007C31:	DEC A
00007C32:	RET

00007C33:	LD (F071h),A
00007C36:	PUSH AF
00007C37:	CALL 7D98h
00007C3A:	CALL 7D8Fh
00007C3D:	POP AF
00007C3E:	OR A
00007C3F:	JP NZ,7CBDh
00007C42:	RST 08h				; Check syntax, 1 byte follows to be compared
00007C43:	CALL P,D5C5h
00007C46:	CALL 7DA7h
00007C49:	CALL 7D8Fh
00007C4C:	POP DE
00007C4D:	POP BC
00007C4E:	PUSH HL
00007C4F:	CALL 7E67h
00007C52:	CALL C,7E72h
00007C55:	INC HL
00007C56:	LD (F023h),HL	; MINDEL
00007C59:	CALL 7E55h
00007C5C:	CALL C,7E7Fh
00007C5F:	INC HL
00007C60:	LD (F021h),HL	; MAXDEL
00007C63:	CALL 6518h		; MAPXY
00007C66:	POP HL
00007C67:	CALL 7D54h
00007C6A:	PUSH HL
00007C6B:	PUSH DE
00007C6C:	PUSH BC
00007C6D:	PUSH DE
00007C6E:	LD DE,(F021h)	; MAXDEL
00007C72:	EX DE,HL
00007C73:	LD B,H
00007C74:	LD C,L
00007C75:	LD DE,0007h
00007C78:	ADD HL,DE
00007C79:	LD A,L
00007C7A:	AND F8h
00007C7C:	LD L,A
00007C7D:	EX DE,HL
00007C7E:	CALL 6260h
00007C81:	LD HL,0000h
00007C84:	ADD HL,DE
00007C85:	DEC A
00007C86:	JR NZ,-04h
00007C88:	LD DE,0007h
00007C8B:	ADD HL,DE
00007C8C:	EX DE,HL
00007C8D:	CALL 7FBDh		; "RR DE"
00007C90:	CALL 7FBDh		; "RR DE"
00007C93:	CALL 7FBDh		; "RR DE"
00007C96:	LD HL,(F023h)	; MINDEL
00007C99:	PUSH BC
00007C9A:	LD B,H
00007C9B:	LD C,L
00007C9C:	CALL 2312h		; MLDEBC - Multiply DE by BC
00007C9F:	POP BC
00007CA0:	LD HL,0004h
00007CA3:	ADD HL,DE
00007CA4:	POP DE
00007CA5:	ADD HL,DE
00007CA6:	EX DE,HL
00007CA7:	POP HL
00007CA8:	RST 20h			; CPDEHL - compare DE and HL (aka DCOMPR)
00007CA9:	JP C,0B06h			; FCERR, Err $05 - "Illegal function call"
00007CAC:	POP HL
00007CAD:	LD (HL),C
00007CAE:	INC HL
00007CAF:	LD (HL),B
00007CB0:	INC HL
00007CB1:	LD DE,(F023h)	; MINDEL
00007CB5:	LD (HL),E
00007CB6:	INC HL
00007CB7:	LD (HL),D
00007CB8:	INC HL
00007CB9:	OR A
00007CBA:	JP 7D2Bh
00007CBD:	PUSH HL
00007CBE:	CALL 6518h		; MAPXY
00007CC1:	POP HL
00007CC2:	XOR A
00007CC3:	LD (F013h),A
00007CC6:	CALL 7D54h
00007CC9:	PUSH DE
00007CCA:	DEC HL
00007CCB:	RST 10h			; CHRGTB - Gets next character (or token) from BASIC text.
00007CCC:	LD B,05h
00007CCE:	JR Z,+15h
00007CD0:	RST 08h				; Check syntax, 1 byte follows to be compared
00007CD1:	DEFB ','
00007CD2:	CP 2Ch		; ','
00007CD4:	JR Z,+0Fh
00007CD6:	EX DE,HL
00007CD7:	LD HL,7D8Eh
00007CDA:	CP (HL)
00007CDB:	JR Z,+06h
00007CDD:	DEC HL
00007CDE:	DJNZ -06h
00007CE0:	EX DE,HL
00007CE1:	POP DE
00007CE2:	RET

00007CE3:	EX DE,HL
00007CE4:	RST 10h			; CHRGTB - Gets next character (or token) from BASIC text.
00007CE5:	DEC B
00007CE6:	LD A,B
00007CE7:	PUSH AF
00007CE8:	DEC HL
00007CE9:	RST 10h			; CHRGTB - Gets next character (or token) from BASIC text.
00007CEA:	JR Z,+13h
00007CEC:	LD (F013h),A
00007CEF:	RST 08h				; Check syntax, 1 byte follows to be compared
00007CF0:	DEFB ','
00007CF1:	CALL 18A3h			; GETINT
00007CF4:	LD (F014h),A
00007CF7:	RST 08h				; Check syntax, 1 byte follows to be compared
00007CF8:	DEFB ','
00007CF9:	CALL 18A3h			; GETINT
00007CFC:	LD (F015h),A
00007CFF:	POP AF

00007D00:	EX HL,(SP)
00007D01:	PUSH AF
00007D02:	LD E,(HL)
00007D03:	INC HL
00007D04:	LD D,(HL)
00007D05:	INC HL
00007D06:	PUSH DE
00007D07:	PUSH HL
00007D08:	EX DE,HL
00007D09:	DEC HL
00007D0A:	LD DE,(F01Ah)		; GXPOS
00007D0E:	ADD HL,DE
00007D0F:	JR C,+0Eh
00007D11:	LD B,H
00007D12:	LD C,L
00007D13:	POP HL
00007D14:	LD E,(HL)
00007D15:	INC HL
00007D16:	LD D,(HL)
00007D17:	INC HL
00007D18:	PUSH DE
00007D19:	PUSH HL
00007D1A:	LD HL,(F01Ch)		; GYPOS
00007D1D:	DEC DE
00007D1E:	ADD HL,DE
00007D1F:	JP C,0B06h			; FCERR, Err $05 - "Illegal function call"
00007D22:	EX DE,HL
00007D23:	POP HL
00007D24:	CALL 7D8Fh
00007D27:	POP DE
00007D28:	POP BC
00007D29:	POP AF
00007D2A:	SCF
00007D2B:	PUSH DE
00007D2C:	CALL 605Dh
00007D2F:	POP DE
00007D30:	PUSH DE
00007D31:	CALL 65F2h		; FETCHC
00007D34:	PUSH HL
00007D35:	PUSH AF
00007D36:	LD A,(F071h)
00007D39:	OR A
00007D3A:	JR NZ,+05h
00007D3C:	CALL 60F4h
00007D3F:	JR +03h
00007D41:	CALL 60F7h
00007D44:	POP AF
00007D45:	POP HL
00007D46:	CALL 6606h		; STOREC
00007D49:	CALL 65C6h		; DOWNC
00007D4C:	POP DE
00007D4D:	DEC DE
00007D4E:	LD A,D
00007D4F:	OR E
00007D50:	JR NZ,-22h
00007D52:	POP HL
00007D53:	RET

00007D54:	RST 08h				; Check syntax, 1 byte follows to be compared
00007D55:	DEFB ','
00007D56:	LD A,(HL)
00007D57:	CP DBh
00007D59:	JP Z,7258h
00007D5C:	LD (F0ACh),HL
00007D5F:	LD A,01h
00007D61:	LD (EAFBh),A
00007D64:	CALL 5ACAh
00007D67:	JP NZ,0B06h			; FCERR, Err $05 - "Illegal function call"
00007D6A:	LD (EAFBh),A
00007D6D:	PUSH HL
00007D6E:	LD H,B
00007D6F:	LD L,C
00007D70:	EX DE,HL
00007D71:	ADD HL,DE
00007D72:	PUSH HL
00007D73:	LD A,(BC)
00007D74:	ADD A
00007D75:	LD L,A
00007D76:	LD H,00h
00007D78:	INC BC
00007D79:	ADD HL,BC
00007D7A:	EX DE,HL
00007D7B:	POP BC
00007D7C:	POP HL
00007D7D:	LD A,(HL)
00007D7E:	CP 28h
00007D80:	RET NZ
00007D81:	LD HL,(F0ACh)
00007D84:	PUSH BC
00007D85:	CALL 5ACAh
00007D88:	POP BC
00007D89:	RET

00007D8A:	LD SP,HL
00007D8B:	RET M
00007D8C:	RET NC
00007D8D:	RST 08h				; Check syntax, 1 byte follows to be compared
00007D8E:	JP M,CDE5h
00007D91:	RET NZ
00007D92:	LD H,H
00007D93:	JP NC,0B06h			; FCERR, Err $05 - "Illegal function call"
00007D96:	POP HL
00007D97:	RET

00007D98:	LD A,(HL)
00007D99:	CP 40h
00007D9B:	CALL Z,0A0Dh
00007D9E:	LD BC,0000h
00007DA1:	LD D,B
00007DA2:	LD E,C
00007DA3:	CP F4h
00007DA5:	JR Z,+2Dh

00007DA7:	LD A,(HL)
00007DA8:	CALL EE05h
00007DAB:	CP DFh
00007DAD:	PUSH AF
00007DAE:	CALL Z,0A0Dh
00007DB1:	RST 08h				; Check syntax, 1 byte follows to be compared
00007DB2:	JR Z,-33h
00007DB4:	SUB (HL)
00007DB5:	JR -0Fh
00007DB7:	PUSH AF
00007DB8:	JR Z,+07h
00007DBA:	PUSH HL
00007DBB:	LD HL,(F02Bh)
00007DBE:	ADD HL,DE
00007DBF:	EX DE,HL
00007DC0:	POP HL
00007DC1:	PUSH DE
00007DC2:	RST 08h				; Check syntax, 1 byte follows to be compared
00007DC3:	DEFB ','
00007DC4:	CALL 1896h				; POSINT - Get positive integer
00007DC7:	RST 08h				; Check syntax, 1 byte follows to be compared
00007DC8:	DEFB ')'
00007DC9:	POP BC
00007DCA:	POP AF
00007DCB:	JR Z,+07h
00007DCD:	PUSH HL
00007DCE:	LD HL,(F02Fh)
00007DD1:	ADD HL,DE
00007DD2:	EX DE,HL
00007DD3:	POP HL
00007DD4:	PUSH HL
00007DD5:	LD HL,(F027h)		; GRPACX
00007DD8:	JR Z,+03h
00007DDA:	LD HL,0000h
00007DDD:	ADD HL,BC
00007DDE:	LD (F027h),HL		; GRPACX
00007DE1:	LD (F01Ah),HL		; GXPOS
00007DE4:	LD B,H
00007DE5:	LD C,L
00007DE6:	LD HL,(F029h)		; GRPACY
00007DE9:	JR Z,+03h
00007DEB:	LD HL,0000h
00007DEE:	ADD HL,DE
00007DEF:	LD (F029h),HL		; GRPACY
00007DF2:	LD (F01Ch),HL		; GYPOS
00007DF5:	EX DE,HL
00007DF6:	POP HL
00007DF7:	CALL 6EF8h
00007DFA:	RET

; _PRESET - unplot pixel
00007DFB:	LD A,(F01Fh)	; BAKCLR - background color
00007DFE:	JR +03h		;__PSET_0
; _PSET - plot pixel
00007E00:	LD A,(F01Eh)	; FORCLR - foreground color
;__PSET_0
00007E03:	PUSH AF
00007E04:	CALL 6E3Dh		; COORD_PARMS_DST - pick destination coodinate parameters from BASIC program
00007E07:	POP AF
00007E08:	CALL 7E37h		; PAINT_PARMS_0 -  pick color/fill related parameters from BASIC program
00007E0B:	PUSH HL
00007E0C:	CALL 64C0h			; SCALXY - Scales X and Y coordinates
00007E0F:	JR NC,+06h		;__PSET_1
00007E11:	CALL 6518h		; MAPXY
00007E14:	CALL 66D7h		; SETC - Returns current screenpixel of specified attribute byte
;__PSET_1
00007E17:	POP HL
00007E18:	RET


00007E19:	RST 10h			; CHRGTB - Gets next character (or token) from BASIC text.
00007E1A:	CALL 7DA7h
00007E1D:	PUSH HL
00007E1E:	CALL 64C0h			; SCALXY - Scales X and Y coordinates
00007E21:	LD HL,FFFFh
00007E24:	JR NC,+09h
00007E26:	CALL 6518h		; MAPXY
00007E29:	CALL 661Bh
00007E2C:	LD L,A
00007E2D:	LD H,00h
00007E2F:	CALL 21FDh				; INT_RESULT_HL
00007E32:	POP HL
00007E33:	RET

; PAINT_PARMS -  pick color/fill related parameters from BASIC program
00007E34:	LD A,(F01Eh)	; FORCLR - foreground color
; PAINT_PARMS_0 -  pick color/fill related parameters from BASIC program
00007E37:	PUSH BC
00007E38:	PUSH DE
00007E39:	LD E,A
00007E3A:	DEC HL
00007E3B:	RST 10h			; CHRGTB - Gets next character (or token) from BASIC text.
00007E3C:	JR Z,+09h
00007E3E:	RST 08h				; Check syntax, 1 byte follows to be compared
00007E3F:	DEFB ','
00007E40:	CP 2Ch		; ','
00007E42:	JR Z,+03h
00007E44:	CALL 18A3h			; GETINT
00007E47:	LD A,E
00007E48:	PUSH HL
00007E49:	CALL 66A0h		; set pen color
00007E4C:	JP C,0B06h			; FCERR, Err $05 - "Illegal function call"
00007E4F:	POP HL
00007E50:	POP DE
00007E51:	POP BC
00007E52:	JP 0A0Eh

00007E55:	LD HL,(F01Ah)		; GXPOS
00007E58:	LD A,L
00007E59:	SUB C
00007E5A:	LD L,A
00007E5B:	LD A,H
00007E5C:	SBC B
00007E5D:	LD H,A
00007E5E:	RET NC

; INVSGN_HL
00007E5F:	XOR A
00007E60:	SUB L
00007E61:	LD L,A
00007E62:	SBC H
00007E63:	SUB L
00007E64:	LD H,A
00007E65:	SCF
00007E66:	RET

00007E67:	LD HL,(F01Ch)		; GYPOS
00007E6A:	LD A,L
00007E6B:	SUB E
00007E6C:	LD L,A
00007E6D:	LD A,H
00007E6E:	SBC D
00007E6F:	LD H,A
00007E70:	JR -14h
00007E72:	PUSH HL
00007E73:	LD HL,(F01Ch)		; GYPOS
00007E76:	EX DE,HL
00007E77:	LD (F01Ch),HL		; GYPOS
00007E7A:	POP HL
00007E7B:	RET

00007E7C:	CALL 7E72h
00007E7F:	PUSH HL
00007E80:	PUSH BC
00007E81:	LD HL,(F01Ah)		; GXPOS
00007E84:	EX HL,(SP)
00007E85:	LD (F01Ah),HL		; GXPOS
00007E88:	POP BC
00007E89:	POP HL
00007E8A:	RET

; _LINE
00007E8B:	CALL 6E2Bh			; COORD_PARMS - pick coodinate parameters from BASIC program
00007E8E:	PUSH BC
00007E8F:	PUSH DE
00007E90:	RST 08h				; Check syntax, 1 byte follows to be compared
00007E91:	DEFB TK_MINUS 	; '-' (token code equivalent)
00007E92:	CALL 3D6Eh			; COORD_PARMS_DST
00007E95:	CALL 7E34h			; PAINT_PARMS -  pick color/fill related parameters from BASIC program
00007E98:	PUSH HL
00007E99:	LD HL,FFFFh
00007E9C:	LD (F025h),HL
00007E9F:	POP HL
00007EA0:	POP DE
00007EA1:	POP BC
00007EA2:	JR Z,+51h		; DOTLINE

00007EA4:	RST 08h				; Check syntax, 1 byte follows to be compared
00007EA5:	DEFB ','
00007EA6:	CP 2Ch		; ','
00007EA8:	JP Z,7EF2h
00007EAB:	RST 08h				; Check syntax, 1 byte follows to be compared
00007EAC:	DEFB 'B'
00007EAD:	JP Z,7F0Eh
00007EB0:	CP 2Ch		; ','
00007EB2:	JP Z,7F0Bh			; BOXLIN
00007EB5:	RST 08h				; Check syntax, 1 byte follows to be compared
00007EB6:	DEFB 'F'			; 'BOX FILLED'
; DOBOXF
00007EB7:	PUSH HL
00007EB8:	CALL 64C0h			; SCALXY - Scales X and Y coordinates
00007EBB:	CALL 7E7Ch
00007EBE:	CALL 64C0h			; SCALXY - Scales X and Y coordinates
00007EC1:	CALL 7E67h
00007EC4:	CALL C,7E72h
00007EC7:	INC HL
00007EC8:	PUSH HL
00007EC9:	CALL 7E55h
00007ECC:	CALL C,7E7Fh
00007ECF:	INC HL
00007ED0:	PUSH HL
00007ED1:	CALL 6518h		; MAPXY
00007ED4:	POP DE
00007ED5:	POP BC
00007ED6:	PUSH DE
00007ED7:	PUSH BC
00007ED8:	CALL 65F2h		; FETCHC
00007EDB:	PUSH AF
00007EDC:	PUSH HL
00007EDD:	EX DE,HL
00007EDE:	CALL 6647h		; NSETCX
00007EE1:	POP HL
00007EE2:	POP AF
00007EE3:	CALL 6606h		; STOREC
00007EE6:	CALL 65C6h		; DOWNC
00007EE9:	POP BC
00007EEA:	POP DE
00007EEB:	DEC BC
00007EEC:	LD A,B
00007EED:	OR C
00007EEE:	JR NZ,-1Ah
00007EF0:	POP HL
00007EF1:	RET

00007EF2:	CALL 7F38h
; DOTLINE
00007EF5:	PUSH BC
00007EF6:	PUSH DE
00007EF7:	PUSH HL
00007EF8:	CALL 7F47h		; DRAW_LINE
00007EFB:	LD HL,(F027h)		; GRPACX
00007EFE:	LD (F01Ah),HL		; GXPOS
00007F01:	LD HL,(F029h)		; GRPACY
00007F04:	LD (F01Ch),HL		; GYPOS
00007F07:	POP HL
00007F08:	POP DE
00007F09:	POP BC
00007F0A:	RET

; BOXLIN
00007F0B:	CALL 7F38h
00007F0E:	PUSH HL
00007F0F:	LD HL,(F01Ch)		; GYPOS
00007F12:	PUSH HL
00007F13:	PUSH DE
00007F14:	EX DE,HL
00007F15:	CALL 7EF5h			; DOTLINE
00007F18:	POP HL
00007F19:	LD (F01Ch),HL		; GYPOS
00007F1C:	EX DE,HL
00007F1D:	CALL 7EF5h			; DOTLINE
00007F20:	POP HL
00007F21:	LD (F01Ch),HL		; GYPOS
00007F24:	LD HL,(F01Ah)		; GXPOS
00007F27:	PUSH BC
00007F28:	LD B,H
00007F29:	LD C,L
00007F2A:	CALL 7EF5h			; DOTLINE
00007F2D:	POP HL
00007F2E:	LD (F01Ah),HL		; GXPOS
00007F31:	LD B,H
00007F32:	LD C,L
00007F33:	CALL 7EF5h			; DOTLINE
00007F36:	POP HL
00007F37:	RET

00007F38:	PUSH DE
00007F39:	PUSH BC
00007F3A:	RST 08h				; Check syntax, 1 byte follows to be compared
00007F3B:	DEFB ','
00007F3C:	CALL 1896h				; POSINT - Get positive integer
00007F3F:	EX DE,HL
00007F40:	LD (F025h),HL
00007F43:	EX DE,HL
00007F44:	POP BC
00007F45:	POP DE
00007F46:	RET

; DRAW_LINE
00007F47:	CALL ED9Ch
00007F4A:	CALL 6F92h
00007F4D:	RET NZ
00007F4E:	CALL 7E7Ch
00007F51:	CALL 7E67h
00007F54:	CALL C,7E7Ch
00007F57:	PUSH DE
00007F58:	PUSH HL
00007F59:	CALL 7E55h
00007F5C:	EX DE,HL
00007F5D:	LD HL,657Ch		; RIGHTC
00007F60:	JR NC,+03h		; DRAW_LINE_0
00007F62:	LD HL,658Eh		; LEFTC
; DRAW_LINE_0
00007F65:	EX HL,(SP)
00007F66:	RST 20h			; CPDEHL - compare DE and HL (aka DCOMPR)
00007F67:	JR NC,+10h		; DRAW_LINE_1
00007F69:	LD (F023h),HL	; MINDEL
00007F6C:	POP HL
00007F6D:	LD (E7E6h),HL	; MAXUPD+1 ..(MAXUPD = JP nn for RIGHTC, LEFTC, UPC and DOWNC)
00007F70:	LD HL,65C6h		; DOWNC
00007F73:	LD (E7E3h),HL	; MINUPD+1 ..(MINUPD = JP nn for RIGHTC, LEFTC, UPC and DOWNC)
00007F76:	EX DE,HL
00007F77:	JR +0Fh			; DRAW_LINE_2
; DRAW_LINE_1
00007F79:	EX HL,(SP)
00007F7A:	LD (E7E3h),HL	; MINUPD+1 ..(MINUPD = JP nn for RIGHTC, LEFTC, UPC and DOWNC)
00007F7D:	LD HL,65C6h		; DOWNC
00007F80:	LD (E7E6h),HL	; MAXUPD+1 ..(MAXUPD = JP nn for RIGHTC, LEFTC, UPC and DOWNC)
00007F83:	EX DE,HL
00007F84:	LD (F023h),HL	; MINDEL
00007F87:	POP HL
; DRAW_LINE_2
00007F88:	POP DE
00007F89:	PUSH HL
00007F8A:	CALL 7E5Fh		; INVSGN_HL
00007F8D:	LD (F021h),HL	; MAXDEL
00007F90:	CALL 6518h		; MAPXY
00007F93:	POP DE
00007F94:	PUSH DE
00007F95:	CALL 7FBDh		; "RR DE"
00007F98:	POP BC
00007F99:	INC BC
00007F9A:	JR +07h
00007F9C:	POP HL
00007F9D:	LD A,B
00007F9E:	OR C
00007F9F:	RET Z
00007FA0:	CALL E7E5h		; MAXUPD = JP nn for RIGHTC, LEFTC, UPC and DOWNC 
00007FA3:	CALL 7FC5h
00007FA6:	DEC BC
00007FA7:	PUSH HL
00007FA8:	LD HL,(F023h)	; MINDEL
00007FAB:	ADD HL,DE
00007FAC:	EX DE,HL
00007FAD:	LD HL,(F021h)	; MAXDEL
00007FB0:	ADD HL,DE
00007FB1:	JR NC,-17h
00007FB3:	EX DE,HL
00007FB4:	POP HL
00007FB5:	LD A,B
00007FB6:	OR C
00007FB7:	RET Z
00007FB8:	CALL E7E2h		; MINUPD = JP nn for RIGHTC, LEFTC, UPC and DOWNC 
00007FBB:	JR -1Dh

; "RR DE" , Used by the routines at DRAW_LINE, __CIRCLE and 7C33h
00007FBD:	LD A,D
00007FBE:	OR A
00007FBF:	RRA
00007FC0:	LD D,A
00007FC1:	LD A,E
00007FC2:	RRA
00007FC3:	LD E,A
00007FC4:	RET

00007FC5:	PUSH HL
00007FC6:	LD HL,(F025h)
00007FC9:	ADD HL,HL
00007FCA:	JR NC,+01h
00007FCC:	INC HL
00007FCD:	LD (F025h),HL
00007FD0:	POP HL
00007FD1:	CALL C,66D7h		; SETC - Returns current screenpixel of specified attribute byte
00007FD4:	RET

00007FD5:	EX DE,HL
00007FD6:	LD HL,(F0ACh)
00007FD9:	PUSH HL
00007FDA:	LD HL,(F0AEh)		; DUTY
00007FDD:	PUSH HL
00007FDE:	EX DE,HL
00007FDF:	CALL 18A3h			; GETINT
00007FE2:	EX DE,HL
00007FE3:	POP HL
00007FE4:	LD (F0AEh),HL		; DUTY
00007FE7:	POP HL
00007FE8:	LD (F0ACh),HL
00007FEB:	EX DE,HL
00007FEC:	RET

00007FED:	JP NC,0B06h			; FCERR, Err $05 - "Illegal function call"
00007FF0:	AND A
00007FF1:	RET Z
00007FF2:	INA (40h)
00007FF4:	AND 02h
00007FF6:	JP Z,0B06h			; FCERR, Err $05 - "Illegal function call"
00007FF9:	LD A,E
00007FFA:	RET

00007FFB:	CALL 235Ah
00007FFE:	ADD HL,HL
00007FFF:	RET
